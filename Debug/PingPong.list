
PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d4  0800bfa8  0800bfa8  0001bfa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d17c  0800d17c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d17c  0800d17c  0001d17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d184  0800d184  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d184  0800d184  0001d184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d188  0800d188  0001d188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d18c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          000006cc  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008c4  200008c4  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ae5  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003342  00000000  00000000  00034d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  00038050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001118  00000000  00000000  000392e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024394  00000000  00000000  0003a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f1f  00000000  00000000  0005e78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d178b  00000000  00000000  000766ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147e36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005da4  00000000  00000000  00147e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf8c 	.word	0x0800bf8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800bf8c 	.word	0x0800bf8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_DMA_Init+0x3c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <MX_DMA_Init+0x3c>)
 8000f9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_DMA_Init+0x3c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f000 fff5 	bl	8001fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fb8:	200f      	movs	r0, #15
 8000fba:	f001 f80e 	bl	8001fda <HAL_NVIC_EnableIRQ>

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	4b71      	ldr	r3, [pc, #452]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a70      	ldr	r2, [pc, #448]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b6e      	ldr	r3, [pc, #440]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	4b6a      	ldr	r3, [pc, #424]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a69      	ldr	r2, [pc, #420]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b67      	ldr	r3, [pc, #412]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b63      	ldr	r3, [pc, #396]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a62      	ldr	r2, [pc, #392]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b60      	ldr	r3, [pc, #384]	; (80011ac <MX_GPIO_Init+0x1e0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b5c      	ldr	r3, [pc, #368]	; (80011ac <MX_GPIO_Init+0x1e0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a5b      	ldr	r2, [pc, #364]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b59      	ldr	r3, [pc, #356]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b55      	ldr	r3, [pc, #340]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a54      	ldr	r2, [pc, #336]	; (80011ac <MX_GPIO_Init+0x1e0>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b52      	ldr	r3, [pc, #328]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a4d      	ldr	r2, [pc, #308]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b4b      	ldr	r3, [pc, #300]	; (80011ac <MX_GPIO_Init+0x1e0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2101      	movs	r1, #1
 800108e:	4848      	ldr	r0, [pc, #288]	; (80011b0 <MX_GPIO_Init+0x1e4>)
 8001090:	f001 fcfa 	bl	8002a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RES_Pin|LCD_CMD_Pin|SPI2_CS_Pin|SENSOR_TRIG_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 41b4 	mov.w	r1, #23040	; 0x5a00
 800109a:	4846      	ldr	r0, [pc, #280]	; (80011b4 <MX_GPIO_Init+0x1e8>)
 800109c:	f001 fcf4 	bl	8002a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010a6:	4844      	ldr	r0, [pc, #272]	; (80011b8 <MX_GPIO_Init+0x1ec>)
 80010a8:	f001 fcee 	bl	8002a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	483b      	ldr	r0, [pc, #236]	; (80011b0 <MX_GPIO_Init+0x1e4>)
 80010c4:	f001 fb44 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	4837      	ldr	r0, [pc, #220]	; (80011bc <MX_GPIO_Init+0x1f0>)
 80010de:	f001 fb37 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B_START_Pin|B_VIEW_Pin|B_ENC_Pin;
 80010e2:	230e      	movs	r3, #14
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4831      	ldr	r0, [pc, #196]	; (80011bc <MX_GPIO_Init+0x1f0>)
 80010f8:	f001 fb2a 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010fc:	2304      	movs	r3, #4
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4829      	ldr	r0, [pc, #164]	; (80011b4 <MX_GPIO_Init+0x1e8>)
 8001110:	f001 fb1e 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_CMD_Pin|SPI2_CS_Pin|SENSOR_TRIG_Pin;
 8001114:	f44f 43b4 	mov.w	r3, #23040	; 0x5a00
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4821      	ldr	r0, [pc, #132]	; (80011b4 <MX_GPIO_Init+0x1e8>)
 800112e:	f001 fb0f 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001132:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	481b      	ldr	r0, [pc, #108]	; (80011b8 <MX_GPIO_Init+0x1ec>)
 800114c:	f001 fb00 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4815      	ldr	r0, [pc, #84]	; (80011bc <MX_GPIO_Init+0x1f0>)
 8001166:	f001 faf3 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800116a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800117c:	230a      	movs	r3, #10
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_GPIO_Init+0x1f0>)
 8001188:	f001 fae2 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800118c:	2320      	movs	r3, #32
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_GPIO_Init+0x1ec>)
 80011a0:	f001 fad6 	bl	8002750 <HAL_GPIO_Init>

}
 80011a4:	bf00      	nop
 80011a6:	3730      	adds	r7, #48	; 0x30
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40020000 	.word	0x40020000

080011c0 <HAL_I2C_MspInit>:
  /* USER CODE END I2C1_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a21      	ldr	r2, [pc, #132]	; (8001264 <HAL_I2C_MspInit+0xa4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d13b      	bne.n	800125a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HAL_I2C_MspInit+0xa8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <HAL_I2C_MspInit+0xa8>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_I2C_MspInit+0xa8>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011fe:	23c0      	movs	r3, #192	; 0xc0
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001202:	2312      	movs	r3, #18
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800120e:	2304      	movs	r3, #4
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4814      	ldr	r0, [pc, #80]	; (800126c <HAL_I2C_MspInit+0xac>)
 800121a:	f001 fa99 	bl	8002750 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_I2C_MspInit+0xa8>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <HAL_I2C_MspInit+0xa8>)
 8001228:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_I2C_MspInit+0xa8>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	201f      	movs	r0, #31
 8001240:	f000 feaf 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001244:	201f      	movs	r0, #31
 8001246:	f000 fec8 	bl	8001fda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	2020      	movs	r0, #32
 8001250:	f000 fea7 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001254:	2020      	movs	r0, #32
 8001256:	f000 fec0 	bl	8001fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40005400 	.word	0x40005400
 8001268:	40023800 	.word	0x40023800
 800126c:	40020400 	.word	0x40020400

08001270 <f_dwt_counterEnable>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t f_dwt_counterEnable()
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
	uint32_t cycle;

	CoreDebug->DEMCR &= ~(1<<24);
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <f_dwt_counterEnable+0x70>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <f_dwt_counterEnable+0x70>)
 800127c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001280:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= (1<<24);
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <f_dwt_counterEnable+0x70>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <f_dwt_counterEnable+0x70>)
 8001288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800128c:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~(1<<0);
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <f_dwt_counterEnable+0x74>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <f_dwt_counterEnable+0x74>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= (1<<0);
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <f_dwt_counterEnable+0x74>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <f_dwt_counterEnable+0x74>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <f_dwt_counterEnable+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]

	cycle = DWT->CYCCNT;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <f_dwt_counterEnable+0x74>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	607b      	str	r3, [r7, #4]

	__ASM volatile ("NOP");
 80012b2:	bf00      	nop
	__ASM volatile ("NOP");
 80012b4:	bf00      	nop
	__ASM volatile ("NOP");
 80012b6:	bf00      	nop

	if((DWT->CYCCNT - cycle) == 0) return 0;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <f_dwt_counterEnable+0x74>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d101      	bne.n	80012c6 <f_dwt_counterEnable+0x56>
 80012c2:	2300      	movs	r3, #0
 80012c4:	e006      	b.n	80012d4 <f_dwt_counterEnable+0x64>

	return (DWT->CYCCNT - cycle);
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <f_dwt_counterEnable+0x74>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	b2db      	uxtb	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000edf0 	.word	0xe000edf0
 80012e4:	e0001000 	.word	0xe0001000

080012e8 <f_dwt_addSample>:

static inline void f_dwt_addSample()
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	static uint32_t cycleAccum;
	static uint8_t dwtSamples;

	cycleAccum += DWT->CYCCNT;
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <f_dwt_addSample+0x48>)
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <f_dwt_addSample+0x4c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <f_dwt_addSample+0x4c>)
 80012f8:	6013      	str	r3, [r2, #0]
	dwtSamples++;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <f_dwt_addSample+0x50>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <f_dwt_addSample+0x50>)
 8001304:	701a      	strb	r2, [r3, #0]

	if(dwtSamples == 32)
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <f_dwt_addSample+0x50>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b20      	cmp	r3, #32
 800130c:	d10a      	bne.n	8001324 <f_dwt_addSample+0x3c>
	{
		dwtCycles = cycleAccum / 32;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <f_dwt_addSample+0x4c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	4a09      	ldr	r2, [pc, #36]	; (800133c <f_dwt_addSample+0x54>)
 8001316:	6013      	str	r3, [r2, #0]
		cycleAccum = 0;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <f_dwt_addSample+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
		dwtSamples = 0;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <f_dwt_addSample+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
	}
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e0001000 	.word	0xe0001000
 8001334:	20000308 	.word	0x20000308
 8001338:	2000030c 	.word	0x2000030c
 800133c:	2000026c 	.word	0x2000026c

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f000 fcbb 	bl	8001cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f8e9 	bl	8001520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f7ff fe3d 	bl	8000fcc <MX_GPIO_Init>
  MX_DMA_Init();
 8001352:	f7ff fe1b 	bl	8000f8c <MX_DMA_Init>
  MX_TIM3_Init();
 8001356:	f000 fb41 	bl	80019dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

   f_work_motorInitTimer();
 800135a:	f007 fd17 	bl	8008d8c <f_work_motorInitTimer>
   f_work_sensorInitTimer();
 800135e:	f007 fdfb 	bl	8008f58 <f_work_sensorInitTimer>
   f_ina219_Init();
 8001362:	f006 ff82 	bl	800826a <f_ina219_Init>
   f_lcd_Init();
 8001366:	f006 ffeb 	bl	8008340 <f_lcd_Init>

   uint32_t timerLCD;
   uint32_t timerCTRL;
   uint32_t timerPID;

   uint8_t iterator = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	76fb      	strb	r3, [r7, #27]
   uint8_t totalLength = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	76bb      	strb	r3, [r7, #26]


   f_gui_DrawChart(chartData, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	485c      	ldr	r0, [pc, #368]	; (80014e8 <main+0x1a8>)
 8001378:	f006 fe65 	bl	8008046 <f_gui_DrawChart>
   f_work_motorSet(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f007 fd4b 	bl	8008e18 <f_work_motorSet>
   f_dwt_counterEnable();
 8001382:	f7ff ff75 	bl	8001270 <f_dwt_counterEnable>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if((HAL_GetTick() - timerCTRL) >= 5)
 8001386:	f000 fd01 	bl	8001d8c <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b04      	cmp	r3, #4
 8001392:	d9f8      	bls.n	8001386 <main+0x46>
	  {
		  distance = f_work_sensorGetLastMeasure();
 8001394:	f007 fe36 	bl	8009004 <f_work_sensorGetLastMeasure>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b53      	ldr	r3, [pc, #332]	; (80014ec <main+0x1ac>)
 800139e:	801a      	strh	r2, [r3, #0]
		  f_work_sensorTriggerMeasure();
 80013a0:	f007 fe06 	bl	8008fb0 <f_work_sensorTriggerMeasure>
		  power = f_ina219_GetPowerInMilis()/100;
 80013a4:	f006 ff88 	bl	80082b8 <f_ina219_GetPowerInMilis>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <main+0x1b0>)
 80013ae:	fba3 2302 	umull	r2, r3, r3, r2
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <main+0x1b4>)
 80013b8:	801a      	strh	r2, [r3, #0]


		  f_pid_calculateThrottle(150, power, &PidCtrl, &Param);
 80013ba:	4b4e      	ldr	r3, [pc, #312]	; (80014f4 <main+0x1b4>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c6:	494c      	ldr	r1, [pc, #304]	; (80014f8 <main+0x1b8>)
 80013c8:	484c      	ldr	r0, [pc, #304]	; (80014fc <main+0x1bc>)
 80013ca:	eef0 0a67 	vmov.f32	s1, s15
 80013ce:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8001500 <main+0x1c0>
 80013d2:	f007 fa91 	bl	80088f8 <f_pid_calculateThrottle>

		  pwm += PidCtrl.output;
 80013d6:	4b4b      	ldr	r3, [pc, #300]	; (8001504 <main+0x1c4>)
 80013d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e4:	4b45      	ldr	r3, [pc, #276]	; (80014fc <main+0x1bc>)
 80013e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f2:	ee17 3a90 	vmov	r3, s15
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	4b42      	ldr	r3, [pc, #264]	; (8001504 <main+0x1c4>)
 80013fa:	801a      	strh	r2, [r3, #0]
		  if(pwm > MAX_MOTOR_PWM) pwm = MAX_MOTOR_PWM;
 80013fc:	4b41      	ldr	r3, [pc, #260]	; (8001504 <main+0x1c4>)
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001406:	db04      	blt.n	8001412 <main+0xd2>
 8001408:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <main+0x1c4>)
 800140a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800140e:	801a      	strh	r2, [r3, #0]
 8001410:	e007      	b.n	8001422 <main+0xe2>
		  else if(pwm < 0) pwm = 0;
 8001412:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <main+0x1c4>)
 8001414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001418:	2b00      	cmp	r3, #0
 800141a:	da02      	bge.n	8001422 <main+0xe2>
 800141c:	4b39      	ldr	r3, [pc, #228]	; (8001504 <main+0x1c4>)
 800141e:	2200      	movs	r2, #0
 8001420:	801a      	strh	r2, [r3, #0]

		  chartData[iterator] = pwm / 3;
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <main+0x1c4>)
 8001424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001428:	4a37      	ldr	r2, [pc, #220]	; (8001508 <main+0x1c8>)
 800142a:	fb82 1203 	smull	r1, r2, r2, r3
 800142e:	17db      	asrs	r3, r3, #31
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	b21a      	sxth	r2, r3
 8001434:	7efb      	ldrb	r3, [r7, #27]
 8001436:	b2d1      	uxtb	r1, r2
 8001438:	4a2b      	ldr	r2, [pc, #172]	; (80014e8 <main+0x1a8>)
 800143a:	54d1      	strb	r1, [r2, r3]
		  iterator = (iterator + 1) % 120;
 800143c:	7efb      	ldrb	r3, [r7, #27]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <main+0x1cc>)
 8001442:	fb83 1302 	smull	r1, r3, r3, r2
 8001446:	4413      	add	r3, r2
 8001448:	1199      	asrs	r1, r3, #6
 800144a:	17d3      	asrs	r3, r2, #31
 800144c:	1ac9      	subs	r1, r1, r3
 800144e:	460b      	mov	r3, r1
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	1a5b      	subs	r3, r3, r1
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	1ad1      	subs	r1, r2, r3
 8001458:	460b      	mov	r3, r1
 800145a:	76fb      	strb	r3, [r7, #27]

		  f_dwt_startMeasure();
 800145c:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <main+0x1d0>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
		  f_gui_DrawCtrlPage(15.0, power/10, PidCtrl.output);
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <main+0x1b4>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	4a2b      	ldr	r2, [pc, #172]	; (8001514 <main+0x1d4>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	08db      	lsrs	r3, r3, #3
 800146e:	b29b      	uxth	r3, r3
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001478:	4b20      	ldr	r3, [pc, #128]	; (80014fc <main+0x1bc>)
 800147a:	ed93 7a03 	vldr	s14, [r3, #12]
 800147e:	eeb0 1a47 	vmov.f32	s2, s14
 8001482:	eef0 0a67 	vmov.f32	s1, s15
 8001486:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800148a:	f006 fe21 	bl	80080d0 <f_gui_DrawCtrlPage>
		  f_dwt_addSample();
 800148e:	f7ff ff2b 	bl	80012e8 <f_dwt_addSample>

		  //if(distance) f_work_motorSetVelocity(distance/10);

		  f_work_motorSetVelocity(pwm);
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <main+0x1c4>)
 8001494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001498:	b29b      	uxth	r3, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f007 fcd4 	bl	8008e48 <f_work_motorSetVelocity>

		  sprintf(txt, "Pow: %2d.%2d", power/10, power%10);
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <main+0x1b4>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <main+0x1d4>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	08db      	lsrs	r3, r3, #3
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	461c      	mov	r4, r3
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <main+0x1b4>)
 80014b2:	881a      	ldrh	r2, [r3, #0]
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <main+0x1d4>)
 80014b6:	fba3 1302 	umull	r1, r3, r3, r2
 80014ba:	08d9      	lsrs	r1, r3, #3
 80014bc:	460b      	mov	r3, r1
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	1d38      	adds	r0, r7, #4
 80014ca:	4622      	mov	r2, r4
 80014cc:	4912      	ldr	r1, [pc, #72]	; (8001518 <main+0x1d8>)
 80014ce:	f008 faf3 	bl	8009ab8 <siprintf>
		  f_lcd_WriteTxt(0, 0, txt, &font_msSansSerif_14);
 80014d2:	1d3a      	adds	r2, r7, #4
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <main+0x1dc>)
 80014d6:	2100      	movs	r1, #0
 80014d8:	2000      	movs	r0, #0
 80014da:	f006 ffa0 	bl	800841e <f_lcd_WriteTxt>

		  timerCTRL = HAL_GetTick();
 80014de:	f000 fc55 	bl	8001d8c <HAL_GetTick>
 80014e2:	61f8      	str	r0, [r7, #28]
	  if((HAL_GetTick() - timerCTRL) >= 5)
 80014e4:	e74f      	b.n	8001386 <main+0x46>
 80014e6:	bf00      	nop
 80014e8:	20000290 	.word	0x20000290
 80014ec:	2000026a 	.word	0x2000026a
 80014f0:	51eb851f 	.word	0x51eb851f
 80014f4:	20000268 	.word	0x20000268
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000270 	.word	0x20000270
 8001500:	43160000 	.word	0x43160000
 8001504:	2000028c 	.word	0x2000028c
 8001508:	55555556 	.word	0x55555556
 800150c:	88888889 	.word	0x88888889
 8001510:	e0001000 	.word	0xe0001000
 8001514:	cccccccd 	.word	0xcccccccd
 8001518:	0800bfa8 	.word	0x0800bfa8
 800151c:	0800cd98 	.word	0x0800cd98

08001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b094      	sub	sp, #80	; 0x50
 8001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	2230      	movs	r2, #48	; 0x30
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f007 fe50 	bl	80091d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <SystemClock_Config+0xcc>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	4a27      	ldr	r2, [pc, #156]	; (80015ec <SystemClock_Config+0xcc>)
 800154e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001552:	6413      	str	r3, [r2, #64]	; 0x40
 8001554:	4b25      	ldr	r3, [pc, #148]	; (80015ec <SystemClock_Config+0xcc>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <SystemClock_Config+0xd0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <SystemClock_Config+0xd0>)
 800156a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <SystemClock_Config+0xd0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800157c:	2301      	movs	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001586:	2302      	movs	r3, #2
 8001588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001590:	2308      	movs	r3, #8
 8001592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001594:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800159a:	2302      	movs	r3, #2
 800159c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800159e:	2307      	movs	r3, #7
 80015a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a2:	f107 0320 	add.w	r3, r7, #32
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fef8 	bl	800539c <HAL_RCC_OscConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015b2:	f000 f81f 	bl	80015f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b6:	230f      	movs	r3, #15
 80015b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ba:	2302      	movs	r3, #2
 80015bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	2105      	movs	r1, #5
 80015d4:	4618      	mov	r0, r3
 80015d6:	f004 f959 	bl	800588c <HAL_RCC_ClockConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015e0:	f000 f808 	bl	80015f4 <Error_Handler>
  }
}
 80015e4:	bf00      	nop
 80015e6:	3750      	adds	r7, #80	; 0x50
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40007000 	.word	0x40007000

080015f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015fc:	e7fe      	b.n	80015fc <Error_Handler+0x8>
	...

08001600 <HAL_SPI_MspInit>:
  /* USER CODE END SPI2_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a3f      	ldr	r2, [pc, #252]	; (800171c <HAL_SPI_MspInit+0x11c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d177      	bne.n	8001712 <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <HAL_SPI_MspInit+0x120>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a3d      	ldr	r2, [pc, #244]	; (8001720 <HAL_SPI_MspInit+0x120>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <HAL_SPI_MspInit+0x120>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b37      	ldr	r3, [pc, #220]	; (8001720 <HAL_SPI_MspInit+0x120>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a36      	ldr	r2, [pc, #216]	; (8001720 <HAL_SPI_MspInit+0x120>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b34      	ldr	r3, [pc, #208]	; (8001720 <HAL_SPI_MspInit+0x120>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b30      	ldr	r3, [pc, #192]	; (8001720 <HAL_SPI_MspInit+0x120>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a2f      	ldr	r2, [pc, #188]	; (8001720 <HAL_SPI_MspInit+0x120>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_SPI_MspInit+0x120>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001676:	2308      	movs	r3, #8
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001686:	2305      	movs	r3, #5
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4824      	ldr	r0, [pc, #144]	; (8001724 <HAL_SPI_MspInit+0x124>)
 8001692:	f001 f85d 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a8:	2305      	movs	r3, #5
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	481d      	ldr	r0, [pc, #116]	; (8001728 <HAL_SPI_MspInit+0x128>)
 80016b4:	f001 f84c 	bl	8002750 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <HAL_SPI_MspInit+0x12c>)
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_SPI_MspInit+0x130>)
 80016bc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_SPI_MspInit+0x12c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_SPI_MspInit+0x12c>)
 80016c6:	2240      	movs	r2, #64	; 0x40
 80016c8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_SPI_MspInit+0x12c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_SPI_MspInit+0x12c>)
 80016d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_SPI_MspInit+0x12c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_SPI_MspInit+0x12c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_SPI_MspInit+0x12c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_SPI_MspInit+0x12c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_SPI_MspInit+0x12c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80016f6:	480d      	ldr	r0, [pc, #52]	; (800172c <HAL_SPI_MspInit+0x12c>)
 80016f8:	f000 fc8a 	bl	8002010 <HAL_DMA_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001702:	f7ff ff77 	bl	80015f4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_SPI_MspInit+0x12c>)
 800170a:	649a      	str	r2, [r3, #72]	; 0x48
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_SPI_MspInit+0x12c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40003800 	.word	0x40003800
 8001720:	40023800 	.word	0x40023800
 8001724:	40020800 	.word	0x40020800
 8001728:	40020400 	.word	0x40020400
 800172c:	20000368 	.word	0x20000368
 8001730:	40026070 	.word	0x40026070

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_MspInit+0x4c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <HAL_MspInit+0x4c>)
 8001744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_MspInit+0x4c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001772:	2007      	movs	r0, #7
 8001774:	f000 fc0a 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d0:	f000 fac8 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  f_lcd_SendFrameCallback();
 80017d4:	f007 f84a 	bl	800886c <f_lcd_SendFrameCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA1_Stream4_IRQHandler+0x10>)
 80017e2:	f000 fd3d 	bl	8002260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000368 	.word	0x20000368

080017f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017f6:	f005 fd09 	bl	800720c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000045c 	.word	0x2000045c

08001804 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <I2C1_EV_IRQHandler+0x10>)
 800180a:	f001 fdbf 	bl	800338c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000214 	.word	0x20000214

08001818 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <I2C1_ER_IRQHandler+0x10>)
 800181e:	f001 ff26 	bl	800366e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000214 	.word	0x20000214

0800182c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
	return 1;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_kill>:

int _kill(int pid, int sig)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001846:	f007 fc8d 	bl	8009164 <__errno>
 800184a:	4603      	mov	r3, r0
 800184c:	2216      	movs	r2, #22
 800184e:	601a      	str	r2, [r3, #0]
	return -1;
 8001850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_exit>:

void _exit (int status)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ffe7 	bl	800183c <_kill>
	while (1) {}		/* Make sure we hang here */
 800186e:	e7fe      	b.n	800186e <_exit+0x12>

08001870 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e00a      	b.n	8001898 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001882:	f3af 8000 	nop.w
 8001886:	4601      	mov	r1, r0
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	60ba      	str	r2, [r7, #8]
 800188e:	b2ca      	uxtb	r2, r1
 8001890:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	dbf0      	blt.n	8001882 <_read+0x12>
	}

return len;
 80018a0:	687b      	ldr	r3, [r7, #4]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e009      	b.n	80018d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbf1      	blt.n	80018bc <_write+0x12>
	}
	return len;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_close>:

int _close(int file)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
	return -1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190a:	605a      	str	r2, [r3, #4]
	return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_isatty>:

int _isatty(int file)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	return 1;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
	return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d207      	bcs.n	800198c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800197c:	f007 fbf2 	bl	8009164 <__errno>
 8001980:	4603      	mov	r3, r0
 8001982:	220c      	movs	r2, #12
 8001984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e009      	b.n	80019a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20020000 	.word	0x20020000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	200003c8 	.word	0x200003c8
 80019b4:	200008c8 	.word	0x200008c8

080019b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <SystemInit+0x20>)
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <SystemInit+0x20>)
 80019c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <MX_TIM3_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	; 0x30
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f007 fbf2 	bl	80091d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019f8:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <MX_TIM3_Init+0xa0>)
 80019fa:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <MX_TIM3_Init+0xa4>)
 80019fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 80019fe:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_TIM3_Init+0xa0>)
 8001a00:	22a8      	movs	r2, #168	; 0xa8
 8001a02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MX_TIM3_Init+0xa0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_TIM3_Init+0xa0>)
 8001a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_TIM3_Init+0xa0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_TIM3_Init+0xa0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a26:	2301      	movs	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a36:	2301      	movs	r3, #1
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4619      	mov	r1, r3
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <MX_TIM3_Init+0xa0>)
 8001a4a:	f005 fb39 	bl	80070c0 <HAL_TIM_Encoder_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a54:	f7ff fdce 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_TIM3_Init+0xa0>)
 8001a66:	f006 fa47 	bl	8007ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a70:	f7ff fdc0 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	3730      	adds	r7, #48	; 0x30
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200003cc 	.word	0x200003cc
 8001a80:	40000400 	.word	0x40000400

08001a84 <HAL_TIM_Encoder_MspInit>:
  /* USER CODE END TIM10_Init 2 */

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x84>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12b      	bne.n	8001afe <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x88>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x88>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x88>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x88>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x88>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x88>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_P_Pin|ENC_M_Pin;
 8001ade:	23c0      	movs	r3, #192	; 0xc0
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aee:	2302      	movs	r3, #2
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001afa:	f000 fe29 	bl	8002750 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40000400 	.word	0x40000400
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000

08001b14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d10d      	bne.n	8001b42 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_TIM_PWM_MspInit+0x40>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <HAL_TIM_PWM_MspInit+0x40>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_TIM_PWM_MspInit+0x40>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40014000 	.word	0x40014000
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM10)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_TIM_Base_MspInit+0x94>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d134      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <HAL_TIM_Base_MspInit+0x98>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_TIM_Base_MspInit+0x98>)
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_TIM_Base_MspInit+0x98>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_TIM_Base_MspInit+0x98>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <HAL_TIM_Base_MspInit+0x98>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_TIM_Base_MspInit+0x98>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <HAL_TIM_Base_MspInit+0x9c>)
 8001bd0:	f000 fdbe 	bl	8002750 <HAL_GPIO_Init>

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2019      	movs	r0, #25
 8001bda:	f000 f9e2 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bde:	2019      	movs	r0, #25
 8001be0:	f000 f9fb 	bl	8001fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40014400 	.word	0x40014400
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020400 	.word	0x40020400

08001bf8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_TIM_MspPostInit+0x68>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d11d      	bne.n	8001c56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c24:	f043 0310 	orr.w	r3, r3, #16
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c36:	2320      	movs	r3, #32
 8001c38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001c46:	2303      	movs	r3, #3
 8001c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <HAL_TIM_MspPostInit+0x70>)
 8001c52:	f000 fd7d 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40014000 	.word	0x40014000
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40021000 	.word	0x40021000

08001c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c70:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c72:	490e      	ldr	r1, [pc, #56]	; (8001cac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c88:	4c0b      	ldr	r4, [pc, #44]	; (8001cb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c96:	f7ff fe8f 	bl	80019b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f007 fa69 	bl	8009170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9e:	f7ff fb4f 	bl	8001340 <main>
  bx  lr    
 8001ca2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cac:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001cb0:	0800d18c 	.word	0x0800d18c
  ldr r2, =_sbss
 8001cb4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001cb8:	200008c4 	.word	0x200008c4

08001cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cbc:	e7fe      	b.n	8001cbc <ADC_IRQHandler>
	...

08001cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <HAL_Init+0x40>)
 8001cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_Init+0x40>)
 8001cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <HAL_Init+0x40>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 f94f 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f000 f808 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf4:	f7ff fd1e 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023c00 	.word	0x40023c00

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f967 	bl	8001ff6 <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f000 f92f 	bl	8001fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	; (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2000001c 	.word	0x2000001c
 8001d5c:	20000024 	.word	0x20000024
 8001d60:	20000020 	.word	0x20000020

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000024 	.word	0x20000024
 8001d88:	200004a4 	.word	0x200004a4

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	200004a4 	.word	0x200004a4

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffee 	bl	8001d8c <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000024 	.word	0x20000024

08001dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0b      	blt.n	8001e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4907      	ldr	r1, [pc, #28]	; (8001e88 <__NVIC_EnableIRQ+0x38>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2001      	movs	r0, #1
 8001e72:	fa00 f202 	lsl.w	r2, r0, r2
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	; (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f58:	d301      	bcc.n	8001f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00f      	b.n	8001f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <SysTick_Config+0x40>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f66:	210f      	movs	r1, #15
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f7ff ff8e 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <SysTick_Config+0x40>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <SysTick_Config+0x40>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff29 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb4:	f7ff ff3e 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	f7ff ff8e 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff5d 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff31 	bl	8001e50 <__NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffa2 	bl	8001f48 <SysTick_Config>
 8002004:	4603      	mov	r3, r0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff feb6 	bl	8001d8c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e099      	b.n	8002160 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204c:	e00f      	b.n	800206e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800204e:	f7ff fe9d 	bl	8001d8c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b05      	cmp	r3, #5
 800205a:	d908      	bls.n	800206e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2203      	movs	r2, #3
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e078      	b.n	8002160 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e8      	bne.n	800204e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	4b38      	ldr	r3, [pc, #224]	; (8002168 <HAL_DMA_Init+0x158>)
 8002088:	4013      	ands	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800209a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4313      	orrs	r3, r2
 80020be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d107      	bne.n	80020d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	4313      	orrs	r3, r2
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f023 0307 	bic.w	r3, r3, #7
 80020ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d117      	bne.n	8002132 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00e      	beq.n	8002132 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fa9f 	bl	8002658 <DMA_CheckFifoParam>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2240      	movs	r2, #64	; 0x40
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800212e:	2301      	movs	r3, #1
 8002130:	e016      	b.n	8002160 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fa56 	bl	80025ec <DMA_CalcBaseAndBitshift>
 8002140:	4603      	mov	r3, r0
 8002142:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	223f      	movs	r2, #63	; 0x3f
 800214a:	409a      	lsls	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	f010803f 	.word	0xf010803f

0800216c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_DMA_Start_IT+0x26>
 800218e:	2302      	movs	r3, #2
 8002190:	e040      	b.n	8002214 <HAL_DMA_Start_IT+0xa8>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d12f      	bne.n	8002206 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f9e8 	bl	8002590 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	223f      	movs	r2, #63	; 0x3f
 80021c6:	409a      	lsls	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0216 	orr.w	r2, r2, #22
 80021da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0208 	orr.w	r2, r2, #8
 80021f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e005      	b.n	8002212 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800220e:	2302      	movs	r3, #2
 8002210:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002212:	7dfb      	ldrb	r3, [r7, #23]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d004      	beq.n	800223a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00c      	b.n	8002254 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2205      	movs	r2, #5
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800226c:	4b8e      	ldr	r3, [pc, #568]	; (80024a8 <HAL_DMA_IRQHandler+0x248>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a8e      	ldr	r2, [pc, #568]	; (80024ac <HAL_DMA_IRQHandler+0x24c>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	0a9b      	lsrs	r3, r3, #10
 8002278:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	2208      	movs	r2, #8
 800228c:	409a      	lsls	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01a      	beq.n	80022cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d013      	beq.n	80022cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0204 	bic.w	r2, r2, #4
 80022b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	2208      	movs	r2, #8
 80022ba:	409a      	lsls	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	2201      	movs	r2, #1
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d012      	beq.n	8002302 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	2201      	movs	r2, #1
 80022f0:	409a      	lsls	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	f043 0202 	orr.w	r2, r3, #2
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	2204      	movs	r2, #4
 8002308:	409a      	lsls	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4013      	ands	r3, r2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d012      	beq.n	8002338 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00b      	beq.n	8002338 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	2204      	movs	r2, #4
 8002326:	409a      	lsls	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002330:	f043 0204 	orr.w	r2, r3, #4
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233c:	2210      	movs	r2, #16
 800233e:	409a      	lsls	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d043      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d03c      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	2210      	movs	r2, #16
 800235c:	409a      	lsls	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d018      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d108      	bne.n	8002390 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d024      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	4798      	blx	r3
 800238e:	e01f      	b.n	80023d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01b      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	4798      	blx	r3
 80023a0:	e016      	b.n	80023d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0208 	bic.w	r2, r2, #8
 80023be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	2220      	movs	r2, #32
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 808f 	beq.w	8002500 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8087 	beq.w	8002500 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	2220      	movs	r2, #32
 80023f8:	409a      	lsls	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b05      	cmp	r3, #5
 8002408:	d136      	bne.n	8002478 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0216 	bic.w	r2, r2, #22
 8002418:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002428:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d103      	bne.n	800243a <HAL_DMA_IRQHandler+0x1da>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0208 	bic.w	r2, r2, #8
 8002448:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	223f      	movs	r2, #63	; 0x3f
 8002450:	409a      	lsls	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246a:	2b00      	cmp	r3, #0
 800246c:	d07e      	beq.n	800256c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
        }
        return;
 8002476:	e079      	b.n	800256c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01d      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10d      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	2b00      	cmp	r3, #0
 800249a:	d031      	beq.n	8002500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	4798      	blx	r3
 80024a4:	e02c      	b.n	8002500 <HAL_DMA_IRQHandler+0x2a0>
 80024a6:	bf00      	nop
 80024a8:	2000001c 	.word	0x2000001c
 80024ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d023      	beq.n	8002500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
 80024c0:	e01e      	b.n	8002500 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10f      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0210 	bic.w	r2, r2, #16
 80024de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002504:	2b00      	cmp	r3, #0
 8002506:	d032      	beq.n	800256e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d022      	beq.n	800255a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2205      	movs	r2, #5
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	3301      	adds	r3, #1
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	429a      	cmp	r2, r3
 8002536:	d307      	bcc.n	8002548 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f2      	bne.n	800252c <HAL_DMA_IRQHandler+0x2cc>
 8002546:	e000      	b.n	800254a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002548:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
 800256a:	e000      	b.n	800256e <HAL_DMA_IRQHandler+0x30e>
        return;
 800256c:	bf00      	nop
    }
  }
}
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002582:	b2db      	uxtb	r3, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d108      	bne.n	80025d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025ce:	e007      	b.n	80025e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	60da      	str	r2, [r3, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	3b10      	subs	r3, #16
 80025fc:	4a14      	ldr	r2, [pc, #80]	; (8002650 <DMA_CalcBaseAndBitshift+0x64>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002606:	4a13      	ldr	r2, [pc, #76]	; (8002654 <DMA_CalcBaseAndBitshift+0x68>)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d909      	bls.n	800262e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002622:	f023 0303 	bic.w	r3, r3, #3
 8002626:	1d1a      	adds	r2, r3, #4
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	659a      	str	r2, [r3, #88]	; 0x58
 800262c:	e007      	b.n	800263e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002636:	f023 0303 	bic.w	r3, r3, #3
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	aaaaaaab 	.word	0xaaaaaaab
 8002654:	0800c074 	.word	0x0800c074

08002658 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d11f      	bne.n	80026b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d856      	bhi.n	8002726 <DMA_CheckFifoParam+0xce>
 8002678:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <DMA_CheckFifoParam+0x28>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	08002691 	.word	0x08002691
 8002684:	080026a3 	.word	0x080026a3
 8002688:	08002691 	.word	0x08002691
 800268c:	08002727 	.word	0x08002727
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d046      	beq.n	800272a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a0:	e043      	b.n	800272a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026aa:	d140      	bne.n	800272e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b0:	e03d      	b.n	800272e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ba:	d121      	bne.n	8002700 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d837      	bhi.n	8002732 <DMA_CheckFifoParam+0xda>
 80026c2:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <DMA_CheckFifoParam+0x70>)
 80026c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c8:	080026d9 	.word	0x080026d9
 80026cc:	080026df 	.word	0x080026df
 80026d0:	080026d9 	.word	0x080026d9
 80026d4:	080026f1 	.word	0x080026f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      break;
 80026dc:	e030      	b.n	8002740 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d025      	beq.n	8002736 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ee:	e022      	b.n	8002736 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026f8:	d11f      	bne.n	800273a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026fe:	e01c      	b.n	800273a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d903      	bls.n	800270e <DMA_CheckFifoParam+0xb6>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d003      	beq.n	8002714 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800270c:	e018      	b.n	8002740 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
      break;
 8002712:	e015      	b.n	8002740 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00e      	beq.n	800273e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
      break;
 8002724:	e00b      	b.n	800273e <DMA_CheckFifoParam+0xe6>
      break;
 8002726:	bf00      	nop
 8002728:	e00a      	b.n	8002740 <DMA_CheckFifoParam+0xe8>
      break;
 800272a:	bf00      	nop
 800272c:	e008      	b.n	8002740 <DMA_CheckFifoParam+0xe8>
      break;
 800272e:	bf00      	nop
 8002730:	e006      	b.n	8002740 <DMA_CheckFifoParam+0xe8>
      break;
 8002732:	bf00      	nop
 8002734:	e004      	b.n	8002740 <DMA_CheckFifoParam+0xe8>
      break;
 8002736:	bf00      	nop
 8002738:	e002      	b.n	8002740 <DMA_CheckFifoParam+0xe8>
      break;   
 800273a:	bf00      	nop
 800273c:	e000      	b.n	8002740 <DMA_CheckFifoParam+0xe8>
      break;
 800273e:	bf00      	nop
    }
  } 
  
  return status; 
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	e16b      	b.n	8002a44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	429a      	cmp	r2, r3
 8002786:	f040 815a 	bne.w	8002a3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d005      	beq.n	80027a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d130      	bne.n	8002804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	2203      	movs	r2, #3
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d8:	2201      	movs	r2, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 0201 	and.w	r2, r3, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b03      	cmp	r3, #3
 800280e:	d017      	beq.n	8002840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d123      	bne.n	8002894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	08da      	lsrs	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3208      	adds	r2, #8
 8002854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	220f      	movs	r2, #15
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	08da      	lsrs	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3208      	adds	r2, #8
 800288e:	69b9      	ldr	r1, [r7, #24]
 8002890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	2203      	movs	r2, #3
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0203 	and.w	r2, r3, #3
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80b4 	beq.w	8002a3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	4b60      	ldr	r3, [pc, #384]	; (8002a5c <HAL_GPIO_Init+0x30c>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a5f      	ldr	r2, [pc, #380]	; (8002a5c <HAL_GPIO_Init+0x30c>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b5d      	ldr	r3, [pc, #372]	; (8002a5c <HAL_GPIO_Init+0x30c>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f2:	4a5b      	ldr	r2, [pc, #364]	; (8002a60 <HAL_GPIO_Init+0x310>)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_GPIO_Init+0x314>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d02b      	beq.n	8002976 <HAL_GPIO_Init+0x226>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a51      	ldr	r2, [pc, #324]	; (8002a68 <HAL_GPIO_Init+0x318>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d025      	beq.n	8002972 <HAL_GPIO_Init+0x222>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a50      	ldr	r2, [pc, #320]	; (8002a6c <HAL_GPIO_Init+0x31c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <HAL_GPIO_Init+0x21e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <HAL_GPIO_Init+0x320>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x21a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4e      	ldr	r2, [pc, #312]	; (8002a74 <HAL_GPIO_Init+0x324>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x216>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4d      	ldr	r2, [pc, #308]	; (8002a78 <HAL_GPIO_Init+0x328>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x212>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4c      	ldr	r2, [pc, #304]	; (8002a7c <HAL_GPIO_Init+0x32c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x20e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4b      	ldr	r2, [pc, #300]	; (8002a80 <HAL_GPIO_Init+0x330>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x20a>
 8002956:	2307      	movs	r3, #7
 8002958:	e00e      	b.n	8002978 <HAL_GPIO_Init+0x228>
 800295a:	2308      	movs	r3, #8
 800295c:	e00c      	b.n	8002978 <HAL_GPIO_Init+0x228>
 800295e:	2306      	movs	r3, #6
 8002960:	e00a      	b.n	8002978 <HAL_GPIO_Init+0x228>
 8002962:	2305      	movs	r3, #5
 8002964:	e008      	b.n	8002978 <HAL_GPIO_Init+0x228>
 8002966:	2304      	movs	r3, #4
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x228>
 800296a:	2303      	movs	r3, #3
 800296c:	e004      	b.n	8002978 <HAL_GPIO_Init+0x228>
 800296e:	2302      	movs	r3, #2
 8002970:	e002      	b.n	8002978 <HAL_GPIO_Init+0x228>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_GPIO_Init+0x228>
 8002976:	2300      	movs	r3, #0
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	f002 0203 	and.w	r2, r2, #3
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	4093      	lsls	r3, r2
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002988:	4935      	ldr	r1, [pc, #212]	; (8002a60 <HAL_GPIO_Init+0x310>)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002996:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ba:	4a32      	ldr	r2, [pc, #200]	; (8002a84 <HAL_GPIO_Init+0x334>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c0:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <HAL_GPIO_Init+0x334>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e4:	4a27      	ldr	r2, [pc, #156]	; (8002a84 <HAL_GPIO_Init+0x334>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <HAL_GPIO_Init+0x334>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a0e:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a38:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3301      	adds	r3, #1
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2b0f      	cmp	r3, #15
 8002a48:	f67f ae90 	bls.w	800276c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40013800 	.word	0x40013800
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020c00 	.word	0x40020c00
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40021400 	.word	0x40021400
 8002a7c:	40021800 	.word	0x40021800
 8002a80:	40021c00 	.word	0x40021c00
 8002a84:	40013c00 	.word	0x40013c00

08002a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]
 8002a94:	4613      	mov	r3, r2
 8002a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a98:	787b      	ldrb	r3, [r7, #1]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aa4:	e003      	b.n	8002aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aa6:	887b      	ldrh	r3, [r7, #2]
 8002aa8:	041a      	lsls	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	619a      	str	r2, [r3, #24]
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e12b      	b.n	8002d26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe fb6c 	bl	80011c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b20:	f003 f8ac 	bl	8005c7c <HAL_RCC_GetPCLK1Freq>
 8002b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4a81      	ldr	r2, [pc, #516]	; (8002d30 <HAL_I2C_Init+0x274>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d807      	bhi.n	8002b40 <HAL_I2C_Init+0x84>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a80      	ldr	r2, [pc, #512]	; (8002d34 <HAL_I2C_Init+0x278>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	bf94      	ite	ls
 8002b38:	2301      	movls	r3, #1
 8002b3a:	2300      	movhi	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	e006      	b.n	8002b4e <HAL_I2C_Init+0x92>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a7d      	ldr	r2, [pc, #500]	; (8002d38 <HAL_I2C_Init+0x27c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	bf94      	ite	ls
 8002b48:	2301      	movls	r3, #1
 8002b4a:	2300      	movhi	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0e7      	b.n	8002d26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a78      	ldr	r2, [pc, #480]	; (8002d3c <HAL_I2C_Init+0x280>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0c9b      	lsrs	r3, r3, #18
 8002b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4a6a      	ldr	r2, [pc, #424]	; (8002d30 <HAL_I2C_Init+0x274>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d802      	bhi.n	8002b90 <HAL_I2C_Init+0xd4>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	e009      	b.n	8002ba4 <HAL_I2C_Init+0xe8>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	4a69      	ldr	r2, [pc, #420]	; (8002d40 <HAL_I2C_Init+0x284>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	495c      	ldr	r1, [pc, #368]	; (8002d30 <HAL_I2C_Init+0x274>)
 8002bc0:	428b      	cmp	r3, r1
 8002bc2:	d819      	bhi.n	8002bf8 <HAL_I2C_Init+0x13c>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e59      	subs	r1, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd2:	1c59      	adds	r1, r3, #1
 8002bd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bd8:	400b      	ands	r3, r1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_I2C_Init+0x138>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1e59      	subs	r1, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf2:	e051      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	e04f      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d111      	bne.n	8002c24 <HAL_I2C_Init+0x168>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1e58      	subs	r0, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	440b      	add	r3, r1
 8002c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e012      	b.n	8002c4a <HAL_I2C_Init+0x18e>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e58      	subs	r0, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	0099      	lsls	r1, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Init+0x196>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e022      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10e      	bne.n	8002c78 <HAL_I2C_Init+0x1bc>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1e58      	subs	r0, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	440b      	add	r3, r1
 8002c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c76:	e00f      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1e58      	subs	r0, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	0099      	lsls	r1, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	6809      	ldr	r1, [r1, #0]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6911      	ldr	r1, [r2, #16]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68d2      	ldr	r2, [r2, #12]
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	000186a0 	.word	0x000186a0
 8002d34:	001e847f 	.word	0x001e847f
 8002d38:	003d08ff 	.word	0x003d08ff
 8002d3c:	431bde83 	.word	0x431bde83
 8002d40:	10624dd3 	.word	0x10624dd3

08002d44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	460b      	mov	r3, r1
 8002d52:	817b      	strh	r3, [r7, #10]
 8002d54:	4613      	mov	r3, r2
 8002d56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d58:	f7ff f818 	bl	8001d8c <HAL_GetTick>
 8002d5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	f040 80e0 	bne.w	8002f2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2319      	movs	r3, #25
 8002d72:	2201      	movs	r2, #1
 8002d74:	4970      	ldr	r1, [pc, #448]	; (8002f38 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f002 f8e6 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
 8002d84:	e0d3      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_I2C_Master_Transmit+0x50>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e0cc      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d007      	beq.n	8002dba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2221      	movs	r2, #33	; 0x21
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	893a      	ldrh	r2, [r7, #8]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a50      	ldr	r2, [pc, #320]	; (8002f3c <HAL_I2C_Master_Transmit+0x1f8>)
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dfc:	8979      	ldrh	r1, [r7, #10]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f001 fea8 	bl	8004b58 <I2C_MasterRequestWrite>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e08d      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e28:	e066      	b.n	8002ef8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	6a39      	ldr	r1, [r7, #32]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f002 f960 	bl	80050f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d107      	bne.n	8002e52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06b      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d11b      	bne.n	8002ecc <HAL_I2C_Master_Transmit+0x188>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d017      	beq.n	8002ecc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	6a39      	ldr	r1, [r7, #32]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f002 f950 	bl	8005176 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00d      	beq.n	8002ef8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d107      	bne.n	8002ef4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e01a      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d194      	bne.n	8002e2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	00100002 	.word	0x00100002
 8002f3c:	ffff0000 	.word	0xffff0000

08002f40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	; 0x30
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	817b      	strh	r3, [r7, #10]
 8002f50:	4613      	mov	r3, r2
 8002f52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7fe ff1a 	bl	8001d8c <HAL_GetTick>
 8002f58:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	f040 820b 	bne.w	800337e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2319      	movs	r3, #25
 8002f6e:	2201      	movs	r2, #1
 8002f70:	497c      	ldr	r1, [pc, #496]	; (8003164 <HAL_I2C_Master_Receive+0x224>)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f001 ffe8 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e1fe      	b.n	8003380 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_I2C_Master_Receive+0x50>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e1f7      	b.n	8003380 <HAL_I2C_Master_Receive+0x440>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d007      	beq.n	8002fb6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2222      	movs	r2, #34	; 0x22
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	893a      	ldrh	r2, [r7, #8]
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a5c      	ldr	r2, [pc, #368]	; (8003168 <HAL_I2C_Master_Receive+0x228>)
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ff8:	8979      	ldrh	r1, [r7, #10]
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f001 fe2c 	bl	8004c5c <I2C_MasterRequestRead>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e1b8      	b.n	8003380 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	d113      	bne.n	800303e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003016:	2300      	movs	r3, #0
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	623b      	str	r3, [r7, #32]
 800302a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e18c      	b.n	8003358 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	2b01      	cmp	r3, #1
 8003044:	d11b      	bne.n	800307e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003054:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e16c      	b.n	8003358 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003082:	2b02      	cmp	r3, #2
 8003084:	d11b      	bne.n	80030be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003094:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	e14c      	b.n	8003358 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030e4:	e138      	b.n	8003358 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	f200 80f1 	bhi.w	80032d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d123      	bne.n	8003140 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f002 f8ad 	bl	800525c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e139      	b.n	8003380 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800313e:	e10b      	b.n	8003358 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	2b02      	cmp	r3, #2
 8003146:	d14e      	bne.n	80031e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	2200      	movs	r2, #0
 8003150:	4906      	ldr	r1, [pc, #24]	; (800316c <HAL_I2C_Master_Receive+0x22c>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f001 fef8 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e10e      	b.n	8003380 <HAL_I2C_Master_Receive+0x440>
 8003162:	bf00      	nop
 8003164:	00100002 	.word	0x00100002
 8003168:	ffff0000 	.word	0xffff0000
 800316c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031e4:	e0b8      	b.n	8003358 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	2200      	movs	r2, #0
 80031ee:	4966      	ldr	r1, [pc, #408]	; (8003388 <HAL_I2C_Master_Receive+0x448>)
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f001 fea9 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0bf      	b.n	8003380 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	2200      	movs	r2, #0
 800324a:	494f      	ldr	r1, [pc, #316]	; (8003388 <HAL_I2C_Master_Receive+0x448>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f001 fe7b 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e091      	b.n	8003380 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d0:	e042      	b.n	8003358 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f001 ffc0 	bl	800525c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e04c      	b.n	8003380 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d118      	bne.n	8003358 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f aec2 	bne.w	80030e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3728      	adds	r7, #40	; 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	00010004 	.word	0x00010004

0800338c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d003      	beq.n	80033c4 <HAL_I2C_EV_IRQHandler+0x38>
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	f040 80c1 	bne.w	8003546 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10d      	bne.n	80033fa <HAL_I2C_EV_IRQHandler+0x6e>
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80033e4:	d003      	beq.n	80033ee <HAL_I2C_EV_IRQHandler+0x62>
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_EV_IRQHandler+0x66>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_I2C_EV_IRQHandler+0x68>
 80033f2:	2300      	movs	r3, #0
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	f000 8132 	beq.w	800365e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00c      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0x92>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	0a5b      	lsrs	r3, r3, #9
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d006      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f001 ffa8 	bl	8005366 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fd83 	bl	8003f22 <I2C_Master_SB>
 800341c:	e092      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	08db      	lsrs	r3, r3, #3
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0xb2>
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	0a5b      	lsrs	r3, r3, #9
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fdf9 	bl	800402e <I2C_Master_ADD10>
 800343c:	e082      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_I2C_EV_IRQHandler+0xd2>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	0a5b      	lsrs	r3, r3, #9
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fe13 	bl	8004082 <I2C_Master_ADDR>
 800345c:	e072      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03b      	beq.n	80034e2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003478:	f000 80f3 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	09db      	lsrs	r3, r3, #7
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00f      	beq.n	80034a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	0a9b      	lsrs	r3, r3, #10
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f9f3 	bl	800388c <I2C_MasterTransmit_TXE>
 80034a6:	e04d      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80d6 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	0a5b      	lsrs	r3, r3, #9
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80cf 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034c4:	7bbb      	ldrb	r3, [r7, #14]
 80034c6:	2b21      	cmp	r3, #33	; 0x21
 80034c8:	d103      	bne.n	80034d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa7a 	bl	80039c4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d0:	e0c7      	b.n	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	f040 80c4 	bne.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fae8 	bl	8003ab0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e0:	e0bf      	b.n	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f0:	f000 80b7 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00f      	beq.n	8003520 <HAL_I2C_EV_IRQHandler+0x194>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	0a9b      	lsrs	r3, r3, #10
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d009      	beq.n	8003520 <HAL_I2C_EV_IRQHandler+0x194>
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d103      	bne.n	8003520 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fb5d 	bl	8003bd8 <I2C_MasterReceive_RXNE>
 800351e:	e011      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 809a 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	0a5b      	lsrs	r3, r3, #9
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8093 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fc06 	bl	8003d4e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003542:	e08e      	b.n	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003544:	e08d      	b.n	8003662 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	e007      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <HAL_I2C_EV_IRQHandler+0x20e>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	0a5b      	lsrs	r3, r3, #9
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00c      	beq.n	800359a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003590:	69b9      	ldr	r1, [r7, #24]
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 ffc4 	bl	8004520 <I2C_Slave_ADDR>
 8003598:	e066      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_I2C_EV_IRQHandler+0x22e>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	0a5b      	lsrs	r3, r3, #9
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fffe 	bl	80045b4 <I2C_Slave_STOPF>
 80035b8:	e056      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035ba:	7bbb      	ldrb	r3, [r7, #14]
 80035bc:	2b21      	cmp	r3, #33	; 0x21
 80035be:	d002      	beq.n	80035c6 <HAL_I2C_EV_IRQHandler+0x23a>
 80035c0:	7bbb      	ldrb	r3, [r7, #14]
 80035c2:	2b29      	cmp	r3, #41	; 0x29
 80035c4:	d125      	bne.n	8003612 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	09db      	lsrs	r3, r3, #7
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00f      	beq.n	80035f2 <HAL_I2C_EV_IRQHandler+0x266>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	0a9b      	lsrs	r3, r3, #10
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_I2C_EV_IRQHandler+0x266>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 feda 	bl	80043a4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035f0:	e039      	b.n	8003666 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d033      	beq.n	8003666 <HAL_I2C_EV_IRQHandler+0x2da>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	0a5b      	lsrs	r3, r3, #9
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02d      	beq.n	8003666 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 ff07 	bl	800441e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003610:	e029      	b.n	8003666 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00f      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0x2b2>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	0a9b      	lsrs	r3, r3, #10
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0x2b2>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 ff12 	bl	8004460 <I2C_SlaveReceive_RXNE>
 800363c:	e014      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00e      	beq.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	0a5b      	lsrs	r3, r3, #9
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 ff40 	bl	80044dc <I2C_SlaveReceive_BTF>
 800365c:	e004      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003666:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b08a      	sub	sp, #40	; 0x28
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003690:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00e      	beq.n	80036bc <HAL_I2C_ER_IRQHandler+0x4e>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	0a5b      	lsrs	r3, r3, #9
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <HAL_I2C_ER_IRQHandler+0x78>
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80036e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	0a9b      	lsrs	r3, r3, #10
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03f      	beq.n	8003772 <HAL_I2C_ER_IRQHandler+0x104>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	0a1b      	lsrs	r3, r3, #8
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d039      	beq.n	8003772 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80036fe:	7efb      	ldrb	r3, [r7, #27]
 8003700:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003718:	7ebb      	ldrb	r3, [r7, #26]
 800371a:	2b20      	cmp	r3, #32
 800371c:	d112      	bne.n	8003744 <HAL_I2C_ER_IRQHandler+0xd6>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10f      	bne.n	8003744 <HAL_I2C_ER_IRQHandler+0xd6>
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	2b21      	cmp	r3, #33	; 0x21
 8003728:	d008      	beq.n	800373c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	2b29      	cmp	r3, #41	; 0x29
 800372e:	d005      	beq.n	800373c <HAL_I2C_ER_IRQHandler+0xce>
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b28      	cmp	r3, #40	; 0x28
 8003734:	d106      	bne.n	8003744 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b21      	cmp	r3, #33	; 0x21
 800373a:	d103      	bne.n	8003744 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f001 f869 	bl	8004814 <I2C_Slave_AF>
 8003742:	e016      	b.n	8003772 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800374c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003756:	7efb      	ldrb	r3, [r7, #27]
 8003758:	2b10      	cmp	r3, #16
 800375a:	d002      	beq.n	8003762 <HAL_I2C_ER_IRQHandler+0xf4>
 800375c:	7efb      	ldrb	r3, [r7, #27]
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d107      	bne.n	8003772 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003770:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	0adb      	lsrs	r3, r3, #11
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00e      	beq.n	800379c <HAL_I2C_ER_IRQHandler+0x12e>
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	0a1b      	lsrs	r3, r3, #8
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	f043 0308 	orr.w	r3, r3, #8
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800379a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f001 f8a0 	bl	80048f4 <I2C_ITError>
  }
}
 80037b4:	bf00      	nop
 80037b6:	3728      	adds	r7, #40	; 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	70fb      	strb	r3, [r7, #3]
 8003818:	4613      	mov	r3, r2
 800381a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d150      	bne.n	8003954 <I2C_MasterTransmit_TXE+0xc8>
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	2b21      	cmp	r3, #33	; 0x21
 80038b6:	d14d      	bne.n	8003954 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d01d      	beq.n	80038fa <I2C_MasterTransmit_TXE+0x6e>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d01a      	beq.n	80038fa <I2C_MasterTransmit_TXE+0x6e>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038ca:	d016      	beq.n	80038fa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038da:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2211      	movs	r2, #17
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ff62 	bl	80037bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038f8:	e060      	b.n	80039bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003908:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003918:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d107      	bne.n	8003944 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff7d 	bl	800383c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003942:	e03b      	b.n	80039bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff35 	bl	80037bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003952:	e033      	b.n	80039bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b21      	cmp	r3, #33	; 0x21
 8003958:	d005      	beq.n	8003966 <I2C_MasterTransmit_TXE+0xda>
 800395a:	7bbb      	ldrb	r3, [r7, #14]
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d12d      	bne.n	80039bc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b22      	cmp	r3, #34	; 0x22
 8003964:	d12a      	bne.n	80039bc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d108      	bne.n	8003982 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003980:	e01c      	b.n	80039bc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d103      	bne.n	8003996 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f88e 	bl	8003ab0 <I2C_MemoryTransmit_TXE_BTF>
}
 8003994:	e012      	b.n	80039bc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	781a      	ldrb	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039ba:	e7ff      	b.n	80039bc <I2C_MasterTransmit_TXE+0x130>
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b21      	cmp	r3, #33	; 0x21
 80039dc:	d164      	bne.n	8003aa8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d012      	beq.n	8003a0e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a0c:	e04c      	b.n	8003aa8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d01d      	beq.n	8003a50 <I2C_MasterTransmit_BTF+0x8c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d01a      	beq.n	8003a50 <I2C_MasterTransmit_BTF+0x8c>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a20:	d016      	beq.n	8003a50 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a30:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2211      	movs	r2, #17
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff feb7 	bl	80037bc <HAL_I2C_MasterTxCpltCallback>
}
 8003a4e:	e02b      	b.n	8003aa8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a5e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d107      	bne.n	8003a9a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fed2 	bl	800383c <HAL_I2C_MemTxCpltCallback>
}
 8003a98:	e006      	b.n	8003aa8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fe8a 	bl	80037bc <HAL_I2C_MasterTxCpltCallback>
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d11d      	bne.n	8003b04 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d10b      	bne.n	8003ae8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae0:	1c9a      	adds	r2, r3, #2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003ae6:	e073      	b.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	121b      	asrs	r3, r3, #8
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b02:	e065      	b.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10b      	bne.n	8003b24 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b22:	e055      	b.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d151      	bne.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b22      	cmp	r3, #34	; 0x22
 8003b30:	d10d      	bne.n	8003b4e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b40:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b4c:	e040      	b.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d015      	beq.n	8003b84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b21      	cmp	r3, #33	; 0x21
 8003b5c:	d112      	bne.n	8003b84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	781a      	ldrb	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b82:	e025      	b.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d120      	bne.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b21      	cmp	r3, #33	; 0x21
 8003b92:	d11d      	bne.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ba2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff fe36 	bl	800383c <HAL_I2C_MemTxCpltCallback>
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b22      	cmp	r3, #34	; 0x22
 8003bea:	f040 80ac 	bne.w	8003d46 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d921      	bls.n	8003c40 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	f040 808c 	bne.w	8003d46 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003c3e:	e082      	b.n	8003d46 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d075      	beq.n	8003d34 <I2C_MasterReceive_RXNE+0x15c>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d002      	beq.n	8003c54 <I2C_MasterReceive_RXNE+0x7c>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d16f      	bne.n	8003d34 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f001 facf 	bl	80051f8 <I2C_WaitOnSTOPRequestThroughIT>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d142      	bne.n	8003ce6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d10a      	bne.n	8003cd0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff fdc1 	bl	8003850 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cce:	e03a      	b.n	8003d46 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2212      	movs	r2, #18
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fd76 	bl	80037d0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ce4:	e02f      	b.n	8003d46 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cf4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff fd99 	bl	8003864 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d32:	e008      	b.n	8003d46 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d42:	605a      	str	r2, [r3, #4]
}
 8003d44:	e7ff      	b.n	8003d46 <I2C_MasterReceive_RXNE+0x16e>
 8003d46:	bf00      	nop
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d11b      	bne.n	8003d9e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d74:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d9c:	e0bd      	b.n	8003f1a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d129      	bne.n	8003dfc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d00a      	beq.n	8003dd4 <I2C_MasterReceive_BTF+0x86>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d007      	beq.n	8003dd4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dfa:	e08e      	b.n	8003f1a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d176      	bne.n	8003ef4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d002      	beq.n	8003e12 <I2C_MasterReceive_BTF+0xc4>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d108      	bne.n	8003e24 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e019      	b.n	8003e58 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d002      	beq.n	8003e30 <I2C_MasterReceive_BTF+0xe2>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d108      	bne.n	8003e42 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e00a      	b.n	8003e58 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d007      	beq.n	8003e58 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eb2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d10a      	bne.n	8003ede <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff fcba 	bl	8003850 <HAL_I2C_MemRxCpltCallback>
}
 8003edc:	e01d      	b.n	8003f1a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2212      	movs	r2, #18
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff fc6f 	bl	80037d0 <HAL_I2C_MasterRxCpltCallback>
}
 8003ef2:	e012      	b.n	8003f1a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d117      	bne.n	8003f66 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f4e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f50:	e067      	b.n	8004022 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	611a      	str	r2, [r3, #16]
}
 8003f64:	e05d      	b.n	8004022 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f6e:	d133      	bne.n	8003fd8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b21      	cmp	r3, #33	; 0x21
 8003f7a:	d109      	bne.n	8003f90 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f8c:	611a      	str	r2, [r3, #16]
 8003f8e:	e008      	b.n	8003fa2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d004      	beq.n	8003fb4 <I2C_Master_SB+0x92>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d108      	bne.n	8003fc6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d032      	beq.n	8004022 <I2C_Master_SB+0x100>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d02d      	beq.n	8004022 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd4:	605a      	str	r2, [r3, #4]
}
 8003fd6:	e024      	b.n	8004022 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10e      	bne.n	8003ffe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	11db      	asrs	r3, r3, #7
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f003 0306 	and.w	r3, r3, #6
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f063 030f 	orn	r3, r3, #15
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	611a      	str	r2, [r3, #16]
}
 8003ffc:	e011      	b.n	8004022 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004002:	2b01      	cmp	r3, #1
 8004004:	d10d      	bne.n	8004022 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	b29b      	uxth	r3, r3
 800400c:	11db      	asrs	r3, r3, #7
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f003 0306 	and.w	r3, r3, #6
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f063 030e 	orn	r3, r3, #14
 800401a:	b2da      	uxtb	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	611a      	str	r2, [r3, #16]
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	b2da      	uxtb	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <I2C_Master_ADD10+0x26>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d108      	bne.n	8004066 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00c      	beq.n	8004076 <I2C_Master_ADD10+0x48>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004074:	605a      	str	r2, [r3, #4]
  }
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004082:	b480      	push	{r7}
 8004084:	b091      	sub	sp, #68	; 0x44
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004090:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b22      	cmp	r3, #34	; 0x22
 80040aa:	f040 8169 	bne.w	8004380 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10f      	bne.n	80040d6 <I2C_Master_ADDR+0x54>
 80040b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d10b      	bne.n	80040d6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	633b      	str	r3, [r7, #48]	; 0x30
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	e160      	b.n	8004398 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d11d      	bne.n	800411a <I2C_Master_ADDR+0x98>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040e6:	d118      	bne.n	800411a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800410c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	651a      	str	r2, [r3, #80]	; 0x50
 8004118:	e13e      	b.n	8004398 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d113      	bne.n	800414c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004124:	2300      	movs	r3, #0
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e115      	b.n	8004378 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	f040 808a 	bne.w	800426c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800415e:	d137      	bne.n	80041d0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800417e:	d113      	bne.n	80041a8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004190:	2300      	movs	r3, #0
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	e0e7      	b.n	8004378 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a8:	2300      	movs	r3, #0
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	623b      	str	r3, [r7, #32]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e0d3      	b.n	8004378 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d02e      	beq.n	8004234 <I2C_Master_ADDR+0x1b2>
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d02b      	beq.n	8004234 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	2b12      	cmp	r3, #18
 80041e0:	d102      	bne.n	80041e8 <I2C_Master_ADDR+0x166>
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d125      	bne.n	8004234 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d00e      	beq.n	800420c <I2C_Master_ADDR+0x18a>
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d00b      	beq.n	800420c <I2C_Master_ADDR+0x18a>
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	2b10      	cmp	r3, #16
 80041f8:	d008      	beq.n	800420c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e007      	b.n	800421c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800421a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	e0a1      	b.n	8004378 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004242:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e085      	b.n	8004378 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d14d      	bne.n	8004312 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	2b04      	cmp	r3, #4
 800427a:	d016      	beq.n	80042aa <I2C_Master_ADDR+0x228>
 800427c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427e:	2b02      	cmp	r3, #2
 8004280:	d013      	beq.n	80042aa <I2C_Master_ADDR+0x228>
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	2b10      	cmp	r3, #16
 8004286:	d010      	beq.n	80042aa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004296:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e007      	b.n	80042ba <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042b8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c8:	d117      	bne.n	80042fa <I2C_Master_ADDR+0x278>
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042d0:	d00b      	beq.n	80042ea <I2C_Master_ADDR+0x268>
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d008      	beq.n	80042ea <I2C_Master_ADDR+0x268>
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d005      	beq.n	80042ea <I2C_Master_ADDR+0x268>
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d002      	beq.n	80042ea <I2C_Master_ADDR+0x268>
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d107      	bne.n	80042fa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	e032      	b.n	8004378 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004320:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004330:	d117      	bne.n	8004362 <I2C_Master_ADDR+0x2e0>
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004338:	d00b      	beq.n	8004352 <I2C_Master_ADDR+0x2d0>
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	2b01      	cmp	r3, #1
 800433e:	d008      	beq.n	8004352 <I2C_Master_ADDR+0x2d0>
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	2b08      	cmp	r3, #8
 8004344:	d005      	beq.n	8004352 <I2C_Master_ADDR+0x2d0>
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	2b10      	cmp	r3, #16
 800434a:	d002      	beq.n	8004352 <I2C_Master_ADDR+0x2d0>
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	2b20      	cmp	r3, #32
 8004350:	d107      	bne.n	8004362 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004360:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800437e:	e00b      	b.n	8004398 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
}
 8004396:	e7ff      	b.n	8004398 <I2C_Master_ADDR+0x316>
 8004398:	bf00      	nop
 800439a:	3744      	adds	r7, #68	; 0x44
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d02b      	beq.n	8004416 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d114      	bne.n	8004416 <I2C_SlaveTransmit_TXE+0x72>
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b29      	cmp	r3, #41	; 0x29
 80043f0:	d111      	bne.n	8004416 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004400:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2221      	movs	r2, #33	; 0x21
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2228      	movs	r2, #40	; 0x28
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff f9e7 	bl	80037e4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d011      	beq.n	8004454 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d02c      	beq.n	80044d4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d114      	bne.n	80044d4 <I2C_SlaveReceive_RXNE+0x74>
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	2b2a      	cmp	r3, #42	; 0x2a
 80044ae:	d111      	bne.n	80044d4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044be:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2222      	movs	r2, #34	; 0x22
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2228      	movs	r2, #40	; 0x28
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff f992 	bl	80037f8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d012      	beq.n	8004514 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800453a:	2b28      	cmp	r3, #40	; 0x28
 800453c:	d127      	bne.n	800458e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800455a:	2301      	movs	r3, #1
 800455c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	09db      	lsrs	r3, r3, #7
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	81bb      	strh	r3, [r7, #12]
 8004570:	e002      	b.n	8004578 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004580:	89ba      	ldrh	r2, [r7, #12]
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	4619      	mov	r1, r3
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff f940 	bl	800380c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800458c:	e00e      	b.n	80045ac <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	2300      	movs	r3, #0
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80045d4:	2300      	movs	r3, #0
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004600:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004610:	d172      	bne.n	80046f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b22      	cmp	r3, #34	; 0x22
 8004616:	d002      	beq.n	800461e <I2C_Slave_STOPF+0x6a>
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b2a      	cmp	r3, #42	; 0x2a
 800461c:	d135      	bne.n	800468a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	b29a      	uxth	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f043 0204 	orr.w	r2, r3, #4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004650:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	4618      	mov	r0, r3
 8004658:	f7fd ff8c 	bl	8002574 <HAL_DMA_GetState>
 800465c:	4603      	mov	r3, r0
 800465e:	2b01      	cmp	r3, #1
 8004660:	d049      	beq.n	80046f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	4a69      	ldr	r2, [pc, #420]	; (800480c <I2C_Slave_STOPF+0x258>)
 8004668:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	4618      	mov	r0, r3
 8004670:	f7fd fdd4 	bl	800221c <HAL_DMA_Abort_IT>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d03d      	beq.n	80046f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004684:	4610      	mov	r0, r2
 8004686:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004688:	e035      	b.n	80046f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	b29a      	uxth	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f043 0204 	orr.w	r2, r3, #4
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fd ff56 	bl	8002574 <HAL_DMA_GetState>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d014      	beq.n	80046f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	4a4e      	ldr	r2, [pc, #312]	; (800480c <I2C_Slave_STOPF+0x258>)
 80046d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fd fd9e 	bl	800221c <HAL_DMA_Abort_IT>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d008      	beq.n	80046f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046f0:	4610      	mov	r0, r2
 80046f2:	4798      	blx	r3
 80046f4:	e000      	b.n	80046f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d03e      	beq.n	8004780 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d112      	bne.n	8004736 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d112      	bne.n	800476a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f043 0204 	orr.w	r2, r3, #4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f8b3 	bl	80048f4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800478e:	e039      	b.n	8004804 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b2a      	cmp	r3, #42	; 0x2a
 8004794:	d109      	bne.n	80047aa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2228      	movs	r2, #40	; 0x28
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff f827 	bl	80037f8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b28      	cmp	r3, #40	; 0x28
 80047b4:	d111      	bne.n	80047da <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a15      	ldr	r2, [pc, #84]	; (8004810 <I2C_Slave_STOPF+0x25c>)
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff f828 	bl	8003828 <HAL_I2C_ListenCpltCallback>
}
 80047d8:	e014      	b.n	8004804 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	2b22      	cmp	r3, #34	; 0x22
 80047e0:	d002      	beq.n	80047e8 <I2C_Slave_STOPF+0x234>
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b22      	cmp	r3, #34	; 0x22
 80047e6:	d10d      	bne.n	8004804 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fe fffa 	bl	80037f8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	08004df9 	.word	0x08004df9
 8004810:	ffff0000 	.word	0xffff0000

08004814 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004822:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d002      	beq.n	8004836 <I2C_Slave_AF+0x22>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b20      	cmp	r3, #32
 8004834:	d129      	bne.n	800488a <I2C_Slave_AF+0x76>
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	2b28      	cmp	r3, #40	; 0x28
 800483a:	d126      	bne.n	800488a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a2c      	ldr	r2, [pc, #176]	; (80048f0 <I2C_Slave_AF+0xdc>)
 8004840:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004850:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800485a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fe ffd0 	bl	8003828 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004888:	e02e      	b.n	80048e8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b21      	cmp	r3, #33	; 0x21
 800488e:	d126      	bne.n	80048de <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <I2C_Slave_AF+0xdc>)
 8004894:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2221      	movs	r2, #33	; 0x21
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048c4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fe ff84 	bl	80037e4 <HAL_I2C_SlaveTxCpltCallback>
}
 80048dc:	e004      	b.n	80048e8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048e6:	615a      	str	r2, [r3, #20]
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	ffff0000 	.word	0xffff0000

080048f4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004902:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800490a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800490c:	7bbb      	ldrb	r3, [r7, #14]
 800490e:	2b10      	cmp	r3, #16
 8004910:	d002      	beq.n	8004918 <I2C_ITError+0x24>
 8004912:	7bbb      	ldrb	r3, [r7, #14]
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d10a      	bne.n	800492e <I2C_ITError+0x3a>
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b22      	cmp	r3, #34	; 0x22
 800491c:	d107      	bne.n	800492e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800492c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004934:	2b28      	cmp	r3, #40	; 0x28
 8004936:	d107      	bne.n	8004948 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2228      	movs	r2, #40	; 0x28
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004946:	e015      	b.n	8004974 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004956:	d00a      	beq.n	800496e <I2C_ITError+0x7a>
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b60      	cmp	r3, #96	; 0x60
 800495c:	d007      	beq.n	800496e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800497e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004982:	d162      	bne.n	8004a4a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004992:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d020      	beq.n	80049e4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	4a6a      	ldr	r2, [pc, #424]	; (8004b50 <I2C_ITError+0x25c>)
 80049a8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fd fc34 	bl	800221c <HAL_DMA_Abort_IT>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 8089 	beq.w	8004ace <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049de:	4610      	mov	r0, r2
 80049e0:	4798      	blx	r3
 80049e2:	e074      	b.n	8004ace <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	4a59      	ldr	r2, [pc, #356]	; (8004b50 <I2C_ITError+0x25c>)
 80049ea:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fd fc13 	bl	800221c <HAL_DMA_Abort_IT>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d068      	beq.n	8004ace <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d10b      	bne.n	8004a22 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0201 	bic.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a44:	4610      	mov	r0, r2
 8004a46:	4798      	blx	r3
 8004a48:	e041      	b.n	8004ace <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b60      	cmp	r3, #96	; 0x60
 8004a54:	d125      	bne.n	8004aa2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b40      	cmp	r3, #64	; 0x40
 8004a70:	d10b      	bne.n	8004a8a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fe feec 	bl	8003878 <HAL_I2C_AbortCpltCallback>
 8004aa0:	e015      	b.n	8004ace <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	d10b      	bne.n	8004ac8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7fe fecb 	bl	8003864 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10e      	bne.n	8004afc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d007      	beq.n	8004b0c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b0a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d113      	bne.n	8004b48 <I2C_ITError+0x254>
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b28      	cmp	r3, #40	; 0x28
 8004b24:	d110      	bne.n	8004b48 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <I2C_ITError+0x260>)
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fe fe70 	bl	8003828 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	08004df9 	.word	0x08004df9
 8004b54:	ffff0000 	.word	0xffff0000

08004b58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	460b      	mov	r3, r1
 8004b66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d006      	beq.n	8004b82 <I2C_MasterRequestWrite+0x2a>
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d003      	beq.n	8004b82 <I2C_MasterRequestWrite+0x2a>
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b80:	d108      	bne.n	8004b94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	e00b      	b.n	8004bac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	2b12      	cmp	r3, #18
 8004b9a:	d107      	bne.n	8004bac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004baa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f9c5 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00d      	beq.n	8004be0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd2:	d103      	bne.n	8004bdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e035      	b.n	8004c4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be8:	d108      	bne.n	8004bfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bea:	897b      	ldrh	r3, [r7, #10]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bf8:	611a      	str	r2, [r3, #16]
 8004bfa:	e01b      	b.n	8004c34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bfc:	897b      	ldrh	r3, [r7, #10]
 8004bfe:	11db      	asrs	r3, r3, #7
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 0306 	and.w	r3, r3, #6
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f063 030f 	orn	r3, r3, #15
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	490e      	ldr	r1, [pc, #56]	; (8004c54 <I2C_MasterRequestWrite+0xfc>)
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f9eb 	bl	8004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e010      	b.n	8004c4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c2a:	897b      	ldrh	r3, [r7, #10]
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4907      	ldr	r1, [pc, #28]	; (8004c58 <I2C_MasterRequestWrite+0x100>)
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f9db 	bl	8004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	00010008 	.word	0x00010008
 8004c58:	00010002 	.word	0x00010002

08004c5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d006      	beq.n	8004c96 <I2C_MasterRequestRead+0x3a>
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d003      	beq.n	8004c96 <I2C_MasterRequestRead+0x3a>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c94:	d108      	bne.n	8004ca8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e00b      	b.n	8004cc0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2b11      	cmp	r3, #17
 8004cae:	d107      	bne.n	8004cc0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f93b 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00d      	beq.n	8004cf4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce6:	d103      	bne.n	8004cf0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e079      	b.n	8004de8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cfc:	d108      	bne.n	8004d10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cfe:	897b      	ldrh	r3, [r7, #10]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	611a      	str	r2, [r3, #16]
 8004d0e:	e05f      	b.n	8004dd0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d10:	897b      	ldrh	r3, [r7, #10]
 8004d12:	11db      	asrs	r3, r3, #7
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f003 0306 	and.w	r3, r3, #6
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f063 030f 	orn	r3, r3, #15
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4930      	ldr	r1, [pc, #192]	; (8004df0 <I2C_MasterRequestRead+0x194>)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f961 	bl	8004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e054      	b.n	8004de8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d3e:	897b      	ldrh	r3, [r7, #10]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4929      	ldr	r1, [pc, #164]	; (8004df4 <I2C_MasterRequestRead+0x198>)
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f951 	bl	8004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e044      	b.n	8004de8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f8d9 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00d      	beq.n	8004db8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004daa:	d103      	bne.n	8004db4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e017      	b.n	8004de8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004db8:	897b      	ldrh	r3, [r7, #10]
 8004dba:	11db      	asrs	r3, r3, #7
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f003 0306 	and.w	r3, r3, #6
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f063 030e 	orn	r3, r3, #14
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	4907      	ldr	r1, [pc, #28]	; (8004df4 <I2C_MasterRequestRead+0x198>)
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f90d 	bl	8004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	00010008 	.word	0x00010008
 8004df4:	00010002 	.word	0x00010002

08004df8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e10:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e12:	4b4b      	ldr	r3, [pc, #300]	; (8004f40 <I2C_DMAAbort+0x148>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	08db      	lsrs	r3, r3, #3
 8004e18:	4a4a      	ldr	r2, [pc, #296]	; (8004f44 <I2C_DMAAbort+0x14c>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0a1a      	lsrs	r2, r3, #8
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	00da      	lsls	r2, r3, #3
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004e3e:	e00a      	b.n	8004e56 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e54:	d0ea      	beq.n	8004e2c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e62:	2200      	movs	r2, #0
 8004e64:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	2200      	movs	r2, #0
 8004e74:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e84:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	2200      	movs	r2, #0
 8004e9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b60      	cmp	r3, #96	; 0x60
 8004ec6:	d10e      	bne.n	8004ee6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2200      	movs	r2, #0
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ede:	6978      	ldr	r0, [r7, #20]
 8004ee0:	f7fe fcca 	bl	8003878 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ee4:	e027      	b.n	8004f36 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ee6:	7cfb      	ldrb	r3, [r7, #19]
 8004ee8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004eec:	2b28      	cmp	r3, #40	; 0x28
 8004eee:	d117      	bne.n	8004f20 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2228      	movs	r2, #40	; 0x28
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f1e:	e007      	b.n	8004f30 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f30:	6978      	ldr	r0, [r7, #20]
 8004f32:	f7fe fc97 	bl	8003864 <HAL_I2C_ErrorCallback>
}
 8004f36:	bf00      	nop
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000001c 	.word	0x2000001c
 8004f44:	14f8b589 	.word	0x14f8b589

08004f48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f58:	e025      	b.n	8004fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d021      	beq.n	8004fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f62:	f7fc ff13 	bl	8001d8c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d116      	bne.n	8004fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e023      	b.n	8004fee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d10d      	bne.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	43da      	mvns	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bf0c      	ite	eq
 8004fc2:	2301      	moveq	r3, #1
 8004fc4:	2300      	movne	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	e00c      	b.n	8004fe6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	43da      	mvns	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	bf0c      	ite	eq
 8004fde:	2301      	moveq	r3, #1
 8004fe0:	2300      	movne	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d0b6      	beq.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005004:	e051      	b.n	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005014:	d123      	bne.n	800505e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005024:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800502e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f043 0204 	orr.w	r2, r3, #4
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e046      	b.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d021      	beq.n	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005066:	f7fc fe91 	bl	8001d8c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	429a      	cmp	r2, r3
 8005074:	d302      	bcc.n	800507c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d116      	bne.n	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f043 0220 	orr.w	r2, r3, #32
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e020      	b.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	0c1b      	lsrs	r3, r3, #16
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d10c      	bne.n	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	43da      	mvns	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4013      	ands	r3, r2
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf14      	ite	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	2300      	moveq	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	e00b      	b.n	80050e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	43da      	mvns	r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4013      	ands	r3, r2
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	bf14      	ite	ne
 80050e0:	2301      	movne	r3, #1
 80050e2:	2300      	moveq	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d18d      	bne.n	8005006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005100:	e02d      	b.n	800515e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f900 	bl	8005308 <I2C_IsAcknowledgeFailed>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e02d      	b.n	800516e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d021      	beq.n	800515e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511a:	f7fc fe37 	bl	8001d8c <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d116      	bne.n	800515e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f043 0220 	orr.w	r2, r3, #32
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e007      	b.n	800516e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005168:	2b80      	cmp	r3, #128	; 0x80
 800516a:	d1ca      	bne.n	8005102 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005182:	e02d      	b.n	80051e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f8bf 	bl	8005308 <I2C_IsAcknowledgeFailed>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e02d      	b.n	80051f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d021      	beq.n	80051e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519c:	f7fc fdf6 	bl	8001d8c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d302      	bcc.n	80051b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	f043 0220 	orr.w	r2, r3, #32
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e007      	b.n	80051f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d1ca      	bne.n	8005184 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005204:	4b13      	ldr	r3, [pc, #76]	; (8005254 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	08db      	lsrs	r3, r3, #3
 800520a:	4a13      	ldr	r2, [pc, #76]	; (8005258 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	0a1a      	lsrs	r2, r3, #8
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3b01      	subs	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d107      	bne.n	8005236 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e008      	b.n	8005248 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005244:	d0e9      	beq.n	800521a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	2000001c 	.word	0x2000001c
 8005258:	14f8b589 	.word	0x14f8b589

0800525c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005268:	e042      	b.n	80052f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b10      	cmp	r3, #16
 8005276:	d119      	bne.n	80052ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0210 	mvn.w	r2, #16
 8005280:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e029      	b.n	8005300 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ac:	f7fc fd6e 	bl	8001d8c <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d116      	bne.n	80052f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e007      	b.n	8005300 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d1b5      	bne.n	800526a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531e:	d11b      	bne.n	8005358 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005328:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f043 0204 	orr.w	r2, r3, #4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005376:	d103      	bne.n	8005380 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800537e:	e007      	b.n	8005390 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005388:	d102      	bne.n	8005390 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2208      	movs	r2, #8
 800538e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e267      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d075      	beq.n	80054a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ba:	4b88      	ldr	r3, [pc, #544]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d00c      	beq.n	80053e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053c6:	4b85      	ldr	r3, [pc, #532]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d112      	bne.n	80053f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053d2:	4b82      	ldr	r3, [pc, #520]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053de:	d10b      	bne.n	80053f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e0:	4b7e      	ldr	r3, [pc, #504]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d05b      	beq.n	80054a4 <HAL_RCC_OscConfig+0x108>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d157      	bne.n	80054a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e242      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005400:	d106      	bne.n	8005410 <HAL_RCC_OscConfig+0x74>
 8005402:	4b76      	ldr	r3, [pc, #472]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a75      	ldr	r2, [pc, #468]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	e01d      	b.n	800544c <HAL_RCC_OscConfig+0xb0>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005418:	d10c      	bne.n	8005434 <HAL_RCC_OscConfig+0x98>
 800541a:	4b70      	ldr	r3, [pc, #448]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a6f      	ldr	r2, [pc, #444]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 8005420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4b6d      	ldr	r3, [pc, #436]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a6c      	ldr	r2, [pc, #432]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 800542c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e00b      	b.n	800544c <HAL_RCC_OscConfig+0xb0>
 8005434:	4b69      	ldr	r3, [pc, #420]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a68      	ldr	r2, [pc, #416]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 800543a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	4b66      	ldr	r3, [pc, #408]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a65      	ldr	r2, [pc, #404]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 8005446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800544a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d013      	beq.n	800547c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fc fc9a 	bl	8001d8c <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800545c:	f7fc fc96 	bl	8001d8c <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	; 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e207      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546e:	4b5b      	ldr	r3, [pc, #364]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0xc0>
 800547a:	e014      	b.n	80054a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547c:	f7fc fc86 	bl	8001d8c <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005484:	f7fc fc82 	bl	8001d8c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b64      	cmp	r3, #100	; 0x64
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e1f3      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005496:	4b51      	ldr	r3, [pc, #324]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0xe8>
 80054a2:	e000      	b.n	80054a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d063      	beq.n	800557a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054b2:	4b4a      	ldr	r3, [pc, #296]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 030c 	and.w	r3, r3, #12
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054be:	4b47      	ldr	r3, [pc, #284]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d11c      	bne.n	8005504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ca:	4b44      	ldr	r3, [pc, #272]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d116      	bne.n	8005504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d6:	4b41      	ldr	r3, [pc, #260]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_RCC_OscConfig+0x152>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d001      	beq.n	80054ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e1c7      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ee:	4b3b      	ldr	r3, [pc, #236]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4937      	ldr	r1, [pc, #220]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005502:	e03a      	b.n	800557a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d020      	beq.n	800554e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800550c:	4b34      	ldr	r3, [pc, #208]	; (80055e0 <HAL_RCC_OscConfig+0x244>)
 800550e:	2201      	movs	r2, #1
 8005510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005512:	f7fc fc3b 	bl	8001d8c <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800551a:	f7fc fc37 	bl	8001d8c <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e1a8      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552c:	4b2b      	ldr	r3, [pc, #172]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0f0      	beq.n	800551a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005538:	4b28      	ldr	r3, [pc, #160]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	4925      	ldr	r1, [pc, #148]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 8005548:	4313      	orrs	r3, r2
 800554a:	600b      	str	r3, [r1, #0]
 800554c:	e015      	b.n	800557a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800554e:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fc fc1a 	bl	8001d8c <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800555c:	f7fc fc16 	bl	8001d8c <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e187      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800556e:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d036      	beq.n	80055f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d016      	beq.n	80055bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800558e:	4b15      	ldr	r3, [pc, #84]	; (80055e4 <HAL_RCC_OscConfig+0x248>)
 8005590:	2201      	movs	r2, #1
 8005592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fc fbfa 	bl	8001d8c <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800559c:	f7fc fbf6 	bl	8001d8c <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e167      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ae:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <HAL_RCC_OscConfig+0x240>)
 80055b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0x200>
 80055ba:	e01b      	b.n	80055f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055bc:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <HAL_RCC_OscConfig+0x248>)
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c2:	f7fc fbe3 	bl	8001d8c <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c8:	e00e      	b.n	80055e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ca:	f7fc fbdf 	bl	8001d8c <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d907      	bls.n	80055e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e150      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
 80055dc:	40023800 	.word	0x40023800
 80055e0:	42470000 	.word	0x42470000
 80055e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e8:	4b88      	ldr	r3, [pc, #544]	; (800580c <HAL_RCC_OscConfig+0x470>)
 80055ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1ea      	bne.n	80055ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8097 	beq.w	8005730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005606:	4b81      	ldr	r3, [pc, #516]	; (800580c <HAL_RCC_OscConfig+0x470>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10f      	bne.n	8005632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	4b7d      	ldr	r3, [pc, #500]	; (800580c <HAL_RCC_OscConfig+0x470>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	4a7c      	ldr	r2, [pc, #496]	; (800580c <HAL_RCC_OscConfig+0x470>)
 800561c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005620:	6413      	str	r3, [r2, #64]	; 0x40
 8005622:	4b7a      	ldr	r3, [pc, #488]	; (800580c <HAL_RCC_OscConfig+0x470>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562e:	2301      	movs	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005632:	4b77      	ldr	r3, [pc, #476]	; (8005810 <HAL_RCC_OscConfig+0x474>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563a:	2b00      	cmp	r3, #0
 800563c:	d118      	bne.n	8005670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800563e:	4b74      	ldr	r3, [pc, #464]	; (8005810 <HAL_RCC_OscConfig+0x474>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a73      	ldr	r2, [pc, #460]	; (8005810 <HAL_RCC_OscConfig+0x474>)
 8005644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800564a:	f7fc fb9f 	bl	8001d8c <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005652:	f7fc fb9b 	bl	8001d8c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e10c      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005664:	4b6a      	ldr	r3, [pc, #424]	; (8005810 <HAL_RCC_OscConfig+0x474>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0f0      	beq.n	8005652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d106      	bne.n	8005686 <HAL_RCC_OscConfig+0x2ea>
 8005678:	4b64      	ldr	r3, [pc, #400]	; (800580c <HAL_RCC_OscConfig+0x470>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	4a63      	ldr	r2, [pc, #396]	; (800580c <HAL_RCC_OscConfig+0x470>)
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	6713      	str	r3, [r2, #112]	; 0x70
 8005684:	e01c      	b.n	80056c0 <HAL_RCC_OscConfig+0x324>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b05      	cmp	r3, #5
 800568c:	d10c      	bne.n	80056a8 <HAL_RCC_OscConfig+0x30c>
 800568e:	4b5f      	ldr	r3, [pc, #380]	; (800580c <HAL_RCC_OscConfig+0x470>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	4a5e      	ldr	r2, [pc, #376]	; (800580c <HAL_RCC_OscConfig+0x470>)
 8005694:	f043 0304 	orr.w	r3, r3, #4
 8005698:	6713      	str	r3, [r2, #112]	; 0x70
 800569a:	4b5c      	ldr	r3, [pc, #368]	; (800580c <HAL_RCC_OscConfig+0x470>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	4a5b      	ldr	r2, [pc, #364]	; (800580c <HAL_RCC_OscConfig+0x470>)
 80056a0:	f043 0301 	orr.w	r3, r3, #1
 80056a4:	6713      	str	r3, [r2, #112]	; 0x70
 80056a6:	e00b      	b.n	80056c0 <HAL_RCC_OscConfig+0x324>
 80056a8:	4b58      	ldr	r3, [pc, #352]	; (800580c <HAL_RCC_OscConfig+0x470>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	4a57      	ldr	r2, [pc, #348]	; (800580c <HAL_RCC_OscConfig+0x470>)
 80056ae:	f023 0301 	bic.w	r3, r3, #1
 80056b2:	6713      	str	r3, [r2, #112]	; 0x70
 80056b4:	4b55      	ldr	r3, [pc, #340]	; (800580c <HAL_RCC_OscConfig+0x470>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b8:	4a54      	ldr	r2, [pc, #336]	; (800580c <HAL_RCC_OscConfig+0x470>)
 80056ba:	f023 0304 	bic.w	r3, r3, #4
 80056be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d015      	beq.n	80056f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fc fb60 	bl	8001d8c <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ce:	e00a      	b.n	80056e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d0:	f7fc fb5c 	bl	8001d8c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f241 3288 	movw	r2, #5000	; 0x1388
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e0cb      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e6:	4b49      	ldr	r3, [pc, #292]	; (800580c <HAL_RCC_OscConfig+0x470>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0ee      	beq.n	80056d0 <HAL_RCC_OscConfig+0x334>
 80056f2:	e014      	b.n	800571e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f4:	f7fc fb4a 	bl	8001d8c <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056fa:	e00a      	b.n	8005712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056fc:	f7fc fb46 	bl	8001d8c <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f241 3288 	movw	r2, #5000	; 0x1388
 800570a:	4293      	cmp	r3, r2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e0b5      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005712:	4b3e      	ldr	r3, [pc, #248]	; (800580c <HAL_RCC_OscConfig+0x470>)
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1ee      	bne.n	80056fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800571e:	7dfb      	ldrb	r3, [r7, #23]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d105      	bne.n	8005730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005724:	4b39      	ldr	r3, [pc, #228]	; (800580c <HAL_RCC_OscConfig+0x470>)
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	4a38      	ldr	r2, [pc, #224]	; (800580c <HAL_RCC_OscConfig+0x470>)
 800572a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800572e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80a1 	beq.w	800587c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800573a:	4b34      	ldr	r3, [pc, #208]	; (800580c <HAL_RCC_OscConfig+0x470>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
 8005742:	2b08      	cmp	r3, #8
 8005744:	d05c      	beq.n	8005800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d141      	bne.n	80057d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574e:	4b31      	ldr	r3, [pc, #196]	; (8005814 <HAL_RCC_OscConfig+0x478>)
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005754:	f7fc fb1a 	bl	8001d8c <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800575c:	f7fc fb16 	bl	8001d8c <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e087      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576e:	4b27      	ldr	r3, [pc, #156]	; (800580c <HAL_RCC_OscConfig+0x470>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69da      	ldr	r2, [r3, #28]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	019b      	lsls	r3, r3, #6
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	3b01      	subs	r3, #1
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	061b      	lsls	r3, r3, #24
 800579e:	491b      	ldr	r1, [pc, #108]	; (800580c <HAL_RCC_OscConfig+0x470>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057a4:	4b1b      	ldr	r3, [pc, #108]	; (8005814 <HAL_RCC_OscConfig+0x478>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057aa:	f7fc faef 	bl	8001d8c <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b2:	f7fc faeb 	bl	8001d8c <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e05c      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c4:	4b11      	ldr	r3, [pc, #68]	; (800580c <HAL_RCC_OscConfig+0x470>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x416>
 80057d0:	e054      	b.n	800587c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d2:	4b10      	ldr	r3, [pc, #64]	; (8005814 <HAL_RCC_OscConfig+0x478>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d8:	f7fc fad8 	bl	8001d8c <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e0:	f7fc fad4 	bl	8001d8c <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e045      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <HAL_RCC_OscConfig+0x470>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x444>
 80057fe:	e03d      	b.n	800587c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d107      	bne.n	8005818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e038      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
 800580c:	40023800 	.word	0x40023800
 8005810:	40007000 	.word	0x40007000
 8005814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005818:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <HAL_RCC_OscConfig+0x4ec>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d028      	beq.n	8005878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005830:	429a      	cmp	r2, r3
 8005832:	d121      	bne.n	8005878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d11a      	bne.n	8005878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005848:	4013      	ands	r3, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800584e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005850:	4293      	cmp	r3, r2
 8005852:	d111      	bne.n	8005878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	3b01      	subs	r3, #1
 8005862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005864:	429a      	cmp	r2, r3
 8005866:	d107      	bne.n	8005878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40023800 	.word	0x40023800

0800588c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0cc      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058a0:	4b68      	ldr	r3, [pc, #416]	; (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d90c      	bls.n	80058c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ae:	4b65      	ldr	r3, [pc, #404]	; (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b6:	4b63      	ldr	r3, [pc, #396]	; (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d001      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0b8      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d020      	beq.n	8005916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058e0:	4b59      	ldr	r3, [pc, #356]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	4a58      	ldr	r2, [pc, #352]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058f8:	4b53      	ldr	r3, [pc, #332]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	4a52      	ldr	r2, [pc, #328]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005904:	4b50      	ldr	r3, [pc, #320]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	494d      	ldr	r1, [pc, #308]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d044      	beq.n	80059ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d107      	bne.n	800593a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592a:	4b47      	ldr	r3, [pc, #284]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d119      	bne.n	800596a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e07f      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d003      	beq.n	800594a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005946:	2b03      	cmp	r3, #3
 8005948:	d107      	bne.n	800595a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594a:	4b3f      	ldr	r3, [pc, #252]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e06f      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595a:	4b3b      	ldr	r3, [pc, #236]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e067      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800596a:	4b37      	ldr	r3, [pc, #220]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f023 0203 	bic.w	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4934      	ldr	r1, [pc, #208]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	4313      	orrs	r3, r2
 800597a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800597c:	f7fc fa06 	bl	8001d8c <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005982:	e00a      	b.n	800599a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005984:	f7fc fa02 	bl	8001d8c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e04f      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599a:	4b2b      	ldr	r3, [pc, #172]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 020c 	and.w	r2, r3, #12
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d1eb      	bne.n	8005984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ac:	4b25      	ldr	r3, [pc, #148]	; (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d20c      	bcs.n	80059d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ba:	4b22      	ldr	r3, [pc, #136]	; (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c2:	4b20      	ldr	r3, [pc, #128]	; (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d001      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e032      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d008      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e0:	4b19      	ldr	r3, [pc, #100]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4916      	ldr	r1, [pc, #88]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059fe:	4b12      	ldr	r3, [pc, #72]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	490e      	ldr	r1, [pc, #56]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a12:	f000 f821 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
 8005a16:	4602      	mov	r2, r0
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	490a      	ldr	r1, [pc, #40]	; (8005a4c <HAL_RCC_ClockConfig+0x1c0>)
 8005a24:	5ccb      	ldrb	r3, [r1, r3]
 8005a26:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2a:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a2e:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fc f966 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40023c00 	.word	0x40023c00
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	0800c05c 	.word	0x0800c05c
 8005a50:	2000001c 	.word	0x2000001c
 8005a54:	20000020 	.word	0x20000020

08005a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a5c:	b094      	sub	sp, #80	; 0x50
 8005a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	647b      	str	r3, [r7, #68]	; 0x44
 8005a64:	2300      	movs	r3, #0
 8005a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a68:	2300      	movs	r3, #0
 8005a6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a70:	4b79      	ldr	r3, [pc, #484]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 030c 	and.w	r3, r3, #12
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d00d      	beq.n	8005a98 <HAL_RCC_GetSysClockFreq+0x40>
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	f200 80e1 	bhi.w	8005c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_RCC_GetSysClockFreq+0x34>
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d003      	beq.n	8005a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a8a:	e0db      	b.n	8005c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a8c:	4b73      	ldr	r3, [pc, #460]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a90:	e0db      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a92:	4b73      	ldr	r3, [pc, #460]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a96:	e0d8      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a98:	4b6f      	ldr	r3, [pc, #444]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aa0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aa2:	4b6d      	ldr	r3, [pc, #436]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d063      	beq.n	8005b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aae:	4b6a      	ldr	r3, [pc, #424]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	099b      	lsrs	r3, r3, #6
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005aca:	4622      	mov	r2, r4
 8005acc:	462b      	mov	r3, r5
 8005ace:	f04f 0000 	mov.w	r0, #0
 8005ad2:	f04f 0100 	mov.w	r1, #0
 8005ad6:	0159      	lsls	r1, r3, #5
 8005ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005adc:	0150      	lsls	r0, r2, #5
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	1a51      	subs	r1, r2, r1
 8005ae6:	6139      	str	r1, [r7, #16]
 8005ae8:	4629      	mov	r1, r5
 8005aea:	eb63 0301 	sbc.w	r3, r3, r1
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005afc:	4659      	mov	r1, fp
 8005afe:	018b      	lsls	r3, r1, #6
 8005b00:	4651      	mov	r1, sl
 8005b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b06:	4651      	mov	r1, sl
 8005b08:	018a      	lsls	r2, r1, #6
 8005b0a:	4651      	mov	r1, sl
 8005b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8005b10:	4659      	mov	r1, fp
 8005b12:	eb63 0901 	sbc.w	r9, r3, r1
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b2a:	4690      	mov	r8, r2
 8005b2c:	4699      	mov	r9, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	eb18 0303 	adds.w	r3, r8, r3
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	462b      	mov	r3, r5
 8005b38:	eb49 0303 	adc.w	r3, r9, r3
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	024b      	lsls	r3, r1, #9
 8005b4e:	4621      	mov	r1, r4
 8005b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b54:	4621      	mov	r1, r4
 8005b56:	024a      	lsls	r2, r1, #9
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b5e:	2200      	movs	r2, #0
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b68:	f7fb f88e 	bl	8000c88 <__aeabi_uldivmod>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4613      	mov	r3, r2
 8005b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b74:	e058      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b76:	4b38      	ldr	r3, [pc, #224]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	099b      	lsrs	r3, r3, #6
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	4611      	mov	r1, r2
 8005b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b86:	623b      	str	r3, [r7, #32]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b90:	4642      	mov	r2, r8
 8005b92:	464b      	mov	r3, r9
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f04f 0100 	mov.w	r1, #0
 8005b9c:	0159      	lsls	r1, r3, #5
 8005b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ba2:	0150      	lsls	r0, r2, #5
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4641      	mov	r1, r8
 8005baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bae:	4649      	mov	r1, r9
 8005bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8005bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	00eb      	lsls	r3, r5, #3
 8005bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bde:	00e2      	lsls	r2, r4, #3
 8005be0:	4614      	mov	r4, r2
 8005be2:	461d      	mov	r5, r3
 8005be4:	4643      	mov	r3, r8
 8005be6:	18e3      	adds	r3, r4, r3
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	464b      	mov	r3, r9
 8005bec:	eb45 0303 	adc.w	r3, r5, r3
 8005bf0:	607b      	str	r3, [r7, #4]
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	f04f 0300 	mov.w	r3, #0
 8005bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bfe:	4629      	mov	r1, r5
 8005c00:	028b      	lsls	r3, r1, #10
 8005c02:	4621      	mov	r1, r4
 8005c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c08:	4621      	mov	r1, r4
 8005c0a:	028a      	lsls	r2, r1, #10
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c12:	2200      	movs	r2, #0
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	61fa      	str	r2, [r7, #28]
 8005c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c1c:	f7fb f834 	bl	8000c88 <__aeabi_uldivmod>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4613      	mov	r3, r2
 8005c26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	0c1b      	lsrs	r3, r3, #16
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	3301      	adds	r3, #1
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c42:	e002      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3750      	adds	r7, #80	; 0x50
 8005c50:	46bd      	mov	sp, r7
 8005c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c56:	bf00      	nop
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	00f42400 	.word	0x00f42400
 8005c60:	007a1200 	.word	0x007a1200

08005c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c68:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	2000001c 	.word	0x2000001c

08005c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c80:	f7ff fff0 	bl	8005c64 <HAL_RCC_GetHCLKFreq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	0a9b      	lsrs	r3, r3, #10
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	4903      	ldr	r1, [pc, #12]	; (8005ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c92:	5ccb      	ldrb	r3, [r1, r3]
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	0800c06c 	.word	0x0800c06c

08005ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e07b      	b.n	8005dae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d108      	bne.n	8005cd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cc6:	d009      	beq.n	8005cdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	61da      	str	r2, [r3, #28]
 8005cce:	e005      	b.n	8005cdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fb fc82 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d60:	ea42 0103 	orr.w	r1, r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	0c1b      	lsrs	r3, r3, #16
 8005d7a:	f003 0104 	and.w	r1, r3, #4
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	f003 0210 	and.w	r2, r3, #16
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b088      	sub	sp, #32
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_SPI_Transmit+0x22>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e126      	b.n	8006026 <HAL_SPI_Transmit+0x270>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005de0:	f7fb ffd4 	bl	8001d8c <HAL_GetTick>
 8005de4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d002      	beq.n	8005dfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005df6:	2302      	movs	r3, #2
 8005df8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dfa:	e10b      	b.n	8006014 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Transmit+0x52>
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e0c:	e102      	b.n	8006014 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2203      	movs	r2, #3
 8005e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	88fa      	ldrh	r2, [r7, #6]
 8005e26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e54:	d10f      	bne.n	8005e76 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d007      	beq.n	8005e94 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9c:	d14b      	bne.n	8005f36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_SPI_Transmit+0xf6>
 8005ea6:	8afb      	ldrh	r3, [r7, #22]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d13e      	bne.n	8005f2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	881a      	ldrh	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	1c9a      	adds	r2, r3, #2
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ed0:	e02b      	b.n	8005f2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d112      	bne.n	8005f06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	1c9a      	adds	r2, r3, #2
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f04:	e011      	b.n	8005f2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f06:	f7fb ff41 	bl	8001d8c <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d803      	bhi.n	8005f1e <HAL_SPI_Transmit+0x168>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d102      	bne.n	8005f24 <HAL_SPI_Transmit+0x16e>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d102      	bne.n	8005f2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f28:	e074      	b.n	8006014 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1ce      	bne.n	8005ed2 <HAL_SPI_Transmit+0x11c>
 8005f34:	e04c      	b.n	8005fd0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_SPI_Transmit+0x18e>
 8005f3e:	8afb      	ldrh	r3, [r7, #22]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d140      	bne.n	8005fc6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f6a:	e02c      	b.n	8005fc6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d113      	bne.n	8005fa2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	7812      	ldrb	r2, [r2, #0]
 8005f86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fa0:	e011      	b.n	8005fc6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fa2:	f7fb fef3 	bl	8001d8c <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d803      	bhi.n	8005fba <HAL_SPI_Transmit+0x204>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb8:	d102      	bne.n	8005fc0 <HAL_SPI_Transmit+0x20a>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d102      	bne.n	8005fc6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fc4:	e026      	b.n	8006014 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1cd      	bne.n	8005f6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f9ff 	bl	80063d8 <SPI_EndRxTxTransaction>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e000      	b.n	8006014 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006012:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006024:	7ffb      	ldrb	r3, [r7, #31]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3720      	adds	r7, #32
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	4613      	mov	r3, r2
 800603c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_SPI_Transmit_DMA+0x20>
 800604c:	2302      	movs	r3, #2
 800604e:	e09b      	b.n	8006188 <HAL_SPI_Transmit_DMA+0x158>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	d002      	beq.n	800606a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006064:	2302      	movs	r3, #2
 8006066:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006068:	e089      	b.n	800617e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <HAL_SPI_Transmit_DMA+0x46>
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d102      	bne.n	800607c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
    goto error;
 800607a:	e080      	b.n	800617e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2203      	movs	r2, #3
 8006080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	88fa      	ldrh	r2, [r7, #6]
 8006094:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	88fa      	ldrh	r2, [r7, #6]
 800609a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c2:	d10f      	bne.n	80060e4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e8:	4a29      	ldr	r2, [pc, #164]	; (8006190 <HAL_SPI_Transmit_DMA+0x160>)
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f0:	4a28      	ldr	r2, [pc, #160]	; (8006194 <HAL_SPI_Transmit_DMA+0x164>)
 80060f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f8:	4a27      	ldr	r2, [pc, #156]	; (8006198 <HAL_SPI_Transmit_DMA+0x168>)
 80060fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006100:	2200      	movs	r2, #0
 8006102:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	4619      	mov	r1, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800611a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800611c:	f7fc f826 	bl	800216c <HAL_DMA_Start_IT>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00c      	beq.n	8006140 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	f043 0210 	orr.w	r2, r3, #16
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800613e:	e01e      	b.n	800617e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d007      	beq.n	800615e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800615c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0220 	orr.w	r2, r2, #32
 800616c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0202 	orr.w	r2, r2, #2
 800617c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006186:	7dfb      	ldrb	r3, [r7, #23]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	0800626d 	.word	0x0800626d
 8006194:	080061c5 	.word	0x080061c5
 8006198:	08006289 	.word	0x08006289

0800619c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061d2:	f7fb fddb 	bl	8001d8c <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e6:	d03b      	beq.n	8006260 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0220 	bic.w	r2, r2, #32
 80061f6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0202 	bic.w	r2, r2, #2
 8006206:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	2164      	movs	r1, #100	; 0x64
 800620c:	6978      	ldr	r0, [r7, #20]
 800620e:	f000 f8e3 	bl	80063d8 <SPI_EndRxTxTransaction>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d005      	beq.n	8006224 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	f043 0220 	orr.w	r2, r3, #32
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2200      	movs	r2, #0
 8006246:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006258:	6978      	ldr	r0, [r7, #20]
 800625a:	f7ff ffa9 	bl	80061b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800625e:	e002      	b.n	8006266 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006260:	6978      	ldr	r0, [r7, #20]
 8006262:	f002 fd83 	bl	8008d6c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff ff8e 	bl	800619c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0203 	bic.w	r2, r2, #3
 80062a4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062aa:	f043 0210 	orr.w	r2, r3, #16
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f7ff ff78 	bl	80061b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062c0:	bf00      	nop
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062d8:	f7fb fd58 	bl	8001d8c <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	4413      	add	r3, r2
 80062e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062e8:	f7fb fd50 	bl	8001d8c <HAL_GetTick>
 80062ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062ee:	4b39      	ldr	r3, [pc, #228]	; (80063d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	015b      	lsls	r3, r3, #5
 80062f4:	0d1b      	lsrs	r3, r3, #20
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	fb02 f303 	mul.w	r3, r2, r3
 80062fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062fe:	e054      	b.n	80063aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006306:	d050      	beq.n	80063aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006308:	f7fb fd40 	bl	8001d8c <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	429a      	cmp	r2, r3
 8006316:	d902      	bls.n	800631e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d13d      	bne.n	800639a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800632c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006336:	d111      	bne.n	800635c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006340:	d004      	beq.n	800634c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800634a:	d107      	bne.n	800635c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800635a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006364:	d10f      	bne.n	8006386 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e017      	b.n	80063ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4013      	ands	r3, r2
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	bf0c      	ite	eq
 80063ba:	2301      	moveq	r3, #1
 80063bc:	2300      	movne	r3, #0
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d19b      	bne.n	8006300 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	2000001c 	.word	0x2000001c

080063d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063e4:	4b1b      	ldr	r3, [pc, #108]	; (8006454 <SPI_EndRxTxTransaction+0x7c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1b      	ldr	r2, [pc, #108]	; (8006458 <SPI_EndRxTxTransaction+0x80>)
 80063ea:	fba2 2303 	umull	r2, r3, r2, r3
 80063ee:	0d5b      	lsrs	r3, r3, #21
 80063f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063f4:	fb02 f303 	mul.w	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006402:	d112      	bne.n	800642a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	2180      	movs	r1, #128	; 0x80
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7ff ff5a 	bl	80062c8 <SPI_WaitFlagStateUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d016      	beq.n	8006448 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	f043 0220 	orr.w	r2, r3, #32
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e00f      	b.n	800644a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	3b01      	subs	r3, #1
 8006434:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006440:	2b80      	cmp	r3, #128	; 0x80
 8006442:	d0f2      	beq.n	800642a <SPI_EndRxTxTransaction+0x52>
 8006444:	e000      	b.n	8006448 <SPI_EndRxTxTransaction+0x70>
        break;
 8006446:	bf00      	nop
  }

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	2000001c 	.word	0x2000001c
 8006458:	165e9f81 	.word	0x165e9f81

0800645c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e041      	b.n	80064f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fb fb68 	bl	8001b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3304      	adds	r3, #4
 8006498:	4619      	mov	r1, r3
 800649a:	4610      	mov	r0, r2
 800649c:	f001 f98c 	bl	80077b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e041      	b.n	8006590 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d106      	bne.n	8006526 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f88d 	bl	8006640 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2202      	movs	r2, #2
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3304      	adds	r3, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f001 f93d 	bl	80077b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a1a      	ldr	r2, [r3, #32]
 80065ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10f      	bne.n	80065d8 <HAL_TIM_OC_DeInit+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6a1a      	ldr	r2, [r3, #32]
 80065be:	f240 4344 	movw	r3, #1092	; 0x444
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d107      	bne.n	80065d8 <HAL_TIM_OC_DeInit+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f83b 	bl	8006654 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d109      	bne.n	8006690 <HAL_TIM_OC_Start_IT+0x28>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b01      	cmp	r3, #1
 8006686:	bf14      	ite	ne
 8006688:	2301      	movne	r3, #1
 800668a:	2300      	moveq	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e022      	b.n	80066d6 <HAL_TIM_OC_Start_IT+0x6e>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b04      	cmp	r3, #4
 8006694:	d109      	bne.n	80066aa <HAL_TIM_OC_Start_IT+0x42>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b01      	cmp	r3, #1
 80066a0:	bf14      	ite	ne
 80066a2:	2301      	movne	r3, #1
 80066a4:	2300      	moveq	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	e015      	b.n	80066d6 <HAL_TIM_OC_Start_IT+0x6e>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d109      	bne.n	80066c4 <HAL_TIM_OC_Start_IT+0x5c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	e008      	b.n	80066d6 <HAL_TIM_OC_Start_IT+0x6e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	bf14      	ite	ne
 80066d0:	2301      	movne	r3, #1
 80066d2:	2300      	moveq	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e0c7      	b.n	800686e <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d104      	bne.n	80066ee <HAL_TIM_OC_Start_IT+0x86>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ec:	e013      	b.n	8006716 <HAL_TIM_OC_Start_IT+0xae>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d104      	bne.n	80066fe <HAL_TIM_OC_Start_IT+0x96>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066fc:	e00b      	b.n	8006716 <HAL_TIM_OC_Start_IT+0xae>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b08      	cmp	r3, #8
 8006702:	d104      	bne.n	800670e <HAL_TIM_OC_Start_IT+0xa6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800670c:	e003      	b.n	8006716 <HAL_TIM_OC_Start_IT+0xae>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b0c      	cmp	r3, #12
 800671a:	d841      	bhi.n	80067a0 <HAL_TIM_OC_Start_IT+0x138>
 800671c:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <HAL_TIM_OC_Start_IT+0xbc>)
 800671e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006722:	bf00      	nop
 8006724:	08006759 	.word	0x08006759
 8006728:	080067a1 	.word	0x080067a1
 800672c:	080067a1 	.word	0x080067a1
 8006730:	080067a1 	.word	0x080067a1
 8006734:	0800676b 	.word	0x0800676b
 8006738:	080067a1 	.word	0x080067a1
 800673c:	080067a1 	.word	0x080067a1
 8006740:	080067a1 	.word	0x080067a1
 8006744:	0800677d 	.word	0x0800677d
 8006748:	080067a1 	.word	0x080067a1
 800674c:	080067a1 	.word	0x080067a1
 8006750:	080067a1 	.word	0x080067a1
 8006754:	0800678f 	.word	0x0800678f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0202 	orr.w	r2, r2, #2
 8006766:	60da      	str	r2, [r3, #12]
      break;
 8006768:	e01d      	b.n	80067a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0204 	orr.w	r2, r2, #4
 8006778:	60da      	str	r2, [r3, #12]
      break;
 800677a:	e014      	b.n	80067a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0208 	orr.w	r2, r2, #8
 800678a:	60da      	str	r2, [r3, #12]
      break;
 800678c:	e00b      	b.n	80067a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0210 	orr.w	r2, r2, #16
 800679c:	60da      	str	r2, [r3, #12]
      break;
 800679e:	e002      	b.n	80067a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	73fb      	strb	r3, [r7, #15]
      break;
 80067a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d15f      	bne.n	800686c <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2201      	movs	r2, #1
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 fb79 	bl	8007eac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a2e      	ldr	r2, [pc, #184]	; (8006878 <HAL_TIM_OC_Start_IT+0x210>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d004      	beq.n	80067ce <HAL_TIM_OC_Start_IT+0x166>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a2c      	ldr	r2, [pc, #176]	; (800687c <HAL_TIM_OC_Start_IT+0x214>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d101      	bne.n	80067d2 <HAL_TIM_OC_Start_IT+0x16a>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <HAL_TIM_OC_Start_IT+0x16c>
 80067d2:	2300      	movs	r3, #0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a22      	ldr	r2, [pc, #136]	; (8006878 <HAL_TIM_OC_Start_IT+0x210>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d022      	beq.n	8006838 <HAL_TIM_OC_Start_IT+0x1d0>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fa:	d01d      	beq.n	8006838 <HAL_TIM_OC_Start_IT+0x1d0>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1f      	ldr	r2, [pc, #124]	; (8006880 <HAL_TIM_OC_Start_IT+0x218>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d018      	beq.n	8006838 <HAL_TIM_OC_Start_IT+0x1d0>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1e      	ldr	r2, [pc, #120]	; (8006884 <HAL_TIM_OC_Start_IT+0x21c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d013      	beq.n	8006838 <HAL_TIM_OC_Start_IT+0x1d0>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1c      	ldr	r2, [pc, #112]	; (8006888 <HAL_TIM_OC_Start_IT+0x220>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00e      	beq.n	8006838 <HAL_TIM_OC_Start_IT+0x1d0>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a17      	ldr	r2, [pc, #92]	; (800687c <HAL_TIM_OC_Start_IT+0x214>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d009      	beq.n	8006838 <HAL_TIM_OC_Start_IT+0x1d0>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a18      	ldr	r2, [pc, #96]	; (800688c <HAL_TIM_OC_Start_IT+0x224>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_TIM_OC_Start_IT+0x1d0>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a17      	ldr	r2, [pc, #92]	; (8006890 <HAL_TIM_OC_Start_IT+0x228>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d111      	bne.n	800685c <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b06      	cmp	r3, #6
 8006848:	d010      	beq.n	800686c <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f042 0201 	orr.w	r2, r2, #1
 8006858:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685a:	e007      	b.n	800686c <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0201 	orr.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40010000 	.word	0x40010000
 800687c:	40010400 	.word	0x40010400
 8006880:	40000400 	.word	0x40000400
 8006884:	40000800 	.word	0x40000800
 8006888:	40000c00 	.word	0x40000c00
 800688c:	40014000 	.word	0x40014000
 8006890:	40001800 	.word	0x40001800

08006894 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e041      	b.n	800692a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fb f92a 	bl	8001b14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f000 ff70 	bl	80077b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d109      	bne.n	8006958 <HAL_TIM_PWM_Start+0x24>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	bf14      	ite	ne
 8006950:	2301      	movne	r3, #1
 8006952:	2300      	moveq	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	e022      	b.n	800699e <HAL_TIM_PWM_Start+0x6a>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b04      	cmp	r3, #4
 800695c:	d109      	bne.n	8006972 <HAL_TIM_PWM_Start+0x3e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	bf14      	ite	ne
 800696a:	2301      	movne	r3, #1
 800696c:	2300      	moveq	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	e015      	b.n	800699e <HAL_TIM_PWM_Start+0x6a>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b08      	cmp	r3, #8
 8006976:	d109      	bne.n	800698c <HAL_TIM_PWM_Start+0x58>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	e008      	b.n	800699e <HAL_TIM_PWM_Start+0x6a>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	bf14      	ite	ne
 8006998:	2301      	movne	r3, #1
 800699a:	2300      	moveq	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e07c      	b.n	8006aa0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <HAL_TIM_PWM_Start+0x82>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069b4:	e013      	b.n	80069de <HAL_TIM_PWM_Start+0xaa>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d104      	bne.n	80069c6 <HAL_TIM_PWM_Start+0x92>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c4:	e00b      	b.n	80069de <HAL_TIM_PWM_Start+0xaa>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d104      	bne.n	80069d6 <HAL_TIM_PWM_Start+0xa2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069d4:	e003      	b.n	80069de <HAL_TIM_PWM_Start+0xaa>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2201      	movs	r2, #1
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 fa60 	bl	8007eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a2d      	ldr	r2, [pc, #180]	; (8006aa8 <HAL_TIM_PWM_Start+0x174>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d004      	beq.n	8006a00 <HAL_TIM_PWM_Start+0xcc>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a2c      	ldr	r2, [pc, #176]	; (8006aac <HAL_TIM_PWM_Start+0x178>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d101      	bne.n	8006a04 <HAL_TIM_PWM_Start+0xd0>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <HAL_TIM_PWM_Start+0xd2>
 8006a04:	2300      	movs	r3, #0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a22      	ldr	r2, [pc, #136]	; (8006aa8 <HAL_TIM_PWM_Start+0x174>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d022      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2c:	d01d      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1f      	ldr	r2, [pc, #124]	; (8006ab0 <HAL_TIM_PWM_Start+0x17c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d018      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1d      	ldr	r2, [pc, #116]	; (8006ab4 <HAL_TIM_PWM_Start+0x180>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1c      	ldr	r2, [pc, #112]	; (8006ab8 <HAL_TIM_PWM_Start+0x184>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00e      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a16      	ldr	r2, [pc, #88]	; (8006aac <HAL_TIM_PWM_Start+0x178>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d009      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a18      	ldr	r2, [pc, #96]	; (8006abc <HAL_TIM_PWM_Start+0x188>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d004      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a16      	ldr	r2, [pc, #88]	; (8006ac0 <HAL_TIM_PWM_Start+0x18c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d111      	bne.n	8006a8e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b06      	cmp	r3, #6
 8006a7a:	d010      	beq.n	8006a9e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8c:	e007      	b.n	8006a9e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40010400 	.word	0x40010400
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40000c00 	.word	0x40000c00
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	40001800 	.word	0x40001800

08006ac4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 f9e8 	bl	8007eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a2e      	ldr	r2, [pc, #184]	; (8006b9c <HAL_TIM_PWM_Stop+0xd8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <HAL_TIM_PWM_Stop+0x2c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2d      	ldr	r2, [pc, #180]	; (8006ba0 <HAL_TIM_PWM_Stop+0xdc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d101      	bne.n	8006af4 <HAL_TIM_PWM_Stop+0x30>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <HAL_TIM_PWM_Stop+0x32>
 8006af4:	2300      	movs	r3, #0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d017      	beq.n	8006b2a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6a1a      	ldr	r2, [r3, #32]
 8006b00:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b04:	4013      	ands	r3, r2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10f      	bne.n	8006b2a <HAL_TIM_PWM_Stop+0x66>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6a1a      	ldr	r2, [r3, #32]
 8006b10:	f240 4344 	movw	r3, #1092	; 0x444
 8006b14:	4013      	ands	r3, r2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d107      	bne.n	8006b2a <HAL_TIM_PWM_Stop+0x66>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6a1a      	ldr	r2, [r3, #32]
 8006b30:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b34:	4013      	ands	r3, r2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10f      	bne.n	8006b5a <HAL_TIM_PWM_Stop+0x96>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6a1a      	ldr	r2, [r3, #32]
 8006b40:	f240 4344 	movw	r3, #1092	; 0x444
 8006b44:	4013      	ands	r3, r2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d107      	bne.n	8006b5a <HAL_TIM_PWM_Stop+0x96>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0201 	bic.w	r2, r2, #1
 8006b58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d104      	bne.n	8006b6a <HAL_TIM_PWM_Stop+0xa6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b68:	e013      	b.n	8006b92 <HAL_TIM_PWM_Stop+0xce>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	d104      	bne.n	8006b7a <HAL_TIM_PWM_Stop+0xb6>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b78:	e00b      	b.n	8006b92 <HAL_TIM_PWM_Stop+0xce>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_PWM_Stop+0xc6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b88:	e003      	b.n	8006b92 <HAL_TIM_PWM_Stop+0xce>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40010000 	.word	0x40010000
 8006ba0:	40010400 	.word	0x40010400

08006ba4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e041      	b.n	8006c3a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f88d 	bl	8006cea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3304      	adds	r3, #4
 8006be0:	4619      	mov	r1, r3
 8006be2:	4610      	mov	r0, r2
 8006be4:	f000 fde8 	bl	80077b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b082      	sub	sp, #8
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6a1a      	ldr	r2, [r3, #32]
 8006c58:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10f      	bne.n	8006c82 <HAL_TIM_IC_DeInit+0x40>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6a1a      	ldr	r2, [r3, #32]
 8006c68:	f240 4344 	movw	r3, #1092	; 0x444
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d107      	bne.n	8006c82 <HAL_TIM_IC_DeInit+0x40>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0201 	bic.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f83b 	bl	8006cfe <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
	...

08006d14 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d104      	bne.n	8006d32 <HAL_TIM_IC_Start_IT+0x1e>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	e013      	b.n	8006d5a <HAL_TIM_IC_Start_IT+0x46>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d104      	bne.n	8006d42 <HAL_TIM_IC_Start_IT+0x2e>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	e00b      	b.n	8006d5a <HAL_TIM_IC_Start_IT+0x46>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d104      	bne.n	8006d52 <HAL_TIM_IC_Start_IT+0x3e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	e003      	b.n	8006d5a <HAL_TIM_IC_Start_IT+0x46>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d104      	bne.n	8006d6c <HAL_TIM_IC_Start_IT+0x58>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	e013      	b.n	8006d94 <HAL_TIM_IC_Start_IT+0x80>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d104      	bne.n	8006d7c <HAL_TIM_IC_Start_IT+0x68>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	e00b      	b.n	8006d94 <HAL_TIM_IC_Start_IT+0x80>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	d104      	bne.n	8006d8c <HAL_TIM_IC_Start_IT+0x78>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	e003      	b.n	8006d94 <HAL_TIM_IC_Start_IT+0x80>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d102      	bne.n	8006da2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d9c:	7b7b      	ldrb	r3, [r7, #13]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d001      	beq.n	8006da6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e0cc      	b.n	8006f40 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_IC_Start_IT+0xa2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006db4:	e013      	b.n	8006dde <HAL_TIM_IC_Start_IT+0xca>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d104      	bne.n	8006dc6 <HAL_TIM_IC_Start_IT+0xb2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dc4:	e00b      	b.n	8006dde <HAL_TIM_IC_Start_IT+0xca>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d104      	bne.n	8006dd6 <HAL_TIM_IC_Start_IT+0xc2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dd4:	e003      	b.n	8006dde <HAL_TIM_IC_Start_IT+0xca>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d104      	bne.n	8006dee <HAL_TIM_IC_Start_IT+0xda>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dec:	e013      	b.n	8006e16 <HAL_TIM_IC_Start_IT+0x102>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d104      	bne.n	8006dfe <HAL_TIM_IC_Start_IT+0xea>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dfc:	e00b      	b.n	8006e16 <HAL_TIM_IC_Start_IT+0x102>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d104      	bne.n	8006e0e <HAL_TIM_IC_Start_IT+0xfa>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e0c:	e003      	b.n	8006e16 <HAL_TIM_IC_Start_IT+0x102>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2202      	movs	r2, #2
 8006e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b0c      	cmp	r3, #12
 8006e1a:	d841      	bhi.n	8006ea0 <HAL_TIM_IC_Start_IT+0x18c>
 8006e1c:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <HAL_TIM_IC_Start_IT+0x110>)
 8006e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006e59 	.word	0x08006e59
 8006e28:	08006ea1 	.word	0x08006ea1
 8006e2c:	08006ea1 	.word	0x08006ea1
 8006e30:	08006ea1 	.word	0x08006ea1
 8006e34:	08006e6b 	.word	0x08006e6b
 8006e38:	08006ea1 	.word	0x08006ea1
 8006e3c:	08006ea1 	.word	0x08006ea1
 8006e40:	08006ea1 	.word	0x08006ea1
 8006e44:	08006e7d 	.word	0x08006e7d
 8006e48:	08006ea1 	.word	0x08006ea1
 8006e4c:	08006ea1 	.word	0x08006ea1
 8006e50:	08006ea1 	.word	0x08006ea1
 8006e54:	08006e8f 	.word	0x08006e8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0202 	orr.w	r2, r2, #2
 8006e66:	60da      	str	r2, [r3, #12]
      break;
 8006e68:	e01d      	b.n	8006ea6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0204 	orr.w	r2, r2, #4
 8006e78:	60da      	str	r2, [r3, #12]
      break;
 8006e7a:	e014      	b.n	8006ea6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0208 	orr.w	r2, r2, #8
 8006e8a:	60da      	str	r2, [r3, #12]
      break;
 8006e8c:	e00b      	b.n	8006ea6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0210 	orr.w	r2, r2, #16
 8006e9c:	60da      	str	r2, [r3, #12]
      break;
 8006e9e:	e002      	b.n	8006ea6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d148      	bne.n	8006f3e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fff9 	bl	8007eac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a22      	ldr	r2, [pc, #136]	; (8006f48 <HAL_TIM_IC_Start_IT+0x234>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d022      	beq.n	8006f0a <HAL_TIM_IC_Start_IT+0x1f6>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ecc:	d01d      	beq.n	8006f0a <HAL_TIM_IC_Start_IT+0x1f6>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1e      	ldr	r2, [pc, #120]	; (8006f4c <HAL_TIM_IC_Start_IT+0x238>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d018      	beq.n	8006f0a <HAL_TIM_IC_Start_IT+0x1f6>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <HAL_TIM_IC_Start_IT+0x23c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <HAL_TIM_IC_Start_IT+0x1f6>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1b      	ldr	r2, [pc, #108]	; (8006f54 <HAL_TIM_IC_Start_IT+0x240>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00e      	beq.n	8006f0a <HAL_TIM_IC_Start_IT+0x1f6>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <HAL_TIM_IC_Start_IT+0x244>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d009      	beq.n	8006f0a <HAL_TIM_IC_Start_IT+0x1f6>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HAL_TIM_IC_Start_IT+0x248>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d004      	beq.n	8006f0a <HAL_TIM_IC_Start_IT+0x1f6>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a16      	ldr	r2, [pc, #88]	; (8006f60 <HAL_TIM_IC_Start_IT+0x24c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d111      	bne.n	8006f2e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b06      	cmp	r3, #6
 8006f1a:	d010      	beq.n	8006f3e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2c:	e007      	b.n	8006f3e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0201 	orr.w	r2, r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40010000 	.word	0x40010000
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800
 8006f54:	40000c00 	.word	0x40000c00
 8006f58:	40010400 	.word	0x40010400
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40001800 	.word	0x40001800

08006f64 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b0c      	cmp	r3, #12
 8006f76:	d841      	bhi.n	8006ffc <HAL_TIM_IC_Stop_IT+0x98>
 8006f78:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <HAL_TIM_IC_Stop_IT+0x1c>)
 8006f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7e:	bf00      	nop
 8006f80:	08006fb5 	.word	0x08006fb5
 8006f84:	08006ffd 	.word	0x08006ffd
 8006f88:	08006ffd 	.word	0x08006ffd
 8006f8c:	08006ffd 	.word	0x08006ffd
 8006f90:	08006fc7 	.word	0x08006fc7
 8006f94:	08006ffd 	.word	0x08006ffd
 8006f98:	08006ffd 	.word	0x08006ffd
 8006f9c:	08006ffd 	.word	0x08006ffd
 8006fa0:	08006fd9 	.word	0x08006fd9
 8006fa4:	08006ffd 	.word	0x08006ffd
 8006fa8:	08006ffd 	.word	0x08006ffd
 8006fac:	08006ffd 	.word	0x08006ffd
 8006fb0:	08006feb 	.word	0x08006feb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0202 	bic.w	r2, r2, #2
 8006fc2:	60da      	str	r2, [r3, #12]
      break;
 8006fc4:	e01d      	b.n	8007002 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0204 	bic.w	r2, r2, #4
 8006fd4:	60da      	str	r2, [r3, #12]
      break;
 8006fd6:	e014      	b.n	8007002 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0208 	bic.w	r2, r2, #8
 8006fe6:	60da      	str	r2, [r3, #12]
      break;
 8006fe8:	e00b      	b.n	8007002 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0210 	bic.w	r2, r2, #16
 8006ff8:	60da      	str	r2, [r3, #12]
      break;
 8006ffa:	e002      	b.n	8007002 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8007000:	bf00      	nop
  }

  if (status == HAL_OK)
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d156      	bne.n	80070b6 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2200      	movs	r2, #0
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	4618      	mov	r0, r3
 8007012:	f000 ff4b 	bl	8007eac <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6a1a      	ldr	r2, [r3, #32]
 800701c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007020:	4013      	ands	r3, r2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10f      	bne.n	8007046 <HAL_TIM_IC_Stop_IT+0xe2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6a1a      	ldr	r2, [r3, #32]
 800702c:	f240 4344 	movw	r3, #1092	; 0x444
 8007030:	4013      	ands	r3, r2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d107      	bne.n	8007046 <HAL_TIM_IC_Stop_IT+0xe2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0201 	bic.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d104      	bne.n	8007056 <HAL_TIM_IC_Stop_IT+0xf2>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007054:	e013      	b.n	800707e <HAL_TIM_IC_Stop_IT+0x11a>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b04      	cmp	r3, #4
 800705a:	d104      	bne.n	8007066 <HAL_TIM_IC_Stop_IT+0x102>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007064:	e00b      	b.n	800707e <HAL_TIM_IC_Stop_IT+0x11a>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b08      	cmp	r3, #8
 800706a:	d104      	bne.n	8007076 <HAL_TIM_IC_Stop_IT+0x112>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007074:	e003      	b.n	800707e <HAL_TIM_IC_Stop_IT+0x11a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <HAL_TIM_IC_Stop_IT+0x12a>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800708c:	e013      	b.n	80070b6 <HAL_TIM_IC_Stop_IT+0x152>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d104      	bne.n	800709e <HAL_TIM_IC_Stop_IT+0x13a>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800709c:	e00b      	b.n	80070b6 <HAL_TIM_IC_Stop_IT+0x152>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_IC_Stop_IT+0x14a>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ac:	e003      	b.n	80070b6 <HAL_TIM_IC_Stop_IT+0x152>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e097      	b.n	8007204 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fa fccb 	bl	8001a84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2202      	movs	r2, #2
 80070f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6812      	ldr	r2, [r2, #0]
 8007100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007104:	f023 0307 	bic.w	r3, r3, #7
 8007108:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3304      	adds	r3, #4
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f000 fb4f 	bl	80077b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007142:	f023 0303 	bic.w	r3, r3, #3
 8007146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	4313      	orrs	r3, r2
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007160:	f023 030c 	bic.w	r3, r3, #12
 8007164:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800716c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	4313      	orrs	r3, r2
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	011a      	lsls	r2, r3, #4
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	031b      	lsls	r3, r3, #12
 8007190:	4313      	orrs	r3, r2
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4313      	orrs	r3, r2
 8007196:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800719e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80071a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	4313      	orrs	r3, r2
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b02      	cmp	r3, #2
 8007220:	d122      	bne.n	8007268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b02      	cmp	r3, #2
 800722e:	d11b      	bne.n	8007268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0202 	mvn.w	r2, #2
 8007238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f001 ff30 	bl	80090b4 <HAL_TIM_IC_CaptureCallback>
 8007254:	e005      	b.n	8007262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 ff04 	bl	8009064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa97 	bl	8007790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b04      	cmp	r3, #4
 8007274:	d122      	bne.n	80072bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b04      	cmp	r3, #4
 8007282:	d11b      	bne.n	80072bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0204 	mvn.w	r2, #4
 800728c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 ff06 	bl	80090b4 <HAL_TIM_IC_CaptureCallback>
 80072a8:	e005      	b.n	80072b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 feda 	bl	8009064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa6d 	bl	8007790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	d122      	bne.n	8007310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0308 	and.w	r3, r3, #8
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d11b      	bne.n	8007310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0208 	mvn.w	r2, #8
 80072e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2204      	movs	r2, #4
 80072e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 fedc 	bl	80090b4 <HAL_TIM_IC_CaptureCallback>
 80072fc:	e005      	b.n	800730a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 feb0 	bl	8009064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fa43 	bl	8007790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f003 0310 	and.w	r3, r3, #16
 800731a:	2b10      	cmp	r3, #16
 800731c:	d122      	bne.n	8007364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f003 0310 	and.w	r3, r3, #16
 8007328:	2b10      	cmp	r3, #16
 800732a:	d11b      	bne.n	8007364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0210 	mvn.w	r2, #16
 8007334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2208      	movs	r2, #8
 800733a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 feb2 	bl	80090b4 <HAL_TIM_IC_CaptureCallback>
 8007350:	e005      	b.n	800735e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 fe86 	bl	8009064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fa19 	bl	8007790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b01      	cmp	r3, #1
 8007370:	d10e      	bne.n	8007390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b01      	cmp	r3, #1
 800737e:	d107      	bne.n	8007390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0201 	mvn.w	r2, #1
 8007388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 feca 	bl	8009124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739a:	2b80      	cmp	r3, #128	; 0x80
 800739c:	d10e      	bne.n	80073bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a8:	2b80      	cmp	r3, #128	; 0x80
 80073aa:	d107      	bne.n	80073bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fe24 	bl	8008004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c6:	2b40      	cmp	r3, #64	; 0x40
 80073c8:	d10e      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	d107      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f9de 	bl	80077a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	d10e      	bne.n	8007414 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f003 0320 	and.w	r3, r3, #32
 8007400:	2b20      	cmp	r3, #32
 8007402:	d107      	bne.n	8007414 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f06f 0220 	mvn.w	r2, #32
 800740c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fdee 	bl	8007ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007436:	2302      	movs	r3, #2
 8007438:	e048      	b.n	80074cc <HAL_TIM_OC_ConfigChannel+0xb0>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b0c      	cmp	r3, #12
 8007446:	d839      	bhi.n	80074bc <HAL_TIM_OC_ConfigChannel+0xa0>
 8007448:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <HAL_TIM_OC_ConfigChannel+0x34>)
 800744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744e:	bf00      	nop
 8007450:	08007485 	.word	0x08007485
 8007454:	080074bd 	.word	0x080074bd
 8007458:	080074bd 	.word	0x080074bd
 800745c:	080074bd 	.word	0x080074bd
 8007460:	08007493 	.word	0x08007493
 8007464:	080074bd 	.word	0x080074bd
 8007468:	080074bd 	.word	0x080074bd
 800746c:	080074bd 	.word	0x080074bd
 8007470:	080074a1 	.word	0x080074a1
 8007474:	080074bd 	.word	0x080074bd
 8007478:	080074bd 	.word	0x080074bd
 800747c:	080074bd 	.word	0x080074bd
 8007480:	080074af 	.word	0x080074af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fa34 	bl	80078f8 <TIM_OC1_SetConfig>
      break;
 8007490:	e017      	b.n	80074c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fa9d 	bl	80079d8 <TIM_OC2_SetConfig>
      break;
 800749e:	e010      	b.n	80074c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fb0c 	bl	8007ac4 <TIM_OC3_SetConfig>
      break;
 80074ac:	e009      	b.n	80074c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fb79 	bl	8007bac <TIM_OC4_SetConfig>
      break;
 80074ba:	e002      	b.n	80074c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	75fb      	strb	r3, [r7, #23]
      break;
 80074c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e088      	b.n	8007604 <HAL_TIM_IC_ConfigChannel+0x130>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d11b      	bne.n	8007538 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	6819      	ldr	r1, [r3, #0]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f000 fba2 	bl	8007c58 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 020c 	bic.w	r2, r2, #12
 8007522:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6999      	ldr	r1, [r3, #24]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	619a      	str	r2, [r3, #24]
 8007536:	e060      	b.n	80075fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b04      	cmp	r3, #4
 800753c:	d11c      	bne.n	8007578 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6819      	ldr	r1, [r3, #0]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f000 fbf7 	bl	8007d40 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	699a      	ldr	r2, [r3, #24]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007560:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6999      	ldr	r1, [r3, #24]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	021a      	lsls	r2, r3, #8
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	619a      	str	r2, [r3, #24]
 8007576:	e040      	b.n	80075fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b08      	cmp	r3, #8
 800757c:	d11b      	bne.n	80075b6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	6819      	ldr	r1, [r3, #0]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f000 fc14 	bl	8007dba <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 020c 	bic.w	r2, r2, #12
 80075a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69d9      	ldr	r1, [r3, #28]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	61da      	str	r2, [r3, #28]
 80075b4:	e021      	b.n	80075fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b0c      	cmp	r3, #12
 80075ba:	d11c      	bne.n	80075f6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	6819      	ldr	r1, [r3, #0]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f000 fc31 	bl	8007e32 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	69da      	ldr	r2, [r3, #28]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80075de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	69d9      	ldr	r1, [r3, #28]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	021a      	lsls	r2, r3, #8
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	61da      	str	r2, [r3, #28]
 80075f4:	e001      	b.n	80075fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007626:	2302      	movs	r3, #2
 8007628:	e0ae      	b.n	8007788 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b0c      	cmp	r3, #12
 8007636:	f200 809f 	bhi.w	8007778 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800763a:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007675 	.word	0x08007675
 8007644:	08007779 	.word	0x08007779
 8007648:	08007779 	.word	0x08007779
 800764c:	08007779 	.word	0x08007779
 8007650:	080076b5 	.word	0x080076b5
 8007654:	08007779 	.word	0x08007779
 8007658:	08007779 	.word	0x08007779
 800765c:	08007779 	.word	0x08007779
 8007660:	080076f7 	.word	0x080076f7
 8007664:	08007779 	.word	0x08007779
 8007668:	08007779 	.word	0x08007779
 800766c:	08007779 	.word	0x08007779
 8007670:	08007737 	.word	0x08007737
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f93c 	bl	80078f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699a      	ldr	r2, [r3, #24]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0208 	orr.w	r2, r2, #8
 800768e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699a      	ldr	r2, [r3, #24]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0204 	bic.w	r2, r2, #4
 800769e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6999      	ldr	r1, [r3, #24]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	619a      	str	r2, [r3, #24]
      break;
 80076b2:	e064      	b.n	800777e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f98c 	bl	80079d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699a      	ldr	r2, [r3, #24]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6999      	ldr	r1, [r3, #24]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	021a      	lsls	r2, r3, #8
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	619a      	str	r2, [r3, #24]
      break;
 80076f4:	e043      	b.n	800777e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 f9e1 	bl	8007ac4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69da      	ldr	r2, [r3, #28]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f042 0208 	orr.w	r2, r2, #8
 8007710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69da      	ldr	r2, [r3, #28]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0204 	bic.w	r2, r2, #4
 8007720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69d9      	ldr	r1, [r3, #28]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	691a      	ldr	r2, [r3, #16]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	61da      	str	r2, [r3, #28]
      break;
 8007734:	e023      	b.n	800777e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fa35 	bl	8007bac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69da      	ldr	r2, [r3, #28]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69d9      	ldr	r1, [r3, #28]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	021a      	lsls	r2, r3, #8
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	61da      	str	r2, [r3, #28]
      break;
 8007776:	e002      	b.n	800777e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	75fb      	strb	r3, [r7, #23]
      break;
 800777c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007786:	7dfb      	ldrb	r3, [r7, #23]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a40      	ldr	r2, [pc, #256]	; (80078cc <TIM_Base_SetConfig+0x114>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d013      	beq.n	80077f8 <TIM_Base_SetConfig+0x40>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d6:	d00f      	beq.n	80077f8 <TIM_Base_SetConfig+0x40>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a3d      	ldr	r2, [pc, #244]	; (80078d0 <TIM_Base_SetConfig+0x118>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00b      	beq.n	80077f8 <TIM_Base_SetConfig+0x40>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a3c      	ldr	r2, [pc, #240]	; (80078d4 <TIM_Base_SetConfig+0x11c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d007      	beq.n	80077f8 <TIM_Base_SetConfig+0x40>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a3b      	ldr	r2, [pc, #236]	; (80078d8 <TIM_Base_SetConfig+0x120>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_Base_SetConfig+0x40>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a3a      	ldr	r2, [pc, #232]	; (80078dc <TIM_Base_SetConfig+0x124>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d108      	bne.n	800780a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a2f      	ldr	r2, [pc, #188]	; (80078cc <TIM_Base_SetConfig+0x114>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d02b      	beq.n	800786a <TIM_Base_SetConfig+0xb2>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007818:	d027      	beq.n	800786a <TIM_Base_SetConfig+0xb2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a2c      	ldr	r2, [pc, #176]	; (80078d0 <TIM_Base_SetConfig+0x118>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d023      	beq.n	800786a <TIM_Base_SetConfig+0xb2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a2b      	ldr	r2, [pc, #172]	; (80078d4 <TIM_Base_SetConfig+0x11c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d01f      	beq.n	800786a <TIM_Base_SetConfig+0xb2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a2a      	ldr	r2, [pc, #168]	; (80078d8 <TIM_Base_SetConfig+0x120>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d01b      	beq.n	800786a <TIM_Base_SetConfig+0xb2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a29      	ldr	r2, [pc, #164]	; (80078dc <TIM_Base_SetConfig+0x124>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d017      	beq.n	800786a <TIM_Base_SetConfig+0xb2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a28      	ldr	r2, [pc, #160]	; (80078e0 <TIM_Base_SetConfig+0x128>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d013      	beq.n	800786a <TIM_Base_SetConfig+0xb2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a27      	ldr	r2, [pc, #156]	; (80078e4 <TIM_Base_SetConfig+0x12c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00f      	beq.n	800786a <TIM_Base_SetConfig+0xb2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a26      	ldr	r2, [pc, #152]	; (80078e8 <TIM_Base_SetConfig+0x130>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d00b      	beq.n	800786a <TIM_Base_SetConfig+0xb2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a25      	ldr	r2, [pc, #148]	; (80078ec <TIM_Base_SetConfig+0x134>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d007      	beq.n	800786a <TIM_Base_SetConfig+0xb2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a24      	ldr	r2, [pc, #144]	; (80078f0 <TIM_Base_SetConfig+0x138>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d003      	beq.n	800786a <TIM_Base_SetConfig+0xb2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a23      	ldr	r2, [pc, #140]	; (80078f4 <TIM_Base_SetConfig+0x13c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d108      	bne.n	800787c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a0a      	ldr	r2, [pc, #40]	; (80078cc <TIM_Base_SetConfig+0x114>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d003      	beq.n	80078b0 <TIM_Base_SetConfig+0xf8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a0c      	ldr	r2, [pc, #48]	; (80078dc <TIM_Base_SetConfig+0x124>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d103      	bne.n	80078b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	691a      	ldr	r2, [r3, #16]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	615a      	str	r2, [r3, #20]
}
 80078be:	bf00      	nop
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40000400 	.word	0x40000400
 80078d4:	40000800 	.word	0x40000800
 80078d8:	40000c00 	.word	0x40000c00
 80078dc:	40010400 	.word	0x40010400
 80078e0:	40014000 	.word	0x40014000
 80078e4:	40014400 	.word	0x40014400
 80078e8:	40014800 	.word	0x40014800
 80078ec:	40001800 	.word	0x40001800
 80078f0:	40001c00 	.word	0x40001c00
 80078f4:	40002000 	.word	0x40002000

080078f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f023 0201 	bic.w	r2, r3, #1
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0303 	bic.w	r3, r3, #3
 800792e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f023 0302 	bic.w	r3, r3, #2
 8007940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a20      	ldr	r2, [pc, #128]	; (80079d0 <TIM_OC1_SetConfig+0xd8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d003      	beq.n	800795c <TIM_OC1_SetConfig+0x64>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a1f      	ldr	r2, [pc, #124]	; (80079d4 <TIM_OC1_SetConfig+0xdc>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d10c      	bne.n	8007976 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f023 0308 	bic.w	r3, r3, #8
 8007962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	4313      	orrs	r3, r2
 800796c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f023 0304 	bic.w	r3, r3, #4
 8007974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a15      	ldr	r2, [pc, #84]	; (80079d0 <TIM_OC1_SetConfig+0xd8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d003      	beq.n	8007986 <TIM_OC1_SetConfig+0x8e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a14      	ldr	r2, [pc, #80]	; (80079d4 <TIM_OC1_SetConfig+0xdc>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d111      	bne.n	80079aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800798c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	621a      	str	r2, [r3, #32]
}
 80079c4:	bf00      	nop
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	40010000 	.word	0x40010000
 80079d4:	40010400 	.word	0x40010400

080079d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f023 0210 	bic.w	r2, r3, #16
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f023 0320 	bic.w	r3, r3, #32
 8007a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	011b      	lsls	r3, r3, #4
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a22      	ldr	r2, [pc, #136]	; (8007abc <TIM_OC2_SetConfig+0xe4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d003      	beq.n	8007a40 <TIM_OC2_SetConfig+0x68>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a21      	ldr	r2, [pc, #132]	; (8007ac0 <TIM_OC2_SetConfig+0xe8>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d10d      	bne.n	8007a5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a17      	ldr	r2, [pc, #92]	; (8007abc <TIM_OC2_SetConfig+0xe4>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_OC2_SetConfig+0x94>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a16      	ldr	r2, [pc, #88]	; (8007ac0 <TIM_OC2_SetConfig+0xe8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d113      	bne.n	8007a94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	621a      	str	r2, [r3, #32]
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	40010000 	.word	0x40010000
 8007ac0:	40010400 	.word	0x40010400

08007ac4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a21      	ldr	r2, [pc, #132]	; (8007ba4 <TIM_OC3_SetConfig+0xe0>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d003      	beq.n	8007b2a <TIM_OC3_SetConfig+0x66>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a20      	ldr	r2, [pc, #128]	; (8007ba8 <TIM_OC3_SetConfig+0xe4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d10d      	bne.n	8007b46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a16      	ldr	r2, [pc, #88]	; (8007ba4 <TIM_OC3_SetConfig+0xe0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d003      	beq.n	8007b56 <TIM_OC3_SetConfig+0x92>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <TIM_OC3_SetConfig+0xe4>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d113      	bne.n	8007b7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	011b      	lsls	r3, r3, #4
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	621a      	str	r2, [r3, #32]
}
 8007b98:	bf00      	nop
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	40010000 	.word	0x40010000
 8007ba8:	40010400 	.word	0x40010400

08007bac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	021b      	lsls	r3, r3, #8
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	031b      	lsls	r3, r3, #12
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a12      	ldr	r2, [pc, #72]	; (8007c50 <TIM_OC4_SetConfig+0xa4>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d003      	beq.n	8007c14 <TIM_OC4_SetConfig+0x68>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a11      	ldr	r2, [pc, #68]	; (8007c54 <TIM_OC4_SetConfig+0xa8>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d109      	bne.n	8007c28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	019b      	lsls	r3, r3, #6
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	621a      	str	r2, [r3, #32]
}
 8007c42:	bf00      	nop
 8007c44:	371c      	adds	r7, #28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40010400 	.word	0x40010400

08007c58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	f023 0201 	bic.w	r2, r3, #1
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4a28      	ldr	r2, [pc, #160]	; (8007d24 <TIM_TI1_SetConfig+0xcc>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d01b      	beq.n	8007cbe <TIM_TI1_SetConfig+0x66>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8c:	d017      	beq.n	8007cbe <TIM_TI1_SetConfig+0x66>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4a25      	ldr	r2, [pc, #148]	; (8007d28 <TIM_TI1_SetConfig+0xd0>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d013      	beq.n	8007cbe <TIM_TI1_SetConfig+0x66>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4a24      	ldr	r2, [pc, #144]	; (8007d2c <TIM_TI1_SetConfig+0xd4>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d00f      	beq.n	8007cbe <TIM_TI1_SetConfig+0x66>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4a23      	ldr	r2, [pc, #140]	; (8007d30 <TIM_TI1_SetConfig+0xd8>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00b      	beq.n	8007cbe <TIM_TI1_SetConfig+0x66>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4a22      	ldr	r2, [pc, #136]	; (8007d34 <TIM_TI1_SetConfig+0xdc>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d007      	beq.n	8007cbe <TIM_TI1_SetConfig+0x66>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4a21      	ldr	r2, [pc, #132]	; (8007d38 <TIM_TI1_SetConfig+0xe0>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d003      	beq.n	8007cbe <TIM_TI1_SetConfig+0x66>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4a20      	ldr	r2, [pc, #128]	; (8007d3c <TIM_TI1_SetConfig+0xe4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d101      	bne.n	8007cc2 <TIM_TI1_SetConfig+0x6a>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e000      	b.n	8007cc4 <TIM_TI1_SetConfig+0x6c>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d008      	beq.n	8007cda <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f023 0303 	bic.w	r3, r3, #3
 8007cce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	e003      	b.n	8007ce2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f043 0301 	orr.w	r3, r3, #1
 8007ce0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f023 030a 	bic.w	r3, r3, #10
 8007cfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f003 030a 	and.w	r3, r3, #10
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	621a      	str	r2, [r3, #32]
}
 8007d16:	bf00      	nop
 8007d18:	371c      	adds	r7, #28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	40010000 	.word	0x40010000
 8007d28:	40000400 	.word	0x40000400
 8007d2c:	40000800 	.word	0x40000800
 8007d30:	40000c00 	.word	0x40000c00
 8007d34:	40010400 	.word	0x40010400
 8007d38:	40014000 	.word	0x40014000
 8007d3c:	40001800 	.word	0x40001800

08007d40 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	f023 0210 	bic.w	r2, r3, #16
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	031b      	lsls	r3, r3, #12
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	621a      	str	r2, [r3, #32]
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b087      	sub	sp, #28
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
 8007dc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f023 0303 	bic.w	r3, r3, #3
 8007de6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007df6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007e0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	621a      	str	r2, [r3, #32]
}
 8007e26:	bf00      	nop
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b087      	sub	sp, #28
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	60f8      	str	r0, [r7, #12]
 8007e3a:	60b9      	str	r1, [r7, #8]
 8007e3c:	607a      	str	r2, [r7, #4]
 8007e3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	021b      	lsls	r3, r3, #8
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	031b      	lsls	r3, r3, #12
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007e84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	031b      	lsls	r3, r3, #12
 8007e8a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	621a      	str	r2, [r3, #32]
}
 8007ea0:	bf00      	nop
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f003 031f 	and.w	r3, r3, #31
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6a1a      	ldr	r2, [r3, #32]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	43db      	mvns	r3, r3
 8007ece:	401a      	ands	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6a1a      	ldr	r2, [r3, #32]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f003 031f 	and.w	r3, r3, #31
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	621a      	str	r2, [r3, #32]
}
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d101      	bne.n	8007f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e05a      	b.n	8007fc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a21      	ldr	r2, [pc, #132]	; (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d022      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5c:	d01d      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a1d      	ldr	r2, [pc, #116]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d018      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a1b      	ldr	r2, [pc, #108]	; (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d013      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1a      	ldr	r2, [pc, #104]	; (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d00e      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a18      	ldr	r2, [pc, #96]	; (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d009      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a17      	ldr	r2, [pc, #92]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d004      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a15      	ldr	r2, [pc, #84]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d10c      	bne.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	40010000 	.word	0x40010000
 8007fd8:	40000400 	.word	0x40000400
 8007fdc:	40000800 	.word	0x40000800
 8007fe0:	40000c00 	.word	0x40000c00
 8007fe4:	40010400 	.word	0x40010400
 8007fe8:	40014000 	.word	0x40014000
 8007fec:	40001800 	.word	0x40001800

08007ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <f_gui_ClearLowerLcdPart>:
	"Chart"
};


static inline void f_gui_ClearLowerLcdPart()
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
	for(uint8_t i = 2; i < 8; i++) f_lcd_Clear(0, 127, i);
 800801e:	2302      	movs	r3, #2
 8008020:	71fb      	strb	r3, [r7, #7]
 8008022:	e008      	b.n	8008036 <f_gui_ClearLowerLcdPart+0x1e>
 8008024:	79fb      	ldrb	r3, [r7, #7]
 8008026:	461a      	mov	r2, r3
 8008028:	217f      	movs	r1, #127	; 0x7f
 800802a:	2000      	movs	r0, #0
 800802c:	f000 f9ac 	bl	8008388 <f_lcd_Clear>
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	3301      	adds	r3, #1
 8008034:	71fb      	strb	r3, [r7, #7]
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	2b07      	cmp	r3, #7
 800803a:	d9f3      	bls.n	8008024 <f_gui_ClearLowerLcdPart+0xc>
}
 800803c:	bf00      	nop
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <f_gui_DrawChart>:


//=============== PUBLIC FUNCTIONS ==========================

void f_gui_DrawChart(uint8_t *data, uint8_t length, uint8_t shift)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	70fb      	strb	r3, [r7, #3]
 8008052:	4613      	mov	r3, r2
 8008054:	70bb      	strb	r3, [r7, #2]
	if(length > 120) return;
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	2b78      	cmp	r3, #120	; 0x78
 800805a:	d835      	bhi.n	80080c8 <f_gui_DrawChart+0x82>

	f_gui_ClearLowerLcdPart();
 800805c:	f7ff ffdc 	bl	8008018 <f_gui_ClearLowerLcdPart>

	for(uint8_t i = 0; i < length; i++)
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]
 8008064:	e01f      	b.n	80080a6 <f_gui_DrawChart+0x60>
	{
		uint8_t chartValue = 62 - data[(i + shift) % length]; //offset 2px
 8008066:	7bfa      	ldrb	r2, [r7, #15]
 8008068:	78bb      	ldrb	r3, [r7, #2]
 800806a:	4413      	add	r3, r2
 800806c:	78fa      	ldrb	r2, [r7, #3]
 800806e:	fb93 f1f2 	sdiv	r1, r3, r2
 8008072:	fb01 f202 	mul.w	r2, r1, r2
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	461a      	mov	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4413      	add	r3, r2
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8008084:	73bb      	strb	r3, [r7, #14]
		if(chartValue < 18) chartValue = 18;
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	2b11      	cmp	r3, #17
 800808a:	d801      	bhi.n	8008090 <f_gui_DrawChart+0x4a>
 800808c:	2312      	movs	r3, #18
 800808e:	73bb      	strb	r3, [r7, #14]
		f_lcd_SetPixel(i + 3, chartValue, true);
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	3303      	adds	r3, #3
 8008094:	b2db      	uxtb	r3, r3
 8008096:	7bb9      	ldrb	r1, [r7, #14]
 8008098:	2201      	movs	r2, #1
 800809a:	4618      	mov	r0, r3
 800809c:	f000 faca 	bl	8008634 <f_lcd_SetPixel>
	for(uint8_t i = 0; i < length; i++)
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	3301      	adds	r3, #1
 80080a4:	73fb      	strb	r3, [r7, #15]
 80080a6:	7bfa      	ldrb	r2, [r7, #15]
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d3db      	bcc.n	8008066 <f_gui_DrawChart+0x20>
	}

	f_lcd_DrawLine(0, 16, 0, 64);
 80080ae:	2340      	movs	r3, #64	; 0x40
 80080b0:	2200      	movs	r2, #0
 80080b2:	2110      	movs	r1, #16
 80080b4:	2000      	movs	r0, #0
 80080b6:	f000 fb0f 	bl	80086d8 <f_lcd_DrawLine>
	f_lcd_DrawLine(0, 63, 127, 63);
 80080ba:	233f      	movs	r3, #63	; 0x3f
 80080bc:	227f      	movs	r2, #127	; 0x7f
 80080be:	213f      	movs	r1, #63	; 0x3f
 80080c0:	2000      	movs	r0, #0
 80080c2:	f000 fb09 	bl	80086d8 <f_lcd_DrawLine>
 80080c6:	e000      	b.n	80080ca <f_gui_DrawChart+0x84>
	if(length > 120) return;
 80080c8:	bf00      	nop
}
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <f_gui_DrawCtrlPage>:
	sprintf(txt, "D:\t(%.1f)\t%.1f", Param->Kd, Ctrl->dValue);
	f_lcd_WriteTxt(0, 48, txt, &font_msSansSerif_14);
}

void f_gui_DrawCtrlPage(float set, float input, float output)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08c      	sub	sp, #48	; 0x30
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80080da:	edc7 0a02 	vstr	s1, [r7, #8]
 80080de:	ed87 1a01 	vstr	s2, [r7, #4]
	char txt[32];
	f_gui_ClearLowerLcdPart();
 80080e2:	f7ff ff99 	bl	8008018 <f_gui_ClearLowerLcdPart>

	sprintf(txt, "Set:\t%.1f", set);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7f8 fa2e 	bl	8000548 <__aeabi_f2d>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	f107 0010 	add.w	r0, r7, #16
 80080f4:	4917      	ldr	r1, [pc, #92]	; (8008154 <f_gui_DrawCtrlPage+0x84>)
 80080f6:	f001 fcdf 	bl	8009ab8 <siprintf>
	f_lcd_WriteTxt(0, 16, txt, &font_msSansSerif_14);
 80080fa:	f107 0210 	add.w	r2, r7, #16
 80080fe:	4b16      	ldr	r3, [pc, #88]	; (8008158 <f_gui_DrawCtrlPage+0x88>)
 8008100:	2110      	movs	r1, #16
 8008102:	2000      	movs	r0, #0
 8008104:	f000 f98b 	bl	800841e <f_lcd_WriteTxt>
	sprintf(txt, "In:\t\t%.1f", input);
 8008108:	68b8      	ldr	r0, [r7, #8]
 800810a:	f7f8 fa1d 	bl	8000548 <__aeabi_f2d>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	f107 0010 	add.w	r0, r7, #16
 8008116:	4911      	ldr	r1, [pc, #68]	; (800815c <f_gui_DrawCtrlPage+0x8c>)
 8008118:	f001 fcce 	bl	8009ab8 <siprintf>
	f_lcd_WriteTxt(0, 32, txt, &font_msSansSerif_14);
 800811c:	f107 0210 	add.w	r2, r7, #16
 8008120:	4b0d      	ldr	r3, [pc, #52]	; (8008158 <f_gui_DrawCtrlPage+0x88>)
 8008122:	2120      	movs	r1, #32
 8008124:	2000      	movs	r0, #0
 8008126:	f000 f97a 	bl	800841e <f_lcd_WriteTxt>
	sprintf(txt, "Out:\t%.1f", output);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7f8 fa0c 	bl	8000548 <__aeabi_f2d>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	f107 0010 	add.w	r0, r7, #16
 8008138:	4909      	ldr	r1, [pc, #36]	; (8008160 <f_gui_DrawCtrlPage+0x90>)
 800813a:	f001 fcbd 	bl	8009ab8 <siprintf>
	f_lcd_WriteTxt(0, 48, txt, &font_msSansSerif_14);
 800813e:	f107 0210 	add.w	r2, r7, #16
 8008142:	4b05      	ldr	r3, [pc, #20]	; (8008158 <f_gui_DrawCtrlPage+0x88>)
 8008144:	2130      	movs	r1, #48	; 0x30
 8008146:	2000      	movs	r0, #0
 8008148:	f000 f969 	bl	800841e <f_lcd_WriteTxt>
}
 800814c:	bf00      	nop
 800814e:	3730      	adds	r7, #48	; 0x30
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	0800c038 	.word	0x0800c038
 8008158:	0800cd98 	.word	0x0800cd98
 800815c:	0800c044 	.word	0x0800c044
 8008160:	0800c050 	.word	0x0800c050

08008164 <f_receiveWord>:
uint16_t curr_reg = INA219_CALIB_VALUE;
uint16_t curr_lsc = INA219_CURRENT_LSB * 1000000;


static uint16_t f_receiveWord(uint8_t address)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af02      	add	r7, sp, #8
 800816a:	4603      	mov	r3, r0
 800816c:	71fb      	strb	r3, [r7, #7]
	uint8_t receive[2];

	HAL_I2C_Master_Transmit(&hi2c1, INA219_I2C_ADDRESS, &address, 1, 50);
 800816e:	1dfa      	adds	r2, r7, #7
 8008170:	2332      	movs	r3, #50	; 0x32
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	2301      	movs	r3, #1
 8008176:	2180      	movs	r1, #128	; 0x80
 8008178:	480b      	ldr	r0, [pc, #44]	; (80081a8 <f_receiveWord+0x44>)
 800817a:	f7fa fde3 	bl	8002d44 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, INA219_I2C_ADDRESS, (uint8_t*)&receive, 2, 50);
 800817e:	f107 020c 	add.w	r2, r7, #12
 8008182:	2332      	movs	r3, #50	; 0x32
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	2302      	movs	r3, #2
 8008188:	2180      	movs	r1, #128	; 0x80
 800818a:	4807      	ldr	r0, [pc, #28]	; (80081a8 <f_receiveWord+0x44>)
 800818c:	f7fa fed8 	bl	8002f40 <HAL_I2C_Master_Receive>

	return (receive[0] << 8) | receive[1];
 8008190:	7b3b      	ldrb	r3, [r7, #12]
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	b21a      	sxth	r2, r3
 8008196:	7b7b      	ldrb	r3, [r7, #13]
 8008198:	b21b      	sxth	r3, r3
 800819a:	4313      	orrs	r3, r2
 800819c:	b21b      	sxth	r3, r3
 800819e:	b29b      	uxth	r3, r3
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20000214 	.word	0x20000214

080081ac <f_sendWord>:

static inline void f_sendWord(uint8_t address, uint16_t word)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	4603      	mov	r3, r0
 80081b4:	460a      	mov	r2, r1
 80081b6:	71fb      	strb	r3, [r7, #7]
 80081b8:	4613      	mov	r3, r2
 80081ba:	80bb      	strh	r3, [r7, #4]
	uint8_t transmit[3] = {address, word >> 8, word & 0xFF};
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	733b      	strb	r3, [r7, #12]
 80081c0:	88bb      	ldrh	r3, [r7, #4]
 80081c2:	0a1b      	lsrs	r3, r3, #8
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	737b      	strb	r3, [r7, #13]
 80081ca:	88bb      	ldrh	r3, [r7, #4]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&hi2c1, INA219_I2C_ADDRESS, (uint8_t*)&transmit, 3, 50);
 80081d0:	f107 020c 	add.w	r2, r7, #12
 80081d4:	2332      	movs	r3, #50	; 0x32
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	2303      	movs	r3, #3
 80081da:	2180      	movs	r1, #128	; 0x80
 80081dc:	4803      	ldr	r0, [pc, #12]	; (80081ec <f_sendWord+0x40>)
 80081de:	f7fa fdb1 	bl	8002d44 <HAL_I2C_Master_Transmit>
}
 80081e2:	bf00      	nop
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000214 	.word	0x20000214

080081f0 <f_ina219_HwInit>:

static void f_ina219_HwInit()
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
	 hi2c1.Instance = I2C1;
 80081f4:	4b12      	ldr	r3, [pc, #72]	; (8008240 <f_ina219_HwInit+0x50>)
 80081f6:	4a13      	ldr	r2, [pc, #76]	; (8008244 <f_ina219_HwInit+0x54>)
 80081f8:	601a      	str	r2, [r3, #0]
	 hi2c1.Init.ClockSpeed = 100000;
 80081fa:	4b11      	ldr	r3, [pc, #68]	; (8008240 <f_ina219_HwInit+0x50>)
 80081fc:	4a12      	ldr	r2, [pc, #72]	; (8008248 <f_ina219_HwInit+0x58>)
 80081fe:	605a      	str	r2, [r3, #4]
	 hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008200:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <f_ina219_HwInit+0x50>)
 8008202:	2200      	movs	r2, #0
 8008204:	609a      	str	r2, [r3, #8]
	 hi2c1.Init.OwnAddress1 = 0;
 8008206:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <f_ina219_HwInit+0x50>)
 8008208:	2200      	movs	r2, #0
 800820a:	60da      	str	r2, [r3, #12]
	 hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800820c:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <f_ina219_HwInit+0x50>)
 800820e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008212:	611a      	str	r2, [r3, #16]
	 hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008214:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <f_ina219_HwInit+0x50>)
 8008216:	2200      	movs	r2, #0
 8008218:	615a      	str	r2, [r3, #20]
	 hi2c1.Init.OwnAddress2 = 0;
 800821a:	4b09      	ldr	r3, [pc, #36]	; (8008240 <f_ina219_HwInit+0x50>)
 800821c:	2200      	movs	r2, #0
 800821e:	619a      	str	r2, [r3, #24]
	 hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <f_ina219_HwInit+0x50>)
 8008222:	2200      	movs	r2, #0
 8008224:	61da      	str	r2, [r3, #28]
	 hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008226:	4b06      	ldr	r3, [pc, #24]	; (8008240 <f_ina219_HwInit+0x50>)
 8008228:	2200      	movs	r2, #0
 800822a:	621a      	str	r2, [r3, #32]
	 if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800822c:	4804      	ldr	r0, [pc, #16]	; (8008240 <f_ina219_HwInit+0x50>)
 800822e:	f7fa fc45 	bl	8002abc <HAL_I2C_Init>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <f_ina219_HwInit+0x4c>
	 {
	   Error_Handler();
 8008238:	f7f9 f9dc 	bl	80015f4 <Error_Handler>
	 }
}
 800823c:	bf00      	nop
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20000214 	.word	0x20000214
 8008244:	40005400 	.word	0x40005400
 8008248:	000186a0 	.word	0x000186a0

0800824c <f_ina219_calibrate>:

static void f_ina219_calibrate()
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
	uint16_t calib = (uint16_t)INA219_CALIB_VALUE;
 8008252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008256:	80fb      	strh	r3, [r7, #6]

	f_sendWord(INA219_CALIBRATION, calib);
 8008258:	88fb      	ldrh	r3, [r7, #6]
 800825a:	4619      	mov	r1, r3
 800825c:	2005      	movs	r0, #5
 800825e:	f7ff ffa5 	bl	80081ac <f_sendWord>
}
 8008262:	bf00      	nop
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <f_ina219_Init>:

//============== public functions ==================

void f_ina219_Init()
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
	f_ina219_HwInit();
 8008270:	f7ff ffbe 	bl	80081f0 <f_ina219_HwInit>
	// bus voltage range = 32v
	// gain divide = 2
	// bus mode/average = 12bit/
	// shunt mode/average = 12bit/ 128
	//mode = bus and shunt, continuous
	uint16_t config = (1 << 13) | (1 << 11) | (15 << 7) | (15 << 3) | (7 << 0);
 8008274:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8008278:	80fb      	strh	r3, [r7, #6]

	f_ina219_reset();
 800827a:	f000 f80e 	bl	800829a <f_ina219_reset>
	HAL_Delay(1);
 800827e:	2001      	movs	r0, #1
 8008280:	f7f9 fd90 	bl	8001da4 <HAL_Delay>
	f_sendWord(INA219_CONFIG, config);
 8008284:	88fb      	ldrh	r3, [r7, #6]
 8008286:	4619      	mov	r1, r3
 8008288:	2000      	movs	r0, #0
 800828a:	f7ff ff8f 	bl	80081ac <f_sendWord>

	f_ina219_calibrate();
 800828e:	f7ff ffdd 	bl	800824c <f_ina219_calibrate>

}
 8008292:	bf00      	nop
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <f_ina219_reset>:

void f_ina219_reset()
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
	uint16_t tempConfig = (1 << 15);
 80082a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082a4:	80fb      	strh	r3, [r7, #6]

	f_sendWord(INA219_CONFIG, tempConfig);
 80082a6:	88fb      	ldrh	r3, [r7, #6]
 80082a8:	4619      	mov	r1, r3
 80082aa:	2000      	movs	r0, #0
 80082ac:	f7ff ff7e 	bl	80081ac <f_sendWord>
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <f_ina219_GetPowerInMilis>:

	return 1000*current*INA219_CURRENT_LSB;
}

uint16_t f_ina219_GetPowerInMilis()
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
	uint16_t power = f_receiveWord(INA219_POWER);
 80082be:	2003      	movs	r0, #3
 80082c0:	f7ff ff50 	bl	8008164 <f_receiveWord>
 80082c4:	4603      	mov	r3, r0
 80082c6:	80fb      	strh	r3, [r7, #6]

	return 1000*20*power*INA219_CURRENT_LSB;
 80082c8:	88fb      	ldrh	r3, [r7, #6]
 80082ca:	f644 6220 	movw	r2, #20000	; 0x4e20
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7f8 f926 	bl	8000524 <__aeabi_i2d>
 80082d8:	a309      	add	r3, pc, #36	; (adr r3, 8008300 <f_ina219_GetPowerInMilis+0x48>)
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	f7f8 f98b 	bl	80005f8 <__aeabi_dmul>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4610      	mov	r0, r2
 80082e8:	4619      	mov	r1, r3
 80082ea:	f7f8 fc5d 	bl	8000ba8 <__aeabi_d2uiz>
 80082ee:	4603      	mov	r3, r0
 80082f0:	b29b      	uxth	r3, r3
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	f3af 8000 	nop.w
 8008300:	d2f1a9fc 	.word	0xd2f1a9fc
 8008304:	3f20624d 	.word	0x3f20624d

08008308 <f_SendFrameBufferPage>:

uint8_t sh1106_FrameBuffer[SH1106_HEIGHT/8][SH1106_WIDTH];
uint8_t sh1106_pageDirtyMask;

static inline void f_SendFrameBufferPage(uint8_t page)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
	f_sh1106_cmd_SetColumnAddress(0);
 8008312:	2000      	movs	r0, #0
 8008314:	f000 fc3c 	bl	8008b90 <f_sh1106_cmd_SetColumnAddress>
	f_sh1106_cmd_SetPageAddress(page);
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	4618      	mov	r0, r3
 800831c:	f000 fc9c 	bl	8008c58 <f_sh1106_cmd_SetPageAddress>
	f_sh1106_SendPageData(page, &sh1106_FrameBuffer[page][0], SH1106_WIDTH);
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	01db      	lsls	r3, r3, #7
 8008324:	4a05      	ldr	r2, [pc, #20]	; (800833c <f_SendFrameBufferPage+0x34>)
 8008326:	1899      	adds	r1, r3, r2
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	2280      	movs	r2, #128	; 0x80
 800832c:	4618      	mov	r0, r3
 800832e:	f000 fce1 	bl	8008cf4 <f_sh1106_SendPageData>
}
 8008332:	bf00      	nop
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	200004a8 	.word	0x200004a8

08008340 <f_lcd_Init>:

//=========== public functions =================

void f_lcd_Init()
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
	f_sh1106_Init();
 8008346:	f000 fc0f 	bl	8008b68 <f_sh1106_Init>

	f_sh1106_cmd_SetScanDirection(1);
 800834a:	2001      	movs	r0, #1
 800834c:	f000 fca6 	bl	8008c9c <f_sh1106_cmd_SetScanDirection>
	f_sh1106_cmd_SetSegmentDirection(1);
 8008350:	2001      	movs	r0, #1
 8008352:	f000 fc47 	bl	8008be4 <f_sh1106_cmd_SetSegmentDirection>
	f_lcd_ClearAll();
 8008356:	f000 f84b 	bl	80083f0 <f_lcd_ClearAll>

	for(uint8_t page = 0; page < 8; page++)
 800835a:	2300      	movs	r3, #0
 800835c:	71fb      	strb	r3, [r7, #7]
 800835e:	e009      	b.n	8008374 <f_lcd_Init+0x34>
	{
		f_SendFrameBufferPage(page);
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	4618      	mov	r0, r3
 8008364:	f7ff ffd0 	bl	8008308 <f_SendFrameBufferPage>
		HAL_Delay(4);
 8008368:	2004      	movs	r0, #4
 800836a:	f7f9 fd1b 	bl	8001da4 <HAL_Delay>
	for(uint8_t page = 0; page < 8; page++)
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	3301      	adds	r3, #1
 8008372:	71fb      	strb	r3, [r7, #7]
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	2b07      	cmp	r3, #7
 8008378:	d9f2      	bls.n	8008360 <f_lcd_Init+0x20>
	}

	f_sh1106_cmd_TogglePower(1);
 800837a:	2001      	movs	r0, #1
 800837c:	f000 fc4f 	bl	8008c1e <f_sh1106_cmd_TogglePower>

}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <f_lcd_Clear>:

void f_lcd_Clear(uint8_t col_start, uint8_t col_end, uint8_t page)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	4603      	mov	r3, r0
 8008390:	71fb      	strb	r3, [r7, #7]
 8008392:	460b      	mov	r3, r1
 8008394:	71bb      	strb	r3, [r7, #6]
 8008396:	4613      	mov	r3, r2
 8008398:	717b      	strb	r3, [r7, #5]
	uint8_t blank = 0x00;
 800839a:	2300      	movs	r3, #0
 800839c:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i = col_start; i <= col_end; i++)
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	73fb      	strb	r3, [r7, #15]
 80083a2:	e00a      	b.n	80083ba <f_lcd_Clear+0x32>
	{
		sh1106_FrameBuffer[page][i] = blank;
 80083a4:	797a      	ldrb	r2, [r7, #5]
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	490f      	ldr	r1, [pc, #60]	; (80083e8 <f_lcd_Clear+0x60>)
 80083aa:	01d2      	lsls	r2, r2, #7
 80083ac:	440a      	add	r2, r1
 80083ae:	4413      	add	r3, r2
 80083b0:	7bba      	ldrb	r2, [r7, #14]
 80083b2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = col_start; i <= col_end; i++)
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	3301      	adds	r3, #1
 80083b8:	73fb      	strb	r3, [r7, #15]
 80083ba:	7bfa      	ldrb	r2, [r7, #15]
 80083bc:	79bb      	ldrb	r3, [r7, #6]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d9f0      	bls.n	80083a4 <f_lcd_Clear+0x1c>
	}

	sh1106_pageDirtyMask |= (1 << page);
 80083c2:	797b      	ldrb	r3, [r7, #5]
 80083c4:	2201      	movs	r2, #1
 80083c6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ca:	b25a      	sxtb	r2, r3
 80083cc:	4b07      	ldr	r3, [pc, #28]	; (80083ec <f_lcd_Clear+0x64>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	b25b      	sxtb	r3, r3
 80083d2:	4313      	orrs	r3, r2
 80083d4:	b25b      	sxtb	r3, r3
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <f_lcd_Clear+0x64>)
 80083da:	701a      	strb	r2, [r3, #0]
}
 80083dc:	bf00      	nop
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	200004a8 	.word	0x200004a8
 80083ec:	200008a8 	.word	0x200008a8

080083f0 <f_lcd_ClearAll>:

void f_lcd_ClearAll()
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++) f_lcd_Clear(0, SH1106_WIDTH, page);
 80083f6:	2300      	movs	r3, #0
 80083f8:	71fb      	strb	r3, [r7, #7]
 80083fa:	e008      	b.n	800840e <f_lcd_ClearAll+0x1e>
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	461a      	mov	r2, r3
 8008400:	2180      	movs	r1, #128	; 0x80
 8008402:	2000      	movs	r0, #0
 8008404:	f7ff ffc0 	bl	8008388 <f_lcd_Clear>
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	3301      	adds	r3, #1
 800840c:	71fb      	strb	r3, [r7, #7]
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	2b07      	cmp	r3, #7
 8008412:	d9f3      	bls.n	80083fc <f_lcd_ClearAll+0xc>
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <f_lcd_WriteTxt>:

void f_lcd_WriteTxt(uint8_t x, uint8_t y, const char* txt, const tFont *font)
{
 800841e:	b590      	push	{r4, r7, lr}
 8008420:	b089      	sub	sp, #36	; 0x24
 8008422:	af02      	add	r7, sp, #8
 8008424:	60ba      	str	r2, [r7, #8]
 8008426:	607b      	str	r3, [r7, #4]
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
 800842c:	460b      	mov	r3, r1
 800842e:	73bb      	strb	r3, [r7, #14]
	uint8_t fontHeight = font->chars->image->height;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	88db      	ldrh	r3, [r3, #6]
 8008438:	75fb      	strb	r3, [r7, #23]
	uint8_t ch;


	while((ch = *txt++))
 800843a:	e031      	b.n	80084a0 <f_lcd_WriteTxt+0x82>
	{
		if(ch != '\t')
 800843c:	7dbb      	ldrb	r3, [r7, #22]
 800843e:	2b09      	cmp	r3, #9
 8008440:	d027      	beq.n	8008492 <f_lcd_WriteTxt+0x74>
		{
			uint8_t fontWidth = font->chars[ch - 0x20].image->width;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	7dbb      	ldrb	r3, [r7, #22]
 8008448:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800844c:	3b20      	subs	r3, #32
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	4413      	add	r3, r2
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	889b      	ldrh	r3, [r3, #4]
 8008456:	757b      	strb	r3, [r7, #21]
			if((SH1106_WIDTH - x) < fontWidth) break; //no line wrapping
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 800845e:	7d7b      	ldrb	r3, [r7, #21]
 8008460:	429a      	cmp	r2, r3
 8008462:	db26      	blt.n	80084b2 <f_lcd_WriteTxt+0x94>
			f_lcd_DrawRaw(x, y, font->chars[ch - 0x20].image->data, fontWidth, fontHeight);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	7dbb      	ldrb	r3, [r7, #22]
 800846a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800846e:	3b20      	subs	r3, #32
 8008470:	00db      	lsls	r3, r3, #3
 8008472:	4413      	add	r3, r2
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	7d7c      	ldrb	r4, [r7, #21]
 800847a:	7bb9      	ldrb	r1, [r7, #14]
 800847c:	7bf8      	ldrb	r0, [r7, #15]
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	4623      	mov	r3, r4
 8008484:	f000 f81a 	bl	80084bc <f_lcd_DrawRaw>
	
			x += fontWidth;
 8008488:	7bfa      	ldrb	r2, [r7, #15]
 800848a:	7d7b      	ldrb	r3, [r7, #21]
 800848c:	4413      	add	r3, r2
 800848e:	73fb      	strb	r3, [r7, #15]
 8008490:	e006      	b.n	80084a0 <f_lcd_WriteTxt+0x82>
		}
		else //tab
		{
			x = ((x/16) + 1) * 16;
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	091b      	lsrs	r3, r3, #4
 8008496:	b2db      	uxtb	r3, r3
 8008498:	3301      	adds	r3, #1
 800849a:	b2db      	uxtb	r3, r3
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	73fb      	strb	r3, [r7, #15]
	while((ch = *txt++))
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	60ba      	str	r2, [r7, #8]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	75bb      	strb	r3, [r7, #22]
 80084aa:	7dbb      	ldrb	r3, [r7, #22]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1c5      	bne.n	800843c <f_lcd_WriteTxt+0x1e>
		}
		
	}
}
 80084b0:	e000      	b.n	80084b4 <f_lcd_WriteTxt+0x96>
			if((SH1106_WIDTH - x) < fontWidth) break; //no line wrapping
 80084b2:	bf00      	nop
}
 80084b4:	bf00      	nop
 80084b6:	371c      	adds	r7, #28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd90      	pop	{r4, r7, pc}

080084bc <f_lcd_DrawRaw>:

void f_lcd_DrawRaw(uint8_t x, uint8_t y, const uint8_t* image, uint8_t x_size, uint8_t y_size)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	603a      	str	r2, [r7, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	4603      	mov	r3, r0
 80084c8:	71fb      	strb	r3, [r7, #7]
 80084ca:	460b      	mov	r3, r1
 80084cc:	71bb      	strb	r3, [r7, #6]
 80084ce:	4613      	mov	r3, r2
 80084d0:	717b      	strb	r3, [r7, #5]
	uint8_t bufferPage;
	uint8_t imagePage = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	75fb      	strb	r3, [r7, #23]

	uint8_t bitsLeftInBuffer;
	uint8_t bitsLeftInImage = 8; //first row of image is always full byte
 80084d6:	2308      	movs	r3, #8
 80084d8:	75bb      	strb	r3, [r7, #22]
	uint8_t bitsToWrite;

	bool writtenUpperHalf; //if false then lower half


	while(y_size)
 80084da:	e09b      	b.n	8008614 <f_lcd_DrawRaw+0x158>
	{
		bufferPage = y/8;
 80084dc:	79bb      	ldrb	r3, [r7, #6]
 80084de:	08db      	lsrs	r3, r3, #3
 80084e0:	743b      	strb	r3, [r7, #16]
		bitsLeftInBuffer = 8 - (y & 0x07);
 80084e2:	79bb      	ldrb	r3, [r7, #6]
 80084e4:	f003 0307 	and.w	r3, r3, #7
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	f1c3 0308 	rsb	r3, r3, #8
 80084ee:	73fb      	strb	r3, [r7, #15]

		if(bitsLeftInImage > bitsLeftInBuffer) //probably you write on lower half (upper bits)
 80084f0:	7dba      	ldrb	r2, [r7, #22]
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d904      	bls.n	8008502 <f_lcd_DrawRaw+0x46>
			{
				bitsToWrite = bitsLeftInBuffer;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	757b      	strb	r3, [r7, #21]
				writtenUpperHalf = false;
 80084fc:	2300      	movs	r3, #0
 80084fe:	753b      	strb	r3, [r7, #20]
 8008500:	e003      	b.n	800850a <f_lcd_DrawRaw+0x4e>
			}
		else
			{
				bitsToWrite = bitsLeftInImage;
 8008502:	7dbb      	ldrb	r3, [r7, #22]
 8008504:	757b      	strb	r3, [r7, #21]
				writtenUpperHalf = true;
 8008506:	2301      	movs	r3, #1
 8008508:	753b      	strb	r3, [r7, #20]
			}

		for(uint8_t lines = 0; lines < x_size; lines++)
 800850a:	2300      	movs	r3, #0
 800850c:	74fb      	strb	r3, [r7, #19]
 800850e:	e05a      	b.n	80085c6 <f_lcd_DrawRaw+0x10a>
		{
			uint8_t dataToPreserve;
			uint8_t dataToWrite;

			if(writtenUpperHalf) //preserve MSB bits
 8008510:	7d3b      	ldrb	r3, [r7, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d023      	beq.n	800855e <f_lcd_DrawRaw+0xa2>
			{
				dataToPreserve = sh1106_FrameBuffer[bufferPage][x + lines] & (0xFF << bitsToWrite);
 8008516:	7c3a      	ldrb	r2, [r7, #16]
 8008518:	79f9      	ldrb	r1, [r7, #7]
 800851a:	7cfb      	ldrb	r3, [r7, #19]
 800851c:	440b      	add	r3, r1
 800851e:	4943      	ldr	r1, [pc, #268]	; (800862c <f_lcd_DrawRaw+0x170>)
 8008520:	01d2      	lsls	r2, r2, #7
 8008522:	440a      	add	r2, r1
 8008524:	4413      	add	r3, r2
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	b25a      	sxtb	r2, r3
 800852a:	7d7b      	ldrb	r3, [r7, #21]
 800852c:	21ff      	movs	r1, #255	; 0xff
 800852e:	fa01 f303 	lsl.w	r3, r1, r3
 8008532:	b25b      	sxtb	r3, r3
 8008534:	4013      	ands	r3, r2
 8008536:	b25b      	sxtb	r3, r3
 8008538:	74bb      	strb	r3, [r7, #18]
				dataToWrite = image[imagePage*x_size + lines] >> (8 - bitsToWrite);
 800853a:	7dfb      	ldrb	r3, [r7, #23]
 800853c:	797a      	ldrb	r2, [r7, #5]
 800853e:	fb03 f202 	mul.w	r2, r3, r2
 8008542:	7cfb      	ldrb	r3, [r7, #19]
 8008544:	4413      	add	r3, r2
 8008546:	461a      	mov	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	4413      	add	r3, r2
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	7d7b      	ldrb	r3, [r7, #21]
 8008552:	f1c3 0308 	rsb	r3, r3, #8
 8008556:	fa42 f303 	asr.w	r3, r2, r3
 800855a:	747b      	strb	r3, [r7, #17]
 800855c:	e022      	b.n	80085a4 <f_lcd_DrawRaw+0xe8>
			}
			else //preserve LSB bits
			{
				dataToPreserve = sh1106_FrameBuffer[bufferPage][x + lines] & (0xFF >> bitsToWrite);
 800855e:	7c3a      	ldrb	r2, [r7, #16]
 8008560:	79f9      	ldrb	r1, [r7, #7]
 8008562:	7cfb      	ldrb	r3, [r7, #19]
 8008564:	440b      	add	r3, r1
 8008566:	4931      	ldr	r1, [pc, #196]	; (800862c <f_lcd_DrawRaw+0x170>)
 8008568:	01d2      	lsls	r2, r2, #7
 800856a:	440a      	add	r2, r1
 800856c:	4413      	add	r3, r2
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	b25a      	sxtb	r2, r3
 8008572:	7d7b      	ldrb	r3, [r7, #21]
 8008574:	21ff      	movs	r1, #255	; 0xff
 8008576:	fa41 f303 	asr.w	r3, r1, r3
 800857a:	b25b      	sxtb	r3, r3
 800857c:	4013      	ands	r3, r2
 800857e:	b25b      	sxtb	r3, r3
 8008580:	74bb      	strb	r3, [r7, #18]
				dataToWrite = image[imagePage*x_size + lines] << (8 - bitsToWrite);
 8008582:	7dfb      	ldrb	r3, [r7, #23]
 8008584:	797a      	ldrb	r2, [r7, #5]
 8008586:	fb03 f202 	mul.w	r2, r3, r2
 800858a:	7cfb      	ldrb	r3, [r7, #19]
 800858c:	4413      	add	r3, r2
 800858e:	461a      	mov	r2, r3
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	4413      	add	r3, r2
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	7d7b      	ldrb	r3, [r7, #21]
 800859a:	f1c3 0308 	rsb	r3, r3, #8
 800859e:	fa02 f303 	lsl.w	r3, r2, r3
 80085a2:	747b      	strb	r3, [r7, #17]
			}

			sh1106_FrameBuffer[bufferPage][x + lines] = dataToPreserve | dataToWrite;//write image to page
 80085a4:	7c3a      	ldrb	r2, [r7, #16]
 80085a6:	79f9      	ldrb	r1, [r7, #7]
 80085a8:	7cfb      	ldrb	r3, [r7, #19]
 80085aa:	440b      	add	r3, r1
 80085ac:	7cb8      	ldrb	r0, [r7, #18]
 80085ae:	7c79      	ldrb	r1, [r7, #17]
 80085b0:	4301      	orrs	r1, r0
 80085b2:	b2c8      	uxtb	r0, r1
 80085b4:	491d      	ldr	r1, [pc, #116]	; (800862c <f_lcd_DrawRaw+0x170>)
 80085b6:	01d2      	lsls	r2, r2, #7
 80085b8:	440a      	add	r2, r1
 80085ba:	4413      	add	r3, r2
 80085bc:	4602      	mov	r2, r0
 80085be:	701a      	strb	r2, [r3, #0]
		for(uint8_t lines = 0; lines < x_size; lines++)
 80085c0:	7cfb      	ldrb	r3, [r7, #19]
 80085c2:	3301      	adds	r3, #1
 80085c4:	74fb      	strb	r3, [r7, #19]
 80085c6:	7cfa      	ldrb	r2, [r7, #19]
 80085c8:	797b      	ldrb	r3, [r7, #5]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d3a0      	bcc.n	8008510 <f_lcd_DrawRaw+0x54>
		}

		bitsLeftInImage -= bitsToWrite;
 80085ce:	7dba      	ldrb	r2, [r7, #22]
 80085d0:	7d7b      	ldrb	r3, [r7, #21]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	75bb      	strb	r3, [r7, #22]
		if(bitsLeftInImage == 0) //jump to next page from image
 80085d6:	7dbb      	ldrb	r3, [r7, #22]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d104      	bne.n	80085e6 <f_lcd_DrawRaw+0x12a>
		{
			imagePage++;
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	3301      	adds	r3, #1
 80085e0:	75fb      	strb	r3, [r7, #23]
			bitsLeftInImage = 8;
 80085e2:	2308      	movs	r3, #8
 80085e4:	75bb      	strb	r3, [r7, #22]
		}

		y_size -= bitsToWrite;
 80085e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80085ea:	7d7b      	ldrb	r3, [r7, #21]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	f887 3020 	strb.w	r3, [r7, #32]
		y += bitsToWrite;
 80085f2:	79ba      	ldrb	r2, [r7, #6]
 80085f4:	7d7b      	ldrb	r3, [r7, #21]
 80085f6:	4413      	add	r3, r2
 80085f8:	71bb      	strb	r3, [r7, #6]

		sh1106_pageDirtyMask |= (1 << bufferPage);
 80085fa:	7c3b      	ldrb	r3, [r7, #16]
 80085fc:	2201      	movs	r2, #1
 80085fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008602:	b25a      	sxtb	r2, r3
 8008604:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <f_lcd_DrawRaw+0x174>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	b25b      	sxtb	r3, r3
 800860a:	4313      	orrs	r3, r2
 800860c:	b25b      	sxtb	r3, r3
 800860e:	b2da      	uxtb	r2, r3
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <f_lcd_DrawRaw+0x174>)
 8008612:	701a      	strb	r2, [r3, #0]
	while(y_size)
 8008614:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f47f af5f 	bne.w	80084dc <f_lcd_DrawRaw+0x20>

	}

}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	371c      	adds	r7, #28
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	200004a8 	.word	0x200004a8
 8008630:	200008a8 	.word	0x200008a8

08008634 <f_lcd_SetPixel>:
{
	f_lcd_DrawRaw(x, y, image->data, image->width, image->height);
}

void f_lcd_SetPixel(uint8_t x, uint8_t y, bool set)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	71fb      	strb	r3, [r7, #7]
 800863e:	460b      	mov	r3, r1
 8008640:	71bb      	strb	r3, [r7, #6]
 8008642:	4613      	mov	r3, r2
 8008644:	717b      	strb	r3, [r7, #5]
	if(set) sh1106_FrameBuffer[y/8][x] |= (1 << (y&0x07));
 8008646:	797b      	ldrb	r3, [r7, #5]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01d      	beq.n	8008688 <f_lcd_SetPixel+0x54>
 800864c:	79bb      	ldrb	r3, [r7, #6]
 800864e:	08db      	lsrs	r3, r3, #3
 8008650:	b2d8      	uxtb	r0, r3
 8008652:	4602      	mov	r2, r0
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	491f      	ldr	r1, [pc, #124]	; (80086d4 <f_lcd_SetPixel+0xa0>)
 8008658:	01d2      	lsls	r2, r2, #7
 800865a:	440a      	add	r2, r1
 800865c:	4413      	add	r3, r2
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	b25a      	sxtb	r2, r3
 8008662:	79bb      	ldrb	r3, [r7, #6]
 8008664:	f003 0307 	and.w	r3, r3, #7
 8008668:	2101      	movs	r1, #1
 800866a:	fa01 f303 	lsl.w	r3, r1, r3
 800866e:	b25b      	sxtb	r3, r3
 8008670:	4313      	orrs	r3, r2
 8008672:	b259      	sxtb	r1, r3
 8008674:	4602      	mov	r2, r0
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	b2c8      	uxtb	r0, r1
 800867a:	4916      	ldr	r1, [pc, #88]	; (80086d4 <f_lcd_SetPixel+0xa0>)
 800867c:	01d2      	lsls	r2, r2, #7
 800867e:	440a      	add	r2, r1
 8008680:	4413      	add	r3, r2
 8008682:	4602      	mov	r2, r0
 8008684:	701a      	strb	r2, [r3, #0]
	else sh1106_FrameBuffer[y/8][x] &= ~(1 << (y&0x07));
}
 8008686:	e01e      	b.n	80086c6 <f_lcd_SetPixel+0x92>
	else sh1106_FrameBuffer[y/8][x] &= ~(1 << (y&0x07));
 8008688:	79bb      	ldrb	r3, [r7, #6]
 800868a:	08db      	lsrs	r3, r3, #3
 800868c:	b2d8      	uxtb	r0, r3
 800868e:	4602      	mov	r2, r0
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	4910      	ldr	r1, [pc, #64]	; (80086d4 <f_lcd_SetPixel+0xa0>)
 8008694:	01d2      	lsls	r2, r2, #7
 8008696:	440a      	add	r2, r1
 8008698:	4413      	add	r3, r2
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	b25a      	sxtb	r2, r3
 800869e:	79bb      	ldrb	r3, [r7, #6]
 80086a0:	f003 0307 	and.w	r3, r3, #7
 80086a4:	2101      	movs	r1, #1
 80086a6:	fa01 f303 	lsl.w	r3, r1, r3
 80086aa:	b25b      	sxtb	r3, r3
 80086ac:	43db      	mvns	r3, r3
 80086ae:	b25b      	sxtb	r3, r3
 80086b0:	4013      	ands	r3, r2
 80086b2:	b259      	sxtb	r1, r3
 80086b4:	4602      	mov	r2, r0
 80086b6:	79fb      	ldrb	r3, [r7, #7]
 80086b8:	b2c8      	uxtb	r0, r1
 80086ba:	4906      	ldr	r1, [pc, #24]	; (80086d4 <f_lcd_SetPixel+0xa0>)
 80086bc:	01d2      	lsls	r2, r2, #7
 80086be:	440a      	add	r2, r1
 80086c0:	4413      	add	r3, r2
 80086c2:	4602      	mov	r2, r0
 80086c4:	701a      	strb	r2, [r3, #0]
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	200004a8 	.word	0x200004a8

080086d8 <f_lcd_DrawLine>:

void f_lcd_DrawLine(uint8_t xStart, uint8_t yStart, uint8_t xEnd, uint8_t yEnd)
{
 80086d8:	b590      	push	{r4, r7, lr}
 80086da:	b089      	sub	sp, #36	; 0x24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	4611      	mov	r1, r2
 80086e4:	461a      	mov	r2, r3
 80086e6:	4623      	mov	r3, r4
 80086e8:	71fb      	strb	r3, [r7, #7]
 80086ea:	4603      	mov	r3, r0
 80086ec:	71bb      	strb	r3, [r7, #6]
 80086ee:	460b      	mov	r3, r1
 80086f0:	717b      	strb	r3, [r7, #5]
 80086f2:	4613      	mov	r3, r2
 80086f4:	713b      	strb	r3, [r7, #4]
	float delx, dely, length;
	float x, y;

	delx = abs(xEnd - xStart);
 80086f6:	797a      	ldrb	r2, [r7, #5]
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	bfb8      	it	lt
 8008700:	425b      	neglt	r3, r3
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800870a:	edc7 7a03 	vstr	s15, [r7, #12]
	dely = abs(yEnd - yStart);
 800870e:	793a      	ldrb	r2, [r7, #4]
 8008710:	79bb      	ldrb	r3, [r7, #6]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfb8      	it	lt
 8008718:	425b      	neglt	r3, r3
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008722:	edc7 7a02 	vstr	s15, [r7, #8]

	if(delx < dely) length = dely;
 8008726:	ed97 7a03 	vldr	s14, [r7, #12]
 800872a:	edd7 7a02 	vldr	s15, [r7, #8]
 800872e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008736:	d502      	bpl.n	800873e <f_lcd_DrawLine+0x66>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	61fb      	str	r3, [r7, #28]
 800873c:	e001      	b.n	8008742 <f_lcd_DrawLine+0x6a>
	else length = delx;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	61fb      	str	r3, [r7, #28]

	delx = (xEnd - xStart) / length;
 8008742:	797a      	ldrb	r2, [r7, #5]
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	ee07 3a90 	vmov	s15, r3
 800874c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008750:	ed97 7a07 	vldr	s14, [r7, #28]
 8008754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008758:	edc7 7a03 	vstr	s15, [r7, #12]
	dely = (yEnd - yStart) / length;
 800875c:	793a      	ldrb	r2, [r7, #4]
 800875e:	79bb      	ldrb	r3, [r7, #6]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800876a:	ed97 7a07 	vldr	s14, [r7, #28]
 800876e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008772:	edc7 7a02 	vstr	s15, [r7, #8]

	x = xStart + 0.5;
 8008776:	79fb      	ldrb	r3, [r7, #7]
 8008778:	4618      	mov	r0, r3
 800877a:	f7f7 fed3 	bl	8000524 <__aeabi_i2d>
 800877e:	f04f 0200 	mov.w	r2, #0
 8008782:	4b38      	ldr	r3, [pc, #224]	; (8008864 <f_lcd_DrawLine+0x18c>)
 8008784:	f7f7 fd82 	bl	800028c <__adddf3>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	4610      	mov	r0, r2
 800878e:	4619      	mov	r1, r3
 8008790:	f7f8 fa2a 	bl	8000be8 <__aeabi_d2f>
 8008794:	4603      	mov	r3, r0
 8008796:	61bb      	str	r3, [r7, #24]
	y = yStart + 0.5;
 8008798:	79bb      	ldrb	r3, [r7, #6]
 800879a:	4618      	mov	r0, r3
 800879c:	f7f7 fec2 	bl	8000524 <__aeabi_i2d>
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	4b2f      	ldr	r3, [pc, #188]	; (8008864 <f_lcd_DrawLine+0x18c>)
 80087a6:	f7f7 fd71 	bl	800028c <__adddf3>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4610      	mov	r0, r2
 80087b0:	4619      	mov	r1, r3
 80087b2:	f7f8 fa19 	bl	8000be8 <__aeabi_d2f>
 80087b6:	4603      	mov	r3, r0
 80087b8:	617b      	str	r3, [r7, #20]

	for(uint8_t i = 0; i <= length; i ++)
 80087ba:	2300      	movs	r3, #0
 80087bc:	74fb      	strb	r3, [r7, #19]
 80087be:	e026      	b.n	800880e <f_lcd_DrawLine+0x136>
	{
		f_lcd_SetPixel((uint8_t)x, (uint8_t)y, 1);
 80087c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80087c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087c8:	edc7 7a00 	vstr	s15, [r7]
 80087cc:	783b      	ldrb	r3, [r7, #0]
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80087d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087d8:	edc7 7a00 	vstr	s15, [r7]
 80087dc:	783a      	ldrb	r2, [r7, #0]
 80087de:	b2d1      	uxtb	r1, r2
 80087e0:	2201      	movs	r2, #1
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff ff26 	bl	8008634 <f_lcd_SetPixel>

		x += delx;
 80087e8:	ed97 7a06 	vldr	s14, [r7, #24]
 80087ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80087f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087f4:	edc7 7a06 	vstr	s15, [r7, #24]
		y += dely;
 80087f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80087fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8008800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008804:	edc7 7a05 	vstr	s15, [r7, #20]
	for(uint8_t i = 0; i <= length; i ++)
 8008808:	7cfb      	ldrb	r3, [r7, #19]
 800880a:	3301      	adds	r3, #1
 800880c:	74fb      	strb	r3, [r7, #19]
 800880e:	7cfb      	ldrb	r3, [r7, #19]
 8008810:	ee07 3a90 	vmov	s15, r3
 8008814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008818:	ed97 7a07 	vldr	s14, [r7, #28]
 800881c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008824:	dacc      	bge.n	80087c0 <f_lcd_DrawLine+0xe8>
	}

	for(uint8_t i = yStart/8; i <= yEnd/8; i++) sh1106_pageDirtyMask |= (1 << i);
 8008826:	79bb      	ldrb	r3, [r7, #6]
 8008828:	08db      	lsrs	r3, r3, #3
 800882a:	74bb      	strb	r3, [r7, #18]
 800882c:	e00f      	b.n	800884e <f_lcd_DrawLine+0x176>
 800882e:	7cbb      	ldrb	r3, [r7, #18]
 8008830:	2201      	movs	r2, #1
 8008832:	fa02 f303 	lsl.w	r3, r2, r3
 8008836:	b25a      	sxtb	r2, r3
 8008838:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <f_lcd_DrawLine+0x190>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	b25b      	sxtb	r3, r3
 800883e:	4313      	orrs	r3, r2
 8008840:	b25b      	sxtb	r3, r3
 8008842:	b2da      	uxtb	r2, r3
 8008844:	4b08      	ldr	r3, [pc, #32]	; (8008868 <f_lcd_DrawLine+0x190>)
 8008846:	701a      	strb	r2, [r3, #0]
 8008848:	7cbb      	ldrb	r3, [r7, #18]
 800884a:	3301      	adds	r3, #1
 800884c:	74bb      	strb	r3, [r7, #18]
 800884e:	793b      	ldrb	r3, [r7, #4]
 8008850:	08db      	lsrs	r3, r3, #3
 8008852:	b2db      	uxtb	r3, r3
 8008854:	7cba      	ldrb	r2, [r7, #18]
 8008856:	429a      	cmp	r2, r3
 8008858:	d9e9      	bls.n	800882e <f_lcd_DrawLine+0x156>

	//check out for bresenham algorithm to optimize for bigger screens
}
 800885a:	bf00      	nop
 800885c:	bf00      	nop
 800885e:	3724      	adds	r7, #36	; 0x24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd90      	pop	{r4, r7, pc}
 8008864:	3fe00000 	.word	0x3fe00000
 8008868:	200008a8 	.word	0x200008a8

0800886c <f_lcd_SendFrameCallback>:


void f_lcd_SendFrameCallback()
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0
	static uint8_t timer;
	static uint8_t activePage;


	if((HAL_GetTick() - timer) > 5) //software timer
 8008870:	f7f9 fa8c 	bl	8001d8c <HAL_GetTick>
 8008874:	4603      	mov	r3, r0
 8008876:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <f_lcd_SendFrameCallback+0x80>)
 8008878:	7812      	ldrb	r2, [r2, #0]
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	2b05      	cmp	r3, #5
 800887e:	d932      	bls.n	80088e6 <f_lcd_SendFrameCallback+0x7a>
	{

		if(sh1106_pageDirtyMask & (1 << activePage))
 8008880:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <f_lcd_SendFrameCallback+0x84>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	4b1b      	ldr	r3, [pc, #108]	; (80088f4 <f_lcd_SendFrameCallback+0x88>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	fa42 f303 	asr.w	r3, r2, r3
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d014      	beq.n	80088c0 <f_lcd_SendFrameCallback+0x54>
		{
			f_SendFrameBufferPage(activePage);
 8008896:	4b17      	ldr	r3, [pc, #92]	; (80088f4 <f_lcd_SendFrameCallback+0x88>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff fd34 	bl	8008308 <f_SendFrameBufferPage>

			sh1106_pageDirtyMask &= ~(1 << activePage);
 80088a0:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <f_lcd_SendFrameCallback+0x88>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	2301      	movs	r3, #1
 80088a8:	4093      	lsls	r3, r2
 80088aa:	b25b      	sxtb	r3, r3
 80088ac:	43db      	mvns	r3, r3
 80088ae:	b25a      	sxtb	r2, r3
 80088b0:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <f_lcd_SendFrameCallback+0x84>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	b25b      	sxtb	r3, r3
 80088b6:	4013      	ands	r3, r2
 80088b8:	b25b      	sxtb	r3, r3
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	4b0c      	ldr	r3, [pc, #48]	; (80088f0 <f_lcd_SendFrameCallback+0x84>)
 80088be:	701a      	strb	r2, [r3, #0]

		}

		activePage = (activePage + 1) % 8;
 80088c0:	4b0c      	ldr	r3, [pc, #48]	; (80088f4 <f_lcd_SendFrameCallback+0x88>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	3301      	adds	r3, #1
 80088c6:	425a      	negs	r2, r3
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	f002 0207 	and.w	r2, r2, #7
 80088d0:	bf58      	it	pl
 80088d2:	4253      	negpl	r3, r2
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <f_lcd_SendFrameCallback+0x88>)
 80088d8:	701a      	strb	r2, [r3, #0]
		timer = HAL_GetTick();
 80088da:	f7f9 fa57 	bl	8001d8c <HAL_GetTick>
 80088de:	4603      	mov	r3, r0
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	4b02      	ldr	r3, [pc, #8]	; (80088ec <f_lcd_SendFrameCallback+0x80>)
 80088e4:	701a      	strb	r2, [r3, #0]
	}
}
 80088e6:	bf00      	nop
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	200008a9 	.word	0x200008a9
 80088f0:	200008a8 	.word	0x200008a8
 80088f4:	200008aa 	.word	0x200008aa

080088f8 <f_pid_calculateThrottle>:


#include "pid.h"

t_pid_Control* f_pid_calculateThrottle(float setPoint, float input, t_pid_Control* Ctrl, t_pid_Parameter* Param)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8008902:	edc7 0a02 	vstr	s1, [r7, #8]
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
	float error;

	error = setPoint - input;
 800890a:	ed97 7a03 	vldr	s14, [r7, #12]
 800890e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008916:	edc7 7a05 	vstr	s15, [r7, #20]

	//get p value
	Ctrl->pValue = error * Param->Kp;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	ed93 7a00 	vldr	s14, [r3]
 8008920:	edd7 7a05 	vldr	s15, [r7, #20]
 8008924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	edc3 7a04 	vstr	s15, [r3, #16]

	//get i value (the fancy way)
	Ctrl->integral += (error + Ctrl->lastError)/2;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	ed93 7a00 	vldr	s14, [r3]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	edd3 6a01 	vldr	s13, [r3, #4]
 800893a:	edd7 7a05 	vldr	s15, [r7, #20]
 800893e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008942:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8008946:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800894a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	edc3 7a00 	vstr	s15, [r3]

	if(Ctrl->integral < Param->I_minRange) Ctrl->integral = Param->I_minRange;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	ed93 7a00 	vldr	s14, [r3]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008968:	d504      	bpl.n	8008974 <f_pid_calculateThrottle+0x7c>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	e00e      	b.n	8008992 <f_pid_calculateThrottle+0x9a>
	else if(Ctrl->integral > Param->I_maxRange) Ctrl->integral = Param->I_maxRange;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	ed93 7a00 	vldr	s14, [r3]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008988:	dd03      	ble.n	8008992 <f_pid_calculateThrottle+0x9a>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	691a      	ldr	r2, [r3, #16]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	601a      	str	r2, [r3, #0]
	Ctrl->iValue = Ctrl->integral * Param->Ki;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	ed93 7a00 	vldr	s14, [r3]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	edd3 7a01 	vldr	s15, [r3, #4]
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	edc3 7a05 	vstr	s15, [r3, #20]

	//get d value but from input instead of error
	Ctrl->dValue = Param->Kd*(input - Ctrl->lastInput);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80089b4:	edd7 6a02 	vldr	s13, [r7, #8]
 80089b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80089bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	edc3 7a06 	vstr	s15, [r3, #24]

	Ctrl->output = Ctrl->pValue + Ctrl->iValue + Ctrl->dValue;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	ed93 7a04 	vldr	s14, [r3, #16]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80089d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80089dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	edc3 7a03 	vstr	s15, [r3, #12]
	Ctrl->lastInput = input;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	609a      	str	r2, [r3, #8]
	Ctrl->lastError = error;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	605a      	str	r2, [r3, #4]

	if(Ctrl->output > Param->maxRange) Ctrl->output = Param->maxRange;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80089fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a06:	dd04      	ble.n	8008a12 <f_pid_calculateThrottle+0x11a>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	699a      	ldr	r2, [r3, #24]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	60da      	str	r2, [r3, #12]
 8008a10:	e00e      	b.n	8008a30 <f_pid_calculateThrottle+0x138>
	else if(Ctrl->output < Param->minRange) Ctrl->output = Param->minRange;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	ed93 7a03 	vldr	s14, [r3, #12]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8008a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a26:	d503      	bpl.n	8008a30 <f_pid_calculateThrottle+0x138>
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	695a      	ldr	r2, [r3, #20]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60da      	str	r2, [r3, #12]

	return Ctrl;
 8008a30:	687b      	ldr	r3, [r7, #4]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
	...

08008a40 <f_sh1106_HwInit>:
#define RES_LOW()		GPIO_LOW(LCD_RES_GPIO_Port, LCD_RES_Pin)

bool sh1106_TransmitBusy;

static void f_sh1106_HwInit()
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
	hspi2.Instance = SPI2;
 8008a44:	4b1d      	ldr	r3, [pc, #116]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a46:	4a1e      	ldr	r2, [pc, #120]	; (8008ac0 <f_sh1106_HwInit+0x80>)
 8008a48:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8008a4a:	4b1c      	ldr	r3, [pc, #112]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008a50:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008a52:	4b1a      	ldr	r3, [pc, #104]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008a58:	4b18      	ldr	r3, [pc, #96]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008a5e:	4b17      	ldr	r3, [pc, #92]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a60:	2202      	movs	r2, #2
 8008a62:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008a64:	4b15      	ldr	r3, [pc, #84]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8008a6a:	4b14      	ldr	r3, [pc, #80]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a70:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008a72:	4b12      	ldr	r3, [pc, #72]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a74:	2220      	movs	r2, #32
 8008a76:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008a78:	4b10      	ldr	r3, [pc, #64]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008a7e:	4b0f      	ldr	r3, [pc, #60]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a84:	4b0d      	ldr	r3, [pc, #52]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8008a8a:	4b0c      	ldr	r3, [pc, #48]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a8c:	220a      	movs	r2, #10
 8008a8e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008a90:	480a      	ldr	r0, [pc, #40]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008a92:	f7fd f907 	bl	8005ca4 <HAL_SPI_Init>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <f_sh1106_HwInit+0x60>
	{
		Error_Handler();
 8008a9c:	f7f8 fdaa 	bl	80015f4 <Error_Handler>
	}

	__HAL_SPI_ENABLE(&hspi2);
 8008aa0:	4b06      	ldr	r3, [pc, #24]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <f_sh1106_HwInit+0x7c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aae:	601a      	str	r2, [r3, #0]
	CS_HIGH();
 8008ab0:	4b04      	ldr	r3, [pc, #16]	; (8008ac4 <f_sh1106_HwInit+0x84>)
 8008ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008ab6:	619a      	str	r2, [r3, #24]
}
 8008ab8:	bf00      	nop
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	20000310 	.word	0x20000310
 8008ac0:	40003800 	.word	0x40003800
 8008ac4:	40020400 	.word	0x40020400

08008ac8 <f_sh1106_SendData>:

static bool f_sh1106_SendData(uint8_t *data, uint16_t length, bool cmd)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	807b      	strh	r3, [r7, #2]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	707b      	strb	r3, [r7, #1]
	bool isOk = false;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73fb      	strb	r3, [r7, #15]
	uint8_t tries;

	for(tries = 0; tries < 3; tries++)
 8008adc:	2300      	movs	r3, #0
 8008ade:	73bb      	strb	r3, [r7, #14]
 8008ae0:	e032      	b.n	8008b48 <f_sh1106_SendData+0x80>
	{
		if(sh1106_TransmitBusy)
 8008ae2:	4b1e      	ldr	r3, [pc, #120]	; (8008b5c <f_sh1106_SendData+0x94>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <f_sh1106_SendData+0x2a>
		{
			HAL_Delay(10);
 8008aea:	200a      	movs	r0, #10
 8008aec:	f7f9 f95a 	bl	8001da4 <HAL_Delay>
 8008af0:	e027      	b.n	8008b42 <f_sh1106_SendData+0x7a>
		}
		else
		{
			if(cmd) CMD_LOW();
 8008af2:	787b      	ldrb	r3, [r7, #1]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d004      	beq.n	8008b02 <f_sh1106_SendData+0x3a>
 8008af8:	4b19      	ldr	r3, [pc, #100]	; (8008b60 <f_sh1106_SendData+0x98>)
 8008afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008afe:	619a      	str	r2, [r3, #24]
 8008b00:	e003      	b.n	8008b0a <f_sh1106_SendData+0x42>
			else CMD_HIGH();
 8008b02:	4b17      	ldr	r3, [pc, #92]	; (8008b60 <f_sh1106_SendData+0x98>)
 8008b04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b08:	619a      	str	r2, [r3, #24]

			sh1106_TransmitBusy = true;
 8008b0a:	4b14      	ldr	r3, [pc, #80]	; (8008b5c <f_sh1106_SendData+0x94>)
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	701a      	strb	r2, [r3, #0]
			CS_LOW();
 8008b10:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <f_sh1106_SendData+0x98>)
 8008b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008b16:	619a      	str	r2, [r3, #24]
			HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, data, length, 10);
 8008b18:	887a      	ldrh	r2, [r7, #2]
 8008b1a:	230a      	movs	r3, #10
 8008b1c:	6879      	ldr	r1, [r7, #4]
 8008b1e:	4811      	ldr	r0, [pc, #68]	; (8008b64 <f_sh1106_SendData+0x9c>)
 8008b20:	f7fd f949 	bl	8005db6 <HAL_SPI_Transmit>
 8008b24:	4603      	mov	r3, r0
 8008b26:	737b      	strb	r3, [r7, #13]
			CS_HIGH();
 8008b28:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <f_sh1106_SendData+0x98>)
 8008b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b2e:	619a      	str	r2, [r3, #24]
			sh1106_TransmitBusy = false;
 8008b30:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <f_sh1106_SendData+0x94>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	701a      	strb	r2, [r3, #0]

			if(status == HAL_OK) isOk = true;
 8008b36:	7b7b      	ldrb	r3, [r7, #13]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d109      	bne.n	8008b50 <f_sh1106_SendData+0x88>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	73fb      	strb	r3, [r7, #15]

			break;
 8008b40:	e006      	b.n	8008b50 <f_sh1106_SendData+0x88>
	for(tries = 0; tries < 3; tries++)
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
 8008b44:	3301      	adds	r3, #1
 8008b46:	73bb      	strb	r3, [r7, #14]
 8008b48:	7bbb      	ldrb	r3, [r7, #14]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d9c9      	bls.n	8008ae2 <f_sh1106_SendData+0x1a>
 8008b4e:	e000      	b.n	8008b52 <f_sh1106_SendData+0x8a>
			break;
 8008b50:	bf00      	nop
		}
	}

	return isOk;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	200008ab 	.word	0x200008ab
 8008b60:	40020400 	.word	0x40020400
 8008b64:	20000310 	.word	0x20000310

08008b68 <f_sh1106_Init>:

//============ public functions ========================

void f_sh1106_Init()
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
	f_sh1106_HwInit();
 8008b6c:	f7ff ff68 	bl	8008a40 <f_sh1106_HwInit>

	RES_LOW();
 8008b70:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <f_sh1106_Init+0x24>)
 8008b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008b76:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 8008b78:	2001      	movs	r0, #1
 8008b7a:	f7f9 f913 	bl	8001da4 <HAL_Delay>
	RES_HIGH();
 8008b7e:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <f_sh1106_Init+0x24>)
 8008b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b84:	619a      	str	r2, [r3, #24]

}
 8008b86:	bf00      	nop
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	40020400 	.word	0x40020400

08008b90 <f_sh1106_cmd_SetColumnAddress>:

bool f_sh1106_cmd_SetColumnAddress(uint8_t address)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	71fb      	strb	r3, [r7, #7]
	if(address >= SH1106_WIDTH) return false;
 8008b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	da01      	bge.n	8008ba6 <f_sh1106_cmd_SetColumnAddress+0x16>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e01a      	b.n	8008bdc <f_sh1106_cmd_SetColumnAddress+0x4c>

	address += 2; //2 first and last pixels are not visible
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	3302      	adds	r3, #2
 8008baa:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[2];

	cmd[0] = 0x10 | ((address >> 4) & 0x0F);
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	091b      	lsrs	r3, r3, #4
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	b25b      	sxtb	r3, r3
 8008bb4:	f043 0310 	orr.w	r3, r3, #16
 8008bb8:	b25b      	sxtb	r3, r3
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	733b      	strb	r3, [r7, #12]
	cmd[1] = address & 0x0F;
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	737b      	strb	r3, [r7, #13]

	bool isOk = f_sh1106_SendData((uint8_t*)&cmd, 2, true);
 8008bc8:	f107 030c 	add.w	r3, r7, #12
 8008bcc:	2201      	movs	r2, #1
 8008bce:	2102      	movs	r1, #2
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff ff79 	bl	8008ac8 <f_sh1106_SendData>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <f_sh1106_cmd_SetSegmentDirection>:

	return isOk;
}

bool f_sh1106_cmd_SetSegmentDirection(bool reverse)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xA0 | (reverse & 0x01);
 8008bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	b25b      	sxtb	r3, r3
 8008bf8:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8008bfc:	b25b      	sxtb	r3, r3
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8008c02:	f107 030e 	add.w	r3, r7, #14
 8008c06:	2201      	movs	r2, #1
 8008c08:	2101      	movs	r1, #1
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff ff5c 	bl	8008ac8 <f_sh1106_SendData>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <f_sh1106_cmd_TogglePower>:

	return isOk;
}

bool f_sh1106_cmd_TogglePower(bool sleep)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	4603      	mov	r3, r0
 8008c26:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xAE | (sleep & 0x01);
 8008c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	b25b      	sxtb	r3, r3
 8008c32:	f063 0351 	orn	r3, r3, #81	; 0x51
 8008c36:	b25b      	sxtb	r3, r3
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8008c3c:	f107 030e 	add.w	r3, r7, #14
 8008c40:	2201      	movs	r2, #1
 8008c42:	2101      	movs	r1, #1
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff ff3f 	bl	8008ac8 <f_sh1106_SendData>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <f_sh1106_cmd_SetPageAddress>:

bool f_sh1106_cmd_SetPageAddress(uint8_t page)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	71fb      	strb	r3, [r7, #7]
	if(page >= SH1106_HEIGHT/8) return false;
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	2b07      	cmp	r3, #7
 8008c66:	d901      	bls.n	8008c6c <f_sh1106_cmd_SetPageAddress+0x14>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e013      	b.n	8008c94 <f_sh1106_cmd_SetPageAddress+0x3c>

	uint8_t cmd = 0xB0 | (page & 0x0F);
 8008c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c70:	f003 030f 	and.w	r3, r3, #15
 8008c74:	b25b      	sxtb	r3, r3
 8008c76:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8008c7a:	b25b      	sxtb	r3, r3
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8008c80:	f107 030e 	add.w	r3, r7, #14
 8008c84:	2201      	movs	r2, #1
 8008c86:	2101      	movs	r1, #1
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff ff1d 	bl	8008ac8 <f_sh1106_SendData>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <f_sh1106_cmd_SetScanDirection>:

bool f_sh1106_cmd_SetScanDirection(bool reverse)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xC0 | ((reverse << 3) & 0x0F);
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	b25b      	sxtb	r3, r3
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	b25b      	sxtb	r3, r3
 8008cb2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008cb6:	b25b      	sxtb	r3, r3
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8008cbc:	f107 030e 	add.w	r3, r7, #14
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff feff 	bl	8008ac8 <f_sh1106_SendData>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <f_sh1106_CS_HIGH>:

	return isOk;
}

void f_sh1106_CS_HIGH()
{
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0
	CS_HIGH();
 8008cdc:	4b04      	ldr	r3, [pc, #16]	; (8008cf0 <f_sh1106_CS_HIGH+0x18>)
 8008cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008ce2:	619a      	str	r2, [r3, #24]
}
 8008ce4:	bf00      	nop
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	40020400 	.word	0x40020400

08008cf4 <f_sh1106_SendPageData>:

bool f_sh1106_SendPageData(uint8_t page, uint8_t *data, uint8_t length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
 8008d00:	4613      	mov	r3, r2
 8008d02:	71bb      	strb	r3, [r7, #6]
	uint8_t tries = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]

	HAL_StatusTypeDef status;
	do
	{
		CS_LOW();
 8008d08:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <f_sh1106_SendPageData+0x6c>)
 8008d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008d0e:	619a      	str	r2, [r3, #24]
		CMD_HIGH(); //only data is send;
 8008d10:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <f_sh1106_SendPageData+0x6c>)
 8008d12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d16:	619a      	str	r2, [r3, #24]
		status = HAL_SPI_Transmit_DMA(&hspi2, data, length);
 8008d18:	79bb      	ldrb	r3, [r7, #6]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	4810      	ldr	r0, [pc, #64]	; (8008d64 <f_sh1106_SendPageData+0x70>)
 8008d22:	f7fd f985 	bl	8006030 <HAL_SPI_Transmit_DMA>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73bb      	strb	r3, [r7, #14]
		tries ++;
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	73fb      	strb	r3, [r7, #15]

	}while((status != HAL_OK) && tries < 5);
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <f_sh1106_SendPageData+0x48>
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d9e5      	bls.n	8008d08 <f_sh1106_SendPageData+0x14>

	if(tries == 5)
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	2b05      	cmp	r3, #5
 8008d40:	d105      	bne.n	8008d4e <f_sh1106_SendPageData+0x5a>
		{
			CS_HIGH();
 8008d42:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <f_sh1106_SendPageData+0x6c>)
 8008d44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008d48:	619a      	str	r2, [r3, #24]
			return false;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	e003      	b.n	8008d56 <f_sh1106_SendPageData+0x62>
		}

	sh1106_TransmitBusy = true;
 8008d4e:	4b06      	ldr	r3, [pc, #24]	; (8008d68 <f_sh1106_SendPageData+0x74>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	701a      	strb	r2, [r3, #0]
	return true;
 8008d54:	2301      	movs	r3, #1
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	40020400 	.word	0x40020400
 8008d64:	20000310 	.word	0x20000310
 8008d68:	200008ab 	.word	0x200008ab

08008d6c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	f_sh1106_CS_HIGH();
 8008d74:	f7ff ffb0 	bl	8008cd8 <f_sh1106_CS_HIGH>
	sh1106_TransmitBusy = false;
 8008d78:	4b03      	ldr	r3, [pc, #12]	; (8008d88 <HAL_SPI_TxCpltCallback+0x1c>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]
}
 8008d7e:	bf00      	nop
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	200008ab 	.word	0x200008ab

08008d8c <f_work_motorInitTimer>:
enum {SENSOR_OFF, SENSOR_TRIGGER, SENSOR_MEASURE, SENSOR_READ} sensorStatus;

// ====================== motor section ====================

void f_work_motorInitTimer()
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 8008d92:	1d3b      	adds	r3, r7, #4
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	605a      	str	r2, [r3, #4]
 8008d9a:	609a      	str	r2, [r3, #8]
 8008d9c:	60da      	str	r2, [r3, #12]
 8008d9e:	611a      	str	r2, [r3, #16]
 8008da0:	615a      	str	r2, [r3, #20]
 8008da2:	619a      	str	r2, [r3, #24]

	htim9.Instance = TIM9;
 8008da4:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <f_work_motorInitTimer+0x84>)
 8008da6:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <f_work_motorInitTimer+0x88>)
 8008da8:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 4;
 8008daa:	4b19      	ldr	r3, [pc, #100]	; (8008e10 <f_work_motorInitTimer+0x84>)
 8008dac:	2204      	movs	r2, #4
 8008dae:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008db0:	4b17      	ldr	r3, [pc, #92]	; (8008e10 <f_work_motorInitTimer+0x84>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = MAX_MOTOR_PWM;
 8008db6:	4b16      	ldr	r3, [pc, #88]	; (8008e10 <f_work_motorInitTimer+0x84>)
 8008db8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008dbc:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008dbe:	4b14      	ldr	r3, [pc, #80]	; (8008e10 <f_work_motorInitTimer+0x84>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008dc4:	4b12      	ldr	r3, [pc, #72]	; (8008e10 <f_work_motorInitTimer+0x84>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8008dca:	4811      	ldr	r0, [pc, #68]	; (8008e10 <f_work_motorInitTimer+0x84>)
 8008dcc:	f7fd fd62 	bl	8006894 <HAL_TIM_PWM_Init>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <f_work_motorInitTimer+0x4e>
	{
		Error_Handler();
 8008dd6:	f7f8 fc0d 	bl	80015f4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008dda:	2360      	movs	r3, #96	; 0x60
 8008ddc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008dea:	1d3b      	adds	r3, r7, #4
 8008dec:	2200      	movs	r2, #0
 8008dee:	4619      	mov	r1, r3
 8008df0:	4807      	ldr	r0, [pc, #28]	; (8008e10 <f_work_motorInitTimer+0x84>)
 8008df2:	f7fe fc0b 	bl	800760c <HAL_TIM_PWM_ConfigChannel>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <f_work_motorInitTimer+0x74>
	{
		Error_Handler();
 8008dfc:	f7f8 fbfa 	bl	80015f4 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim9);
 8008e00:	4803      	ldr	r0, [pc, #12]	; (8008e10 <f_work_motorInitTimer+0x84>)
 8008e02:	f7f8 fef9 	bl	8001bf8 <HAL_TIM_MspPostInit>


}
 8008e06:	bf00      	nop
 8008e08:	3720      	adds	r7, #32
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000414 	.word	0x20000414
 8008e14:	40014000 	.word	0x40014000

08008e18 <f_work_motorSet>:

void f_work_motorSet(bool onOff)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	71fb      	strb	r3, [r7, #7]
	if(onOff) HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <f_work_motorSet+0x1a>
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4806      	ldr	r0, [pc, #24]	; (8008e44 <f_work_motorSet+0x2c>)
 8008e2c:	f7fd fd82 	bl	8006934 <HAL_TIM_PWM_Start>
	else HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);
}
 8008e30:	e003      	b.n	8008e3a <f_work_motorSet+0x22>
	else HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);
 8008e32:	2100      	movs	r1, #0
 8008e34:	4803      	ldr	r0, [pc, #12]	; (8008e44 <f_work_motorSet+0x2c>)
 8008e36:	f7fd fe45 	bl	8006ac4 <HAL_TIM_PWM_Stop>
}
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000414 	.word	0x20000414

08008e48 <f_work_motorSetVelocity>:

void f_work_motorSetVelocity(uint16_t velocity)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	80fb      	strh	r3, [r7, #6]
	if(velocity >= MAX_MOTOR_PWM) velocity = MAX_MOTOR_PWM;
 8008e52:	88fb      	ldrh	r3, [r7, #6]
 8008e54:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d902      	bls.n	8008e62 <f_work_motorSetVelocity+0x1a>
 8008e5c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8008e60:	80fb      	strh	r3, [r7, #6]
	motorVelocityOCR = velocity;
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <f_work_motorSetVelocity+0x38>)
 8008e68:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, velocity);
 8008e6a:	4b06      	ldr	r3, [pc, #24]	; (8008e84 <f_work_motorSetVelocity+0x3c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	200008ac 	.word	0x200008ac
 8008e84:	20000414 	.word	0x20000414

08008e88 <f_work_sensorTimerModeIC>:
 * change TIM10 to IC mode
 * after t_period interrupt with containing time
 */

static void f_work_sensorTimerModeIC()
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
	TIM_IC_InitTypeDef sConfigIC = {0};
 8008e8e:	463b      	mov	r3, r7
 8008e90:	2200      	movs	r2, #0
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	605a      	str	r2, [r3, #4]
 8008e96:	609a      	str	r2, [r3, #8]
 8008e98:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_DeInit(&htim10);
 8008e9a:	4813      	ldr	r0, [pc, #76]	; (8008ee8 <f_work_sensorTimerModeIC+0x60>)
 8008e9c:	f7fd fb7c 	bl	8006598 <HAL_TIM_OC_DeInit>

	if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8008ea0:	4811      	ldr	r0, [pc, #68]	; (8008ee8 <f_work_sensorTimerModeIC+0x60>)
 8008ea2:	f7fd fe7f 	bl	8006ba4 <HAL_TIM_IC_Init>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <f_work_sensorTimerModeIC+0x28>
	{
		Error_Handler();
 8008eac:	f7f8 fba2 	bl	80015f4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8008eb0:	230a      	movs	r3, #10
 8008eb2:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008ec0:	463b      	mov	r3, r7
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4808      	ldr	r0, [pc, #32]	; (8008ee8 <f_work_sensorTimerModeIC+0x60>)
 8008ec8:	f7fe fb04 	bl	80074d4 <HAL_TIM_IC_ConfigChannel>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <f_work_sensorTimerModeIC+0x4e>
	{
		Error_Handler();
 8008ed2:	f7f8 fb8f 	bl	80015f4 <Error_Handler>
	}
	__HAL_TIM_CLEAR_IT(&htim10, TIM_IT_UPDATE);
 8008ed6:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <f_work_sensorTimerModeIC+0x60>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f06f 0201 	mvn.w	r2, #1
 8008ede:	611a      	str	r2, [r3, #16]
}
 8008ee0:	bf00      	nop
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	2000045c 	.word	0x2000045c

08008eec <f_work_sensorTimerModeOC>:

static void f_work_sensorTimerModeOC()
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 8008ef2:	1d3b      	adds	r3, r7, #4
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	609a      	str	r2, [r3, #8]
 8008efc:	60da      	str	r2, [r3, #12]
 8008efe:	611a      	str	r2, [r3, #16]
 8008f00:	615a      	str	r2, [r3, #20]
 8008f02:	619a      	str	r2, [r3, #24]
	HAL_TIM_IC_DeInit(&htim10);
 8008f04:	4813      	ldr	r0, [pc, #76]	; (8008f54 <f_work_sensorTimerModeOC+0x68>)
 8008f06:	f7fd fe9c 	bl	8006c42 <HAL_TIM_IC_DeInit>

	if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8008f0a:	4812      	ldr	r0, [pc, #72]	; (8008f54 <f_work_sensorTimerModeOC+0x68>)
 8008f0c:	f7fd faf5 	bl	80064fa <HAL_TIM_OC_Init>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <f_work_sensorTimerModeOC+0x2e>
	{
		Error_Handler();
 8008f16:	f7f8 fb6d 	bl	80015f4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 10;
 8008f1e:	230a      	movs	r3, #10
 8008f20:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f2a:	1d3b      	adds	r3, r7, #4
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4808      	ldr	r0, [pc, #32]	; (8008f54 <f_work_sensorTimerModeOC+0x68>)
 8008f32:	f7fe fa73 	bl	800741c <HAL_TIM_OC_ConfigChannel>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <f_work_sensorTimerModeOC+0x54>
	{
		Error_Handler();
 8008f3c:	f7f8 fb5a 	bl	80015f4 <Error_Handler>
	}
	__HAL_TIM_CLEAR_IT(&htim10, TIM_IT_UPDATE);
 8008f40:	4b04      	ldr	r3, [pc, #16]	; (8008f54 <f_work_sensorTimerModeOC+0x68>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f06f 0201 	mvn.w	r2, #1
 8008f48:	611a      	str	r2, [r3, #16]
}
 8008f4a:	bf00      	nop
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	2000045c 	.word	0x2000045c

08008f58 <f_work_sensorInitTimer>:

void f_work_sensorInitTimer()
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0

	htim10.Instance = TIM10;
 8008f5c:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <f_work_sensorInitTimer+0x50>)
 8008f5e:	4a13      	ldr	r2, [pc, #76]	; (8008fac <f_work_sensorInitTimer+0x54>)
 8008f60:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 167;
 8008f62:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <f_work_sensorInitTimer+0x50>)
 8008f64:	22a7      	movs	r2, #167	; 0xa7
 8008f66:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f68:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <f_work_sensorInitTimer+0x50>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 30000;
 8008f6e:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <f_work_sensorInitTimer+0x50>)
 8008f70:	f247 5230 	movw	r2, #30000	; 0x7530
 8008f74:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f76:	4b0c      	ldr	r3, [pc, #48]	; (8008fa8 <f_work_sensorInitTimer+0x50>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <f_work_sensorInitTimer+0x50>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8008f82:	4809      	ldr	r0, [pc, #36]	; (8008fa8 <f_work_sensorInitTimer+0x50>)
 8008f84:	f7fd fa6a 	bl	800645c <HAL_TIM_Base_Init>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <f_work_sensorInitTimer+0x3a>
	{
		Error_Handler();
 8008f8e:	f7f8 fb31 	bl	80015f4 <Error_Handler>
	}
	__HAL_TIM_URS_ENABLE(&htim10);
 8008f92:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <f_work_sensorInitTimer+0x50>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	4b03      	ldr	r3, [pc, #12]	; (8008fa8 <f_work_sensorInitTimer+0x50>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f042 0204 	orr.w	r2, r2, #4
 8008fa0:	601a      	str	r2, [r3, #0]
}
 8008fa2:	bf00      	nop
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	2000045c 	.word	0x2000045c
 8008fac:	40014400 	.word	0x40014400

08008fb0 <f_work_sensorTriggerMeasure>:

void f_work_sensorTriggerMeasure()
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
	if(sensorStatus == SENSOR_OFF)
 8008fb4:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <f_work_sensorTriggerMeasure+0x44>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d119      	bne.n	8008ff0 <f_work_sensorTriggerMeasure+0x40>
	{
		f_work_sensorTimerModeOC();
 8008fbc:	f7ff ff96 	bl	8008eec <f_work_sensorTimerModeOC>

		HAL_GPIO_WritePin(SENSOR_TRIG_GPIO_Port, SENSOR_TRIG_Pin, GPIO_PIN_SET);
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fc6:	480c      	ldr	r0, [pc, #48]	; (8008ff8 <f_work_sensorTriggerMeasure+0x48>)
 8008fc8:	f7f9 fd5e 	bl	8002a88 <HAL_GPIO_WritePin>
		HAL_TIM_OC_Start_IT(&htim10, TIM_CHANNEL_1);
 8008fcc:	2100      	movs	r1, #0
 8008fce:	480b      	ldr	r0, [pc, #44]	; (8008ffc <f_work_sensorTriggerMeasure+0x4c>)
 8008fd0:	f7fd fb4a 	bl	8006668 <HAL_TIM_OC_Start_IT>

		__HAL_TIM_ENABLE_IT(&htim10, TIM_IT_UPDATE);
 8008fd4:	4b09      	ldr	r3, [pc, #36]	; (8008ffc <f_work_sensorTriggerMeasure+0x4c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	4b08      	ldr	r3, [pc, #32]	; (8008ffc <f_work_sensorTriggerMeasure+0x4c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 0201 	orr.w	r2, r2, #1
 8008fe2:	60da      	str	r2, [r3, #12]

		sensorStatus = SENSOR_TRIGGER;
 8008fe4:	4b03      	ldr	r3, [pc, #12]	; (8008ff4 <f_work_sensorTriggerMeasure+0x44>)
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	701a      	strb	r2, [r3, #0]
		sensorMeasureDone = false;
 8008fea:	4b05      	ldr	r3, [pc, #20]	; (8009000 <f_work_sensorTriggerMeasure+0x50>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	701a      	strb	r2, [r3, #0]
	}
}
 8008ff0:	bf00      	nop
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	200008b1 	.word	0x200008b1
 8008ff8:	40020400 	.word	0x40020400
 8008ffc:	2000045c 	.word	0x2000045c
 8009000:	200008b0 	.word	0x200008b0

08009004 <f_work_sensorGetLastMeasure>:

uint16_t f_work_sensorGetLastMeasure() //return value in mm
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
	bool isMeasureOk = false;
 800900a:	2300      	movs	r3, #0
 800900c:	71fb      	strb	r3, [r7, #7]
	uint16_t distance;

	if(sensorMeasureDone)
 800900e:	4b12      	ldr	r3, [pc, #72]	; (8009058 <f_work_sensorGetLastMeasure+0x54>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d013      	beq.n	800903e <f_work_sensorGetLastMeasure+0x3a>
	{
		distance = (uint32_t)((sensorTimeElapsed + SENSOR_CORRECTION) * SOUND_VELOCITY)/2000;
 8009016:	4b11      	ldr	r3, [pc, #68]	; (800905c <f_work_sensorGetLastMeasure+0x58>)
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	3305      	adds	r3, #5
 800901c:	f240 1257 	movw	r2, #343	; 0x157
 8009020:	fb02 f303 	mul.w	r3, r2, r3
 8009024:	461a      	mov	r2, r3
 8009026:	4b0e      	ldr	r3, [pc, #56]	; (8009060 <f_work_sensorGetLastMeasure+0x5c>)
 8009028:	fba3 2302 	umull	r2, r3, r3, r2
 800902c:	09db      	lsrs	r3, r3, #7
 800902e:	80bb      	strh	r3, [r7, #4]
		if(distance <= SENSOR_MAX_DISTANCE) isMeasureOk = true;
 8009030:	88bb      	ldrh	r3, [r7, #4]
 8009032:	f640 0298 	movw	r2, #2200	; 0x898
 8009036:	4293      	cmp	r3, r2
 8009038:	d801      	bhi.n	800903e <f_work_sensorGetLastMeasure+0x3a>
 800903a:	2301      	movs	r3, #1
 800903c:	71fb      	strb	r3, [r7, #7]
	}

	return isMeasureOk ? distance : 0;
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <f_work_sensorGetLastMeasure+0x44>
 8009044:	88bb      	ldrh	r3, [r7, #4]
 8009046:	e000      	b.n	800904a <f_work_sensorGetLastMeasure+0x46>
 8009048:	2300      	movs	r3, #0

}
 800904a:	4618      	mov	r0, r3
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	200008b0 	.word	0x200008b0
 800905c:	200008ae 	.word	0x200008ae
 8009060:	10624dd3 	.word	0x10624dd3

08009064 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a0c      	ldr	r2, [pc, #48]	; (80090a4 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d112      	bne.n	800909c <HAL_TIM_OC_DelayElapsedCallback+0x38>
	{
		if(sensorStatus == SENSOR_TRIGGER)
 8009076:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d10e      	bne.n	800909c <HAL_TIM_OC_DelayElapsedCallback+0x38>
		{
			f_work_sensorTimerModeIC();
 800907e:	f7ff ff03 	bl	8008e88 <f_work_sensorTimerModeIC>

			HAL_GPIO_WritePin(SENSOR_TRIG_GPIO_Port, SENSOR_TRIG_Pin, GPIO_PIN_RESET);
 8009082:	2200      	movs	r2, #0
 8009084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009088:	4808      	ldr	r0, [pc, #32]	; (80090ac <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 800908a:	f7f9 fcfd 	bl	8002a88 <HAL_GPIO_WritePin>
			HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 800908e:	2100      	movs	r1, #0
 8009090:	4807      	ldr	r0, [pc, #28]	; (80090b0 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8009092:	f7fd fe3f 	bl	8006d14 <HAL_TIM_IC_Start_IT>

			sensorStatus = SENSOR_MEASURE;
 8009096:	4b04      	ldr	r3, [pc, #16]	; (80090a8 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8009098:	2202      	movs	r2, #2
 800909a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800909c:	bf00      	nop
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	40014400 	.word	0x40014400
 80090a8:	200008b1 	.word	0x200008b1
 80090ac:	40020400 	.word	0x40020400
 80090b0:	2000045c 	.word	0x2000045c

080090b4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a13      	ldr	r2, [pc, #76]	; (8009110 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d11f      	bne.n	8009106 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if(sensorStatus == SENSOR_MEASURE) //rising edge
 80090c6:	4b13      	ldr	r3, [pc, #76]	; (8009114 <HAL_TIM_IC_CaptureCallback+0x60>)
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d107      	bne.n	80090de <HAL_TIM_IC_CaptureCallback+0x2a>
		{
			__HAL_TIM_SET_COUNTER(&htim10, 0);
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <HAL_TIM_IC_CaptureCallback+0x64>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	625a      	str	r2, [r3, #36]	; 0x24

			sensorStatus = SENSOR_READ;
 80090d6:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <HAL_TIM_IC_CaptureCallback+0x60>)
 80090d8:	2203      	movs	r2, #3
 80090da:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim10, TIM_CHANNEL_1);
			sensorStatus = SENSOR_OFF;
		}

	}
}
 80090dc:	e013      	b.n	8009106 <HAL_TIM_IC_CaptureCallback+0x52>
		else if(sensorStatus == SENSOR_READ) //falling edge
 80090de:	4b0d      	ldr	r3, [pc, #52]	; (8009114 <HAL_TIM_IC_CaptureCallback+0x60>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d10f      	bne.n	8009106 <HAL_TIM_IC_CaptureCallback+0x52>
			sensorTimeElapsed = __HAL_TIM_GET_COMPARE(&htim10, TIM_CHANNEL_1);
 80090e6:	4b0c      	ldr	r3, [pc, #48]	; (8009118 <HAL_TIM_IC_CaptureCallback+0x64>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	4b0b      	ldr	r3, [pc, #44]	; (800911c <HAL_TIM_IC_CaptureCallback+0x68>)
 80090f0:	801a      	strh	r2, [r3, #0]
			sensorMeasureDone = true;
 80090f2:	4b0b      	ldr	r3, [pc, #44]	; (8009120 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80090f4:	2201      	movs	r2, #1
 80090f6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim10, TIM_CHANNEL_1);
 80090f8:	2100      	movs	r1, #0
 80090fa:	4807      	ldr	r0, [pc, #28]	; (8009118 <HAL_TIM_IC_CaptureCallback+0x64>)
 80090fc:	f7fd ff32 	bl	8006f64 <HAL_TIM_IC_Stop_IT>
			sensorStatus = SENSOR_OFF;
 8009100:	4b04      	ldr	r3, [pc, #16]	; (8009114 <HAL_TIM_IC_CaptureCallback+0x60>)
 8009102:	2200      	movs	r2, #0
 8009104:	701a      	strb	r2, [r3, #0]
}
 8009106:	bf00      	nop
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	40014400 	.word	0x40014400
 8009114:	200008b1 	.word	0x200008b1
 8009118:	2000045c 	.word	0x2000045c
 800911c:	200008ae 	.word	0x200008ae
 8009120:	200008b0 	.word	0x200008b0

08009124 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //timeout for distance sensor
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a08      	ldr	r2, [pc, #32]	; (8009154 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d109      	bne.n	800914a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		HAL_TIM_IC_Stop_IT(&htim10, TIM_CHANNEL_1);
 8009136:	2100      	movs	r1, #0
 8009138:	4807      	ldr	r0, [pc, #28]	; (8009158 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800913a:	f7fd ff13 	bl	8006f64 <HAL_TIM_IC_Stop_IT>
		sensorStatus = SENSOR_OFF;
 800913e:	4b07      	ldr	r3, [pc, #28]	; (800915c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]
		sensorMeasureDone = false;
 8009144:	4b06      	ldr	r3, [pc, #24]	; (8009160 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8009146:	2200      	movs	r2, #0
 8009148:	701a      	strb	r2, [r3, #0]
	}
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	40014400 	.word	0x40014400
 8009158:	2000045c 	.word	0x2000045c
 800915c:	200008b1 	.word	0x200008b1
 8009160:	200008b0 	.word	0x200008b0

08009164 <__errno>:
 8009164:	4b01      	ldr	r3, [pc, #4]	; (800916c <__errno+0x8>)
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	20000028 	.word	0x20000028

08009170 <__libc_init_array>:
 8009170:	b570      	push	{r4, r5, r6, lr}
 8009172:	4d0d      	ldr	r5, [pc, #52]	; (80091a8 <__libc_init_array+0x38>)
 8009174:	4c0d      	ldr	r4, [pc, #52]	; (80091ac <__libc_init_array+0x3c>)
 8009176:	1b64      	subs	r4, r4, r5
 8009178:	10a4      	asrs	r4, r4, #2
 800917a:	2600      	movs	r6, #0
 800917c:	42a6      	cmp	r6, r4
 800917e:	d109      	bne.n	8009194 <__libc_init_array+0x24>
 8009180:	4d0b      	ldr	r5, [pc, #44]	; (80091b0 <__libc_init_array+0x40>)
 8009182:	4c0c      	ldr	r4, [pc, #48]	; (80091b4 <__libc_init_array+0x44>)
 8009184:	f002 ff02 	bl	800bf8c <_init>
 8009188:	1b64      	subs	r4, r4, r5
 800918a:	10a4      	asrs	r4, r4, #2
 800918c:	2600      	movs	r6, #0
 800918e:	42a6      	cmp	r6, r4
 8009190:	d105      	bne.n	800919e <__libc_init_array+0x2e>
 8009192:	bd70      	pop	{r4, r5, r6, pc}
 8009194:	f855 3b04 	ldr.w	r3, [r5], #4
 8009198:	4798      	blx	r3
 800919a:	3601      	adds	r6, #1
 800919c:	e7ee      	b.n	800917c <__libc_init_array+0xc>
 800919e:	f855 3b04 	ldr.w	r3, [r5], #4
 80091a2:	4798      	blx	r3
 80091a4:	3601      	adds	r6, #1
 80091a6:	e7f2      	b.n	800918e <__libc_init_array+0x1e>
 80091a8:	0800d184 	.word	0x0800d184
 80091ac:	0800d184 	.word	0x0800d184
 80091b0:	0800d184 	.word	0x0800d184
 80091b4:	0800d188 	.word	0x0800d188

080091b8 <memcpy>:
 80091b8:	440a      	add	r2, r1
 80091ba:	4291      	cmp	r1, r2
 80091bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80091c0:	d100      	bne.n	80091c4 <memcpy+0xc>
 80091c2:	4770      	bx	lr
 80091c4:	b510      	push	{r4, lr}
 80091c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ce:	4291      	cmp	r1, r2
 80091d0:	d1f9      	bne.n	80091c6 <memcpy+0xe>
 80091d2:	bd10      	pop	{r4, pc}

080091d4 <memset>:
 80091d4:	4402      	add	r2, r0
 80091d6:	4603      	mov	r3, r0
 80091d8:	4293      	cmp	r3, r2
 80091da:	d100      	bne.n	80091de <memset+0xa>
 80091dc:	4770      	bx	lr
 80091de:	f803 1b01 	strb.w	r1, [r3], #1
 80091e2:	e7f9      	b.n	80091d8 <memset+0x4>

080091e4 <__cvt>:
 80091e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091e8:	ec55 4b10 	vmov	r4, r5, d0
 80091ec:	2d00      	cmp	r5, #0
 80091ee:	460e      	mov	r6, r1
 80091f0:	4619      	mov	r1, r3
 80091f2:	462b      	mov	r3, r5
 80091f4:	bfbb      	ittet	lt
 80091f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80091fa:	461d      	movlt	r5, r3
 80091fc:	2300      	movge	r3, #0
 80091fe:	232d      	movlt	r3, #45	; 0x2d
 8009200:	700b      	strb	r3, [r1, #0]
 8009202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009204:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009208:	4691      	mov	r9, r2
 800920a:	f023 0820 	bic.w	r8, r3, #32
 800920e:	bfbc      	itt	lt
 8009210:	4622      	movlt	r2, r4
 8009212:	4614      	movlt	r4, r2
 8009214:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009218:	d005      	beq.n	8009226 <__cvt+0x42>
 800921a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800921e:	d100      	bne.n	8009222 <__cvt+0x3e>
 8009220:	3601      	adds	r6, #1
 8009222:	2102      	movs	r1, #2
 8009224:	e000      	b.n	8009228 <__cvt+0x44>
 8009226:	2103      	movs	r1, #3
 8009228:	ab03      	add	r3, sp, #12
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	ab02      	add	r3, sp, #8
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	ec45 4b10 	vmov	d0, r4, r5
 8009234:	4653      	mov	r3, sl
 8009236:	4632      	mov	r2, r6
 8009238:	f000 fcea 	bl	8009c10 <_dtoa_r>
 800923c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009240:	4607      	mov	r7, r0
 8009242:	d102      	bne.n	800924a <__cvt+0x66>
 8009244:	f019 0f01 	tst.w	r9, #1
 8009248:	d022      	beq.n	8009290 <__cvt+0xac>
 800924a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800924e:	eb07 0906 	add.w	r9, r7, r6
 8009252:	d110      	bne.n	8009276 <__cvt+0x92>
 8009254:	783b      	ldrb	r3, [r7, #0]
 8009256:	2b30      	cmp	r3, #48	; 0x30
 8009258:	d10a      	bne.n	8009270 <__cvt+0x8c>
 800925a:	2200      	movs	r2, #0
 800925c:	2300      	movs	r3, #0
 800925e:	4620      	mov	r0, r4
 8009260:	4629      	mov	r1, r5
 8009262:	f7f7 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8009266:	b918      	cbnz	r0, 8009270 <__cvt+0x8c>
 8009268:	f1c6 0601 	rsb	r6, r6, #1
 800926c:	f8ca 6000 	str.w	r6, [sl]
 8009270:	f8da 3000 	ldr.w	r3, [sl]
 8009274:	4499      	add	r9, r3
 8009276:	2200      	movs	r2, #0
 8009278:	2300      	movs	r3, #0
 800927a:	4620      	mov	r0, r4
 800927c:	4629      	mov	r1, r5
 800927e:	f7f7 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8009282:	b108      	cbz	r0, 8009288 <__cvt+0xa4>
 8009284:	f8cd 900c 	str.w	r9, [sp, #12]
 8009288:	2230      	movs	r2, #48	; 0x30
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	454b      	cmp	r3, r9
 800928e:	d307      	bcc.n	80092a0 <__cvt+0xbc>
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009294:	1bdb      	subs	r3, r3, r7
 8009296:	4638      	mov	r0, r7
 8009298:	6013      	str	r3, [r2, #0]
 800929a:	b004      	add	sp, #16
 800929c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a0:	1c59      	adds	r1, r3, #1
 80092a2:	9103      	str	r1, [sp, #12]
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	e7f0      	b.n	800928a <__cvt+0xa6>

080092a8 <__exponent>:
 80092a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092aa:	4603      	mov	r3, r0
 80092ac:	2900      	cmp	r1, #0
 80092ae:	bfb8      	it	lt
 80092b0:	4249      	neglt	r1, r1
 80092b2:	f803 2b02 	strb.w	r2, [r3], #2
 80092b6:	bfb4      	ite	lt
 80092b8:	222d      	movlt	r2, #45	; 0x2d
 80092ba:	222b      	movge	r2, #43	; 0x2b
 80092bc:	2909      	cmp	r1, #9
 80092be:	7042      	strb	r2, [r0, #1]
 80092c0:	dd2a      	ble.n	8009318 <__exponent+0x70>
 80092c2:	f10d 0407 	add.w	r4, sp, #7
 80092c6:	46a4      	mov	ip, r4
 80092c8:	270a      	movs	r7, #10
 80092ca:	46a6      	mov	lr, r4
 80092cc:	460a      	mov	r2, r1
 80092ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80092d2:	fb07 1516 	mls	r5, r7, r6, r1
 80092d6:	3530      	adds	r5, #48	; 0x30
 80092d8:	2a63      	cmp	r2, #99	; 0x63
 80092da:	f104 34ff 	add.w	r4, r4, #4294967295
 80092de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80092e2:	4631      	mov	r1, r6
 80092e4:	dcf1      	bgt.n	80092ca <__exponent+0x22>
 80092e6:	3130      	adds	r1, #48	; 0x30
 80092e8:	f1ae 0502 	sub.w	r5, lr, #2
 80092ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80092f0:	1c44      	adds	r4, r0, #1
 80092f2:	4629      	mov	r1, r5
 80092f4:	4561      	cmp	r1, ip
 80092f6:	d30a      	bcc.n	800930e <__exponent+0x66>
 80092f8:	f10d 0209 	add.w	r2, sp, #9
 80092fc:	eba2 020e 	sub.w	r2, r2, lr
 8009300:	4565      	cmp	r5, ip
 8009302:	bf88      	it	hi
 8009304:	2200      	movhi	r2, #0
 8009306:	4413      	add	r3, r2
 8009308:	1a18      	subs	r0, r3, r0
 800930a:	b003      	add	sp, #12
 800930c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800930e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009312:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009316:	e7ed      	b.n	80092f4 <__exponent+0x4c>
 8009318:	2330      	movs	r3, #48	; 0x30
 800931a:	3130      	adds	r1, #48	; 0x30
 800931c:	7083      	strb	r3, [r0, #2]
 800931e:	70c1      	strb	r1, [r0, #3]
 8009320:	1d03      	adds	r3, r0, #4
 8009322:	e7f1      	b.n	8009308 <__exponent+0x60>

08009324 <_printf_float>:
 8009324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009328:	ed2d 8b02 	vpush	{d8}
 800932c:	b08d      	sub	sp, #52	; 0x34
 800932e:	460c      	mov	r4, r1
 8009330:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009334:	4616      	mov	r6, r2
 8009336:	461f      	mov	r7, r3
 8009338:	4605      	mov	r5, r0
 800933a:	f001 fa57 	bl	800a7ec <_localeconv_r>
 800933e:	f8d0 a000 	ldr.w	sl, [r0]
 8009342:	4650      	mov	r0, sl
 8009344:	f7f6 ff44 	bl	80001d0 <strlen>
 8009348:	2300      	movs	r3, #0
 800934a:	930a      	str	r3, [sp, #40]	; 0x28
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	9305      	str	r3, [sp, #20]
 8009350:	f8d8 3000 	ldr.w	r3, [r8]
 8009354:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009358:	3307      	adds	r3, #7
 800935a:	f023 0307 	bic.w	r3, r3, #7
 800935e:	f103 0208 	add.w	r2, r3, #8
 8009362:	f8c8 2000 	str.w	r2, [r8]
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800936e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009372:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009376:	9307      	str	r3, [sp, #28]
 8009378:	f8cd 8018 	str.w	r8, [sp, #24]
 800937c:	ee08 0a10 	vmov	s16, r0
 8009380:	4b9f      	ldr	r3, [pc, #636]	; (8009600 <_printf_float+0x2dc>)
 8009382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009386:	f04f 32ff 	mov.w	r2, #4294967295
 800938a:	f7f7 fbcf 	bl	8000b2c <__aeabi_dcmpun>
 800938e:	bb88      	cbnz	r0, 80093f4 <_printf_float+0xd0>
 8009390:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009394:	4b9a      	ldr	r3, [pc, #616]	; (8009600 <_printf_float+0x2dc>)
 8009396:	f04f 32ff 	mov.w	r2, #4294967295
 800939a:	f7f7 fba9 	bl	8000af0 <__aeabi_dcmple>
 800939e:	bb48      	cbnz	r0, 80093f4 <_printf_float+0xd0>
 80093a0:	2200      	movs	r2, #0
 80093a2:	2300      	movs	r3, #0
 80093a4:	4640      	mov	r0, r8
 80093a6:	4649      	mov	r1, r9
 80093a8:	f7f7 fb98 	bl	8000adc <__aeabi_dcmplt>
 80093ac:	b110      	cbz	r0, 80093b4 <_printf_float+0x90>
 80093ae:	232d      	movs	r3, #45	; 0x2d
 80093b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b4:	4b93      	ldr	r3, [pc, #588]	; (8009604 <_printf_float+0x2e0>)
 80093b6:	4894      	ldr	r0, [pc, #592]	; (8009608 <_printf_float+0x2e4>)
 80093b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80093bc:	bf94      	ite	ls
 80093be:	4698      	movls	r8, r3
 80093c0:	4680      	movhi	r8, r0
 80093c2:	2303      	movs	r3, #3
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	9b05      	ldr	r3, [sp, #20]
 80093c8:	f023 0204 	bic.w	r2, r3, #4
 80093cc:	6022      	str	r2, [r4, #0]
 80093ce:	f04f 0900 	mov.w	r9, #0
 80093d2:	9700      	str	r7, [sp, #0]
 80093d4:	4633      	mov	r3, r6
 80093d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80093d8:	4621      	mov	r1, r4
 80093da:	4628      	mov	r0, r5
 80093dc:	f000 f9d8 	bl	8009790 <_printf_common>
 80093e0:	3001      	adds	r0, #1
 80093e2:	f040 8090 	bne.w	8009506 <_printf_float+0x1e2>
 80093e6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ea:	b00d      	add	sp, #52	; 0x34
 80093ec:	ecbd 8b02 	vpop	{d8}
 80093f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f4:	4642      	mov	r2, r8
 80093f6:	464b      	mov	r3, r9
 80093f8:	4640      	mov	r0, r8
 80093fa:	4649      	mov	r1, r9
 80093fc:	f7f7 fb96 	bl	8000b2c <__aeabi_dcmpun>
 8009400:	b140      	cbz	r0, 8009414 <_printf_float+0xf0>
 8009402:	464b      	mov	r3, r9
 8009404:	2b00      	cmp	r3, #0
 8009406:	bfbc      	itt	lt
 8009408:	232d      	movlt	r3, #45	; 0x2d
 800940a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800940e:	487f      	ldr	r0, [pc, #508]	; (800960c <_printf_float+0x2e8>)
 8009410:	4b7f      	ldr	r3, [pc, #508]	; (8009610 <_printf_float+0x2ec>)
 8009412:	e7d1      	b.n	80093b8 <_printf_float+0x94>
 8009414:	6863      	ldr	r3, [r4, #4]
 8009416:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800941a:	9206      	str	r2, [sp, #24]
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	d13f      	bne.n	80094a0 <_printf_float+0x17c>
 8009420:	2306      	movs	r3, #6
 8009422:	6063      	str	r3, [r4, #4]
 8009424:	9b05      	ldr	r3, [sp, #20]
 8009426:	6861      	ldr	r1, [r4, #4]
 8009428:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800942c:	2300      	movs	r3, #0
 800942e:	9303      	str	r3, [sp, #12]
 8009430:	ab0a      	add	r3, sp, #40	; 0x28
 8009432:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009436:	ab09      	add	r3, sp, #36	; 0x24
 8009438:	ec49 8b10 	vmov	d0, r8, r9
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	6022      	str	r2, [r4, #0]
 8009440:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009444:	4628      	mov	r0, r5
 8009446:	f7ff fecd 	bl	80091e4 <__cvt>
 800944a:	9b06      	ldr	r3, [sp, #24]
 800944c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800944e:	2b47      	cmp	r3, #71	; 0x47
 8009450:	4680      	mov	r8, r0
 8009452:	d108      	bne.n	8009466 <_printf_float+0x142>
 8009454:	1cc8      	adds	r0, r1, #3
 8009456:	db02      	blt.n	800945e <_printf_float+0x13a>
 8009458:	6863      	ldr	r3, [r4, #4]
 800945a:	4299      	cmp	r1, r3
 800945c:	dd41      	ble.n	80094e2 <_printf_float+0x1be>
 800945e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009462:	fa5f fb8b 	uxtb.w	fp, fp
 8009466:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800946a:	d820      	bhi.n	80094ae <_printf_float+0x18a>
 800946c:	3901      	subs	r1, #1
 800946e:	465a      	mov	r2, fp
 8009470:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009474:	9109      	str	r1, [sp, #36]	; 0x24
 8009476:	f7ff ff17 	bl	80092a8 <__exponent>
 800947a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800947c:	1813      	adds	r3, r2, r0
 800947e:	2a01      	cmp	r2, #1
 8009480:	4681      	mov	r9, r0
 8009482:	6123      	str	r3, [r4, #16]
 8009484:	dc02      	bgt.n	800948c <_printf_float+0x168>
 8009486:	6822      	ldr	r2, [r4, #0]
 8009488:	07d2      	lsls	r2, r2, #31
 800948a:	d501      	bpl.n	8009490 <_printf_float+0x16c>
 800948c:	3301      	adds	r3, #1
 800948e:	6123      	str	r3, [r4, #16]
 8009490:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009494:	2b00      	cmp	r3, #0
 8009496:	d09c      	beq.n	80093d2 <_printf_float+0xae>
 8009498:	232d      	movs	r3, #45	; 0x2d
 800949a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800949e:	e798      	b.n	80093d2 <_printf_float+0xae>
 80094a0:	9a06      	ldr	r2, [sp, #24]
 80094a2:	2a47      	cmp	r2, #71	; 0x47
 80094a4:	d1be      	bne.n	8009424 <_printf_float+0x100>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1bc      	bne.n	8009424 <_printf_float+0x100>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e7b9      	b.n	8009422 <_printf_float+0xfe>
 80094ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094b2:	d118      	bne.n	80094e6 <_printf_float+0x1c2>
 80094b4:	2900      	cmp	r1, #0
 80094b6:	6863      	ldr	r3, [r4, #4]
 80094b8:	dd0b      	ble.n	80094d2 <_printf_float+0x1ae>
 80094ba:	6121      	str	r1, [r4, #16]
 80094bc:	b913      	cbnz	r3, 80094c4 <_printf_float+0x1a0>
 80094be:	6822      	ldr	r2, [r4, #0]
 80094c0:	07d0      	lsls	r0, r2, #31
 80094c2:	d502      	bpl.n	80094ca <_printf_float+0x1a6>
 80094c4:	3301      	adds	r3, #1
 80094c6:	440b      	add	r3, r1
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80094cc:	f04f 0900 	mov.w	r9, #0
 80094d0:	e7de      	b.n	8009490 <_printf_float+0x16c>
 80094d2:	b913      	cbnz	r3, 80094da <_printf_float+0x1b6>
 80094d4:	6822      	ldr	r2, [r4, #0]
 80094d6:	07d2      	lsls	r2, r2, #31
 80094d8:	d501      	bpl.n	80094de <_printf_float+0x1ba>
 80094da:	3302      	adds	r3, #2
 80094dc:	e7f4      	b.n	80094c8 <_printf_float+0x1a4>
 80094de:	2301      	movs	r3, #1
 80094e0:	e7f2      	b.n	80094c8 <_printf_float+0x1a4>
 80094e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80094e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e8:	4299      	cmp	r1, r3
 80094ea:	db05      	blt.n	80094f8 <_printf_float+0x1d4>
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	6121      	str	r1, [r4, #16]
 80094f0:	07d8      	lsls	r0, r3, #31
 80094f2:	d5ea      	bpl.n	80094ca <_printf_float+0x1a6>
 80094f4:	1c4b      	adds	r3, r1, #1
 80094f6:	e7e7      	b.n	80094c8 <_printf_float+0x1a4>
 80094f8:	2900      	cmp	r1, #0
 80094fa:	bfd4      	ite	le
 80094fc:	f1c1 0202 	rsble	r2, r1, #2
 8009500:	2201      	movgt	r2, #1
 8009502:	4413      	add	r3, r2
 8009504:	e7e0      	b.n	80094c8 <_printf_float+0x1a4>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	055a      	lsls	r2, r3, #21
 800950a:	d407      	bmi.n	800951c <_printf_float+0x1f8>
 800950c:	6923      	ldr	r3, [r4, #16]
 800950e:	4642      	mov	r2, r8
 8009510:	4631      	mov	r1, r6
 8009512:	4628      	mov	r0, r5
 8009514:	47b8      	blx	r7
 8009516:	3001      	adds	r0, #1
 8009518:	d12c      	bne.n	8009574 <_printf_float+0x250>
 800951a:	e764      	b.n	80093e6 <_printf_float+0xc2>
 800951c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009520:	f240 80e0 	bls.w	80096e4 <_printf_float+0x3c0>
 8009524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009528:	2200      	movs	r2, #0
 800952a:	2300      	movs	r3, #0
 800952c:	f7f7 facc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009530:	2800      	cmp	r0, #0
 8009532:	d034      	beq.n	800959e <_printf_float+0x27a>
 8009534:	4a37      	ldr	r2, [pc, #220]	; (8009614 <_printf_float+0x2f0>)
 8009536:	2301      	movs	r3, #1
 8009538:	4631      	mov	r1, r6
 800953a:	4628      	mov	r0, r5
 800953c:	47b8      	blx	r7
 800953e:	3001      	adds	r0, #1
 8009540:	f43f af51 	beq.w	80093e6 <_printf_float+0xc2>
 8009544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009548:	429a      	cmp	r2, r3
 800954a:	db02      	blt.n	8009552 <_printf_float+0x22e>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	07d8      	lsls	r0, r3, #31
 8009550:	d510      	bpl.n	8009574 <_printf_float+0x250>
 8009552:	ee18 3a10 	vmov	r3, s16
 8009556:	4652      	mov	r2, sl
 8009558:	4631      	mov	r1, r6
 800955a:	4628      	mov	r0, r5
 800955c:	47b8      	blx	r7
 800955e:	3001      	adds	r0, #1
 8009560:	f43f af41 	beq.w	80093e6 <_printf_float+0xc2>
 8009564:	f04f 0800 	mov.w	r8, #0
 8009568:	f104 091a 	add.w	r9, r4, #26
 800956c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956e:	3b01      	subs	r3, #1
 8009570:	4543      	cmp	r3, r8
 8009572:	dc09      	bgt.n	8009588 <_printf_float+0x264>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	079b      	lsls	r3, r3, #30
 8009578:	f100 8105 	bmi.w	8009786 <_printf_float+0x462>
 800957c:	68e0      	ldr	r0, [r4, #12]
 800957e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009580:	4298      	cmp	r0, r3
 8009582:	bfb8      	it	lt
 8009584:	4618      	movlt	r0, r3
 8009586:	e730      	b.n	80093ea <_printf_float+0xc6>
 8009588:	2301      	movs	r3, #1
 800958a:	464a      	mov	r2, r9
 800958c:	4631      	mov	r1, r6
 800958e:	4628      	mov	r0, r5
 8009590:	47b8      	blx	r7
 8009592:	3001      	adds	r0, #1
 8009594:	f43f af27 	beq.w	80093e6 <_printf_float+0xc2>
 8009598:	f108 0801 	add.w	r8, r8, #1
 800959c:	e7e6      	b.n	800956c <_printf_float+0x248>
 800959e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	dc39      	bgt.n	8009618 <_printf_float+0x2f4>
 80095a4:	4a1b      	ldr	r2, [pc, #108]	; (8009614 <_printf_float+0x2f0>)
 80095a6:	2301      	movs	r3, #1
 80095a8:	4631      	mov	r1, r6
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b8      	blx	r7
 80095ae:	3001      	adds	r0, #1
 80095b0:	f43f af19 	beq.w	80093e6 <_printf_float+0xc2>
 80095b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095b8:	4313      	orrs	r3, r2
 80095ba:	d102      	bne.n	80095c2 <_printf_float+0x29e>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	07d9      	lsls	r1, r3, #31
 80095c0:	d5d8      	bpl.n	8009574 <_printf_float+0x250>
 80095c2:	ee18 3a10 	vmov	r3, s16
 80095c6:	4652      	mov	r2, sl
 80095c8:	4631      	mov	r1, r6
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b8      	blx	r7
 80095ce:	3001      	adds	r0, #1
 80095d0:	f43f af09 	beq.w	80093e6 <_printf_float+0xc2>
 80095d4:	f04f 0900 	mov.w	r9, #0
 80095d8:	f104 0a1a 	add.w	sl, r4, #26
 80095dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095de:	425b      	negs	r3, r3
 80095e0:	454b      	cmp	r3, r9
 80095e2:	dc01      	bgt.n	80095e8 <_printf_float+0x2c4>
 80095e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e6:	e792      	b.n	800950e <_printf_float+0x1ea>
 80095e8:	2301      	movs	r3, #1
 80095ea:	4652      	mov	r2, sl
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f aef7 	beq.w	80093e6 <_printf_float+0xc2>
 80095f8:	f109 0901 	add.w	r9, r9, #1
 80095fc:	e7ee      	b.n	80095dc <_printf_float+0x2b8>
 80095fe:	bf00      	nop
 8009600:	7fefffff 	.word	0x7fefffff
 8009604:	0800cda4 	.word	0x0800cda4
 8009608:	0800cda8 	.word	0x0800cda8
 800960c:	0800cdb0 	.word	0x0800cdb0
 8009610:	0800cdac 	.word	0x0800cdac
 8009614:	0800cdb4 	.word	0x0800cdb4
 8009618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800961a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800961c:	429a      	cmp	r2, r3
 800961e:	bfa8      	it	ge
 8009620:	461a      	movge	r2, r3
 8009622:	2a00      	cmp	r2, #0
 8009624:	4691      	mov	r9, r2
 8009626:	dc37      	bgt.n	8009698 <_printf_float+0x374>
 8009628:	f04f 0b00 	mov.w	fp, #0
 800962c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009630:	f104 021a 	add.w	r2, r4, #26
 8009634:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009636:	9305      	str	r3, [sp, #20]
 8009638:	eba3 0309 	sub.w	r3, r3, r9
 800963c:	455b      	cmp	r3, fp
 800963e:	dc33      	bgt.n	80096a8 <_printf_float+0x384>
 8009640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009644:	429a      	cmp	r2, r3
 8009646:	db3b      	blt.n	80096c0 <_printf_float+0x39c>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	07da      	lsls	r2, r3, #31
 800964c:	d438      	bmi.n	80096c0 <_printf_float+0x39c>
 800964e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009650:	9a05      	ldr	r2, [sp, #20]
 8009652:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009654:	1a9a      	subs	r2, r3, r2
 8009656:	eba3 0901 	sub.w	r9, r3, r1
 800965a:	4591      	cmp	r9, r2
 800965c:	bfa8      	it	ge
 800965e:	4691      	movge	r9, r2
 8009660:	f1b9 0f00 	cmp.w	r9, #0
 8009664:	dc35      	bgt.n	80096d2 <_printf_float+0x3ae>
 8009666:	f04f 0800 	mov.w	r8, #0
 800966a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800966e:	f104 0a1a 	add.w	sl, r4, #26
 8009672:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	eba3 0309 	sub.w	r3, r3, r9
 800967c:	4543      	cmp	r3, r8
 800967e:	f77f af79 	ble.w	8009574 <_printf_float+0x250>
 8009682:	2301      	movs	r3, #1
 8009684:	4652      	mov	r2, sl
 8009686:	4631      	mov	r1, r6
 8009688:	4628      	mov	r0, r5
 800968a:	47b8      	blx	r7
 800968c:	3001      	adds	r0, #1
 800968e:	f43f aeaa 	beq.w	80093e6 <_printf_float+0xc2>
 8009692:	f108 0801 	add.w	r8, r8, #1
 8009696:	e7ec      	b.n	8009672 <_printf_float+0x34e>
 8009698:	4613      	mov	r3, r2
 800969a:	4631      	mov	r1, r6
 800969c:	4642      	mov	r2, r8
 800969e:	4628      	mov	r0, r5
 80096a0:	47b8      	blx	r7
 80096a2:	3001      	adds	r0, #1
 80096a4:	d1c0      	bne.n	8009628 <_printf_float+0x304>
 80096a6:	e69e      	b.n	80093e6 <_printf_float+0xc2>
 80096a8:	2301      	movs	r3, #1
 80096aa:	4631      	mov	r1, r6
 80096ac:	4628      	mov	r0, r5
 80096ae:	9205      	str	r2, [sp, #20]
 80096b0:	47b8      	blx	r7
 80096b2:	3001      	adds	r0, #1
 80096b4:	f43f ae97 	beq.w	80093e6 <_printf_float+0xc2>
 80096b8:	9a05      	ldr	r2, [sp, #20]
 80096ba:	f10b 0b01 	add.w	fp, fp, #1
 80096be:	e7b9      	b.n	8009634 <_printf_float+0x310>
 80096c0:	ee18 3a10 	vmov	r3, s16
 80096c4:	4652      	mov	r2, sl
 80096c6:	4631      	mov	r1, r6
 80096c8:	4628      	mov	r0, r5
 80096ca:	47b8      	blx	r7
 80096cc:	3001      	adds	r0, #1
 80096ce:	d1be      	bne.n	800964e <_printf_float+0x32a>
 80096d0:	e689      	b.n	80093e6 <_printf_float+0xc2>
 80096d2:	9a05      	ldr	r2, [sp, #20]
 80096d4:	464b      	mov	r3, r9
 80096d6:	4442      	add	r2, r8
 80096d8:	4631      	mov	r1, r6
 80096da:	4628      	mov	r0, r5
 80096dc:	47b8      	blx	r7
 80096de:	3001      	adds	r0, #1
 80096e0:	d1c1      	bne.n	8009666 <_printf_float+0x342>
 80096e2:	e680      	b.n	80093e6 <_printf_float+0xc2>
 80096e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096e6:	2a01      	cmp	r2, #1
 80096e8:	dc01      	bgt.n	80096ee <_printf_float+0x3ca>
 80096ea:	07db      	lsls	r3, r3, #31
 80096ec:	d538      	bpl.n	8009760 <_printf_float+0x43c>
 80096ee:	2301      	movs	r3, #1
 80096f0:	4642      	mov	r2, r8
 80096f2:	4631      	mov	r1, r6
 80096f4:	4628      	mov	r0, r5
 80096f6:	47b8      	blx	r7
 80096f8:	3001      	adds	r0, #1
 80096fa:	f43f ae74 	beq.w	80093e6 <_printf_float+0xc2>
 80096fe:	ee18 3a10 	vmov	r3, s16
 8009702:	4652      	mov	r2, sl
 8009704:	4631      	mov	r1, r6
 8009706:	4628      	mov	r0, r5
 8009708:	47b8      	blx	r7
 800970a:	3001      	adds	r0, #1
 800970c:	f43f ae6b 	beq.w	80093e6 <_printf_float+0xc2>
 8009710:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009714:	2200      	movs	r2, #0
 8009716:	2300      	movs	r3, #0
 8009718:	f7f7 f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800971c:	b9d8      	cbnz	r0, 8009756 <_printf_float+0x432>
 800971e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009720:	f108 0201 	add.w	r2, r8, #1
 8009724:	3b01      	subs	r3, #1
 8009726:	4631      	mov	r1, r6
 8009728:	4628      	mov	r0, r5
 800972a:	47b8      	blx	r7
 800972c:	3001      	adds	r0, #1
 800972e:	d10e      	bne.n	800974e <_printf_float+0x42a>
 8009730:	e659      	b.n	80093e6 <_printf_float+0xc2>
 8009732:	2301      	movs	r3, #1
 8009734:	4652      	mov	r2, sl
 8009736:	4631      	mov	r1, r6
 8009738:	4628      	mov	r0, r5
 800973a:	47b8      	blx	r7
 800973c:	3001      	adds	r0, #1
 800973e:	f43f ae52 	beq.w	80093e6 <_printf_float+0xc2>
 8009742:	f108 0801 	add.w	r8, r8, #1
 8009746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009748:	3b01      	subs	r3, #1
 800974a:	4543      	cmp	r3, r8
 800974c:	dcf1      	bgt.n	8009732 <_printf_float+0x40e>
 800974e:	464b      	mov	r3, r9
 8009750:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009754:	e6dc      	b.n	8009510 <_printf_float+0x1ec>
 8009756:	f04f 0800 	mov.w	r8, #0
 800975a:	f104 0a1a 	add.w	sl, r4, #26
 800975e:	e7f2      	b.n	8009746 <_printf_float+0x422>
 8009760:	2301      	movs	r3, #1
 8009762:	4642      	mov	r2, r8
 8009764:	e7df      	b.n	8009726 <_printf_float+0x402>
 8009766:	2301      	movs	r3, #1
 8009768:	464a      	mov	r2, r9
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	f43f ae38 	beq.w	80093e6 <_printf_float+0xc2>
 8009776:	f108 0801 	add.w	r8, r8, #1
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800977e:	1a5b      	subs	r3, r3, r1
 8009780:	4543      	cmp	r3, r8
 8009782:	dcf0      	bgt.n	8009766 <_printf_float+0x442>
 8009784:	e6fa      	b.n	800957c <_printf_float+0x258>
 8009786:	f04f 0800 	mov.w	r8, #0
 800978a:	f104 0919 	add.w	r9, r4, #25
 800978e:	e7f4      	b.n	800977a <_printf_float+0x456>

08009790 <_printf_common>:
 8009790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009794:	4616      	mov	r6, r2
 8009796:	4699      	mov	r9, r3
 8009798:	688a      	ldr	r2, [r1, #8]
 800979a:	690b      	ldr	r3, [r1, #16]
 800979c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097a0:	4293      	cmp	r3, r2
 80097a2:	bfb8      	it	lt
 80097a4:	4613      	movlt	r3, r2
 80097a6:	6033      	str	r3, [r6, #0]
 80097a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097ac:	4607      	mov	r7, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	b10a      	cbz	r2, 80097b6 <_printf_common+0x26>
 80097b2:	3301      	adds	r3, #1
 80097b4:	6033      	str	r3, [r6, #0]
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	0699      	lsls	r1, r3, #26
 80097ba:	bf42      	ittt	mi
 80097bc:	6833      	ldrmi	r3, [r6, #0]
 80097be:	3302      	addmi	r3, #2
 80097c0:	6033      	strmi	r3, [r6, #0]
 80097c2:	6825      	ldr	r5, [r4, #0]
 80097c4:	f015 0506 	ands.w	r5, r5, #6
 80097c8:	d106      	bne.n	80097d8 <_printf_common+0x48>
 80097ca:	f104 0a19 	add.w	sl, r4, #25
 80097ce:	68e3      	ldr	r3, [r4, #12]
 80097d0:	6832      	ldr	r2, [r6, #0]
 80097d2:	1a9b      	subs	r3, r3, r2
 80097d4:	42ab      	cmp	r3, r5
 80097d6:	dc26      	bgt.n	8009826 <_printf_common+0x96>
 80097d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097dc:	1e13      	subs	r3, r2, #0
 80097de:	6822      	ldr	r2, [r4, #0]
 80097e0:	bf18      	it	ne
 80097e2:	2301      	movne	r3, #1
 80097e4:	0692      	lsls	r2, r2, #26
 80097e6:	d42b      	bmi.n	8009840 <_printf_common+0xb0>
 80097e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097ec:	4649      	mov	r1, r9
 80097ee:	4638      	mov	r0, r7
 80097f0:	47c0      	blx	r8
 80097f2:	3001      	adds	r0, #1
 80097f4:	d01e      	beq.n	8009834 <_printf_common+0xa4>
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	68e5      	ldr	r5, [r4, #12]
 80097fa:	6832      	ldr	r2, [r6, #0]
 80097fc:	f003 0306 	and.w	r3, r3, #6
 8009800:	2b04      	cmp	r3, #4
 8009802:	bf08      	it	eq
 8009804:	1aad      	subeq	r5, r5, r2
 8009806:	68a3      	ldr	r3, [r4, #8]
 8009808:	6922      	ldr	r2, [r4, #16]
 800980a:	bf0c      	ite	eq
 800980c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009810:	2500      	movne	r5, #0
 8009812:	4293      	cmp	r3, r2
 8009814:	bfc4      	itt	gt
 8009816:	1a9b      	subgt	r3, r3, r2
 8009818:	18ed      	addgt	r5, r5, r3
 800981a:	2600      	movs	r6, #0
 800981c:	341a      	adds	r4, #26
 800981e:	42b5      	cmp	r5, r6
 8009820:	d11a      	bne.n	8009858 <_printf_common+0xc8>
 8009822:	2000      	movs	r0, #0
 8009824:	e008      	b.n	8009838 <_printf_common+0xa8>
 8009826:	2301      	movs	r3, #1
 8009828:	4652      	mov	r2, sl
 800982a:	4649      	mov	r1, r9
 800982c:	4638      	mov	r0, r7
 800982e:	47c0      	blx	r8
 8009830:	3001      	adds	r0, #1
 8009832:	d103      	bne.n	800983c <_printf_common+0xac>
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983c:	3501      	adds	r5, #1
 800983e:	e7c6      	b.n	80097ce <_printf_common+0x3e>
 8009840:	18e1      	adds	r1, r4, r3
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	2030      	movs	r0, #48	; 0x30
 8009846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800984a:	4422      	add	r2, r4
 800984c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009850:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009854:	3302      	adds	r3, #2
 8009856:	e7c7      	b.n	80097e8 <_printf_common+0x58>
 8009858:	2301      	movs	r3, #1
 800985a:	4622      	mov	r2, r4
 800985c:	4649      	mov	r1, r9
 800985e:	4638      	mov	r0, r7
 8009860:	47c0      	blx	r8
 8009862:	3001      	adds	r0, #1
 8009864:	d0e6      	beq.n	8009834 <_printf_common+0xa4>
 8009866:	3601      	adds	r6, #1
 8009868:	e7d9      	b.n	800981e <_printf_common+0x8e>
	...

0800986c <_printf_i>:
 800986c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009870:	7e0f      	ldrb	r7, [r1, #24]
 8009872:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009874:	2f78      	cmp	r7, #120	; 0x78
 8009876:	4691      	mov	r9, r2
 8009878:	4680      	mov	r8, r0
 800987a:	460c      	mov	r4, r1
 800987c:	469a      	mov	sl, r3
 800987e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009882:	d807      	bhi.n	8009894 <_printf_i+0x28>
 8009884:	2f62      	cmp	r7, #98	; 0x62
 8009886:	d80a      	bhi.n	800989e <_printf_i+0x32>
 8009888:	2f00      	cmp	r7, #0
 800988a:	f000 80d8 	beq.w	8009a3e <_printf_i+0x1d2>
 800988e:	2f58      	cmp	r7, #88	; 0x58
 8009890:	f000 80a3 	beq.w	80099da <_printf_i+0x16e>
 8009894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800989c:	e03a      	b.n	8009914 <_printf_i+0xa8>
 800989e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098a2:	2b15      	cmp	r3, #21
 80098a4:	d8f6      	bhi.n	8009894 <_printf_i+0x28>
 80098a6:	a101      	add	r1, pc, #4	; (adr r1, 80098ac <_printf_i+0x40>)
 80098a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098ac:	08009905 	.word	0x08009905
 80098b0:	08009919 	.word	0x08009919
 80098b4:	08009895 	.word	0x08009895
 80098b8:	08009895 	.word	0x08009895
 80098bc:	08009895 	.word	0x08009895
 80098c0:	08009895 	.word	0x08009895
 80098c4:	08009919 	.word	0x08009919
 80098c8:	08009895 	.word	0x08009895
 80098cc:	08009895 	.word	0x08009895
 80098d0:	08009895 	.word	0x08009895
 80098d4:	08009895 	.word	0x08009895
 80098d8:	08009a25 	.word	0x08009a25
 80098dc:	08009949 	.word	0x08009949
 80098e0:	08009a07 	.word	0x08009a07
 80098e4:	08009895 	.word	0x08009895
 80098e8:	08009895 	.word	0x08009895
 80098ec:	08009a47 	.word	0x08009a47
 80098f0:	08009895 	.word	0x08009895
 80098f4:	08009949 	.word	0x08009949
 80098f8:	08009895 	.word	0x08009895
 80098fc:	08009895 	.word	0x08009895
 8009900:	08009a0f 	.word	0x08009a0f
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	1d1a      	adds	r2, r3, #4
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	602a      	str	r2, [r5, #0]
 800990c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009914:	2301      	movs	r3, #1
 8009916:	e0a3      	b.n	8009a60 <_printf_i+0x1f4>
 8009918:	6820      	ldr	r0, [r4, #0]
 800991a:	6829      	ldr	r1, [r5, #0]
 800991c:	0606      	lsls	r6, r0, #24
 800991e:	f101 0304 	add.w	r3, r1, #4
 8009922:	d50a      	bpl.n	800993a <_printf_i+0xce>
 8009924:	680e      	ldr	r6, [r1, #0]
 8009926:	602b      	str	r3, [r5, #0]
 8009928:	2e00      	cmp	r6, #0
 800992a:	da03      	bge.n	8009934 <_printf_i+0xc8>
 800992c:	232d      	movs	r3, #45	; 0x2d
 800992e:	4276      	negs	r6, r6
 8009930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009934:	485e      	ldr	r0, [pc, #376]	; (8009ab0 <_printf_i+0x244>)
 8009936:	230a      	movs	r3, #10
 8009938:	e019      	b.n	800996e <_printf_i+0x102>
 800993a:	680e      	ldr	r6, [r1, #0]
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009942:	bf18      	it	ne
 8009944:	b236      	sxthne	r6, r6
 8009946:	e7ef      	b.n	8009928 <_printf_i+0xbc>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	6820      	ldr	r0, [r4, #0]
 800994c:	1d19      	adds	r1, r3, #4
 800994e:	6029      	str	r1, [r5, #0]
 8009950:	0601      	lsls	r1, r0, #24
 8009952:	d501      	bpl.n	8009958 <_printf_i+0xec>
 8009954:	681e      	ldr	r6, [r3, #0]
 8009956:	e002      	b.n	800995e <_printf_i+0xf2>
 8009958:	0646      	lsls	r6, r0, #25
 800995a:	d5fb      	bpl.n	8009954 <_printf_i+0xe8>
 800995c:	881e      	ldrh	r6, [r3, #0]
 800995e:	4854      	ldr	r0, [pc, #336]	; (8009ab0 <_printf_i+0x244>)
 8009960:	2f6f      	cmp	r7, #111	; 0x6f
 8009962:	bf0c      	ite	eq
 8009964:	2308      	moveq	r3, #8
 8009966:	230a      	movne	r3, #10
 8009968:	2100      	movs	r1, #0
 800996a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800996e:	6865      	ldr	r5, [r4, #4]
 8009970:	60a5      	str	r5, [r4, #8]
 8009972:	2d00      	cmp	r5, #0
 8009974:	bfa2      	ittt	ge
 8009976:	6821      	ldrge	r1, [r4, #0]
 8009978:	f021 0104 	bicge.w	r1, r1, #4
 800997c:	6021      	strge	r1, [r4, #0]
 800997e:	b90e      	cbnz	r6, 8009984 <_printf_i+0x118>
 8009980:	2d00      	cmp	r5, #0
 8009982:	d04d      	beq.n	8009a20 <_printf_i+0x1b4>
 8009984:	4615      	mov	r5, r2
 8009986:	fbb6 f1f3 	udiv	r1, r6, r3
 800998a:	fb03 6711 	mls	r7, r3, r1, r6
 800998e:	5dc7      	ldrb	r7, [r0, r7]
 8009990:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009994:	4637      	mov	r7, r6
 8009996:	42bb      	cmp	r3, r7
 8009998:	460e      	mov	r6, r1
 800999a:	d9f4      	bls.n	8009986 <_printf_i+0x11a>
 800999c:	2b08      	cmp	r3, #8
 800999e:	d10b      	bne.n	80099b8 <_printf_i+0x14c>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	07de      	lsls	r6, r3, #31
 80099a4:	d508      	bpl.n	80099b8 <_printf_i+0x14c>
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	6861      	ldr	r1, [r4, #4]
 80099aa:	4299      	cmp	r1, r3
 80099ac:	bfde      	ittt	le
 80099ae:	2330      	movle	r3, #48	; 0x30
 80099b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099b8:	1b52      	subs	r2, r2, r5
 80099ba:	6122      	str	r2, [r4, #16]
 80099bc:	f8cd a000 	str.w	sl, [sp]
 80099c0:	464b      	mov	r3, r9
 80099c2:	aa03      	add	r2, sp, #12
 80099c4:	4621      	mov	r1, r4
 80099c6:	4640      	mov	r0, r8
 80099c8:	f7ff fee2 	bl	8009790 <_printf_common>
 80099cc:	3001      	adds	r0, #1
 80099ce:	d14c      	bne.n	8009a6a <_printf_i+0x1fe>
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295
 80099d4:	b004      	add	sp, #16
 80099d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099da:	4835      	ldr	r0, [pc, #212]	; (8009ab0 <_printf_i+0x244>)
 80099dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099e0:	6829      	ldr	r1, [r5, #0]
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80099e8:	6029      	str	r1, [r5, #0]
 80099ea:	061d      	lsls	r5, r3, #24
 80099ec:	d514      	bpl.n	8009a18 <_printf_i+0x1ac>
 80099ee:	07df      	lsls	r7, r3, #31
 80099f0:	bf44      	itt	mi
 80099f2:	f043 0320 	orrmi.w	r3, r3, #32
 80099f6:	6023      	strmi	r3, [r4, #0]
 80099f8:	b91e      	cbnz	r6, 8009a02 <_printf_i+0x196>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	f023 0320 	bic.w	r3, r3, #32
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	2310      	movs	r3, #16
 8009a04:	e7b0      	b.n	8009968 <_printf_i+0xfc>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	f043 0320 	orr.w	r3, r3, #32
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	2378      	movs	r3, #120	; 0x78
 8009a10:	4828      	ldr	r0, [pc, #160]	; (8009ab4 <_printf_i+0x248>)
 8009a12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a16:	e7e3      	b.n	80099e0 <_printf_i+0x174>
 8009a18:	0659      	lsls	r1, r3, #25
 8009a1a:	bf48      	it	mi
 8009a1c:	b2b6      	uxthmi	r6, r6
 8009a1e:	e7e6      	b.n	80099ee <_printf_i+0x182>
 8009a20:	4615      	mov	r5, r2
 8009a22:	e7bb      	b.n	800999c <_printf_i+0x130>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	6826      	ldr	r6, [r4, #0]
 8009a28:	6961      	ldr	r1, [r4, #20]
 8009a2a:	1d18      	adds	r0, r3, #4
 8009a2c:	6028      	str	r0, [r5, #0]
 8009a2e:	0635      	lsls	r5, r6, #24
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	d501      	bpl.n	8009a38 <_printf_i+0x1cc>
 8009a34:	6019      	str	r1, [r3, #0]
 8009a36:	e002      	b.n	8009a3e <_printf_i+0x1d2>
 8009a38:	0670      	lsls	r0, r6, #25
 8009a3a:	d5fb      	bpl.n	8009a34 <_printf_i+0x1c8>
 8009a3c:	8019      	strh	r1, [r3, #0]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	6123      	str	r3, [r4, #16]
 8009a42:	4615      	mov	r5, r2
 8009a44:	e7ba      	b.n	80099bc <_printf_i+0x150>
 8009a46:	682b      	ldr	r3, [r5, #0]
 8009a48:	1d1a      	adds	r2, r3, #4
 8009a4a:	602a      	str	r2, [r5, #0]
 8009a4c:	681d      	ldr	r5, [r3, #0]
 8009a4e:	6862      	ldr	r2, [r4, #4]
 8009a50:	2100      	movs	r1, #0
 8009a52:	4628      	mov	r0, r5
 8009a54:	f7f6 fbc4 	bl	80001e0 <memchr>
 8009a58:	b108      	cbz	r0, 8009a5e <_printf_i+0x1f2>
 8009a5a:	1b40      	subs	r0, r0, r5
 8009a5c:	6060      	str	r0, [r4, #4]
 8009a5e:	6863      	ldr	r3, [r4, #4]
 8009a60:	6123      	str	r3, [r4, #16]
 8009a62:	2300      	movs	r3, #0
 8009a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a68:	e7a8      	b.n	80099bc <_printf_i+0x150>
 8009a6a:	6923      	ldr	r3, [r4, #16]
 8009a6c:	462a      	mov	r2, r5
 8009a6e:	4649      	mov	r1, r9
 8009a70:	4640      	mov	r0, r8
 8009a72:	47d0      	blx	sl
 8009a74:	3001      	adds	r0, #1
 8009a76:	d0ab      	beq.n	80099d0 <_printf_i+0x164>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	079b      	lsls	r3, r3, #30
 8009a7c:	d413      	bmi.n	8009aa6 <_printf_i+0x23a>
 8009a7e:	68e0      	ldr	r0, [r4, #12]
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	4298      	cmp	r0, r3
 8009a84:	bfb8      	it	lt
 8009a86:	4618      	movlt	r0, r3
 8009a88:	e7a4      	b.n	80099d4 <_printf_i+0x168>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4632      	mov	r2, r6
 8009a8e:	4649      	mov	r1, r9
 8009a90:	4640      	mov	r0, r8
 8009a92:	47d0      	blx	sl
 8009a94:	3001      	adds	r0, #1
 8009a96:	d09b      	beq.n	80099d0 <_printf_i+0x164>
 8009a98:	3501      	adds	r5, #1
 8009a9a:	68e3      	ldr	r3, [r4, #12]
 8009a9c:	9903      	ldr	r1, [sp, #12]
 8009a9e:	1a5b      	subs	r3, r3, r1
 8009aa0:	42ab      	cmp	r3, r5
 8009aa2:	dcf2      	bgt.n	8009a8a <_printf_i+0x21e>
 8009aa4:	e7eb      	b.n	8009a7e <_printf_i+0x212>
 8009aa6:	2500      	movs	r5, #0
 8009aa8:	f104 0619 	add.w	r6, r4, #25
 8009aac:	e7f5      	b.n	8009a9a <_printf_i+0x22e>
 8009aae:	bf00      	nop
 8009ab0:	0800cdb6 	.word	0x0800cdb6
 8009ab4:	0800cdc7 	.word	0x0800cdc7

08009ab8 <siprintf>:
 8009ab8:	b40e      	push	{r1, r2, r3}
 8009aba:	b500      	push	{lr}
 8009abc:	b09c      	sub	sp, #112	; 0x70
 8009abe:	ab1d      	add	r3, sp, #116	; 0x74
 8009ac0:	9002      	str	r0, [sp, #8]
 8009ac2:	9006      	str	r0, [sp, #24]
 8009ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ac8:	4809      	ldr	r0, [pc, #36]	; (8009af0 <siprintf+0x38>)
 8009aca:	9107      	str	r1, [sp, #28]
 8009acc:	9104      	str	r1, [sp, #16]
 8009ace:	4909      	ldr	r1, [pc, #36]	; (8009af4 <siprintf+0x3c>)
 8009ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad4:	9105      	str	r1, [sp, #20]
 8009ad6:	6800      	ldr	r0, [r0, #0]
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	a902      	add	r1, sp, #8
 8009adc:	f001 fb68 	bl	800b1b0 <_svfiprintf_r>
 8009ae0:	9b02      	ldr	r3, [sp, #8]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	701a      	strb	r2, [r3, #0]
 8009ae6:	b01c      	add	sp, #112	; 0x70
 8009ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aec:	b003      	add	sp, #12
 8009aee:	4770      	bx	lr
 8009af0:	20000028 	.word	0x20000028
 8009af4:	ffff0208 	.word	0xffff0208

08009af8 <quorem>:
 8009af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	6903      	ldr	r3, [r0, #16]
 8009afe:	690c      	ldr	r4, [r1, #16]
 8009b00:	42a3      	cmp	r3, r4
 8009b02:	4607      	mov	r7, r0
 8009b04:	f2c0 8081 	blt.w	8009c0a <quorem+0x112>
 8009b08:	3c01      	subs	r4, #1
 8009b0a:	f101 0814 	add.w	r8, r1, #20
 8009b0e:	f100 0514 	add.w	r5, r0, #20
 8009b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b16:	9301      	str	r3, [sp, #4]
 8009b18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b20:	3301      	adds	r3, #1
 8009b22:	429a      	cmp	r2, r3
 8009b24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b30:	d331      	bcc.n	8009b96 <quorem+0x9e>
 8009b32:	f04f 0e00 	mov.w	lr, #0
 8009b36:	4640      	mov	r0, r8
 8009b38:	46ac      	mov	ip, r5
 8009b3a:	46f2      	mov	sl, lr
 8009b3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b40:	b293      	uxth	r3, r2
 8009b42:	fb06 e303 	mla	r3, r6, r3, lr
 8009b46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	ebaa 0303 	sub.w	r3, sl, r3
 8009b50:	f8dc a000 	ldr.w	sl, [ip]
 8009b54:	0c12      	lsrs	r2, r2, #16
 8009b56:	fa13 f38a 	uxtah	r3, r3, sl
 8009b5a:	fb06 e202 	mla	r2, r6, r2, lr
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	9b00      	ldr	r3, [sp, #0]
 8009b62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b66:	b292      	uxth	r2, r2
 8009b68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b70:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b74:	4581      	cmp	r9, r0
 8009b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b7a:	f84c 3b04 	str.w	r3, [ip], #4
 8009b7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b82:	d2db      	bcs.n	8009b3c <quorem+0x44>
 8009b84:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b88:	b92b      	cbnz	r3, 8009b96 <quorem+0x9e>
 8009b8a:	9b01      	ldr	r3, [sp, #4]
 8009b8c:	3b04      	subs	r3, #4
 8009b8e:	429d      	cmp	r5, r3
 8009b90:	461a      	mov	r2, r3
 8009b92:	d32e      	bcc.n	8009bf2 <quorem+0xfa>
 8009b94:	613c      	str	r4, [r7, #16]
 8009b96:	4638      	mov	r0, r7
 8009b98:	f001 f8b6 	bl	800ad08 <__mcmp>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	db24      	blt.n	8009bea <quorem+0xf2>
 8009ba0:	3601      	adds	r6, #1
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f04f 0c00 	mov.w	ip, #0
 8009ba8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bac:	f8d0 e000 	ldr.w	lr, [r0]
 8009bb0:	b293      	uxth	r3, r2
 8009bb2:	ebac 0303 	sub.w	r3, ip, r3
 8009bb6:	0c12      	lsrs	r2, r2, #16
 8009bb8:	fa13 f38e 	uxtah	r3, r3, lr
 8009bbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009bc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bca:	45c1      	cmp	r9, r8
 8009bcc:	f840 3b04 	str.w	r3, [r0], #4
 8009bd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bd4:	d2e8      	bcs.n	8009ba8 <quorem+0xb0>
 8009bd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bde:	b922      	cbnz	r2, 8009bea <quorem+0xf2>
 8009be0:	3b04      	subs	r3, #4
 8009be2:	429d      	cmp	r5, r3
 8009be4:	461a      	mov	r2, r3
 8009be6:	d30a      	bcc.n	8009bfe <quorem+0x106>
 8009be8:	613c      	str	r4, [r7, #16]
 8009bea:	4630      	mov	r0, r6
 8009bec:	b003      	add	sp, #12
 8009bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf2:	6812      	ldr	r2, [r2, #0]
 8009bf4:	3b04      	subs	r3, #4
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	d1cc      	bne.n	8009b94 <quorem+0x9c>
 8009bfa:	3c01      	subs	r4, #1
 8009bfc:	e7c7      	b.n	8009b8e <quorem+0x96>
 8009bfe:	6812      	ldr	r2, [r2, #0]
 8009c00:	3b04      	subs	r3, #4
 8009c02:	2a00      	cmp	r2, #0
 8009c04:	d1f0      	bne.n	8009be8 <quorem+0xf0>
 8009c06:	3c01      	subs	r4, #1
 8009c08:	e7eb      	b.n	8009be2 <quorem+0xea>
 8009c0a:	2000      	movs	r0, #0
 8009c0c:	e7ee      	b.n	8009bec <quorem+0xf4>
	...

08009c10 <_dtoa_r>:
 8009c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	ed2d 8b04 	vpush	{d8-d9}
 8009c18:	ec57 6b10 	vmov	r6, r7, d0
 8009c1c:	b093      	sub	sp, #76	; 0x4c
 8009c1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c24:	9106      	str	r1, [sp, #24]
 8009c26:	ee10 aa10 	vmov	sl, s0
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8009c30:	46bb      	mov	fp, r7
 8009c32:	b975      	cbnz	r5, 8009c52 <_dtoa_r+0x42>
 8009c34:	2010      	movs	r0, #16
 8009c36:	f000 fddd 	bl	800a7f4 <malloc>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	6260      	str	r0, [r4, #36]	; 0x24
 8009c3e:	b920      	cbnz	r0, 8009c4a <_dtoa_r+0x3a>
 8009c40:	4ba7      	ldr	r3, [pc, #668]	; (8009ee0 <_dtoa_r+0x2d0>)
 8009c42:	21ea      	movs	r1, #234	; 0xea
 8009c44:	48a7      	ldr	r0, [pc, #668]	; (8009ee4 <_dtoa_r+0x2d4>)
 8009c46:	f001 fbc3 	bl	800b3d0 <__assert_func>
 8009c4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c4e:	6005      	str	r5, [r0, #0]
 8009c50:	60c5      	str	r5, [r0, #12]
 8009c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c54:	6819      	ldr	r1, [r3, #0]
 8009c56:	b151      	cbz	r1, 8009c6e <_dtoa_r+0x5e>
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	604a      	str	r2, [r1, #4]
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	4093      	lsls	r3, r2
 8009c60:	608b      	str	r3, [r1, #8]
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fe0e 	bl	800a884 <_Bfree>
 8009c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	1e3b      	subs	r3, r7, #0
 8009c70:	bfaa      	itet	ge
 8009c72:	2300      	movge	r3, #0
 8009c74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009c78:	f8c8 3000 	strge.w	r3, [r8]
 8009c7c:	4b9a      	ldr	r3, [pc, #616]	; (8009ee8 <_dtoa_r+0x2d8>)
 8009c7e:	bfbc      	itt	lt
 8009c80:	2201      	movlt	r2, #1
 8009c82:	f8c8 2000 	strlt.w	r2, [r8]
 8009c86:	ea33 030b 	bics.w	r3, r3, fp
 8009c8a:	d11b      	bne.n	8009cc4 <_dtoa_r+0xb4>
 8009c8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c98:	4333      	orrs	r3, r6
 8009c9a:	f000 8592 	beq.w	800a7c2 <_dtoa_r+0xbb2>
 8009c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ca0:	b963      	cbnz	r3, 8009cbc <_dtoa_r+0xac>
 8009ca2:	4b92      	ldr	r3, [pc, #584]	; (8009eec <_dtoa_r+0x2dc>)
 8009ca4:	e022      	b.n	8009cec <_dtoa_r+0xdc>
 8009ca6:	4b92      	ldr	r3, [pc, #584]	; (8009ef0 <_dtoa_r+0x2e0>)
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	3308      	adds	r3, #8
 8009cac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	9801      	ldr	r0, [sp, #4]
 8009cb2:	b013      	add	sp, #76	; 0x4c
 8009cb4:	ecbd 8b04 	vpop	{d8-d9}
 8009cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbc:	4b8b      	ldr	r3, [pc, #556]	; (8009eec <_dtoa_r+0x2dc>)
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	3303      	adds	r3, #3
 8009cc2:	e7f3      	b.n	8009cac <_dtoa_r+0x9c>
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	4650      	mov	r0, sl
 8009cca:	4659      	mov	r1, fp
 8009ccc:	f7f6 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cd0:	ec4b ab19 	vmov	d9, sl, fp
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	b158      	cbz	r0, 8009cf0 <_dtoa_r+0xe0>
 8009cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cda:	2301      	movs	r3, #1
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 856b 	beq.w	800a7bc <_dtoa_r+0xbac>
 8009ce6:	4883      	ldr	r0, [pc, #524]	; (8009ef4 <_dtoa_r+0x2e4>)
 8009ce8:	6018      	str	r0, [r3, #0]
 8009cea:	1e43      	subs	r3, r0, #1
 8009cec:	9301      	str	r3, [sp, #4]
 8009cee:	e7df      	b.n	8009cb0 <_dtoa_r+0xa0>
 8009cf0:	ec4b ab10 	vmov	d0, sl, fp
 8009cf4:	aa10      	add	r2, sp, #64	; 0x40
 8009cf6:	a911      	add	r1, sp, #68	; 0x44
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f001 f8ab 	bl	800ae54 <__d2b>
 8009cfe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009d02:	ee08 0a10 	vmov	s16, r0
 8009d06:	2d00      	cmp	r5, #0
 8009d08:	f000 8084 	beq.w	8009e14 <_dtoa_r+0x204>
 8009d0c:	ee19 3a90 	vmov	r3, s19
 8009d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d18:	4656      	mov	r6, sl
 8009d1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009d26:	4b74      	ldr	r3, [pc, #464]	; (8009ef8 <_dtoa_r+0x2e8>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	4639      	mov	r1, r7
 8009d2e:	f7f6 faab 	bl	8000288 <__aeabi_dsub>
 8009d32:	a365      	add	r3, pc, #404	; (adr r3, 8009ec8 <_dtoa_r+0x2b8>)
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	f7f6 fc5e 	bl	80005f8 <__aeabi_dmul>
 8009d3c:	a364      	add	r3, pc, #400	; (adr r3, 8009ed0 <_dtoa_r+0x2c0>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f7f6 faa3 	bl	800028c <__adddf3>
 8009d46:	4606      	mov	r6, r0
 8009d48:	4628      	mov	r0, r5
 8009d4a:	460f      	mov	r7, r1
 8009d4c:	f7f6 fbea 	bl	8000524 <__aeabi_i2d>
 8009d50:	a361      	add	r3, pc, #388	; (adr r3, 8009ed8 <_dtoa_r+0x2c8>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	f7f6 fc4f 	bl	80005f8 <__aeabi_dmul>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4630      	mov	r0, r6
 8009d60:	4639      	mov	r1, r7
 8009d62:	f7f6 fa93 	bl	800028c <__adddf3>
 8009d66:	4606      	mov	r6, r0
 8009d68:	460f      	mov	r7, r1
 8009d6a:	f7f6 fef5 	bl	8000b58 <__aeabi_d2iz>
 8009d6e:	2200      	movs	r2, #0
 8009d70:	9000      	str	r0, [sp, #0]
 8009d72:	2300      	movs	r3, #0
 8009d74:	4630      	mov	r0, r6
 8009d76:	4639      	mov	r1, r7
 8009d78:	f7f6 feb0 	bl	8000adc <__aeabi_dcmplt>
 8009d7c:	b150      	cbz	r0, 8009d94 <_dtoa_r+0x184>
 8009d7e:	9800      	ldr	r0, [sp, #0]
 8009d80:	f7f6 fbd0 	bl	8000524 <__aeabi_i2d>
 8009d84:	4632      	mov	r2, r6
 8009d86:	463b      	mov	r3, r7
 8009d88:	f7f6 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d8c:	b910      	cbnz	r0, 8009d94 <_dtoa_r+0x184>
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	9b00      	ldr	r3, [sp, #0]
 8009d96:	2b16      	cmp	r3, #22
 8009d98:	d85a      	bhi.n	8009e50 <_dtoa_r+0x240>
 8009d9a:	9a00      	ldr	r2, [sp, #0]
 8009d9c:	4b57      	ldr	r3, [pc, #348]	; (8009efc <_dtoa_r+0x2ec>)
 8009d9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	ec51 0b19 	vmov	r0, r1, d9
 8009daa:	f7f6 fe97 	bl	8000adc <__aeabi_dcmplt>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d050      	beq.n	8009e54 <_dtoa_r+0x244>
 8009db2:	9b00      	ldr	r3, [sp, #0]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	2300      	movs	r3, #0
 8009dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dbe:	1b5d      	subs	r5, r3, r5
 8009dc0:	1e6b      	subs	r3, r5, #1
 8009dc2:	9305      	str	r3, [sp, #20]
 8009dc4:	bf45      	ittet	mi
 8009dc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009dca:	9304      	strmi	r3, [sp, #16]
 8009dcc:	2300      	movpl	r3, #0
 8009dce:	2300      	movmi	r3, #0
 8009dd0:	bf4c      	ite	mi
 8009dd2:	9305      	strmi	r3, [sp, #20]
 8009dd4:	9304      	strpl	r3, [sp, #16]
 8009dd6:	9b00      	ldr	r3, [sp, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	db3d      	blt.n	8009e58 <_dtoa_r+0x248>
 8009ddc:	9b05      	ldr	r3, [sp, #20]
 8009dde:	9a00      	ldr	r2, [sp, #0]
 8009de0:	920a      	str	r2, [sp, #40]	; 0x28
 8009de2:	4413      	add	r3, r2
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	2300      	movs	r3, #0
 8009de8:	9307      	str	r3, [sp, #28]
 8009dea:	9b06      	ldr	r3, [sp, #24]
 8009dec:	2b09      	cmp	r3, #9
 8009dee:	f200 8089 	bhi.w	8009f04 <_dtoa_r+0x2f4>
 8009df2:	2b05      	cmp	r3, #5
 8009df4:	bfc4      	itt	gt
 8009df6:	3b04      	subgt	r3, #4
 8009df8:	9306      	strgt	r3, [sp, #24]
 8009dfa:	9b06      	ldr	r3, [sp, #24]
 8009dfc:	f1a3 0302 	sub.w	r3, r3, #2
 8009e00:	bfcc      	ite	gt
 8009e02:	2500      	movgt	r5, #0
 8009e04:	2501      	movle	r5, #1
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	f200 8087 	bhi.w	8009f1a <_dtoa_r+0x30a>
 8009e0c:	e8df f003 	tbb	[pc, r3]
 8009e10:	59383a2d 	.word	0x59383a2d
 8009e14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009e18:	441d      	add	r5, r3
 8009e1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e1e:	2b20      	cmp	r3, #32
 8009e20:	bfc1      	itttt	gt
 8009e22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009e2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e32:	bfda      	itte	le
 8009e34:	f1c3 0320 	rsble	r3, r3, #32
 8009e38:	fa06 f003 	lslle.w	r0, r6, r3
 8009e3c:	4318      	orrgt	r0, r3
 8009e3e:	f7f6 fb61 	bl	8000504 <__aeabi_ui2d>
 8009e42:	2301      	movs	r3, #1
 8009e44:	4606      	mov	r6, r0
 8009e46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009e4a:	3d01      	subs	r5, #1
 8009e4c:	930e      	str	r3, [sp, #56]	; 0x38
 8009e4e:	e76a      	b.n	8009d26 <_dtoa_r+0x116>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e7b2      	b.n	8009dba <_dtoa_r+0x1aa>
 8009e54:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e56:	e7b1      	b.n	8009dbc <_dtoa_r+0x1ac>
 8009e58:	9b04      	ldr	r3, [sp, #16]
 8009e5a:	9a00      	ldr	r2, [sp, #0]
 8009e5c:	1a9b      	subs	r3, r3, r2
 8009e5e:	9304      	str	r3, [sp, #16]
 8009e60:	4253      	negs	r3, r2
 8009e62:	9307      	str	r3, [sp, #28]
 8009e64:	2300      	movs	r3, #0
 8009e66:	930a      	str	r3, [sp, #40]	; 0x28
 8009e68:	e7bf      	b.n	8009dea <_dtoa_r+0x1da>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	9308      	str	r3, [sp, #32]
 8009e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	dc55      	bgt.n	8009f20 <_dtoa_r+0x310>
 8009e74:	2301      	movs	r3, #1
 8009e76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e7e:	e00c      	b.n	8009e9a <_dtoa_r+0x28a>
 8009e80:	2301      	movs	r3, #1
 8009e82:	e7f3      	b.n	8009e6c <_dtoa_r+0x25c>
 8009e84:	2300      	movs	r3, #0
 8009e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e88:	9308      	str	r3, [sp, #32]
 8009e8a:	9b00      	ldr	r3, [sp, #0]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	9302      	str	r3, [sp, #8]
 8009e90:	3301      	adds	r3, #1
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	9303      	str	r3, [sp, #12]
 8009e96:	bfb8      	it	lt
 8009e98:	2301      	movlt	r3, #1
 8009e9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	6042      	str	r2, [r0, #4]
 8009ea0:	2204      	movs	r2, #4
 8009ea2:	f102 0614 	add.w	r6, r2, #20
 8009ea6:	429e      	cmp	r6, r3
 8009ea8:	6841      	ldr	r1, [r0, #4]
 8009eaa:	d93d      	bls.n	8009f28 <_dtoa_r+0x318>
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 fca9 	bl	800a804 <_Balloc>
 8009eb2:	9001      	str	r0, [sp, #4]
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d13b      	bne.n	8009f30 <_dtoa_r+0x320>
 8009eb8:	4b11      	ldr	r3, [pc, #68]	; (8009f00 <_dtoa_r+0x2f0>)
 8009eba:	4602      	mov	r2, r0
 8009ebc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ec0:	e6c0      	b.n	8009c44 <_dtoa_r+0x34>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e7df      	b.n	8009e86 <_dtoa_r+0x276>
 8009ec6:	bf00      	nop
 8009ec8:	636f4361 	.word	0x636f4361
 8009ecc:	3fd287a7 	.word	0x3fd287a7
 8009ed0:	8b60c8b3 	.word	0x8b60c8b3
 8009ed4:	3fc68a28 	.word	0x3fc68a28
 8009ed8:	509f79fb 	.word	0x509f79fb
 8009edc:	3fd34413 	.word	0x3fd34413
 8009ee0:	0800cde5 	.word	0x0800cde5
 8009ee4:	0800cdfc 	.word	0x0800cdfc
 8009ee8:	7ff00000 	.word	0x7ff00000
 8009eec:	0800cde1 	.word	0x0800cde1
 8009ef0:	0800cdd8 	.word	0x0800cdd8
 8009ef4:	0800cdb5 	.word	0x0800cdb5
 8009ef8:	3ff80000 	.word	0x3ff80000
 8009efc:	0800cef0 	.word	0x0800cef0
 8009f00:	0800ce57 	.word	0x0800ce57
 8009f04:	2501      	movs	r5, #1
 8009f06:	2300      	movs	r3, #0
 8009f08:	9306      	str	r3, [sp, #24]
 8009f0a:	9508      	str	r5, [sp, #32]
 8009f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f14:	2200      	movs	r2, #0
 8009f16:	2312      	movs	r3, #18
 8009f18:	e7b0      	b.n	8009e7c <_dtoa_r+0x26c>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	9308      	str	r3, [sp, #32]
 8009f1e:	e7f5      	b.n	8009f0c <_dtoa_r+0x2fc>
 8009f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f26:	e7b8      	b.n	8009e9a <_dtoa_r+0x28a>
 8009f28:	3101      	adds	r1, #1
 8009f2a:	6041      	str	r1, [r0, #4]
 8009f2c:	0052      	lsls	r2, r2, #1
 8009f2e:	e7b8      	b.n	8009ea2 <_dtoa_r+0x292>
 8009f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f32:	9a01      	ldr	r2, [sp, #4]
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	9b03      	ldr	r3, [sp, #12]
 8009f38:	2b0e      	cmp	r3, #14
 8009f3a:	f200 809d 	bhi.w	800a078 <_dtoa_r+0x468>
 8009f3e:	2d00      	cmp	r5, #0
 8009f40:	f000 809a 	beq.w	800a078 <_dtoa_r+0x468>
 8009f44:	9b00      	ldr	r3, [sp, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	dd32      	ble.n	8009fb0 <_dtoa_r+0x3a0>
 8009f4a:	4ab7      	ldr	r2, [pc, #732]	; (800a228 <_dtoa_r+0x618>)
 8009f4c:	f003 030f 	and.w	r3, r3, #15
 8009f50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f58:	9b00      	ldr	r3, [sp, #0]
 8009f5a:	05d8      	lsls	r0, r3, #23
 8009f5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009f60:	d516      	bpl.n	8009f90 <_dtoa_r+0x380>
 8009f62:	4bb2      	ldr	r3, [pc, #712]	; (800a22c <_dtoa_r+0x61c>)
 8009f64:	ec51 0b19 	vmov	r0, r1, d9
 8009f68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f6c:	f7f6 fc6e 	bl	800084c <__aeabi_ddiv>
 8009f70:	f007 070f 	and.w	r7, r7, #15
 8009f74:	4682      	mov	sl, r0
 8009f76:	468b      	mov	fp, r1
 8009f78:	2503      	movs	r5, #3
 8009f7a:	4eac      	ldr	r6, [pc, #688]	; (800a22c <_dtoa_r+0x61c>)
 8009f7c:	b957      	cbnz	r7, 8009f94 <_dtoa_r+0x384>
 8009f7e:	4642      	mov	r2, r8
 8009f80:	464b      	mov	r3, r9
 8009f82:	4650      	mov	r0, sl
 8009f84:	4659      	mov	r1, fp
 8009f86:	f7f6 fc61 	bl	800084c <__aeabi_ddiv>
 8009f8a:	4682      	mov	sl, r0
 8009f8c:	468b      	mov	fp, r1
 8009f8e:	e028      	b.n	8009fe2 <_dtoa_r+0x3d2>
 8009f90:	2502      	movs	r5, #2
 8009f92:	e7f2      	b.n	8009f7a <_dtoa_r+0x36a>
 8009f94:	07f9      	lsls	r1, r7, #31
 8009f96:	d508      	bpl.n	8009faa <_dtoa_r+0x39a>
 8009f98:	4640      	mov	r0, r8
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fa0:	f7f6 fb2a 	bl	80005f8 <__aeabi_dmul>
 8009fa4:	3501      	adds	r5, #1
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4689      	mov	r9, r1
 8009faa:	107f      	asrs	r7, r7, #1
 8009fac:	3608      	adds	r6, #8
 8009fae:	e7e5      	b.n	8009f7c <_dtoa_r+0x36c>
 8009fb0:	f000 809b 	beq.w	800a0ea <_dtoa_r+0x4da>
 8009fb4:	9b00      	ldr	r3, [sp, #0]
 8009fb6:	4f9d      	ldr	r7, [pc, #628]	; (800a22c <_dtoa_r+0x61c>)
 8009fb8:	425e      	negs	r6, r3
 8009fba:	4b9b      	ldr	r3, [pc, #620]	; (800a228 <_dtoa_r+0x618>)
 8009fbc:	f006 020f 	and.w	r2, r6, #15
 8009fc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc8:	ec51 0b19 	vmov	r0, r1, d9
 8009fcc:	f7f6 fb14 	bl	80005f8 <__aeabi_dmul>
 8009fd0:	1136      	asrs	r6, r6, #4
 8009fd2:	4682      	mov	sl, r0
 8009fd4:	468b      	mov	fp, r1
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	2502      	movs	r5, #2
 8009fda:	2e00      	cmp	r6, #0
 8009fdc:	d17a      	bne.n	800a0d4 <_dtoa_r+0x4c4>
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1d3      	bne.n	8009f8a <_dtoa_r+0x37a>
 8009fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 8082 	beq.w	800a0ee <_dtoa_r+0x4de>
 8009fea:	4b91      	ldr	r3, [pc, #580]	; (800a230 <_dtoa_r+0x620>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	4650      	mov	r0, sl
 8009ff0:	4659      	mov	r1, fp
 8009ff2:	f7f6 fd73 	bl	8000adc <__aeabi_dcmplt>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d079      	beq.n	800a0ee <_dtoa_r+0x4de>
 8009ffa:	9b03      	ldr	r3, [sp, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d076      	beq.n	800a0ee <_dtoa_r+0x4de>
 800a000:	9b02      	ldr	r3, [sp, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	dd36      	ble.n	800a074 <_dtoa_r+0x464>
 800a006:	9b00      	ldr	r3, [sp, #0]
 800a008:	4650      	mov	r0, sl
 800a00a:	4659      	mov	r1, fp
 800a00c:	1e5f      	subs	r7, r3, #1
 800a00e:	2200      	movs	r2, #0
 800a010:	4b88      	ldr	r3, [pc, #544]	; (800a234 <_dtoa_r+0x624>)
 800a012:	f7f6 faf1 	bl	80005f8 <__aeabi_dmul>
 800a016:	9e02      	ldr	r6, [sp, #8]
 800a018:	4682      	mov	sl, r0
 800a01a:	468b      	mov	fp, r1
 800a01c:	3501      	adds	r5, #1
 800a01e:	4628      	mov	r0, r5
 800a020:	f7f6 fa80 	bl	8000524 <__aeabi_i2d>
 800a024:	4652      	mov	r2, sl
 800a026:	465b      	mov	r3, fp
 800a028:	f7f6 fae6 	bl	80005f8 <__aeabi_dmul>
 800a02c:	4b82      	ldr	r3, [pc, #520]	; (800a238 <_dtoa_r+0x628>)
 800a02e:	2200      	movs	r2, #0
 800a030:	f7f6 f92c 	bl	800028c <__adddf3>
 800a034:	46d0      	mov	r8, sl
 800a036:	46d9      	mov	r9, fp
 800a038:	4682      	mov	sl, r0
 800a03a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a03e:	2e00      	cmp	r6, #0
 800a040:	d158      	bne.n	800a0f4 <_dtoa_r+0x4e4>
 800a042:	4b7e      	ldr	r3, [pc, #504]	; (800a23c <_dtoa_r+0x62c>)
 800a044:	2200      	movs	r2, #0
 800a046:	4640      	mov	r0, r8
 800a048:	4649      	mov	r1, r9
 800a04a:	f7f6 f91d 	bl	8000288 <__aeabi_dsub>
 800a04e:	4652      	mov	r2, sl
 800a050:	465b      	mov	r3, fp
 800a052:	4680      	mov	r8, r0
 800a054:	4689      	mov	r9, r1
 800a056:	f7f6 fd5f 	bl	8000b18 <__aeabi_dcmpgt>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f040 8295 	bne.w	800a58a <_dtoa_r+0x97a>
 800a060:	4652      	mov	r2, sl
 800a062:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a066:	4640      	mov	r0, r8
 800a068:	4649      	mov	r1, r9
 800a06a:	f7f6 fd37 	bl	8000adc <__aeabi_dcmplt>
 800a06e:	2800      	cmp	r0, #0
 800a070:	f040 8289 	bne.w	800a586 <_dtoa_r+0x976>
 800a074:	ec5b ab19 	vmov	sl, fp, d9
 800a078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f2c0 8148 	blt.w	800a310 <_dtoa_r+0x700>
 800a080:	9a00      	ldr	r2, [sp, #0]
 800a082:	2a0e      	cmp	r2, #14
 800a084:	f300 8144 	bgt.w	800a310 <_dtoa_r+0x700>
 800a088:	4b67      	ldr	r3, [pc, #412]	; (800a228 <_dtoa_r+0x618>)
 800a08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a08e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a094:	2b00      	cmp	r3, #0
 800a096:	f280 80d5 	bge.w	800a244 <_dtoa_r+0x634>
 800a09a:	9b03      	ldr	r3, [sp, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f300 80d1 	bgt.w	800a244 <_dtoa_r+0x634>
 800a0a2:	f040 826f 	bne.w	800a584 <_dtoa_r+0x974>
 800a0a6:	4b65      	ldr	r3, [pc, #404]	; (800a23c <_dtoa_r+0x62c>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	f7f6 faa3 	bl	80005f8 <__aeabi_dmul>
 800a0b2:	4652      	mov	r2, sl
 800a0b4:	465b      	mov	r3, fp
 800a0b6:	f7f6 fd25 	bl	8000b04 <__aeabi_dcmpge>
 800a0ba:	9e03      	ldr	r6, [sp, #12]
 800a0bc:	4637      	mov	r7, r6
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	f040 8245 	bne.w	800a54e <_dtoa_r+0x93e>
 800a0c4:	9d01      	ldr	r5, [sp, #4]
 800a0c6:	2331      	movs	r3, #49	; 0x31
 800a0c8:	f805 3b01 	strb.w	r3, [r5], #1
 800a0cc:	9b00      	ldr	r3, [sp, #0]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	e240      	b.n	800a556 <_dtoa_r+0x946>
 800a0d4:	07f2      	lsls	r2, r6, #31
 800a0d6:	d505      	bpl.n	800a0e4 <_dtoa_r+0x4d4>
 800a0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0dc:	f7f6 fa8c 	bl	80005f8 <__aeabi_dmul>
 800a0e0:	3501      	adds	r5, #1
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	1076      	asrs	r6, r6, #1
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	e777      	b.n	8009fda <_dtoa_r+0x3ca>
 800a0ea:	2502      	movs	r5, #2
 800a0ec:	e779      	b.n	8009fe2 <_dtoa_r+0x3d2>
 800a0ee:	9f00      	ldr	r7, [sp, #0]
 800a0f0:	9e03      	ldr	r6, [sp, #12]
 800a0f2:	e794      	b.n	800a01e <_dtoa_r+0x40e>
 800a0f4:	9901      	ldr	r1, [sp, #4]
 800a0f6:	4b4c      	ldr	r3, [pc, #304]	; (800a228 <_dtoa_r+0x618>)
 800a0f8:	4431      	add	r1, r6
 800a0fa:	910d      	str	r1, [sp, #52]	; 0x34
 800a0fc:	9908      	ldr	r1, [sp, #32]
 800a0fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a102:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a106:	2900      	cmp	r1, #0
 800a108:	d043      	beq.n	800a192 <_dtoa_r+0x582>
 800a10a:	494d      	ldr	r1, [pc, #308]	; (800a240 <_dtoa_r+0x630>)
 800a10c:	2000      	movs	r0, #0
 800a10e:	f7f6 fb9d 	bl	800084c <__aeabi_ddiv>
 800a112:	4652      	mov	r2, sl
 800a114:	465b      	mov	r3, fp
 800a116:	f7f6 f8b7 	bl	8000288 <__aeabi_dsub>
 800a11a:	9d01      	ldr	r5, [sp, #4]
 800a11c:	4682      	mov	sl, r0
 800a11e:	468b      	mov	fp, r1
 800a120:	4649      	mov	r1, r9
 800a122:	4640      	mov	r0, r8
 800a124:	f7f6 fd18 	bl	8000b58 <__aeabi_d2iz>
 800a128:	4606      	mov	r6, r0
 800a12a:	f7f6 f9fb 	bl	8000524 <__aeabi_i2d>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	4640      	mov	r0, r8
 800a134:	4649      	mov	r1, r9
 800a136:	f7f6 f8a7 	bl	8000288 <__aeabi_dsub>
 800a13a:	3630      	adds	r6, #48	; 0x30
 800a13c:	f805 6b01 	strb.w	r6, [r5], #1
 800a140:	4652      	mov	r2, sl
 800a142:	465b      	mov	r3, fp
 800a144:	4680      	mov	r8, r0
 800a146:	4689      	mov	r9, r1
 800a148:	f7f6 fcc8 	bl	8000adc <__aeabi_dcmplt>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d163      	bne.n	800a218 <_dtoa_r+0x608>
 800a150:	4642      	mov	r2, r8
 800a152:	464b      	mov	r3, r9
 800a154:	4936      	ldr	r1, [pc, #216]	; (800a230 <_dtoa_r+0x620>)
 800a156:	2000      	movs	r0, #0
 800a158:	f7f6 f896 	bl	8000288 <__aeabi_dsub>
 800a15c:	4652      	mov	r2, sl
 800a15e:	465b      	mov	r3, fp
 800a160:	f7f6 fcbc 	bl	8000adc <__aeabi_dcmplt>
 800a164:	2800      	cmp	r0, #0
 800a166:	f040 80b5 	bne.w	800a2d4 <_dtoa_r+0x6c4>
 800a16a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a16c:	429d      	cmp	r5, r3
 800a16e:	d081      	beq.n	800a074 <_dtoa_r+0x464>
 800a170:	4b30      	ldr	r3, [pc, #192]	; (800a234 <_dtoa_r+0x624>)
 800a172:	2200      	movs	r2, #0
 800a174:	4650      	mov	r0, sl
 800a176:	4659      	mov	r1, fp
 800a178:	f7f6 fa3e 	bl	80005f8 <__aeabi_dmul>
 800a17c:	4b2d      	ldr	r3, [pc, #180]	; (800a234 <_dtoa_r+0x624>)
 800a17e:	4682      	mov	sl, r0
 800a180:	468b      	mov	fp, r1
 800a182:	4640      	mov	r0, r8
 800a184:	4649      	mov	r1, r9
 800a186:	2200      	movs	r2, #0
 800a188:	f7f6 fa36 	bl	80005f8 <__aeabi_dmul>
 800a18c:	4680      	mov	r8, r0
 800a18e:	4689      	mov	r9, r1
 800a190:	e7c6      	b.n	800a120 <_dtoa_r+0x510>
 800a192:	4650      	mov	r0, sl
 800a194:	4659      	mov	r1, fp
 800a196:	f7f6 fa2f 	bl	80005f8 <__aeabi_dmul>
 800a19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a19c:	9d01      	ldr	r5, [sp, #4]
 800a19e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1a0:	4682      	mov	sl, r0
 800a1a2:	468b      	mov	fp, r1
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	f7f6 fcd6 	bl	8000b58 <__aeabi_d2iz>
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	f7f6 f9b9 	bl	8000524 <__aeabi_i2d>
 800a1b2:	3630      	adds	r6, #48	; 0x30
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	f7f6 f864 	bl	8000288 <__aeabi_dsub>
 800a1c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a1c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1c6:	429d      	cmp	r5, r3
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	4689      	mov	r9, r1
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	d124      	bne.n	800a21c <_dtoa_r+0x60c>
 800a1d2:	4b1b      	ldr	r3, [pc, #108]	; (800a240 <_dtoa_r+0x630>)
 800a1d4:	4650      	mov	r0, sl
 800a1d6:	4659      	mov	r1, fp
 800a1d8:	f7f6 f858 	bl	800028c <__adddf3>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	f7f6 fc98 	bl	8000b18 <__aeabi_dcmpgt>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d173      	bne.n	800a2d4 <_dtoa_r+0x6c4>
 800a1ec:	4652      	mov	r2, sl
 800a1ee:	465b      	mov	r3, fp
 800a1f0:	4913      	ldr	r1, [pc, #76]	; (800a240 <_dtoa_r+0x630>)
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	f7f6 f848 	bl	8000288 <__aeabi_dsub>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4640      	mov	r0, r8
 800a1fe:	4649      	mov	r1, r9
 800a200:	f7f6 fc6c 	bl	8000adc <__aeabi_dcmplt>
 800a204:	2800      	cmp	r0, #0
 800a206:	f43f af35 	beq.w	800a074 <_dtoa_r+0x464>
 800a20a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a20c:	1e6b      	subs	r3, r5, #1
 800a20e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a210:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a214:	2b30      	cmp	r3, #48	; 0x30
 800a216:	d0f8      	beq.n	800a20a <_dtoa_r+0x5fa>
 800a218:	9700      	str	r7, [sp, #0]
 800a21a:	e049      	b.n	800a2b0 <_dtoa_r+0x6a0>
 800a21c:	4b05      	ldr	r3, [pc, #20]	; (800a234 <_dtoa_r+0x624>)
 800a21e:	f7f6 f9eb 	bl	80005f8 <__aeabi_dmul>
 800a222:	4680      	mov	r8, r0
 800a224:	4689      	mov	r9, r1
 800a226:	e7bd      	b.n	800a1a4 <_dtoa_r+0x594>
 800a228:	0800cef0 	.word	0x0800cef0
 800a22c:	0800cec8 	.word	0x0800cec8
 800a230:	3ff00000 	.word	0x3ff00000
 800a234:	40240000 	.word	0x40240000
 800a238:	401c0000 	.word	0x401c0000
 800a23c:	40140000 	.word	0x40140000
 800a240:	3fe00000 	.word	0x3fe00000
 800a244:	9d01      	ldr	r5, [sp, #4]
 800a246:	4656      	mov	r6, sl
 800a248:	465f      	mov	r7, fp
 800a24a:	4642      	mov	r2, r8
 800a24c:	464b      	mov	r3, r9
 800a24e:	4630      	mov	r0, r6
 800a250:	4639      	mov	r1, r7
 800a252:	f7f6 fafb 	bl	800084c <__aeabi_ddiv>
 800a256:	f7f6 fc7f 	bl	8000b58 <__aeabi_d2iz>
 800a25a:	4682      	mov	sl, r0
 800a25c:	f7f6 f962 	bl	8000524 <__aeabi_i2d>
 800a260:	4642      	mov	r2, r8
 800a262:	464b      	mov	r3, r9
 800a264:	f7f6 f9c8 	bl	80005f8 <__aeabi_dmul>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4630      	mov	r0, r6
 800a26e:	4639      	mov	r1, r7
 800a270:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a274:	f7f6 f808 	bl	8000288 <__aeabi_dsub>
 800a278:	f805 6b01 	strb.w	r6, [r5], #1
 800a27c:	9e01      	ldr	r6, [sp, #4]
 800a27e:	9f03      	ldr	r7, [sp, #12]
 800a280:	1bae      	subs	r6, r5, r6
 800a282:	42b7      	cmp	r7, r6
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	d135      	bne.n	800a2f6 <_dtoa_r+0x6e6>
 800a28a:	f7f5 ffff 	bl	800028c <__adddf3>
 800a28e:	4642      	mov	r2, r8
 800a290:	464b      	mov	r3, r9
 800a292:	4606      	mov	r6, r0
 800a294:	460f      	mov	r7, r1
 800a296:	f7f6 fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 800a29a:	b9d0      	cbnz	r0, 800a2d2 <_dtoa_r+0x6c2>
 800a29c:	4642      	mov	r2, r8
 800a29e:	464b      	mov	r3, r9
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	f7f6 fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2a8:	b110      	cbz	r0, 800a2b0 <_dtoa_r+0x6a0>
 800a2aa:	f01a 0f01 	tst.w	sl, #1
 800a2ae:	d110      	bne.n	800a2d2 <_dtoa_r+0x6c2>
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	ee18 1a10 	vmov	r1, s16
 800a2b6:	f000 fae5 	bl	800a884 <_Bfree>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9800      	ldr	r0, [sp, #0]
 800a2be:	702b      	strb	r3, [r5, #0]
 800a2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	6018      	str	r0, [r3, #0]
 800a2c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f43f acf1 	beq.w	8009cb0 <_dtoa_r+0xa0>
 800a2ce:	601d      	str	r5, [r3, #0]
 800a2d0:	e4ee      	b.n	8009cb0 <_dtoa_r+0xa0>
 800a2d2:	9f00      	ldr	r7, [sp, #0]
 800a2d4:	462b      	mov	r3, r5
 800a2d6:	461d      	mov	r5, r3
 800a2d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2dc:	2a39      	cmp	r2, #57	; 0x39
 800a2de:	d106      	bne.n	800a2ee <_dtoa_r+0x6de>
 800a2e0:	9a01      	ldr	r2, [sp, #4]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d1f7      	bne.n	800a2d6 <_dtoa_r+0x6c6>
 800a2e6:	9901      	ldr	r1, [sp, #4]
 800a2e8:	2230      	movs	r2, #48	; 0x30
 800a2ea:	3701      	adds	r7, #1
 800a2ec:	700a      	strb	r2, [r1, #0]
 800a2ee:	781a      	ldrb	r2, [r3, #0]
 800a2f0:	3201      	adds	r2, #1
 800a2f2:	701a      	strb	r2, [r3, #0]
 800a2f4:	e790      	b.n	800a218 <_dtoa_r+0x608>
 800a2f6:	4ba6      	ldr	r3, [pc, #664]	; (800a590 <_dtoa_r+0x980>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f7f6 f97d 	bl	80005f8 <__aeabi_dmul>
 800a2fe:	2200      	movs	r2, #0
 800a300:	2300      	movs	r3, #0
 800a302:	4606      	mov	r6, r0
 800a304:	460f      	mov	r7, r1
 800a306:	f7f6 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d09d      	beq.n	800a24a <_dtoa_r+0x63a>
 800a30e:	e7cf      	b.n	800a2b0 <_dtoa_r+0x6a0>
 800a310:	9a08      	ldr	r2, [sp, #32]
 800a312:	2a00      	cmp	r2, #0
 800a314:	f000 80d7 	beq.w	800a4c6 <_dtoa_r+0x8b6>
 800a318:	9a06      	ldr	r2, [sp, #24]
 800a31a:	2a01      	cmp	r2, #1
 800a31c:	f300 80ba 	bgt.w	800a494 <_dtoa_r+0x884>
 800a320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a322:	2a00      	cmp	r2, #0
 800a324:	f000 80b2 	beq.w	800a48c <_dtoa_r+0x87c>
 800a328:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a32c:	9e07      	ldr	r6, [sp, #28]
 800a32e:	9d04      	ldr	r5, [sp, #16]
 800a330:	9a04      	ldr	r2, [sp, #16]
 800a332:	441a      	add	r2, r3
 800a334:	9204      	str	r2, [sp, #16]
 800a336:	9a05      	ldr	r2, [sp, #20]
 800a338:	2101      	movs	r1, #1
 800a33a:	441a      	add	r2, r3
 800a33c:	4620      	mov	r0, r4
 800a33e:	9205      	str	r2, [sp, #20]
 800a340:	f000 fb58 	bl	800a9f4 <__i2b>
 800a344:	4607      	mov	r7, r0
 800a346:	2d00      	cmp	r5, #0
 800a348:	dd0c      	ble.n	800a364 <_dtoa_r+0x754>
 800a34a:	9b05      	ldr	r3, [sp, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	dd09      	ble.n	800a364 <_dtoa_r+0x754>
 800a350:	42ab      	cmp	r3, r5
 800a352:	9a04      	ldr	r2, [sp, #16]
 800a354:	bfa8      	it	ge
 800a356:	462b      	movge	r3, r5
 800a358:	1ad2      	subs	r2, r2, r3
 800a35a:	9204      	str	r2, [sp, #16]
 800a35c:	9a05      	ldr	r2, [sp, #20]
 800a35e:	1aed      	subs	r5, r5, r3
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	9305      	str	r3, [sp, #20]
 800a364:	9b07      	ldr	r3, [sp, #28]
 800a366:	b31b      	cbz	r3, 800a3b0 <_dtoa_r+0x7a0>
 800a368:	9b08      	ldr	r3, [sp, #32]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 80af 	beq.w	800a4ce <_dtoa_r+0x8be>
 800a370:	2e00      	cmp	r6, #0
 800a372:	dd13      	ble.n	800a39c <_dtoa_r+0x78c>
 800a374:	4639      	mov	r1, r7
 800a376:	4632      	mov	r2, r6
 800a378:	4620      	mov	r0, r4
 800a37a:	f000 fbfb 	bl	800ab74 <__pow5mult>
 800a37e:	ee18 2a10 	vmov	r2, s16
 800a382:	4601      	mov	r1, r0
 800a384:	4607      	mov	r7, r0
 800a386:	4620      	mov	r0, r4
 800a388:	f000 fb4a 	bl	800aa20 <__multiply>
 800a38c:	ee18 1a10 	vmov	r1, s16
 800a390:	4680      	mov	r8, r0
 800a392:	4620      	mov	r0, r4
 800a394:	f000 fa76 	bl	800a884 <_Bfree>
 800a398:	ee08 8a10 	vmov	s16, r8
 800a39c:	9b07      	ldr	r3, [sp, #28]
 800a39e:	1b9a      	subs	r2, r3, r6
 800a3a0:	d006      	beq.n	800a3b0 <_dtoa_r+0x7a0>
 800a3a2:	ee18 1a10 	vmov	r1, s16
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f000 fbe4 	bl	800ab74 <__pow5mult>
 800a3ac:	ee08 0a10 	vmov	s16, r0
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 fb1e 	bl	800a9f4 <__i2b>
 800a3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	4606      	mov	r6, r0
 800a3be:	f340 8088 	ble.w	800a4d2 <_dtoa_r+0x8c2>
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	4601      	mov	r1, r0
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f000 fbd4 	bl	800ab74 <__pow5mult>
 800a3cc:	9b06      	ldr	r3, [sp, #24]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	f340 8081 	ble.w	800a4d8 <_dtoa_r+0x8c8>
 800a3d6:	f04f 0800 	mov.w	r8, #0
 800a3da:	6933      	ldr	r3, [r6, #16]
 800a3dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a3e0:	6918      	ldr	r0, [r3, #16]
 800a3e2:	f000 fab7 	bl	800a954 <__hi0bits>
 800a3e6:	f1c0 0020 	rsb	r0, r0, #32
 800a3ea:	9b05      	ldr	r3, [sp, #20]
 800a3ec:	4418      	add	r0, r3
 800a3ee:	f010 001f 	ands.w	r0, r0, #31
 800a3f2:	f000 8092 	beq.w	800a51a <_dtoa_r+0x90a>
 800a3f6:	f1c0 0320 	rsb	r3, r0, #32
 800a3fa:	2b04      	cmp	r3, #4
 800a3fc:	f340 808a 	ble.w	800a514 <_dtoa_r+0x904>
 800a400:	f1c0 001c 	rsb	r0, r0, #28
 800a404:	9b04      	ldr	r3, [sp, #16]
 800a406:	4403      	add	r3, r0
 800a408:	9304      	str	r3, [sp, #16]
 800a40a:	9b05      	ldr	r3, [sp, #20]
 800a40c:	4403      	add	r3, r0
 800a40e:	4405      	add	r5, r0
 800a410:	9305      	str	r3, [sp, #20]
 800a412:	9b04      	ldr	r3, [sp, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	dd07      	ble.n	800a428 <_dtoa_r+0x818>
 800a418:	ee18 1a10 	vmov	r1, s16
 800a41c:	461a      	mov	r2, r3
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 fc02 	bl	800ac28 <__lshift>
 800a424:	ee08 0a10 	vmov	s16, r0
 800a428:	9b05      	ldr	r3, [sp, #20]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dd05      	ble.n	800a43a <_dtoa_r+0x82a>
 800a42e:	4631      	mov	r1, r6
 800a430:	461a      	mov	r2, r3
 800a432:	4620      	mov	r0, r4
 800a434:	f000 fbf8 	bl	800ac28 <__lshift>
 800a438:	4606      	mov	r6, r0
 800a43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d06e      	beq.n	800a51e <_dtoa_r+0x90e>
 800a440:	ee18 0a10 	vmov	r0, s16
 800a444:	4631      	mov	r1, r6
 800a446:	f000 fc5f 	bl	800ad08 <__mcmp>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	da67      	bge.n	800a51e <_dtoa_r+0x90e>
 800a44e:	9b00      	ldr	r3, [sp, #0]
 800a450:	3b01      	subs	r3, #1
 800a452:	ee18 1a10 	vmov	r1, s16
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	220a      	movs	r2, #10
 800a45a:	2300      	movs	r3, #0
 800a45c:	4620      	mov	r0, r4
 800a45e:	f000 fa33 	bl	800a8c8 <__multadd>
 800a462:	9b08      	ldr	r3, [sp, #32]
 800a464:	ee08 0a10 	vmov	s16, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 81b1 	beq.w	800a7d0 <_dtoa_r+0xbc0>
 800a46e:	2300      	movs	r3, #0
 800a470:	4639      	mov	r1, r7
 800a472:	220a      	movs	r2, #10
 800a474:	4620      	mov	r0, r4
 800a476:	f000 fa27 	bl	800a8c8 <__multadd>
 800a47a:	9b02      	ldr	r3, [sp, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	4607      	mov	r7, r0
 800a480:	f300 808e 	bgt.w	800a5a0 <_dtoa_r+0x990>
 800a484:	9b06      	ldr	r3, [sp, #24]
 800a486:	2b02      	cmp	r3, #2
 800a488:	dc51      	bgt.n	800a52e <_dtoa_r+0x91e>
 800a48a:	e089      	b.n	800a5a0 <_dtoa_r+0x990>
 800a48c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a48e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a492:	e74b      	b.n	800a32c <_dtoa_r+0x71c>
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	1e5e      	subs	r6, r3, #1
 800a498:	9b07      	ldr	r3, [sp, #28]
 800a49a:	42b3      	cmp	r3, r6
 800a49c:	bfbf      	itttt	lt
 800a49e:	9b07      	ldrlt	r3, [sp, #28]
 800a4a0:	9607      	strlt	r6, [sp, #28]
 800a4a2:	1af2      	sublt	r2, r6, r3
 800a4a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4a6:	bfb6      	itet	lt
 800a4a8:	189b      	addlt	r3, r3, r2
 800a4aa:	1b9e      	subge	r6, r3, r6
 800a4ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	bfb8      	it	lt
 800a4b2:	2600      	movlt	r6, #0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bfb7      	itett	lt
 800a4b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a4bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a4c0:	1a9d      	sublt	r5, r3, r2
 800a4c2:	2300      	movlt	r3, #0
 800a4c4:	e734      	b.n	800a330 <_dtoa_r+0x720>
 800a4c6:	9e07      	ldr	r6, [sp, #28]
 800a4c8:	9d04      	ldr	r5, [sp, #16]
 800a4ca:	9f08      	ldr	r7, [sp, #32]
 800a4cc:	e73b      	b.n	800a346 <_dtoa_r+0x736>
 800a4ce:	9a07      	ldr	r2, [sp, #28]
 800a4d0:	e767      	b.n	800a3a2 <_dtoa_r+0x792>
 800a4d2:	9b06      	ldr	r3, [sp, #24]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	dc18      	bgt.n	800a50a <_dtoa_r+0x8fa>
 800a4d8:	f1ba 0f00 	cmp.w	sl, #0
 800a4dc:	d115      	bne.n	800a50a <_dtoa_r+0x8fa>
 800a4de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4e2:	b993      	cbnz	r3, 800a50a <_dtoa_r+0x8fa>
 800a4e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4e8:	0d1b      	lsrs	r3, r3, #20
 800a4ea:	051b      	lsls	r3, r3, #20
 800a4ec:	b183      	cbz	r3, 800a510 <_dtoa_r+0x900>
 800a4ee:	9b04      	ldr	r3, [sp, #16]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	9304      	str	r3, [sp, #16]
 800a4f4:	9b05      	ldr	r3, [sp, #20]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	9305      	str	r3, [sp, #20]
 800a4fa:	f04f 0801 	mov.w	r8, #1
 800a4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a500:	2b00      	cmp	r3, #0
 800a502:	f47f af6a 	bne.w	800a3da <_dtoa_r+0x7ca>
 800a506:	2001      	movs	r0, #1
 800a508:	e76f      	b.n	800a3ea <_dtoa_r+0x7da>
 800a50a:	f04f 0800 	mov.w	r8, #0
 800a50e:	e7f6      	b.n	800a4fe <_dtoa_r+0x8ee>
 800a510:	4698      	mov	r8, r3
 800a512:	e7f4      	b.n	800a4fe <_dtoa_r+0x8ee>
 800a514:	f43f af7d 	beq.w	800a412 <_dtoa_r+0x802>
 800a518:	4618      	mov	r0, r3
 800a51a:	301c      	adds	r0, #28
 800a51c:	e772      	b.n	800a404 <_dtoa_r+0x7f4>
 800a51e:	9b03      	ldr	r3, [sp, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	dc37      	bgt.n	800a594 <_dtoa_r+0x984>
 800a524:	9b06      	ldr	r3, [sp, #24]
 800a526:	2b02      	cmp	r3, #2
 800a528:	dd34      	ble.n	800a594 <_dtoa_r+0x984>
 800a52a:	9b03      	ldr	r3, [sp, #12]
 800a52c:	9302      	str	r3, [sp, #8]
 800a52e:	9b02      	ldr	r3, [sp, #8]
 800a530:	b96b      	cbnz	r3, 800a54e <_dtoa_r+0x93e>
 800a532:	4631      	mov	r1, r6
 800a534:	2205      	movs	r2, #5
 800a536:	4620      	mov	r0, r4
 800a538:	f000 f9c6 	bl	800a8c8 <__multadd>
 800a53c:	4601      	mov	r1, r0
 800a53e:	4606      	mov	r6, r0
 800a540:	ee18 0a10 	vmov	r0, s16
 800a544:	f000 fbe0 	bl	800ad08 <__mcmp>
 800a548:	2800      	cmp	r0, #0
 800a54a:	f73f adbb 	bgt.w	800a0c4 <_dtoa_r+0x4b4>
 800a54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a550:	9d01      	ldr	r5, [sp, #4]
 800a552:	43db      	mvns	r3, r3
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	f04f 0800 	mov.w	r8, #0
 800a55a:	4631      	mov	r1, r6
 800a55c:	4620      	mov	r0, r4
 800a55e:	f000 f991 	bl	800a884 <_Bfree>
 800a562:	2f00      	cmp	r7, #0
 800a564:	f43f aea4 	beq.w	800a2b0 <_dtoa_r+0x6a0>
 800a568:	f1b8 0f00 	cmp.w	r8, #0
 800a56c:	d005      	beq.n	800a57a <_dtoa_r+0x96a>
 800a56e:	45b8      	cmp	r8, r7
 800a570:	d003      	beq.n	800a57a <_dtoa_r+0x96a>
 800a572:	4641      	mov	r1, r8
 800a574:	4620      	mov	r0, r4
 800a576:	f000 f985 	bl	800a884 <_Bfree>
 800a57a:	4639      	mov	r1, r7
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 f981 	bl	800a884 <_Bfree>
 800a582:	e695      	b.n	800a2b0 <_dtoa_r+0x6a0>
 800a584:	2600      	movs	r6, #0
 800a586:	4637      	mov	r7, r6
 800a588:	e7e1      	b.n	800a54e <_dtoa_r+0x93e>
 800a58a:	9700      	str	r7, [sp, #0]
 800a58c:	4637      	mov	r7, r6
 800a58e:	e599      	b.n	800a0c4 <_dtoa_r+0x4b4>
 800a590:	40240000 	.word	0x40240000
 800a594:	9b08      	ldr	r3, [sp, #32]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 80ca 	beq.w	800a730 <_dtoa_r+0xb20>
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	9302      	str	r3, [sp, #8]
 800a5a0:	2d00      	cmp	r5, #0
 800a5a2:	dd05      	ble.n	800a5b0 <_dtoa_r+0x9a0>
 800a5a4:	4639      	mov	r1, r7
 800a5a6:	462a      	mov	r2, r5
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 fb3d 	bl	800ac28 <__lshift>
 800a5ae:	4607      	mov	r7, r0
 800a5b0:	f1b8 0f00 	cmp.w	r8, #0
 800a5b4:	d05b      	beq.n	800a66e <_dtoa_r+0xa5e>
 800a5b6:	6879      	ldr	r1, [r7, #4]
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f000 f923 	bl	800a804 <_Balloc>
 800a5be:	4605      	mov	r5, r0
 800a5c0:	b928      	cbnz	r0, 800a5ce <_dtoa_r+0x9be>
 800a5c2:	4b87      	ldr	r3, [pc, #540]	; (800a7e0 <_dtoa_r+0xbd0>)
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a5ca:	f7ff bb3b 	b.w	8009c44 <_dtoa_r+0x34>
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	3202      	adds	r2, #2
 800a5d2:	0092      	lsls	r2, r2, #2
 800a5d4:	f107 010c 	add.w	r1, r7, #12
 800a5d8:	300c      	adds	r0, #12
 800a5da:	f7fe fded 	bl	80091b8 <memcpy>
 800a5de:	2201      	movs	r2, #1
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 fb20 	bl	800ac28 <__lshift>
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	f103 0901 	add.w	r9, r3, #1
 800a5ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	9305      	str	r3, [sp, #20]
 800a5f6:	f00a 0301 	and.w	r3, sl, #1
 800a5fa:	46b8      	mov	r8, r7
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	4607      	mov	r7, r0
 800a600:	4631      	mov	r1, r6
 800a602:	ee18 0a10 	vmov	r0, s16
 800a606:	f7ff fa77 	bl	8009af8 <quorem>
 800a60a:	4641      	mov	r1, r8
 800a60c:	9002      	str	r0, [sp, #8]
 800a60e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a612:	ee18 0a10 	vmov	r0, s16
 800a616:	f000 fb77 	bl	800ad08 <__mcmp>
 800a61a:	463a      	mov	r2, r7
 800a61c:	9003      	str	r0, [sp, #12]
 800a61e:	4631      	mov	r1, r6
 800a620:	4620      	mov	r0, r4
 800a622:	f000 fb8d 	bl	800ad40 <__mdiff>
 800a626:	68c2      	ldr	r2, [r0, #12]
 800a628:	f109 3bff 	add.w	fp, r9, #4294967295
 800a62c:	4605      	mov	r5, r0
 800a62e:	bb02      	cbnz	r2, 800a672 <_dtoa_r+0xa62>
 800a630:	4601      	mov	r1, r0
 800a632:	ee18 0a10 	vmov	r0, s16
 800a636:	f000 fb67 	bl	800ad08 <__mcmp>
 800a63a:	4602      	mov	r2, r0
 800a63c:	4629      	mov	r1, r5
 800a63e:	4620      	mov	r0, r4
 800a640:	9207      	str	r2, [sp, #28]
 800a642:	f000 f91f 	bl	800a884 <_Bfree>
 800a646:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a64a:	ea43 0102 	orr.w	r1, r3, r2
 800a64e:	9b04      	ldr	r3, [sp, #16]
 800a650:	430b      	orrs	r3, r1
 800a652:	464d      	mov	r5, r9
 800a654:	d10f      	bne.n	800a676 <_dtoa_r+0xa66>
 800a656:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a65a:	d02a      	beq.n	800a6b2 <_dtoa_r+0xaa2>
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dd02      	ble.n	800a668 <_dtoa_r+0xa58>
 800a662:	9b02      	ldr	r3, [sp, #8]
 800a664:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a668:	f88b a000 	strb.w	sl, [fp]
 800a66c:	e775      	b.n	800a55a <_dtoa_r+0x94a>
 800a66e:	4638      	mov	r0, r7
 800a670:	e7ba      	b.n	800a5e8 <_dtoa_r+0x9d8>
 800a672:	2201      	movs	r2, #1
 800a674:	e7e2      	b.n	800a63c <_dtoa_r+0xa2c>
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	db04      	blt.n	800a686 <_dtoa_r+0xa76>
 800a67c:	9906      	ldr	r1, [sp, #24]
 800a67e:	430b      	orrs	r3, r1
 800a680:	9904      	ldr	r1, [sp, #16]
 800a682:	430b      	orrs	r3, r1
 800a684:	d122      	bne.n	800a6cc <_dtoa_r+0xabc>
 800a686:	2a00      	cmp	r2, #0
 800a688:	ddee      	ble.n	800a668 <_dtoa_r+0xa58>
 800a68a:	ee18 1a10 	vmov	r1, s16
 800a68e:	2201      	movs	r2, #1
 800a690:	4620      	mov	r0, r4
 800a692:	f000 fac9 	bl	800ac28 <__lshift>
 800a696:	4631      	mov	r1, r6
 800a698:	ee08 0a10 	vmov	s16, r0
 800a69c:	f000 fb34 	bl	800ad08 <__mcmp>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	dc03      	bgt.n	800a6ac <_dtoa_r+0xa9c>
 800a6a4:	d1e0      	bne.n	800a668 <_dtoa_r+0xa58>
 800a6a6:	f01a 0f01 	tst.w	sl, #1
 800a6aa:	d0dd      	beq.n	800a668 <_dtoa_r+0xa58>
 800a6ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6b0:	d1d7      	bne.n	800a662 <_dtoa_r+0xa52>
 800a6b2:	2339      	movs	r3, #57	; 0x39
 800a6b4:	f88b 3000 	strb.w	r3, [fp]
 800a6b8:	462b      	mov	r3, r5
 800a6ba:	461d      	mov	r5, r3
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a6c2:	2a39      	cmp	r2, #57	; 0x39
 800a6c4:	d071      	beq.n	800a7aa <_dtoa_r+0xb9a>
 800a6c6:	3201      	adds	r2, #1
 800a6c8:	701a      	strb	r2, [r3, #0]
 800a6ca:	e746      	b.n	800a55a <_dtoa_r+0x94a>
 800a6cc:	2a00      	cmp	r2, #0
 800a6ce:	dd07      	ble.n	800a6e0 <_dtoa_r+0xad0>
 800a6d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6d4:	d0ed      	beq.n	800a6b2 <_dtoa_r+0xaa2>
 800a6d6:	f10a 0301 	add.w	r3, sl, #1
 800a6da:	f88b 3000 	strb.w	r3, [fp]
 800a6de:	e73c      	b.n	800a55a <_dtoa_r+0x94a>
 800a6e0:	9b05      	ldr	r3, [sp, #20]
 800a6e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a6e6:	4599      	cmp	r9, r3
 800a6e8:	d047      	beq.n	800a77a <_dtoa_r+0xb6a>
 800a6ea:	ee18 1a10 	vmov	r1, s16
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	220a      	movs	r2, #10
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 f8e8 	bl	800a8c8 <__multadd>
 800a6f8:	45b8      	cmp	r8, r7
 800a6fa:	ee08 0a10 	vmov	s16, r0
 800a6fe:	f04f 0300 	mov.w	r3, #0
 800a702:	f04f 020a 	mov.w	r2, #10
 800a706:	4641      	mov	r1, r8
 800a708:	4620      	mov	r0, r4
 800a70a:	d106      	bne.n	800a71a <_dtoa_r+0xb0a>
 800a70c:	f000 f8dc 	bl	800a8c8 <__multadd>
 800a710:	4680      	mov	r8, r0
 800a712:	4607      	mov	r7, r0
 800a714:	f109 0901 	add.w	r9, r9, #1
 800a718:	e772      	b.n	800a600 <_dtoa_r+0x9f0>
 800a71a:	f000 f8d5 	bl	800a8c8 <__multadd>
 800a71e:	4639      	mov	r1, r7
 800a720:	4680      	mov	r8, r0
 800a722:	2300      	movs	r3, #0
 800a724:	220a      	movs	r2, #10
 800a726:	4620      	mov	r0, r4
 800a728:	f000 f8ce 	bl	800a8c8 <__multadd>
 800a72c:	4607      	mov	r7, r0
 800a72e:	e7f1      	b.n	800a714 <_dtoa_r+0xb04>
 800a730:	9b03      	ldr	r3, [sp, #12]
 800a732:	9302      	str	r3, [sp, #8]
 800a734:	9d01      	ldr	r5, [sp, #4]
 800a736:	ee18 0a10 	vmov	r0, s16
 800a73a:	4631      	mov	r1, r6
 800a73c:	f7ff f9dc 	bl	8009af8 <quorem>
 800a740:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a744:	9b01      	ldr	r3, [sp, #4]
 800a746:	f805 ab01 	strb.w	sl, [r5], #1
 800a74a:	1aea      	subs	r2, r5, r3
 800a74c:	9b02      	ldr	r3, [sp, #8]
 800a74e:	4293      	cmp	r3, r2
 800a750:	dd09      	ble.n	800a766 <_dtoa_r+0xb56>
 800a752:	ee18 1a10 	vmov	r1, s16
 800a756:	2300      	movs	r3, #0
 800a758:	220a      	movs	r2, #10
 800a75a:	4620      	mov	r0, r4
 800a75c:	f000 f8b4 	bl	800a8c8 <__multadd>
 800a760:	ee08 0a10 	vmov	s16, r0
 800a764:	e7e7      	b.n	800a736 <_dtoa_r+0xb26>
 800a766:	9b02      	ldr	r3, [sp, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	bfc8      	it	gt
 800a76c:	461d      	movgt	r5, r3
 800a76e:	9b01      	ldr	r3, [sp, #4]
 800a770:	bfd8      	it	le
 800a772:	2501      	movle	r5, #1
 800a774:	441d      	add	r5, r3
 800a776:	f04f 0800 	mov.w	r8, #0
 800a77a:	ee18 1a10 	vmov	r1, s16
 800a77e:	2201      	movs	r2, #1
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fa51 	bl	800ac28 <__lshift>
 800a786:	4631      	mov	r1, r6
 800a788:	ee08 0a10 	vmov	s16, r0
 800a78c:	f000 fabc 	bl	800ad08 <__mcmp>
 800a790:	2800      	cmp	r0, #0
 800a792:	dc91      	bgt.n	800a6b8 <_dtoa_r+0xaa8>
 800a794:	d102      	bne.n	800a79c <_dtoa_r+0xb8c>
 800a796:	f01a 0f01 	tst.w	sl, #1
 800a79a:	d18d      	bne.n	800a6b8 <_dtoa_r+0xaa8>
 800a79c:	462b      	mov	r3, r5
 800a79e:	461d      	mov	r5, r3
 800a7a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7a4:	2a30      	cmp	r2, #48	; 0x30
 800a7a6:	d0fa      	beq.n	800a79e <_dtoa_r+0xb8e>
 800a7a8:	e6d7      	b.n	800a55a <_dtoa_r+0x94a>
 800a7aa:	9a01      	ldr	r2, [sp, #4]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d184      	bne.n	800a6ba <_dtoa_r+0xaaa>
 800a7b0:	9b00      	ldr	r3, [sp, #0]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	2331      	movs	r3, #49	; 0x31
 800a7b8:	7013      	strb	r3, [r2, #0]
 800a7ba:	e6ce      	b.n	800a55a <_dtoa_r+0x94a>
 800a7bc:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <_dtoa_r+0xbd4>)
 800a7be:	f7ff ba95 	b.w	8009cec <_dtoa_r+0xdc>
 800a7c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f47f aa6e 	bne.w	8009ca6 <_dtoa_r+0x96>
 800a7ca:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <_dtoa_r+0xbd8>)
 800a7cc:	f7ff ba8e 	b.w	8009cec <_dtoa_r+0xdc>
 800a7d0:	9b02      	ldr	r3, [sp, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	dcae      	bgt.n	800a734 <_dtoa_r+0xb24>
 800a7d6:	9b06      	ldr	r3, [sp, #24]
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	f73f aea8 	bgt.w	800a52e <_dtoa_r+0x91e>
 800a7de:	e7a9      	b.n	800a734 <_dtoa_r+0xb24>
 800a7e0:	0800ce57 	.word	0x0800ce57
 800a7e4:	0800cdb4 	.word	0x0800cdb4
 800a7e8:	0800cdd8 	.word	0x0800cdd8

0800a7ec <_localeconv_r>:
 800a7ec:	4800      	ldr	r0, [pc, #0]	; (800a7f0 <_localeconv_r+0x4>)
 800a7ee:	4770      	bx	lr
 800a7f0:	2000017c 	.word	0x2000017c

0800a7f4 <malloc>:
 800a7f4:	4b02      	ldr	r3, [pc, #8]	; (800a800 <malloc+0xc>)
 800a7f6:	4601      	mov	r1, r0
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	f000 bc09 	b.w	800b010 <_malloc_r>
 800a7fe:	bf00      	nop
 800a800:	20000028 	.word	0x20000028

0800a804 <_Balloc>:
 800a804:	b570      	push	{r4, r5, r6, lr}
 800a806:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a808:	4604      	mov	r4, r0
 800a80a:	460d      	mov	r5, r1
 800a80c:	b976      	cbnz	r6, 800a82c <_Balloc+0x28>
 800a80e:	2010      	movs	r0, #16
 800a810:	f7ff fff0 	bl	800a7f4 <malloc>
 800a814:	4602      	mov	r2, r0
 800a816:	6260      	str	r0, [r4, #36]	; 0x24
 800a818:	b920      	cbnz	r0, 800a824 <_Balloc+0x20>
 800a81a:	4b18      	ldr	r3, [pc, #96]	; (800a87c <_Balloc+0x78>)
 800a81c:	4818      	ldr	r0, [pc, #96]	; (800a880 <_Balloc+0x7c>)
 800a81e:	2166      	movs	r1, #102	; 0x66
 800a820:	f000 fdd6 	bl	800b3d0 <__assert_func>
 800a824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a828:	6006      	str	r6, [r0, #0]
 800a82a:	60c6      	str	r6, [r0, #12]
 800a82c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a82e:	68f3      	ldr	r3, [r6, #12]
 800a830:	b183      	cbz	r3, 800a854 <_Balloc+0x50>
 800a832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a83a:	b9b8      	cbnz	r0, 800a86c <_Balloc+0x68>
 800a83c:	2101      	movs	r1, #1
 800a83e:	fa01 f605 	lsl.w	r6, r1, r5
 800a842:	1d72      	adds	r2, r6, #5
 800a844:	0092      	lsls	r2, r2, #2
 800a846:	4620      	mov	r0, r4
 800a848:	f000 fb60 	bl	800af0c <_calloc_r>
 800a84c:	b160      	cbz	r0, 800a868 <_Balloc+0x64>
 800a84e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a852:	e00e      	b.n	800a872 <_Balloc+0x6e>
 800a854:	2221      	movs	r2, #33	; 0x21
 800a856:	2104      	movs	r1, #4
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 fb57 	bl	800af0c <_calloc_r>
 800a85e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a860:	60f0      	str	r0, [r6, #12]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e4      	bne.n	800a832 <_Balloc+0x2e>
 800a868:	2000      	movs	r0, #0
 800a86a:	bd70      	pop	{r4, r5, r6, pc}
 800a86c:	6802      	ldr	r2, [r0, #0]
 800a86e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a872:	2300      	movs	r3, #0
 800a874:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a878:	e7f7      	b.n	800a86a <_Balloc+0x66>
 800a87a:	bf00      	nop
 800a87c:	0800cde5 	.word	0x0800cde5
 800a880:	0800ce68 	.word	0x0800ce68

0800a884 <_Bfree>:
 800a884:	b570      	push	{r4, r5, r6, lr}
 800a886:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a888:	4605      	mov	r5, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	b976      	cbnz	r6, 800a8ac <_Bfree+0x28>
 800a88e:	2010      	movs	r0, #16
 800a890:	f7ff ffb0 	bl	800a7f4 <malloc>
 800a894:	4602      	mov	r2, r0
 800a896:	6268      	str	r0, [r5, #36]	; 0x24
 800a898:	b920      	cbnz	r0, 800a8a4 <_Bfree+0x20>
 800a89a:	4b09      	ldr	r3, [pc, #36]	; (800a8c0 <_Bfree+0x3c>)
 800a89c:	4809      	ldr	r0, [pc, #36]	; (800a8c4 <_Bfree+0x40>)
 800a89e:	218a      	movs	r1, #138	; 0x8a
 800a8a0:	f000 fd96 	bl	800b3d0 <__assert_func>
 800a8a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8a8:	6006      	str	r6, [r0, #0]
 800a8aa:	60c6      	str	r6, [r0, #12]
 800a8ac:	b13c      	cbz	r4, 800a8be <_Bfree+0x3a>
 800a8ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8b0:	6862      	ldr	r2, [r4, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8b8:	6021      	str	r1, [r4, #0]
 800a8ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	0800cde5 	.word	0x0800cde5
 800a8c4:	0800ce68 	.word	0x0800ce68

0800a8c8 <__multadd>:
 800a8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8cc:	690d      	ldr	r5, [r1, #16]
 800a8ce:	4607      	mov	r7, r0
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	461e      	mov	r6, r3
 800a8d4:	f101 0c14 	add.w	ip, r1, #20
 800a8d8:	2000      	movs	r0, #0
 800a8da:	f8dc 3000 	ldr.w	r3, [ip]
 800a8de:	b299      	uxth	r1, r3
 800a8e0:	fb02 6101 	mla	r1, r2, r1, r6
 800a8e4:	0c1e      	lsrs	r6, r3, #16
 800a8e6:	0c0b      	lsrs	r3, r1, #16
 800a8e8:	fb02 3306 	mla	r3, r2, r6, r3
 800a8ec:	b289      	uxth	r1, r1
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8f4:	4285      	cmp	r5, r0
 800a8f6:	f84c 1b04 	str.w	r1, [ip], #4
 800a8fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8fe:	dcec      	bgt.n	800a8da <__multadd+0x12>
 800a900:	b30e      	cbz	r6, 800a946 <__multadd+0x7e>
 800a902:	68a3      	ldr	r3, [r4, #8]
 800a904:	42ab      	cmp	r3, r5
 800a906:	dc19      	bgt.n	800a93c <__multadd+0x74>
 800a908:	6861      	ldr	r1, [r4, #4]
 800a90a:	4638      	mov	r0, r7
 800a90c:	3101      	adds	r1, #1
 800a90e:	f7ff ff79 	bl	800a804 <_Balloc>
 800a912:	4680      	mov	r8, r0
 800a914:	b928      	cbnz	r0, 800a922 <__multadd+0x5a>
 800a916:	4602      	mov	r2, r0
 800a918:	4b0c      	ldr	r3, [pc, #48]	; (800a94c <__multadd+0x84>)
 800a91a:	480d      	ldr	r0, [pc, #52]	; (800a950 <__multadd+0x88>)
 800a91c:	21b5      	movs	r1, #181	; 0xb5
 800a91e:	f000 fd57 	bl	800b3d0 <__assert_func>
 800a922:	6922      	ldr	r2, [r4, #16]
 800a924:	3202      	adds	r2, #2
 800a926:	f104 010c 	add.w	r1, r4, #12
 800a92a:	0092      	lsls	r2, r2, #2
 800a92c:	300c      	adds	r0, #12
 800a92e:	f7fe fc43 	bl	80091b8 <memcpy>
 800a932:	4621      	mov	r1, r4
 800a934:	4638      	mov	r0, r7
 800a936:	f7ff ffa5 	bl	800a884 <_Bfree>
 800a93a:	4644      	mov	r4, r8
 800a93c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a940:	3501      	adds	r5, #1
 800a942:	615e      	str	r6, [r3, #20]
 800a944:	6125      	str	r5, [r4, #16]
 800a946:	4620      	mov	r0, r4
 800a948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a94c:	0800ce57 	.word	0x0800ce57
 800a950:	0800ce68 	.word	0x0800ce68

0800a954 <__hi0bits>:
 800a954:	0c03      	lsrs	r3, r0, #16
 800a956:	041b      	lsls	r3, r3, #16
 800a958:	b9d3      	cbnz	r3, 800a990 <__hi0bits+0x3c>
 800a95a:	0400      	lsls	r0, r0, #16
 800a95c:	2310      	movs	r3, #16
 800a95e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a962:	bf04      	itt	eq
 800a964:	0200      	lsleq	r0, r0, #8
 800a966:	3308      	addeq	r3, #8
 800a968:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a96c:	bf04      	itt	eq
 800a96e:	0100      	lsleq	r0, r0, #4
 800a970:	3304      	addeq	r3, #4
 800a972:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a976:	bf04      	itt	eq
 800a978:	0080      	lsleq	r0, r0, #2
 800a97a:	3302      	addeq	r3, #2
 800a97c:	2800      	cmp	r0, #0
 800a97e:	db05      	blt.n	800a98c <__hi0bits+0x38>
 800a980:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a984:	f103 0301 	add.w	r3, r3, #1
 800a988:	bf08      	it	eq
 800a98a:	2320      	moveq	r3, #32
 800a98c:	4618      	mov	r0, r3
 800a98e:	4770      	bx	lr
 800a990:	2300      	movs	r3, #0
 800a992:	e7e4      	b.n	800a95e <__hi0bits+0xa>

0800a994 <__lo0bits>:
 800a994:	6803      	ldr	r3, [r0, #0]
 800a996:	f013 0207 	ands.w	r2, r3, #7
 800a99a:	4601      	mov	r1, r0
 800a99c:	d00b      	beq.n	800a9b6 <__lo0bits+0x22>
 800a99e:	07da      	lsls	r2, r3, #31
 800a9a0:	d423      	bmi.n	800a9ea <__lo0bits+0x56>
 800a9a2:	0798      	lsls	r0, r3, #30
 800a9a4:	bf49      	itett	mi
 800a9a6:	085b      	lsrmi	r3, r3, #1
 800a9a8:	089b      	lsrpl	r3, r3, #2
 800a9aa:	2001      	movmi	r0, #1
 800a9ac:	600b      	strmi	r3, [r1, #0]
 800a9ae:	bf5c      	itt	pl
 800a9b0:	600b      	strpl	r3, [r1, #0]
 800a9b2:	2002      	movpl	r0, #2
 800a9b4:	4770      	bx	lr
 800a9b6:	b298      	uxth	r0, r3
 800a9b8:	b9a8      	cbnz	r0, 800a9e6 <__lo0bits+0x52>
 800a9ba:	0c1b      	lsrs	r3, r3, #16
 800a9bc:	2010      	movs	r0, #16
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	b90a      	cbnz	r2, 800a9c6 <__lo0bits+0x32>
 800a9c2:	3008      	adds	r0, #8
 800a9c4:	0a1b      	lsrs	r3, r3, #8
 800a9c6:	071a      	lsls	r2, r3, #28
 800a9c8:	bf04      	itt	eq
 800a9ca:	091b      	lsreq	r3, r3, #4
 800a9cc:	3004      	addeq	r0, #4
 800a9ce:	079a      	lsls	r2, r3, #30
 800a9d0:	bf04      	itt	eq
 800a9d2:	089b      	lsreq	r3, r3, #2
 800a9d4:	3002      	addeq	r0, #2
 800a9d6:	07da      	lsls	r2, r3, #31
 800a9d8:	d403      	bmi.n	800a9e2 <__lo0bits+0x4e>
 800a9da:	085b      	lsrs	r3, r3, #1
 800a9dc:	f100 0001 	add.w	r0, r0, #1
 800a9e0:	d005      	beq.n	800a9ee <__lo0bits+0x5a>
 800a9e2:	600b      	str	r3, [r1, #0]
 800a9e4:	4770      	bx	lr
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	e7e9      	b.n	800a9be <__lo0bits+0x2a>
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	4770      	bx	lr
 800a9ee:	2020      	movs	r0, #32
 800a9f0:	4770      	bx	lr
	...

0800a9f4 <__i2b>:
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	f7ff ff03 	bl	800a804 <_Balloc>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	b928      	cbnz	r0, 800aa0e <__i2b+0x1a>
 800aa02:	4b05      	ldr	r3, [pc, #20]	; (800aa18 <__i2b+0x24>)
 800aa04:	4805      	ldr	r0, [pc, #20]	; (800aa1c <__i2b+0x28>)
 800aa06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa0a:	f000 fce1 	bl	800b3d0 <__assert_func>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	6144      	str	r4, [r0, #20]
 800aa12:	6103      	str	r3, [r0, #16]
 800aa14:	bd10      	pop	{r4, pc}
 800aa16:	bf00      	nop
 800aa18:	0800ce57 	.word	0x0800ce57
 800aa1c:	0800ce68 	.word	0x0800ce68

0800aa20 <__multiply>:
 800aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa24:	4691      	mov	r9, r2
 800aa26:	690a      	ldr	r2, [r1, #16]
 800aa28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	bfb8      	it	lt
 800aa30:	460b      	movlt	r3, r1
 800aa32:	460c      	mov	r4, r1
 800aa34:	bfbc      	itt	lt
 800aa36:	464c      	movlt	r4, r9
 800aa38:	4699      	movlt	r9, r3
 800aa3a:	6927      	ldr	r7, [r4, #16]
 800aa3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa40:	68a3      	ldr	r3, [r4, #8]
 800aa42:	6861      	ldr	r1, [r4, #4]
 800aa44:	eb07 060a 	add.w	r6, r7, sl
 800aa48:	42b3      	cmp	r3, r6
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	bfb8      	it	lt
 800aa4e:	3101      	addlt	r1, #1
 800aa50:	f7ff fed8 	bl	800a804 <_Balloc>
 800aa54:	b930      	cbnz	r0, 800aa64 <__multiply+0x44>
 800aa56:	4602      	mov	r2, r0
 800aa58:	4b44      	ldr	r3, [pc, #272]	; (800ab6c <__multiply+0x14c>)
 800aa5a:	4845      	ldr	r0, [pc, #276]	; (800ab70 <__multiply+0x150>)
 800aa5c:	f240 115d 	movw	r1, #349	; 0x15d
 800aa60:	f000 fcb6 	bl	800b3d0 <__assert_func>
 800aa64:	f100 0514 	add.w	r5, r0, #20
 800aa68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa6c:	462b      	mov	r3, r5
 800aa6e:	2200      	movs	r2, #0
 800aa70:	4543      	cmp	r3, r8
 800aa72:	d321      	bcc.n	800aab8 <__multiply+0x98>
 800aa74:	f104 0314 	add.w	r3, r4, #20
 800aa78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa7c:	f109 0314 	add.w	r3, r9, #20
 800aa80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa84:	9202      	str	r2, [sp, #8]
 800aa86:	1b3a      	subs	r2, r7, r4
 800aa88:	3a15      	subs	r2, #21
 800aa8a:	f022 0203 	bic.w	r2, r2, #3
 800aa8e:	3204      	adds	r2, #4
 800aa90:	f104 0115 	add.w	r1, r4, #21
 800aa94:	428f      	cmp	r7, r1
 800aa96:	bf38      	it	cc
 800aa98:	2204      	movcc	r2, #4
 800aa9a:	9201      	str	r2, [sp, #4]
 800aa9c:	9a02      	ldr	r2, [sp, #8]
 800aa9e:	9303      	str	r3, [sp, #12]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d80c      	bhi.n	800aabe <__multiply+0x9e>
 800aaa4:	2e00      	cmp	r6, #0
 800aaa6:	dd03      	ble.n	800aab0 <__multiply+0x90>
 800aaa8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d05a      	beq.n	800ab66 <__multiply+0x146>
 800aab0:	6106      	str	r6, [r0, #16]
 800aab2:	b005      	add	sp, #20
 800aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab8:	f843 2b04 	str.w	r2, [r3], #4
 800aabc:	e7d8      	b.n	800aa70 <__multiply+0x50>
 800aabe:	f8b3 a000 	ldrh.w	sl, [r3]
 800aac2:	f1ba 0f00 	cmp.w	sl, #0
 800aac6:	d024      	beq.n	800ab12 <__multiply+0xf2>
 800aac8:	f104 0e14 	add.w	lr, r4, #20
 800aacc:	46a9      	mov	r9, r5
 800aace:	f04f 0c00 	mov.w	ip, #0
 800aad2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aad6:	f8d9 1000 	ldr.w	r1, [r9]
 800aada:	fa1f fb82 	uxth.w	fp, r2
 800aade:	b289      	uxth	r1, r1
 800aae0:	fb0a 110b 	mla	r1, sl, fp, r1
 800aae4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aae8:	f8d9 2000 	ldr.w	r2, [r9]
 800aaec:	4461      	add	r1, ip
 800aaee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaf2:	fb0a c20b 	mla	r2, sl, fp, ip
 800aaf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aafa:	b289      	uxth	r1, r1
 800aafc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab00:	4577      	cmp	r7, lr
 800ab02:	f849 1b04 	str.w	r1, [r9], #4
 800ab06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab0a:	d8e2      	bhi.n	800aad2 <__multiply+0xb2>
 800ab0c:	9a01      	ldr	r2, [sp, #4]
 800ab0e:	f845 c002 	str.w	ip, [r5, r2]
 800ab12:	9a03      	ldr	r2, [sp, #12]
 800ab14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	f1b9 0f00 	cmp.w	r9, #0
 800ab1e:	d020      	beq.n	800ab62 <__multiply+0x142>
 800ab20:	6829      	ldr	r1, [r5, #0]
 800ab22:	f104 0c14 	add.w	ip, r4, #20
 800ab26:	46ae      	mov	lr, r5
 800ab28:	f04f 0a00 	mov.w	sl, #0
 800ab2c:	f8bc b000 	ldrh.w	fp, [ip]
 800ab30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab34:	fb09 220b 	mla	r2, r9, fp, r2
 800ab38:	4492      	add	sl, r2
 800ab3a:	b289      	uxth	r1, r1
 800ab3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab40:	f84e 1b04 	str.w	r1, [lr], #4
 800ab44:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab48:	f8be 1000 	ldrh.w	r1, [lr]
 800ab4c:	0c12      	lsrs	r2, r2, #16
 800ab4e:	fb09 1102 	mla	r1, r9, r2, r1
 800ab52:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab56:	4567      	cmp	r7, ip
 800ab58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab5c:	d8e6      	bhi.n	800ab2c <__multiply+0x10c>
 800ab5e:	9a01      	ldr	r2, [sp, #4]
 800ab60:	50a9      	str	r1, [r5, r2]
 800ab62:	3504      	adds	r5, #4
 800ab64:	e79a      	b.n	800aa9c <__multiply+0x7c>
 800ab66:	3e01      	subs	r6, #1
 800ab68:	e79c      	b.n	800aaa4 <__multiply+0x84>
 800ab6a:	bf00      	nop
 800ab6c:	0800ce57 	.word	0x0800ce57
 800ab70:	0800ce68 	.word	0x0800ce68

0800ab74 <__pow5mult>:
 800ab74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab78:	4615      	mov	r5, r2
 800ab7a:	f012 0203 	ands.w	r2, r2, #3
 800ab7e:	4606      	mov	r6, r0
 800ab80:	460f      	mov	r7, r1
 800ab82:	d007      	beq.n	800ab94 <__pow5mult+0x20>
 800ab84:	4c25      	ldr	r4, [pc, #148]	; (800ac1c <__pow5mult+0xa8>)
 800ab86:	3a01      	subs	r2, #1
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab8e:	f7ff fe9b 	bl	800a8c8 <__multadd>
 800ab92:	4607      	mov	r7, r0
 800ab94:	10ad      	asrs	r5, r5, #2
 800ab96:	d03d      	beq.n	800ac14 <__pow5mult+0xa0>
 800ab98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab9a:	b97c      	cbnz	r4, 800abbc <__pow5mult+0x48>
 800ab9c:	2010      	movs	r0, #16
 800ab9e:	f7ff fe29 	bl	800a7f4 <malloc>
 800aba2:	4602      	mov	r2, r0
 800aba4:	6270      	str	r0, [r6, #36]	; 0x24
 800aba6:	b928      	cbnz	r0, 800abb4 <__pow5mult+0x40>
 800aba8:	4b1d      	ldr	r3, [pc, #116]	; (800ac20 <__pow5mult+0xac>)
 800abaa:	481e      	ldr	r0, [pc, #120]	; (800ac24 <__pow5mult+0xb0>)
 800abac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800abb0:	f000 fc0e 	bl	800b3d0 <__assert_func>
 800abb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abb8:	6004      	str	r4, [r0, #0]
 800abba:	60c4      	str	r4, [r0, #12]
 800abbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800abc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abc4:	b94c      	cbnz	r4, 800abda <__pow5mult+0x66>
 800abc6:	f240 2171 	movw	r1, #625	; 0x271
 800abca:	4630      	mov	r0, r6
 800abcc:	f7ff ff12 	bl	800a9f4 <__i2b>
 800abd0:	2300      	movs	r3, #0
 800abd2:	f8c8 0008 	str.w	r0, [r8, #8]
 800abd6:	4604      	mov	r4, r0
 800abd8:	6003      	str	r3, [r0, #0]
 800abda:	f04f 0900 	mov.w	r9, #0
 800abde:	07eb      	lsls	r3, r5, #31
 800abe0:	d50a      	bpl.n	800abf8 <__pow5mult+0x84>
 800abe2:	4639      	mov	r1, r7
 800abe4:	4622      	mov	r2, r4
 800abe6:	4630      	mov	r0, r6
 800abe8:	f7ff ff1a 	bl	800aa20 <__multiply>
 800abec:	4639      	mov	r1, r7
 800abee:	4680      	mov	r8, r0
 800abf0:	4630      	mov	r0, r6
 800abf2:	f7ff fe47 	bl	800a884 <_Bfree>
 800abf6:	4647      	mov	r7, r8
 800abf8:	106d      	asrs	r5, r5, #1
 800abfa:	d00b      	beq.n	800ac14 <__pow5mult+0xa0>
 800abfc:	6820      	ldr	r0, [r4, #0]
 800abfe:	b938      	cbnz	r0, 800ac10 <__pow5mult+0x9c>
 800ac00:	4622      	mov	r2, r4
 800ac02:	4621      	mov	r1, r4
 800ac04:	4630      	mov	r0, r6
 800ac06:	f7ff ff0b 	bl	800aa20 <__multiply>
 800ac0a:	6020      	str	r0, [r4, #0]
 800ac0c:	f8c0 9000 	str.w	r9, [r0]
 800ac10:	4604      	mov	r4, r0
 800ac12:	e7e4      	b.n	800abde <__pow5mult+0x6a>
 800ac14:	4638      	mov	r0, r7
 800ac16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac1a:	bf00      	nop
 800ac1c:	0800cfb8 	.word	0x0800cfb8
 800ac20:	0800cde5 	.word	0x0800cde5
 800ac24:	0800ce68 	.word	0x0800ce68

0800ac28 <__lshift>:
 800ac28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2c:	460c      	mov	r4, r1
 800ac2e:	6849      	ldr	r1, [r1, #4]
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac36:	68a3      	ldr	r3, [r4, #8]
 800ac38:	4607      	mov	r7, r0
 800ac3a:	4691      	mov	r9, r2
 800ac3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac40:	f108 0601 	add.w	r6, r8, #1
 800ac44:	42b3      	cmp	r3, r6
 800ac46:	db0b      	blt.n	800ac60 <__lshift+0x38>
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f7ff fddb 	bl	800a804 <_Balloc>
 800ac4e:	4605      	mov	r5, r0
 800ac50:	b948      	cbnz	r0, 800ac66 <__lshift+0x3e>
 800ac52:	4602      	mov	r2, r0
 800ac54:	4b2a      	ldr	r3, [pc, #168]	; (800ad00 <__lshift+0xd8>)
 800ac56:	482b      	ldr	r0, [pc, #172]	; (800ad04 <__lshift+0xdc>)
 800ac58:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac5c:	f000 fbb8 	bl	800b3d0 <__assert_func>
 800ac60:	3101      	adds	r1, #1
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	e7ee      	b.n	800ac44 <__lshift+0x1c>
 800ac66:	2300      	movs	r3, #0
 800ac68:	f100 0114 	add.w	r1, r0, #20
 800ac6c:	f100 0210 	add.w	r2, r0, #16
 800ac70:	4618      	mov	r0, r3
 800ac72:	4553      	cmp	r3, sl
 800ac74:	db37      	blt.n	800ace6 <__lshift+0xbe>
 800ac76:	6920      	ldr	r0, [r4, #16]
 800ac78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac7c:	f104 0314 	add.w	r3, r4, #20
 800ac80:	f019 091f 	ands.w	r9, r9, #31
 800ac84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac8c:	d02f      	beq.n	800acee <__lshift+0xc6>
 800ac8e:	f1c9 0e20 	rsb	lr, r9, #32
 800ac92:	468a      	mov	sl, r1
 800ac94:	f04f 0c00 	mov.w	ip, #0
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	fa02 f209 	lsl.w	r2, r2, r9
 800ac9e:	ea42 020c 	orr.w	r2, r2, ip
 800aca2:	f84a 2b04 	str.w	r2, [sl], #4
 800aca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800acaa:	4298      	cmp	r0, r3
 800acac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800acb0:	d8f2      	bhi.n	800ac98 <__lshift+0x70>
 800acb2:	1b03      	subs	r3, r0, r4
 800acb4:	3b15      	subs	r3, #21
 800acb6:	f023 0303 	bic.w	r3, r3, #3
 800acba:	3304      	adds	r3, #4
 800acbc:	f104 0215 	add.w	r2, r4, #21
 800acc0:	4290      	cmp	r0, r2
 800acc2:	bf38      	it	cc
 800acc4:	2304      	movcc	r3, #4
 800acc6:	f841 c003 	str.w	ip, [r1, r3]
 800acca:	f1bc 0f00 	cmp.w	ip, #0
 800acce:	d001      	beq.n	800acd4 <__lshift+0xac>
 800acd0:	f108 0602 	add.w	r6, r8, #2
 800acd4:	3e01      	subs	r6, #1
 800acd6:	4638      	mov	r0, r7
 800acd8:	612e      	str	r6, [r5, #16]
 800acda:	4621      	mov	r1, r4
 800acdc:	f7ff fdd2 	bl	800a884 <_Bfree>
 800ace0:	4628      	mov	r0, r5
 800ace2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace6:	f842 0f04 	str.w	r0, [r2, #4]!
 800acea:	3301      	adds	r3, #1
 800acec:	e7c1      	b.n	800ac72 <__lshift+0x4a>
 800acee:	3904      	subs	r1, #4
 800acf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800acf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800acf8:	4298      	cmp	r0, r3
 800acfa:	d8f9      	bhi.n	800acf0 <__lshift+0xc8>
 800acfc:	e7ea      	b.n	800acd4 <__lshift+0xac>
 800acfe:	bf00      	nop
 800ad00:	0800ce57 	.word	0x0800ce57
 800ad04:	0800ce68 	.word	0x0800ce68

0800ad08 <__mcmp>:
 800ad08:	b530      	push	{r4, r5, lr}
 800ad0a:	6902      	ldr	r2, [r0, #16]
 800ad0c:	690c      	ldr	r4, [r1, #16]
 800ad0e:	1b12      	subs	r2, r2, r4
 800ad10:	d10e      	bne.n	800ad30 <__mcmp+0x28>
 800ad12:	f100 0314 	add.w	r3, r0, #20
 800ad16:	3114      	adds	r1, #20
 800ad18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad28:	42a5      	cmp	r5, r4
 800ad2a:	d003      	beq.n	800ad34 <__mcmp+0x2c>
 800ad2c:	d305      	bcc.n	800ad3a <__mcmp+0x32>
 800ad2e:	2201      	movs	r2, #1
 800ad30:	4610      	mov	r0, r2
 800ad32:	bd30      	pop	{r4, r5, pc}
 800ad34:	4283      	cmp	r3, r0
 800ad36:	d3f3      	bcc.n	800ad20 <__mcmp+0x18>
 800ad38:	e7fa      	b.n	800ad30 <__mcmp+0x28>
 800ad3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad3e:	e7f7      	b.n	800ad30 <__mcmp+0x28>

0800ad40 <__mdiff>:
 800ad40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	460c      	mov	r4, r1
 800ad46:	4606      	mov	r6, r0
 800ad48:	4611      	mov	r1, r2
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	4690      	mov	r8, r2
 800ad4e:	f7ff ffdb 	bl	800ad08 <__mcmp>
 800ad52:	1e05      	subs	r5, r0, #0
 800ad54:	d110      	bne.n	800ad78 <__mdiff+0x38>
 800ad56:	4629      	mov	r1, r5
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f7ff fd53 	bl	800a804 <_Balloc>
 800ad5e:	b930      	cbnz	r0, 800ad6e <__mdiff+0x2e>
 800ad60:	4b3a      	ldr	r3, [pc, #232]	; (800ae4c <__mdiff+0x10c>)
 800ad62:	4602      	mov	r2, r0
 800ad64:	f240 2132 	movw	r1, #562	; 0x232
 800ad68:	4839      	ldr	r0, [pc, #228]	; (800ae50 <__mdiff+0x110>)
 800ad6a:	f000 fb31 	bl	800b3d0 <__assert_func>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad78:	bfa4      	itt	ge
 800ad7a:	4643      	movge	r3, r8
 800ad7c:	46a0      	movge	r8, r4
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad84:	bfa6      	itte	ge
 800ad86:	461c      	movge	r4, r3
 800ad88:	2500      	movge	r5, #0
 800ad8a:	2501      	movlt	r5, #1
 800ad8c:	f7ff fd3a 	bl	800a804 <_Balloc>
 800ad90:	b920      	cbnz	r0, 800ad9c <__mdiff+0x5c>
 800ad92:	4b2e      	ldr	r3, [pc, #184]	; (800ae4c <__mdiff+0x10c>)
 800ad94:	4602      	mov	r2, r0
 800ad96:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad9a:	e7e5      	b.n	800ad68 <__mdiff+0x28>
 800ad9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ada0:	6926      	ldr	r6, [r4, #16]
 800ada2:	60c5      	str	r5, [r0, #12]
 800ada4:	f104 0914 	add.w	r9, r4, #20
 800ada8:	f108 0514 	add.w	r5, r8, #20
 800adac:	f100 0e14 	add.w	lr, r0, #20
 800adb0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800adb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800adb8:	f108 0210 	add.w	r2, r8, #16
 800adbc:	46f2      	mov	sl, lr
 800adbe:	2100      	movs	r1, #0
 800adc0:	f859 3b04 	ldr.w	r3, [r9], #4
 800adc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800adc8:	fa1f f883 	uxth.w	r8, r3
 800adcc:	fa11 f18b 	uxtah	r1, r1, fp
 800add0:	0c1b      	lsrs	r3, r3, #16
 800add2:	eba1 0808 	sub.w	r8, r1, r8
 800add6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800adde:	fa1f f888 	uxth.w	r8, r8
 800ade2:	1419      	asrs	r1, r3, #16
 800ade4:	454e      	cmp	r6, r9
 800ade6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800adea:	f84a 3b04 	str.w	r3, [sl], #4
 800adee:	d8e7      	bhi.n	800adc0 <__mdiff+0x80>
 800adf0:	1b33      	subs	r3, r6, r4
 800adf2:	3b15      	subs	r3, #21
 800adf4:	f023 0303 	bic.w	r3, r3, #3
 800adf8:	3304      	adds	r3, #4
 800adfa:	3415      	adds	r4, #21
 800adfc:	42a6      	cmp	r6, r4
 800adfe:	bf38      	it	cc
 800ae00:	2304      	movcc	r3, #4
 800ae02:	441d      	add	r5, r3
 800ae04:	4473      	add	r3, lr
 800ae06:	469e      	mov	lr, r3
 800ae08:	462e      	mov	r6, r5
 800ae0a:	4566      	cmp	r6, ip
 800ae0c:	d30e      	bcc.n	800ae2c <__mdiff+0xec>
 800ae0e:	f10c 0203 	add.w	r2, ip, #3
 800ae12:	1b52      	subs	r2, r2, r5
 800ae14:	f022 0203 	bic.w	r2, r2, #3
 800ae18:	3d03      	subs	r5, #3
 800ae1a:	45ac      	cmp	ip, r5
 800ae1c:	bf38      	it	cc
 800ae1e:	2200      	movcc	r2, #0
 800ae20:	441a      	add	r2, r3
 800ae22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae26:	b17b      	cbz	r3, 800ae48 <__mdiff+0x108>
 800ae28:	6107      	str	r7, [r0, #16]
 800ae2a:	e7a3      	b.n	800ad74 <__mdiff+0x34>
 800ae2c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae30:	fa11 f288 	uxtah	r2, r1, r8
 800ae34:	1414      	asrs	r4, r2, #16
 800ae36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae3a:	b292      	uxth	r2, r2
 800ae3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae40:	f84e 2b04 	str.w	r2, [lr], #4
 800ae44:	1421      	asrs	r1, r4, #16
 800ae46:	e7e0      	b.n	800ae0a <__mdiff+0xca>
 800ae48:	3f01      	subs	r7, #1
 800ae4a:	e7ea      	b.n	800ae22 <__mdiff+0xe2>
 800ae4c:	0800ce57 	.word	0x0800ce57
 800ae50:	0800ce68 	.word	0x0800ce68

0800ae54 <__d2b>:
 800ae54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae58:	4689      	mov	r9, r1
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	ec57 6b10 	vmov	r6, r7, d0
 800ae60:	4690      	mov	r8, r2
 800ae62:	f7ff fccf 	bl	800a804 <_Balloc>
 800ae66:	4604      	mov	r4, r0
 800ae68:	b930      	cbnz	r0, 800ae78 <__d2b+0x24>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	4b25      	ldr	r3, [pc, #148]	; (800af04 <__d2b+0xb0>)
 800ae6e:	4826      	ldr	r0, [pc, #152]	; (800af08 <__d2b+0xb4>)
 800ae70:	f240 310a 	movw	r1, #778	; 0x30a
 800ae74:	f000 faac 	bl	800b3d0 <__assert_func>
 800ae78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ae7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae80:	bb35      	cbnz	r5, 800aed0 <__d2b+0x7c>
 800ae82:	2e00      	cmp	r6, #0
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	d028      	beq.n	800aeda <__d2b+0x86>
 800ae88:	4668      	mov	r0, sp
 800ae8a:	9600      	str	r6, [sp, #0]
 800ae8c:	f7ff fd82 	bl	800a994 <__lo0bits>
 800ae90:	9900      	ldr	r1, [sp, #0]
 800ae92:	b300      	cbz	r0, 800aed6 <__d2b+0x82>
 800ae94:	9a01      	ldr	r2, [sp, #4]
 800ae96:	f1c0 0320 	rsb	r3, r0, #32
 800ae9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	40c2      	lsrs	r2, r0
 800aea2:	6163      	str	r3, [r4, #20]
 800aea4:	9201      	str	r2, [sp, #4]
 800aea6:	9b01      	ldr	r3, [sp, #4]
 800aea8:	61a3      	str	r3, [r4, #24]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	bf14      	ite	ne
 800aeae:	2202      	movne	r2, #2
 800aeb0:	2201      	moveq	r2, #1
 800aeb2:	6122      	str	r2, [r4, #16]
 800aeb4:	b1d5      	cbz	r5, 800aeec <__d2b+0x98>
 800aeb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aeba:	4405      	add	r5, r0
 800aebc:	f8c9 5000 	str.w	r5, [r9]
 800aec0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aec4:	f8c8 0000 	str.w	r0, [r8]
 800aec8:	4620      	mov	r0, r4
 800aeca:	b003      	add	sp, #12
 800aecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aed4:	e7d5      	b.n	800ae82 <__d2b+0x2e>
 800aed6:	6161      	str	r1, [r4, #20]
 800aed8:	e7e5      	b.n	800aea6 <__d2b+0x52>
 800aeda:	a801      	add	r0, sp, #4
 800aedc:	f7ff fd5a 	bl	800a994 <__lo0bits>
 800aee0:	9b01      	ldr	r3, [sp, #4]
 800aee2:	6163      	str	r3, [r4, #20]
 800aee4:	2201      	movs	r2, #1
 800aee6:	6122      	str	r2, [r4, #16]
 800aee8:	3020      	adds	r0, #32
 800aeea:	e7e3      	b.n	800aeb4 <__d2b+0x60>
 800aeec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aef0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aef4:	f8c9 0000 	str.w	r0, [r9]
 800aef8:	6918      	ldr	r0, [r3, #16]
 800aefa:	f7ff fd2b 	bl	800a954 <__hi0bits>
 800aefe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af02:	e7df      	b.n	800aec4 <__d2b+0x70>
 800af04:	0800ce57 	.word	0x0800ce57
 800af08:	0800ce68 	.word	0x0800ce68

0800af0c <_calloc_r>:
 800af0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af0e:	fba1 2402 	umull	r2, r4, r1, r2
 800af12:	b94c      	cbnz	r4, 800af28 <_calloc_r+0x1c>
 800af14:	4611      	mov	r1, r2
 800af16:	9201      	str	r2, [sp, #4]
 800af18:	f000 f87a 	bl	800b010 <_malloc_r>
 800af1c:	9a01      	ldr	r2, [sp, #4]
 800af1e:	4605      	mov	r5, r0
 800af20:	b930      	cbnz	r0, 800af30 <_calloc_r+0x24>
 800af22:	4628      	mov	r0, r5
 800af24:	b003      	add	sp, #12
 800af26:	bd30      	pop	{r4, r5, pc}
 800af28:	220c      	movs	r2, #12
 800af2a:	6002      	str	r2, [r0, #0]
 800af2c:	2500      	movs	r5, #0
 800af2e:	e7f8      	b.n	800af22 <_calloc_r+0x16>
 800af30:	4621      	mov	r1, r4
 800af32:	f7fe f94f 	bl	80091d4 <memset>
 800af36:	e7f4      	b.n	800af22 <_calloc_r+0x16>

0800af38 <_free_r>:
 800af38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af3a:	2900      	cmp	r1, #0
 800af3c:	d044      	beq.n	800afc8 <_free_r+0x90>
 800af3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af42:	9001      	str	r0, [sp, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	f1a1 0404 	sub.w	r4, r1, #4
 800af4a:	bfb8      	it	lt
 800af4c:	18e4      	addlt	r4, r4, r3
 800af4e:	f000 fa9b 	bl	800b488 <__malloc_lock>
 800af52:	4a1e      	ldr	r2, [pc, #120]	; (800afcc <_free_r+0x94>)
 800af54:	9801      	ldr	r0, [sp, #4]
 800af56:	6813      	ldr	r3, [r2, #0]
 800af58:	b933      	cbnz	r3, 800af68 <_free_r+0x30>
 800af5a:	6063      	str	r3, [r4, #4]
 800af5c:	6014      	str	r4, [r2, #0]
 800af5e:	b003      	add	sp, #12
 800af60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af64:	f000 ba96 	b.w	800b494 <__malloc_unlock>
 800af68:	42a3      	cmp	r3, r4
 800af6a:	d908      	bls.n	800af7e <_free_r+0x46>
 800af6c:	6825      	ldr	r5, [r4, #0]
 800af6e:	1961      	adds	r1, r4, r5
 800af70:	428b      	cmp	r3, r1
 800af72:	bf01      	itttt	eq
 800af74:	6819      	ldreq	r1, [r3, #0]
 800af76:	685b      	ldreq	r3, [r3, #4]
 800af78:	1949      	addeq	r1, r1, r5
 800af7a:	6021      	streq	r1, [r4, #0]
 800af7c:	e7ed      	b.n	800af5a <_free_r+0x22>
 800af7e:	461a      	mov	r2, r3
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	b10b      	cbz	r3, 800af88 <_free_r+0x50>
 800af84:	42a3      	cmp	r3, r4
 800af86:	d9fa      	bls.n	800af7e <_free_r+0x46>
 800af88:	6811      	ldr	r1, [r2, #0]
 800af8a:	1855      	adds	r5, r2, r1
 800af8c:	42a5      	cmp	r5, r4
 800af8e:	d10b      	bne.n	800afa8 <_free_r+0x70>
 800af90:	6824      	ldr	r4, [r4, #0]
 800af92:	4421      	add	r1, r4
 800af94:	1854      	adds	r4, r2, r1
 800af96:	42a3      	cmp	r3, r4
 800af98:	6011      	str	r1, [r2, #0]
 800af9a:	d1e0      	bne.n	800af5e <_free_r+0x26>
 800af9c:	681c      	ldr	r4, [r3, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	6053      	str	r3, [r2, #4]
 800afa2:	4421      	add	r1, r4
 800afa4:	6011      	str	r1, [r2, #0]
 800afa6:	e7da      	b.n	800af5e <_free_r+0x26>
 800afa8:	d902      	bls.n	800afb0 <_free_r+0x78>
 800afaa:	230c      	movs	r3, #12
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	e7d6      	b.n	800af5e <_free_r+0x26>
 800afb0:	6825      	ldr	r5, [r4, #0]
 800afb2:	1961      	adds	r1, r4, r5
 800afb4:	428b      	cmp	r3, r1
 800afb6:	bf04      	itt	eq
 800afb8:	6819      	ldreq	r1, [r3, #0]
 800afba:	685b      	ldreq	r3, [r3, #4]
 800afbc:	6063      	str	r3, [r4, #4]
 800afbe:	bf04      	itt	eq
 800afc0:	1949      	addeq	r1, r1, r5
 800afc2:	6021      	streq	r1, [r4, #0]
 800afc4:	6054      	str	r4, [r2, #4]
 800afc6:	e7ca      	b.n	800af5e <_free_r+0x26>
 800afc8:	b003      	add	sp, #12
 800afca:	bd30      	pop	{r4, r5, pc}
 800afcc:	200008b4 	.word	0x200008b4

0800afd0 <sbrk_aligned>:
 800afd0:	b570      	push	{r4, r5, r6, lr}
 800afd2:	4e0e      	ldr	r6, [pc, #56]	; (800b00c <sbrk_aligned+0x3c>)
 800afd4:	460c      	mov	r4, r1
 800afd6:	6831      	ldr	r1, [r6, #0]
 800afd8:	4605      	mov	r5, r0
 800afda:	b911      	cbnz	r1, 800afe2 <sbrk_aligned+0x12>
 800afdc:	f000 f9e8 	bl	800b3b0 <_sbrk_r>
 800afe0:	6030      	str	r0, [r6, #0]
 800afe2:	4621      	mov	r1, r4
 800afe4:	4628      	mov	r0, r5
 800afe6:	f000 f9e3 	bl	800b3b0 <_sbrk_r>
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	d00a      	beq.n	800b004 <sbrk_aligned+0x34>
 800afee:	1cc4      	adds	r4, r0, #3
 800aff0:	f024 0403 	bic.w	r4, r4, #3
 800aff4:	42a0      	cmp	r0, r4
 800aff6:	d007      	beq.n	800b008 <sbrk_aligned+0x38>
 800aff8:	1a21      	subs	r1, r4, r0
 800affa:	4628      	mov	r0, r5
 800affc:	f000 f9d8 	bl	800b3b0 <_sbrk_r>
 800b000:	3001      	adds	r0, #1
 800b002:	d101      	bne.n	800b008 <sbrk_aligned+0x38>
 800b004:	f04f 34ff 	mov.w	r4, #4294967295
 800b008:	4620      	mov	r0, r4
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
 800b00c:	200008b8 	.word	0x200008b8

0800b010 <_malloc_r>:
 800b010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b014:	1ccd      	adds	r5, r1, #3
 800b016:	f025 0503 	bic.w	r5, r5, #3
 800b01a:	3508      	adds	r5, #8
 800b01c:	2d0c      	cmp	r5, #12
 800b01e:	bf38      	it	cc
 800b020:	250c      	movcc	r5, #12
 800b022:	2d00      	cmp	r5, #0
 800b024:	4607      	mov	r7, r0
 800b026:	db01      	blt.n	800b02c <_malloc_r+0x1c>
 800b028:	42a9      	cmp	r1, r5
 800b02a:	d905      	bls.n	800b038 <_malloc_r+0x28>
 800b02c:	230c      	movs	r3, #12
 800b02e:	603b      	str	r3, [r7, #0]
 800b030:	2600      	movs	r6, #0
 800b032:	4630      	mov	r0, r6
 800b034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b038:	4e2e      	ldr	r6, [pc, #184]	; (800b0f4 <_malloc_r+0xe4>)
 800b03a:	f000 fa25 	bl	800b488 <__malloc_lock>
 800b03e:	6833      	ldr	r3, [r6, #0]
 800b040:	461c      	mov	r4, r3
 800b042:	bb34      	cbnz	r4, 800b092 <_malloc_r+0x82>
 800b044:	4629      	mov	r1, r5
 800b046:	4638      	mov	r0, r7
 800b048:	f7ff ffc2 	bl	800afd0 <sbrk_aligned>
 800b04c:	1c43      	adds	r3, r0, #1
 800b04e:	4604      	mov	r4, r0
 800b050:	d14d      	bne.n	800b0ee <_malloc_r+0xde>
 800b052:	6834      	ldr	r4, [r6, #0]
 800b054:	4626      	mov	r6, r4
 800b056:	2e00      	cmp	r6, #0
 800b058:	d140      	bne.n	800b0dc <_malloc_r+0xcc>
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	4631      	mov	r1, r6
 800b05e:	4638      	mov	r0, r7
 800b060:	eb04 0803 	add.w	r8, r4, r3
 800b064:	f000 f9a4 	bl	800b3b0 <_sbrk_r>
 800b068:	4580      	cmp	r8, r0
 800b06a:	d13a      	bne.n	800b0e2 <_malloc_r+0xd2>
 800b06c:	6821      	ldr	r1, [r4, #0]
 800b06e:	3503      	adds	r5, #3
 800b070:	1a6d      	subs	r5, r5, r1
 800b072:	f025 0503 	bic.w	r5, r5, #3
 800b076:	3508      	adds	r5, #8
 800b078:	2d0c      	cmp	r5, #12
 800b07a:	bf38      	it	cc
 800b07c:	250c      	movcc	r5, #12
 800b07e:	4629      	mov	r1, r5
 800b080:	4638      	mov	r0, r7
 800b082:	f7ff ffa5 	bl	800afd0 <sbrk_aligned>
 800b086:	3001      	adds	r0, #1
 800b088:	d02b      	beq.n	800b0e2 <_malloc_r+0xd2>
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	442b      	add	r3, r5
 800b08e:	6023      	str	r3, [r4, #0]
 800b090:	e00e      	b.n	800b0b0 <_malloc_r+0xa0>
 800b092:	6822      	ldr	r2, [r4, #0]
 800b094:	1b52      	subs	r2, r2, r5
 800b096:	d41e      	bmi.n	800b0d6 <_malloc_r+0xc6>
 800b098:	2a0b      	cmp	r2, #11
 800b09a:	d916      	bls.n	800b0ca <_malloc_r+0xba>
 800b09c:	1961      	adds	r1, r4, r5
 800b09e:	42a3      	cmp	r3, r4
 800b0a0:	6025      	str	r5, [r4, #0]
 800b0a2:	bf18      	it	ne
 800b0a4:	6059      	strne	r1, [r3, #4]
 800b0a6:	6863      	ldr	r3, [r4, #4]
 800b0a8:	bf08      	it	eq
 800b0aa:	6031      	streq	r1, [r6, #0]
 800b0ac:	5162      	str	r2, [r4, r5]
 800b0ae:	604b      	str	r3, [r1, #4]
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	f104 060b 	add.w	r6, r4, #11
 800b0b6:	f000 f9ed 	bl	800b494 <__malloc_unlock>
 800b0ba:	f026 0607 	bic.w	r6, r6, #7
 800b0be:	1d23      	adds	r3, r4, #4
 800b0c0:	1af2      	subs	r2, r6, r3
 800b0c2:	d0b6      	beq.n	800b032 <_malloc_r+0x22>
 800b0c4:	1b9b      	subs	r3, r3, r6
 800b0c6:	50a3      	str	r3, [r4, r2]
 800b0c8:	e7b3      	b.n	800b032 <_malloc_r+0x22>
 800b0ca:	6862      	ldr	r2, [r4, #4]
 800b0cc:	42a3      	cmp	r3, r4
 800b0ce:	bf0c      	ite	eq
 800b0d0:	6032      	streq	r2, [r6, #0]
 800b0d2:	605a      	strne	r2, [r3, #4]
 800b0d4:	e7ec      	b.n	800b0b0 <_malloc_r+0xa0>
 800b0d6:	4623      	mov	r3, r4
 800b0d8:	6864      	ldr	r4, [r4, #4]
 800b0da:	e7b2      	b.n	800b042 <_malloc_r+0x32>
 800b0dc:	4634      	mov	r4, r6
 800b0de:	6876      	ldr	r6, [r6, #4]
 800b0e0:	e7b9      	b.n	800b056 <_malloc_r+0x46>
 800b0e2:	230c      	movs	r3, #12
 800b0e4:	603b      	str	r3, [r7, #0]
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	f000 f9d4 	bl	800b494 <__malloc_unlock>
 800b0ec:	e7a1      	b.n	800b032 <_malloc_r+0x22>
 800b0ee:	6025      	str	r5, [r4, #0]
 800b0f0:	e7de      	b.n	800b0b0 <_malloc_r+0xa0>
 800b0f2:	bf00      	nop
 800b0f4:	200008b4 	.word	0x200008b4

0800b0f8 <__ssputs_r>:
 800b0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0fc:	688e      	ldr	r6, [r1, #8]
 800b0fe:	429e      	cmp	r6, r3
 800b100:	4682      	mov	sl, r0
 800b102:	460c      	mov	r4, r1
 800b104:	4690      	mov	r8, r2
 800b106:	461f      	mov	r7, r3
 800b108:	d838      	bhi.n	800b17c <__ssputs_r+0x84>
 800b10a:	898a      	ldrh	r2, [r1, #12]
 800b10c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b110:	d032      	beq.n	800b178 <__ssputs_r+0x80>
 800b112:	6825      	ldr	r5, [r4, #0]
 800b114:	6909      	ldr	r1, [r1, #16]
 800b116:	eba5 0901 	sub.w	r9, r5, r1
 800b11a:	6965      	ldr	r5, [r4, #20]
 800b11c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b120:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b124:	3301      	adds	r3, #1
 800b126:	444b      	add	r3, r9
 800b128:	106d      	asrs	r5, r5, #1
 800b12a:	429d      	cmp	r5, r3
 800b12c:	bf38      	it	cc
 800b12e:	461d      	movcc	r5, r3
 800b130:	0553      	lsls	r3, r2, #21
 800b132:	d531      	bpl.n	800b198 <__ssputs_r+0xa0>
 800b134:	4629      	mov	r1, r5
 800b136:	f7ff ff6b 	bl	800b010 <_malloc_r>
 800b13a:	4606      	mov	r6, r0
 800b13c:	b950      	cbnz	r0, 800b154 <__ssputs_r+0x5c>
 800b13e:	230c      	movs	r3, #12
 800b140:	f8ca 3000 	str.w	r3, [sl]
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	f04f 30ff 	mov.w	r0, #4294967295
 800b150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b154:	6921      	ldr	r1, [r4, #16]
 800b156:	464a      	mov	r2, r9
 800b158:	f7fe f82e 	bl	80091b8 <memcpy>
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	6126      	str	r6, [r4, #16]
 800b16a:	6165      	str	r5, [r4, #20]
 800b16c:	444e      	add	r6, r9
 800b16e:	eba5 0509 	sub.w	r5, r5, r9
 800b172:	6026      	str	r6, [r4, #0]
 800b174:	60a5      	str	r5, [r4, #8]
 800b176:	463e      	mov	r6, r7
 800b178:	42be      	cmp	r6, r7
 800b17a:	d900      	bls.n	800b17e <__ssputs_r+0x86>
 800b17c:	463e      	mov	r6, r7
 800b17e:	6820      	ldr	r0, [r4, #0]
 800b180:	4632      	mov	r2, r6
 800b182:	4641      	mov	r1, r8
 800b184:	f000 f966 	bl	800b454 <memmove>
 800b188:	68a3      	ldr	r3, [r4, #8]
 800b18a:	1b9b      	subs	r3, r3, r6
 800b18c:	60a3      	str	r3, [r4, #8]
 800b18e:	6823      	ldr	r3, [r4, #0]
 800b190:	4433      	add	r3, r6
 800b192:	6023      	str	r3, [r4, #0]
 800b194:	2000      	movs	r0, #0
 800b196:	e7db      	b.n	800b150 <__ssputs_r+0x58>
 800b198:	462a      	mov	r2, r5
 800b19a:	f000 f981 	bl	800b4a0 <_realloc_r>
 800b19e:	4606      	mov	r6, r0
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d1e1      	bne.n	800b168 <__ssputs_r+0x70>
 800b1a4:	6921      	ldr	r1, [r4, #16]
 800b1a6:	4650      	mov	r0, sl
 800b1a8:	f7ff fec6 	bl	800af38 <_free_r>
 800b1ac:	e7c7      	b.n	800b13e <__ssputs_r+0x46>
	...

0800b1b0 <_svfiprintf_r>:
 800b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	4698      	mov	r8, r3
 800b1b6:	898b      	ldrh	r3, [r1, #12]
 800b1b8:	061b      	lsls	r3, r3, #24
 800b1ba:	b09d      	sub	sp, #116	; 0x74
 800b1bc:	4607      	mov	r7, r0
 800b1be:	460d      	mov	r5, r1
 800b1c0:	4614      	mov	r4, r2
 800b1c2:	d50e      	bpl.n	800b1e2 <_svfiprintf_r+0x32>
 800b1c4:	690b      	ldr	r3, [r1, #16]
 800b1c6:	b963      	cbnz	r3, 800b1e2 <_svfiprintf_r+0x32>
 800b1c8:	2140      	movs	r1, #64	; 0x40
 800b1ca:	f7ff ff21 	bl	800b010 <_malloc_r>
 800b1ce:	6028      	str	r0, [r5, #0]
 800b1d0:	6128      	str	r0, [r5, #16]
 800b1d2:	b920      	cbnz	r0, 800b1de <_svfiprintf_r+0x2e>
 800b1d4:	230c      	movs	r3, #12
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1dc:	e0d1      	b.n	800b382 <_svfiprintf_r+0x1d2>
 800b1de:	2340      	movs	r3, #64	; 0x40
 800b1e0:	616b      	str	r3, [r5, #20]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e6:	2320      	movs	r3, #32
 800b1e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1f0:	2330      	movs	r3, #48	; 0x30
 800b1f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b39c <_svfiprintf_r+0x1ec>
 800b1f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1fa:	f04f 0901 	mov.w	r9, #1
 800b1fe:	4623      	mov	r3, r4
 800b200:	469a      	mov	sl, r3
 800b202:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b206:	b10a      	cbz	r2, 800b20c <_svfiprintf_r+0x5c>
 800b208:	2a25      	cmp	r2, #37	; 0x25
 800b20a:	d1f9      	bne.n	800b200 <_svfiprintf_r+0x50>
 800b20c:	ebba 0b04 	subs.w	fp, sl, r4
 800b210:	d00b      	beq.n	800b22a <_svfiprintf_r+0x7a>
 800b212:	465b      	mov	r3, fp
 800b214:	4622      	mov	r2, r4
 800b216:	4629      	mov	r1, r5
 800b218:	4638      	mov	r0, r7
 800b21a:	f7ff ff6d 	bl	800b0f8 <__ssputs_r>
 800b21e:	3001      	adds	r0, #1
 800b220:	f000 80aa 	beq.w	800b378 <_svfiprintf_r+0x1c8>
 800b224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b226:	445a      	add	r2, fp
 800b228:	9209      	str	r2, [sp, #36]	; 0x24
 800b22a:	f89a 3000 	ldrb.w	r3, [sl]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 80a2 	beq.w	800b378 <_svfiprintf_r+0x1c8>
 800b234:	2300      	movs	r3, #0
 800b236:	f04f 32ff 	mov.w	r2, #4294967295
 800b23a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b23e:	f10a 0a01 	add.w	sl, sl, #1
 800b242:	9304      	str	r3, [sp, #16]
 800b244:	9307      	str	r3, [sp, #28]
 800b246:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b24a:	931a      	str	r3, [sp, #104]	; 0x68
 800b24c:	4654      	mov	r4, sl
 800b24e:	2205      	movs	r2, #5
 800b250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b254:	4851      	ldr	r0, [pc, #324]	; (800b39c <_svfiprintf_r+0x1ec>)
 800b256:	f7f4 ffc3 	bl	80001e0 <memchr>
 800b25a:	9a04      	ldr	r2, [sp, #16]
 800b25c:	b9d8      	cbnz	r0, 800b296 <_svfiprintf_r+0xe6>
 800b25e:	06d0      	lsls	r0, r2, #27
 800b260:	bf44      	itt	mi
 800b262:	2320      	movmi	r3, #32
 800b264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b268:	0711      	lsls	r1, r2, #28
 800b26a:	bf44      	itt	mi
 800b26c:	232b      	movmi	r3, #43	; 0x2b
 800b26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b272:	f89a 3000 	ldrb.w	r3, [sl]
 800b276:	2b2a      	cmp	r3, #42	; 0x2a
 800b278:	d015      	beq.n	800b2a6 <_svfiprintf_r+0xf6>
 800b27a:	9a07      	ldr	r2, [sp, #28]
 800b27c:	4654      	mov	r4, sl
 800b27e:	2000      	movs	r0, #0
 800b280:	f04f 0c0a 	mov.w	ip, #10
 800b284:	4621      	mov	r1, r4
 800b286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b28a:	3b30      	subs	r3, #48	; 0x30
 800b28c:	2b09      	cmp	r3, #9
 800b28e:	d94e      	bls.n	800b32e <_svfiprintf_r+0x17e>
 800b290:	b1b0      	cbz	r0, 800b2c0 <_svfiprintf_r+0x110>
 800b292:	9207      	str	r2, [sp, #28]
 800b294:	e014      	b.n	800b2c0 <_svfiprintf_r+0x110>
 800b296:	eba0 0308 	sub.w	r3, r0, r8
 800b29a:	fa09 f303 	lsl.w	r3, r9, r3
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	9304      	str	r3, [sp, #16]
 800b2a2:	46a2      	mov	sl, r4
 800b2a4:	e7d2      	b.n	800b24c <_svfiprintf_r+0x9c>
 800b2a6:	9b03      	ldr	r3, [sp, #12]
 800b2a8:	1d19      	adds	r1, r3, #4
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	9103      	str	r1, [sp, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	bfbb      	ittet	lt
 800b2b2:	425b      	neglt	r3, r3
 800b2b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b8:	9307      	strge	r3, [sp, #28]
 800b2ba:	9307      	strlt	r3, [sp, #28]
 800b2bc:	bfb8      	it	lt
 800b2be:	9204      	strlt	r2, [sp, #16]
 800b2c0:	7823      	ldrb	r3, [r4, #0]
 800b2c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b2c4:	d10c      	bne.n	800b2e0 <_svfiprintf_r+0x130>
 800b2c6:	7863      	ldrb	r3, [r4, #1]
 800b2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ca:	d135      	bne.n	800b338 <_svfiprintf_r+0x188>
 800b2cc:	9b03      	ldr	r3, [sp, #12]
 800b2ce:	1d1a      	adds	r2, r3, #4
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	9203      	str	r2, [sp, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bfb8      	it	lt
 800b2d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2dc:	3402      	adds	r4, #2
 800b2de:	9305      	str	r3, [sp, #20]
 800b2e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b3ac <_svfiprintf_r+0x1fc>
 800b2e4:	7821      	ldrb	r1, [r4, #0]
 800b2e6:	2203      	movs	r2, #3
 800b2e8:	4650      	mov	r0, sl
 800b2ea:	f7f4 ff79 	bl	80001e0 <memchr>
 800b2ee:	b140      	cbz	r0, 800b302 <_svfiprintf_r+0x152>
 800b2f0:	2340      	movs	r3, #64	; 0x40
 800b2f2:	eba0 000a 	sub.w	r0, r0, sl
 800b2f6:	fa03 f000 	lsl.w	r0, r3, r0
 800b2fa:	9b04      	ldr	r3, [sp, #16]
 800b2fc:	4303      	orrs	r3, r0
 800b2fe:	3401      	adds	r4, #1
 800b300:	9304      	str	r3, [sp, #16]
 800b302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b306:	4826      	ldr	r0, [pc, #152]	; (800b3a0 <_svfiprintf_r+0x1f0>)
 800b308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b30c:	2206      	movs	r2, #6
 800b30e:	f7f4 ff67 	bl	80001e0 <memchr>
 800b312:	2800      	cmp	r0, #0
 800b314:	d038      	beq.n	800b388 <_svfiprintf_r+0x1d8>
 800b316:	4b23      	ldr	r3, [pc, #140]	; (800b3a4 <_svfiprintf_r+0x1f4>)
 800b318:	bb1b      	cbnz	r3, 800b362 <_svfiprintf_r+0x1b2>
 800b31a:	9b03      	ldr	r3, [sp, #12]
 800b31c:	3307      	adds	r3, #7
 800b31e:	f023 0307 	bic.w	r3, r3, #7
 800b322:	3308      	adds	r3, #8
 800b324:	9303      	str	r3, [sp, #12]
 800b326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b328:	4433      	add	r3, r6
 800b32a:	9309      	str	r3, [sp, #36]	; 0x24
 800b32c:	e767      	b.n	800b1fe <_svfiprintf_r+0x4e>
 800b32e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b332:	460c      	mov	r4, r1
 800b334:	2001      	movs	r0, #1
 800b336:	e7a5      	b.n	800b284 <_svfiprintf_r+0xd4>
 800b338:	2300      	movs	r3, #0
 800b33a:	3401      	adds	r4, #1
 800b33c:	9305      	str	r3, [sp, #20]
 800b33e:	4619      	mov	r1, r3
 800b340:	f04f 0c0a 	mov.w	ip, #10
 800b344:	4620      	mov	r0, r4
 800b346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b34a:	3a30      	subs	r2, #48	; 0x30
 800b34c:	2a09      	cmp	r2, #9
 800b34e:	d903      	bls.n	800b358 <_svfiprintf_r+0x1a8>
 800b350:	2b00      	cmp	r3, #0
 800b352:	d0c5      	beq.n	800b2e0 <_svfiprintf_r+0x130>
 800b354:	9105      	str	r1, [sp, #20]
 800b356:	e7c3      	b.n	800b2e0 <_svfiprintf_r+0x130>
 800b358:	fb0c 2101 	mla	r1, ip, r1, r2
 800b35c:	4604      	mov	r4, r0
 800b35e:	2301      	movs	r3, #1
 800b360:	e7f0      	b.n	800b344 <_svfiprintf_r+0x194>
 800b362:	ab03      	add	r3, sp, #12
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	462a      	mov	r2, r5
 800b368:	4b0f      	ldr	r3, [pc, #60]	; (800b3a8 <_svfiprintf_r+0x1f8>)
 800b36a:	a904      	add	r1, sp, #16
 800b36c:	4638      	mov	r0, r7
 800b36e:	f7fd ffd9 	bl	8009324 <_printf_float>
 800b372:	1c42      	adds	r2, r0, #1
 800b374:	4606      	mov	r6, r0
 800b376:	d1d6      	bne.n	800b326 <_svfiprintf_r+0x176>
 800b378:	89ab      	ldrh	r3, [r5, #12]
 800b37a:	065b      	lsls	r3, r3, #25
 800b37c:	f53f af2c 	bmi.w	800b1d8 <_svfiprintf_r+0x28>
 800b380:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b382:	b01d      	add	sp, #116	; 0x74
 800b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b388:	ab03      	add	r3, sp, #12
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	462a      	mov	r2, r5
 800b38e:	4b06      	ldr	r3, [pc, #24]	; (800b3a8 <_svfiprintf_r+0x1f8>)
 800b390:	a904      	add	r1, sp, #16
 800b392:	4638      	mov	r0, r7
 800b394:	f7fe fa6a 	bl	800986c <_printf_i>
 800b398:	e7eb      	b.n	800b372 <_svfiprintf_r+0x1c2>
 800b39a:	bf00      	nop
 800b39c:	0800cfc4 	.word	0x0800cfc4
 800b3a0:	0800cfce 	.word	0x0800cfce
 800b3a4:	08009325 	.word	0x08009325
 800b3a8:	0800b0f9 	.word	0x0800b0f9
 800b3ac:	0800cfca 	.word	0x0800cfca

0800b3b0 <_sbrk_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4d06      	ldr	r5, [pc, #24]	; (800b3cc <_sbrk_r+0x1c>)
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	602b      	str	r3, [r5, #0]
 800b3bc:	f7f6 fac6 	bl	800194c <_sbrk>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_sbrk_r+0x1a>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_sbrk_r+0x1a>
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	200008bc 	.word	0x200008bc

0800b3d0 <__assert_func>:
 800b3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3d2:	4614      	mov	r4, r2
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	4b09      	ldr	r3, [pc, #36]	; (800b3fc <__assert_func+0x2c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4605      	mov	r5, r0
 800b3dc:	68d8      	ldr	r0, [r3, #12]
 800b3de:	b14c      	cbz	r4, 800b3f4 <__assert_func+0x24>
 800b3e0:	4b07      	ldr	r3, [pc, #28]	; (800b400 <__assert_func+0x30>)
 800b3e2:	9100      	str	r1, [sp, #0]
 800b3e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3e8:	4906      	ldr	r1, [pc, #24]	; (800b404 <__assert_func+0x34>)
 800b3ea:	462b      	mov	r3, r5
 800b3ec:	f000 f80e 	bl	800b40c <fiprintf>
 800b3f0:	f000 faac 	bl	800b94c <abort>
 800b3f4:	4b04      	ldr	r3, [pc, #16]	; (800b408 <__assert_func+0x38>)
 800b3f6:	461c      	mov	r4, r3
 800b3f8:	e7f3      	b.n	800b3e2 <__assert_func+0x12>
 800b3fa:	bf00      	nop
 800b3fc:	20000028 	.word	0x20000028
 800b400:	0800cfd5 	.word	0x0800cfd5
 800b404:	0800cfe2 	.word	0x0800cfe2
 800b408:	0800d010 	.word	0x0800d010

0800b40c <fiprintf>:
 800b40c:	b40e      	push	{r1, r2, r3}
 800b40e:	b503      	push	{r0, r1, lr}
 800b410:	4601      	mov	r1, r0
 800b412:	ab03      	add	r3, sp, #12
 800b414:	4805      	ldr	r0, [pc, #20]	; (800b42c <fiprintf+0x20>)
 800b416:	f853 2b04 	ldr.w	r2, [r3], #4
 800b41a:	6800      	ldr	r0, [r0, #0]
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	f000 f897 	bl	800b550 <_vfiprintf_r>
 800b422:	b002      	add	sp, #8
 800b424:	f85d eb04 	ldr.w	lr, [sp], #4
 800b428:	b003      	add	sp, #12
 800b42a:	4770      	bx	lr
 800b42c:	20000028 	.word	0x20000028

0800b430 <__ascii_mbtowc>:
 800b430:	b082      	sub	sp, #8
 800b432:	b901      	cbnz	r1, 800b436 <__ascii_mbtowc+0x6>
 800b434:	a901      	add	r1, sp, #4
 800b436:	b142      	cbz	r2, 800b44a <__ascii_mbtowc+0x1a>
 800b438:	b14b      	cbz	r3, 800b44e <__ascii_mbtowc+0x1e>
 800b43a:	7813      	ldrb	r3, [r2, #0]
 800b43c:	600b      	str	r3, [r1, #0]
 800b43e:	7812      	ldrb	r2, [r2, #0]
 800b440:	1e10      	subs	r0, r2, #0
 800b442:	bf18      	it	ne
 800b444:	2001      	movne	r0, #1
 800b446:	b002      	add	sp, #8
 800b448:	4770      	bx	lr
 800b44a:	4610      	mov	r0, r2
 800b44c:	e7fb      	b.n	800b446 <__ascii_mbtowc+0x16>
 800b44e:	f06f 0001 	mvn.w	r0, #1
 800b452:	e7f8      	b.n	800b446 <__ascii_mbtowc+0x16>

0800b454 <memmove>:
 800b454:	4288      	cmp	r0, r1
 800b456:	b510      	push	{r4, lr}
 800b458:	eb01 0402 	add.w	r4, r1, r2
 800b45c:	d902      	bls.n	800b464 <memmove+0x10>
 800b45e:	4284      	cmp	r4, r0
 800b460:	4623      	mov	r3, r4
 800b462:	d807      	bhi.n	800b474 <memmove+0x20>
 800b464:	1e43      	subs	r3, r0, #1
 800b466:	42a1      	cmp	r1, r4
 800b468:	d008      	beq.n	800b47c <memmove+0x28>
 800b46a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b46e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b472:	e7f8      	b.n	800b466 <memmove+0x12>
 800b474:	4402      	add	r2, r0
 800b476:	4601      	mov	r1, r0
 800b478:	428a      	cmp	r2, r1
 800b47a:	d100      	bne.n	800b47e <memmove+0x2a>
 800b47c:	bd10      	pop	{r4, pc}
 800b47e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b486:	e7f7      	b.n	800b478 <memmove+0x24>

0800b488 <__malloc_lock>:
 800b488:	4801      	ldr	r0, [pc, #4]	; (800b490 <__malloc_lock+0x8>)
 800b48a:	f000 bc1f 	b.w	800bccc <__retarget_lock_acquire_recursive>
 800b48e:	bf00      	nop
 800b490:	200008c0 	.word	0x200008c0

0800b494 <__malloc_unlock>:
 800b494:	4801      	ldr	r0, [pc, #4]	; (800b49c <__malloc_unlock+0x8>)
 800b496:	f000 bc1a 	b.w	800bcce <__retarget_lock_release_recursive>
 800b49a:	bf00      	nop
 800b49c:	200008c0 	.word	0x200008c0

0800b4a0 <_realloc_r>:
 800b4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	4614      	mov	r4, r2
 800b4a8:	460e      	mov	r6, r1
 800b4aa:	b921      	cbnz	r1, 800b4b6 <_realloc_r+0x16>
 800b4ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	f7ff bdad 	b.w	800b010 <_malloc_r>
 800b4b6:	b92a      	cbnz	r2, 800b4c4 <_realloc_r+0x24>
 800b4b8:	f7ff fd3e 	bl	800af38 <_free_r>
 800b4bc:	4625      	mov	r5, r4
 800b4be:	4628      	mov	r0, r5
 800b4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c4:	f000 fc6a 	bl	800bd9c <_malloc_usable_size_r>
 800b4c8:	4284      	cmp	r4, r0
 800b4ca:	4607      	mov	r7, r0
 800b4cc:	d802      	bhi.n	800b4d4 <_realloc_r+0x34>
 800b4ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4d2:	d812      	bhi.n	800b4fa <_realloc_r+0x5a>
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	f7ff fd9a 	bl	800b010 <_malloc_r>
 800b4dc:	4605      	mov	r5, r0
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d0ed      	beq.n	800b4be <_realloc_r+0x1e>
 800b4e2:	42bc      	cmp	r4, r7
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	bf28      	it	cs
 800b4ea:	463a      	movcs	r2, r7
 800b4ec:	f7fd fe64 	bl	80091b8 <memcpy>
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	4640      	mov	r0, r8
 800b4f4:	f7ff fd20 	bl	800af38 <_free_r>
 800b4f8:	e7e1      	b.n	800b4be <_realloc_r+0x1e>
 800b4fa:	4635      	mov	r5, r6
 800b4fc:	e7df      	b.n	800b4be <_realloc_r+0x1e>

0800b4fe <__sfputc_r>:
 800b4fe:	6893      	ldr	r3, [r2, #8]
 800b500:	3b01      	subs	r3, #1
 800b502:	2b00      	cmp	r3, #0
 800b504:	b410      	push	{r4}
 800b506:	6093      	str	r3, [r2, #8]
 800b508:	da08      	bge.n	800b51c <__sfputc_r+0x1e>
 800b50a:	6994      	ldr	r4, [r2, #24]
 800b50c:	42a3      	cmp	r3, r4
 800b50e:	db01      	blt.n	800b514 <__sfputc_r+0x16>
 800b510:	290a      	cmp	r1, #10
 800b512:	d103      	bne.n	800b51c <__sfputc_r+0x1e>
 800b514:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b518:	f000 b94a 	b.w	800b7b0 <__swbuf_r>
 800b51c:	6813      	ldr	r3, [r2, #0]
 800b51e:	1c58      	adds	r0, r3, #1
 800b520:	6010      	str	r0, [r2, #0]
 800b522:	7019      	strb	r1, [r3, #0]
 800b524:	4608      	mov	r0, r1
 800b526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <__sfputs_r>:
 800b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52e:	4606      	mov	r6, r0
 800b530:	460f      	mov	r7, r1
 800b532:	4614      	mov	r4, r2
 800b534:	18d5      	adds	r5, r2, r3
 800b536:	42ac      	cmp	r4, r5
 800b538:	d101      	bne.n	800b53e <__sfputs_r+0x12>
 800b53a:	2000      	movs	r0, #0
 800b53c:	e007      	b.n	800b54e <__sfputs_r+0x22>
 800b53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b542:	463a      	mov	r2, r7
 800b544:	4630      	mov	r0, r6
 800b546:	f7ff ffda 	bl	800b4fe <__sfputc_r>
 800b54a:	1c43      	adds	r3, r0, #1
 800b54c:	d1f3      	bne.n	800b536 <__sfputs_r+0xa>
 800b54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b550 <_vfiprintf_r>:
 800b550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	460d      	mov	r5, r1
 800b556:	b09d      	sub	sp, #116	; 0x74
 800b558:	4614      	mov	r4, r2
 800b55a:	4698      	mov	r8, r3
 800b55c:	4606      	mov	r6, r0
 800b55e:	b118      	cbz	r0, 800b568 <_vfiprintf_r+0x18>
 800b560:	6983      	ldr	r3, [r0, #24]
 800b562:	b90b      	cbnz	r3, 800b568 <_vfiprintf_r+0x18>
 800b564:	f000 fb14 	bl	800bb90 <__sinit>
 800b568:	4b89      	ldr	r3, [pc, #548]	; (800b790 <_vfiprintf_r+0x240>)
 800b56a:	429d      	cmp	r5, r3
 800b56c:	d11b      	bne.n	800b5a6 <_vfiprintf_r+0x56>
 800b56e:	6875      	ldr	r5, [r6, #4]
 800b570:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b572:	07d9      	lsls	r1, r3, #31
 800b574:	d405      	bmi.n	800b582 <_vfiprintf_r+0x32>
 800b576:	89ab      	ldrh	r3, [r5, #12]
 800b578:	059a      	lsls	r2, r3, #22
 800b57a:	d402      	bmi.n	800b582 <_vfiprintf_r+0x32>
 800b57c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b57e:	f000 fba5 	bl	800bccc <__retarget_lock_acquire_recursive>
 800b582:	89ab      	ldrh	r3, [r5, #12]
 800b584:	071b      	lsls	r3, r3, #28
 800b586:	d501      	bpl.n	800b58c <_vfiprintf_r+0x3c>
 800b588:	692b      	ldr	r3, [r5, #16]
 800b58a:	b9eb      	cbnz	r3, 800b5c8 <_vfiprintf_r+0x78>
 800b58c:	4629      	mov	r1, r5
 800b58e:	4630      	mov	r0, r6
 800b590:	f000 f96e 	bl	800b870 <__swsetup_r>
 800b594:	b1c0      	cbz	r0, 800b5c8 <_vfiprintf_r+0x78>
 800b596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b598:	07dc      	lsls	r4, r3, #31
 800b59a:	d50e      	bpl.n	800b5ba <_vfiprintf_r+0x6a>
 800b59c:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a0:	b01d      	add	sp, #116	; 0x74
 800b5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a6:	4b7b      	ldr	r3, [pc, #492]	; (800b794 <_vfiprintf_r+0x244>)
 800b5a8:	429d      	cmp	r5, r3
 800b5aa:	d101      	bne.n	800b5b0 <_vfiprintf_r+0x60>
 800b5ac:	68b5      	ldr	r5, [r6, #8]
 800b5ae:	e7df      	b.n	800b570 <_vfiprintf_r+0x20>
 800b5b0:	4b79      	ldr	r3, [pc, #484]	; (800b798 <_vfiprintf_r+0x248>)
 800b5b2:	429d      	cmp	r5, r3
 800b5b4:	bf08      	it	eq
 800b5b6:	68f5      	ldreq	r5, [r6, #12]
 800b5b8:	e7da      	b.n	800b570 <_vfiprintf_r+0x20>
 800b5ba:	89ab      	ldrh	r3, [r5, #12]
 800b5bc:	0598      	lsls	r0, r3, #22
 800b5be:	d4ed      	bmi.n	800b59c <_vfiprintf_r+0x4c>
 800b5c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5c2:	f000 fb84 	bl	800bcce <__retarget_lock_release_recursive>
 800b5c6:	e7e9      	b.n	800b59c <_vfiprintf_r+0x4c>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b5cc:	2320      	movs	r3, #32
 800b5ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5d6:	2330      	movs	r3, #48	; 0x30
 800b5d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b79c <_vfiprintf_r+0x24c>
 800b5dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5e0:	f04f 0901 	mov.w	r9, #1
 800b5e4:	4623      	mov	r3, r4
 800b5e6:	469a      	mov	sl, r3
 800b5e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ec:	b10a      	cbz	r2, 800b5f2 <_vfiprintf_r+0xa2>
 800b5ee:	2a25      	cmp	r2, #37	; 0x25
 800b5f0:	d1f9      	bne.n	800b5e6 <_vfiprintf_r+0x96>
 800b5f2:	ebba 0b04 	subs.w	fp, sl, r4
 800b5f6:	d00b      	beq.n	800b610 <_vfiprintf_r+0xc0>
 800b5f8:	465b      	mov	r3, fp
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	4630      	mov	r0, r6
 800b600:	f7ff ff94 	bl	800b52c <__sfputs_r>
 800b604:	3001      	adds	r0, #1
 800b606:	f000 80aa 	beq.w	800b75e <_vfiprintf_r+0x20e>
 800b60a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b60c:	445a      	add	r2, fp
 800b60e:	9209      	str	r2, [sp, #36]	; 0x24
 800b610:	f89a 3000 	ldrb.w	r3, [sl]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 80a2 	beq.w	800b75e <_vfiprintf_r+0x20e>
 800b61a:	2300      	movs	r3, #0
 800b61c:	f04f 32ff 	mov.w	r2, #4294967295
 800b620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b624:	f10a 0a01 	add.w	sl, sl, #1
 800b628:	9304      	str	r3, [sp, #16]
 800b62a:	9307      	str	r3, [sp, #28]
 800b62c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b630:	931a      	str	r3, [sp, #104]	; 0x68
 800b632:	4654      	mov	r4, sl
 800b634:	2205      	movs	r2, #5
 800b636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b63a:	4858      	ldr	r0, [pc, #352]	; (800b79c <_vfiprintf_r+0x24c>)
 800b63c:	f7f4 fdd0 	bl	80001e0 <memchr>
 800b640:	9a04      	ldr	r2, [sp, #16]
 800b642:	b9d8      	cbnz	r0, 800b67c <_vfiprintf_r+0x12c>
 800b644:	06d1      	lsls	r1, r2, #27
 800b646:	bf44      	itt	mi
 800b648:	2320      	movmi	r3, #32
 800b64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b64e:	0713      	lsls	r3, r2, #28
 800b650:	bf44      	itt	mi
 800b652:	232b      	movmi	r3, #43	; 0x2b
 800b654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b658:	f89a 3000 	ldrb.w	r3, [sl]
 800b65c:	2b2a      	cmp	r3, #42	; 0x2a
 800b65e:	d015      	beq.n	800b68c <_vfiprintf_r+0x13c>
 800b660:	9a07      	ldr	r2, [sp, #28]
 800b662:	4654      	mov	r4, sl
 800b664:	2000      	movs	r0, #0
 800b666:	f04f 0c0a 	mov.w	ip, #10
 800b66a:	4621      	mov	r1, r4
 800b66c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b670:	3b30      	subs	r3, #48	; 0x30
 800b672:	2b09      	cmp	r3, #9
 800b674:	d94e      	bls.n	800b714 <_vfiprintf_r+0x1c4>
 800b676:	b1b0      	cbz	r0, 800b6a6 <_vfiprintf_r+0x156>
 800b678:	9207      	str	r2, [sp, #28]
 800b67a:	e014      	b.n	800b6a6 <_vfiprintf_r+0x156>
 800b67c:	eba0 0308 	sub.w	r3, r0, r8
 800b680:	fa09 f303 	lsl.w	r3, r9, r3
 800b684:	4313      	orrs	r3, r2
 800b686:	9304      	str	r3, [sp, #16]
 800b688:	46a2      	mov	sl, r4
 800b68a:	e7d2      	b.n	800b632 <_vfiprintf_r+0xe2>
 800b68c:	9b03      	ldr	r3, [sp, #12]
 800b68e:	1d19      	adds	r1, r3, #4
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	9103      	str	r1, [sp, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	bfbb      	ittet	lt
 800b698:	425b      	neglt	r3, r3
 800b69a:	f042 0202 	orrlt.w	r2, r2, #2
 800b69e:	9307      	strge	r3, [sp, #28]
 800b6a0:	9307      	strlt	r3, [sp, #28]
 800b6a2:	bfb8      	it	lt
 800b6a4:	9204      	strlt	r2, [sp, #16]
 800b6a6:	7823      	ldrb	r3, [r4, #0]
 800b6a8:	2b2e      	cmp	r3, #46	; 0x2e
 800b6aa:	d10c      	bne.n	800b6c6 <_vfiprintf_r+0x176>
 800b6ac:	7863      	ldrb	r3, [r4, #1]
 800b6ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b6b0:	d135      	bne.n	800b71e <_vfiprintf_r+0x1ce>
 800b6b2:	9b03      	ldr	r3, [sp, #12]
 800b6b4:	1d1a      	adds	r2, r3, #4
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	9203      	str	r2, [sp, #12]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	bfb8      	it	lt
 800b6be:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6c2:	3402      	adds	r4, #2
 800b6c4:	9305      	str	r3, [sp, #20]
 800b6c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7ac <_vfiprintf_r+0x25c>
 800b6ca:	7821      	ldrb	r1, [r4, #0]
 800b6cc:	2203      	movs	r2, #3
 800b6ce:	4650      	mov	r0, sl
 800b6d0:	f7f4 fd86 	bl	80001e0 <memchr>
 800b6d4:	b140      	cbz	r0, 800b6e8 <_vfiprintf_r+0x198>
 800b6d6:	2340      	movs	r3, #64	; 0x40
 800b6d8:	eba0 000a 	sub.w	r0, r0, sl
 800b6dc:	fa03 f000 	lsl.w	r0, r3, r0
 800b6e0:	9b04      	ldr	r3, [sp, #16]
 800b6e2:	4303      	orrs	r3, r0
 800b6e4:	3401      	adds	r4, #1
 800b6e6:	9304      	str	r3, [sp, #16]
 800b6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ec:	482c      	ldr	r0, [pc, #176]	; (800b7a0 <_vfiprintf_r+0x250>)
 800b6ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6f2:	2206      	movs	r2, #6
 800b6f4:	f7f4 fd74 	bl	80001e0 <memchr>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d03f      	beq.n	800b77c <_vfiprintf_r+0x22c>
 800b6fc:	4b29      	ldr	r3, [pc, #164]	; (800b7a4 <_vfiprintf_r+0x254>)
 800b6fe:	bb1b      	cbnz	r3, 800b748 <_vfiprintf_r+0x1f8>
 800b700:	9b03      	ldr	r3, [sp, #12]
 800b702:	3307      	adds	r3, #7
 800b704:	f023 0307 	bic.w	r3, r3, #7
 800b708:	3308      	adds	r3, #8
 800b70a:	9303      	str	r3, [sp, #12]
 800b70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70e:	443b      	add	r3, r7
 800b710:	9309      	str	r3, [sp, #36]	; 0x24
 800b712:	e767      	b.n	800b5e4 <_vfiprintf_r+0x94>
 800b714:	fb0c 3202 	mla	r2, ip, r2, r3
 800b718:	460c      	mov	r4, r1
 800b71a:	2001      	movs	r0, #1
 800b71c:	e7a5      	b.n	800b66a <_vfiprintf_r+0x11a>
 800b71e:	2300      	movs	r3, #0
 800b720:	3401      	adds	r4, #1
 800b722:	9305      	str	r3, [sp, #20]
 800b724:	4619      	mov	r1, r3
 800b726:	f04f 0c0a 	mov.w	ip, #10
 800b72a:	4620      	mov	r0, r4
 800b72c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b730:	3a30      	subs	r2, #48	; 0x30
 800b732:	2a09      	cmp	r2, #9
 800b734:	d903      	bls.n	800b73e <_vfiprintf_r+0x1ee>
 800b736:	2b00      	cmp	r3, #0
 800b738:	d0c5      	beq.n	800b6c6 <_vfiprintf_r+0x176>
 800b73a:	9105      	str	r1, [sp, #20]
 800b73c:	e7c3      	b.n	800b6c6 <_vfiprintf_r+0x176>
 800b73e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b742:	4604      	mov	r4, r0
 800b744:	2301      	movs	r3, #1
 800b746:	e7f0      	b.n	800b72a <_vfiprintf_r+0x1da>
 800b748:	ab03      	add	r3, sp, #12
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	462a      	mov	r2, r5
 800b74e:	4b16      	ldr	r3, [pc, #88]	; (800b7a8 <_vfiprintf_r+0x258>)
 800b750:	a904      	add	r1, sp, #16
 800b752:	4630      	mov	r0, r6
 800b754:	f7fd fde6 	bl	8009324 <_printf_float>
 800b758:	4607      	mov	r7, r0
 800b75a:	1c78      	adds	r0, r7, #1
 800b75c:	d1d6      	bne.n	800b70c <_vfiprintf_r+0x1bc>
 800b75e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b760:	07d9      	lsls	r1, r3, #31
 800b762:	d405      	bmi.n	800b770 <_vfiprintf_r+0x220>
 800b764:	89ab      	ldrh	r3, [r5, #12]
 800b766:	059a      	lsls	r2, r3, #22
 800b768:	d402      	bmi.n	800b770 <_vfiprintf_r+0x220>
 800b76a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b76c:	f000 faaf 	bl	800bcce <__retarget_lock_release_recursive>
 800b770:	89ab      	ldrh	r3, [r5, #12]
 800b772:	065b      	lsls	r3, r3, #25
 800b774:	f53f af12 	bmi.w	800b59c <_vfiprintf_r+0x4c>
 800b778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b77a:	e711      	b.n	800b5a0 <_vfiprintf_r+0x50>
 800b77c:	ab03      	add	r3, sp, #12
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	462a      	mov	r2, r5
 800b782:	4b09      	ldr	r3, [pc, #36]	; (800b7a8 <_vfiprintf_r+0x258>)
 800b784:	a904      	add	r1, sp, #16
 800b786:	4630      	mov	r0, r6
 800b788:	f7fe f870 	bl	800986c <_printf_i>
 800b78c:	e7e4      	b.n	800b758 <_vfiprintf_r+0x208>
 800b78e:	bf00      	nop
 800b790:	0800d13c 	.word	0x0800d13c
 800b794:	0800d15c 	.word	0x0800d15c
 800b798:	0800d11c 	.word	0x0800d11c
 800b79c:	0800cfc4 	.word	0x0800cfc4
 800b7a0:	0800cfce 	.word	0x0800cfce
 800b7a4:	08009325 	.word	0x08009325
 800b7a8:	0800b52d 	.word	0x0800b52d
 800b7ac:	0800cfca 	.word	0x0800cfca

0800b7b0 <__swbuf_r>:
 800b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b2:	460e      	mov	r6, r1
 800b7b4:	4614      	mov	r4, r2
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	b118      	cbz	r0, 800b7c2 <__swbuf_r+0x12>
 800b7ba:	6983      	ldr	r3, [r0, #24]
 800b7bc:	b90b      	cbnz	r3, 800b7c2 <__swbuf_r+0x12>
 800b7be:	f000 f9e7 	bl	800bb90 <__sinit>
 800b7c2:	4b21      	ldr	r3, [pc, #132]	; (800b848 <__swbuf_r+0x98>)
 800b7c4:	429c      	cmp	r4, r3
 800b7c6:	d12b      	bne.n	800b820 <__swbuf_r+0x70>
 800b7c8:	686c      	ldr	r4, [r5, #4]
 800b7ca:	69a3      	ldr	r3, [r4, #24]
 800b7cc:	60a3      	str	r3, [r4, #8]
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	071a      	lsls	r2, r3, #28
 800b7d2:	d52f      	bpl.n	800b834 <__swbuf_r+0x84>
 800b7d4:	6923      	ldr	r3, [r4, #16]
 800b7d6:	b36b      	cbz	r3, 800b834 <__swbuf_r+0x84>
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	6820      	ldr	r0, [r4, #0]
 800b7dc:	1ac0      	subs	r0, r0, r3
 800b7de:	6963      	ldr	r3, [r4, #20]
 800b7e0:	b2f6      	uxtb	r6, r6
 800b7e2:	4283      	cmp	r3, r0
 800b7e4:	4637      	mov	r7, r6
 800b7e6:	dc04      	bgt.n	800b7f2 <__swbuf_r+0x42>
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	f000 f93c 	bl	800ba68 <_fflush_r>
 800b7f0:	bb30      	cbnz	r0, 800b840 <__swbuf_r+0x90>
 800b7f2:	68a3      	ldr	r3, [r4, #8]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	60a3      	str	r3, [r4, #8]
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	1c5a      	adds	r2, r3, #1
 800b7fc:	6022      	str	r2, [r4, #0]
 800b7fe:	701e      	strb	r6, [r3, #0]
 800b800:	6963      	ldr	r3, [r4, #20]
 800b802:	3001      	adds	r0, #1
 800b804:	4283      	cmp	r3, r0
 800b806:	d004      	beq.n	800b812 <__swbuf_r+0x62>
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	07db      	lsls	r3, r3, #31
 800b80c:	d506      	bpl.n	800b81c <__swbuf_r+0x6c>
 800b80e:	2e0a      	cmp	r6, #10
 800b810:	d104      	bne.n	800b81c <__swbuf_r+0x6c>
 800b812:	4621      	mov	r1, r4
 800b814:	4628      	mov	r0, r5
 800b816:	f000 f927 	bl	800ba68 <_fflush_r>
 800b81a:	b988      	cbnz	r0, 800b840 <__swbuf_r+0x90>
 800b81c:	4638      	mov	r0, r7
 800b81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b820:	4b0a      	ldr	r3, [pc, #40]	; (800b84c <__swbuf_r+0x9c>)
 800b822:	429c      	cmp	r4, r3
 800b824:	d101      	bne.n	800b82a <__swbuf_r+0x7a>
 800b826:	68ac      	ldr	r4, [r5, #8]
 800b828:	e7cf      	b.n	800b7ca <__swbuf_r+0x1a>
 800b82a:	4b09      	ldr	r3, [pc, #36]	; (800b850 <__swbuf_r+0xa0>)
 800b82c:	429c      	cmp	r4, r3
 800b82e:	bf08      	it	eq
 800b830:	68ec      	ldreq	r4, [r5, #12]
 800b832:	e7ca      	b.n	800b7ca <__swbuf_r+0x1a>
 800b834:	4621      	mov	r1, r4
 800b836:	4628      	mov	r0, r5
 800b838:	f000 f81a 	bl	800b870 <__swsetup_r>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d0cb      	beq.n	800b7d8 <__swbuf_r+0x28>
 800b840:	f04f 37ff 	mov.w	r7, #4294967295
 800b844:	e7ea      	b.n	800b81c <__swbuf_r+0x6c>
 800b846:	bf00      	nop
 800b848:	0800d13c 	.word	0x0800d13c
 800b84c:	0800d15c 	.word	0x0800d15c
 800b850:	0800d11c 	.word	0x0800d11c

0800b854 <__ascii_wctomb>:
 800b854:	b149      	cbz	r1, 800b86a <__ascii_wctomb+0x16>
 800b856:	2aff      	cmp	r2, #255	; 0xff
 800b858:	bf85      	ittet	hi
 800b85a:	238a      	movhi	r3, #138	; 0x8a
 800b85c:	6003      	strhi	r3, [r0, #0]
 800b85e:	700a      	strbls	r2, [r1, #0]
 800b860:	f04f 30ff 	movhi.w	r0, #4294967295
 800b864:	bf98      	it	ls
 800b866:	2001      	movls	r0, #1
 800b868:	4770      	bx	lr
 800b86a:	4608      	mov	r0, r1
 800b86c:	4770      	bx	lr
	...

0800b870 <__swsetup_r>:
 800b870:	4b32      	ldr	r3, [pc, #200]	; (800b93c <__swsetup_r+0xcc>)
 800b872:	b570      	push	{r4, r5, r6, lr}
 800b874:	681d      	ldr	r5, [r3, #0]
 800b876:	4606      	mov	r6, r0
 800b878:	460c      	mov	r4, r1
 800b87a:	b125      	cbz	r5, 800b886 <__swsetup_r+0x16>
 800b87c:	69ab      	ldr	r3, [r5, #24]
 800b87e:	b913      	cbnz	r3, 800b886 <__swsetup_r+0x16>
 800b880:	4628      	mov	r0, r5
 800b882:	f000 f985 	bl	800bb90 <__sinit>
 800b886:	4b2e      	ldr	r3, [pc, #184]	; (800b940 <__swsetup_r+0xd0>)
 800b888:	429c      	cmp	r4, r3
 800b88a:	d10f      	bne.n	800b8ac <__swsetup_r+0x3c>
 800b88c:	686c      	ldr	r4, [r5, #4]
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b894:	0719      	lsls	r1, r3, #28
 800b896:	d42c      	bmi.n	800b8f2 <__swsetup_r+0x82>
 800b898:	06dd      	lsls	r5, r3, #27
 800b89a:	d411      	bmi.n	800b8c0 <__swsetup_r+0x50>
 800b89c:	2309      	movs	r3, #9
 800b89e:	6033      	str	r3, [r6, #0]
 800b8a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8a4:	81a3      	strh	r3, [r4, #12]
 800b8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8aa:	e03e      	b.n	800b92a <__swsetup_r+0xba>
 800b8ac:	4b25      	ldr	r3, [pc, #148]	; (800b944 <__swsetup_r+0xd4>)
 800b8ae:	429c      	cmp	r4, r3
 800b8b0:	d101      	bne.n	800b8b6 <__swsetup_r+0x46>
 800b8b2:	68ac      	ldr	r4, [r5, #8]
 800b8b4:	e7eb      	b.n	800b88e <__swsetup_r+0x1e>
 800b8b6:	4b24      	ldr	r3, [pc, #144]	; (800b948 <__swsetup_r+0xd8>)
 800b8b8:	429c      	cmp	r4, r3
 800b8ba:	bf08      	it	eq
 800b8bc:	68ec      	ldreq	r4, [r5, #12]
 800b8be:	e7e6      	b.n	800b88e <__swsetup_r+0x1e>
 800b8c0:	0758      	lsls	r0, r3, #29
 800b8c2:	d512      	bpl.n	800b8ea <__swsetup_r+0x7a>
 800b8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8c6:	b141      	cbz	r1, 800b8da <__swsetup_r+0x6a>
 800b8c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8cc:	4299      	cmp	r1, r3
 800b8ce:	d002      	beq.n	800b8d6 <__swsetup_r+0x66>
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f7ff fb31 	bl	800af38 <_free_r>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	6363      	str	r3, [r4, #52]	; 0x34
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8e0:	81a3      	strh	r3, [r4, #12]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	6063      	str	r3, [r4, #4]
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f043 0308 	orr.w	r3, r3, #8
 800b8f0:	81a3      	strh	r3, [r4, #12]
 800b8f2:	6923      	ldr	r3, [r4, #16]
 800b8f4:	b94b      	cbnz	r3, 800b90a <__swsetup_r+0x9a>
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b900:	d003      	beq.n	800b90a <__swsetup_r+0x9a>
 800b902:	4621      	mov	r1, r4
 800b904:	4630      	mov	r0, r6
 800b906:	f000 fa09 	bl	800bd1c <__smakebuf_r>
 800b90a:	89a0      	ldrh	r0, [r4, #12]
 800b90c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b910:	f010 0301 	ands.w	r3, r0, #1
 800b914:	d00a      	beq.n	800b92c <__swsetup_r+0xbc>
 800b916:	2300      	movs	r3, #0
 800b918:	60a3      	str	r3, [r4, #8]
 800b91a:	6963      	ldr	r3, [r4, #20]
 800b91c:	425b      	negs	r3, r3
 800b91e:	61a3      	str	r3, [r4, #24]
 800b920:	6923      	ldr	r3, [r4, #16]
 800b922:	b943      	cbnz	r3, 800b936 <__swsetup_r+0xc6>
 800b924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b928:	d1ba      	bne.n	800b8a0 <__swsetup_r+0x30>
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	0781      	lsls	r1, r0, #30
 800b92e:	bf58      	it	pl
 800b930:	6963      	ldrpl	r3, [r4, #20]
 800b932:	60a3      	str	r3, [r4, #8]
 800b934:	e7f4      	b.n	800b920 <__swsetup_r+0xb0>
 800b936:	2000      	movs	r0, #0
 800b938:	e7f7      	b.n	800b92a <__swsetup_r+0xba>
 800b93a:	bf00      	nop
 800b93c:	20000028 	.word	0x20000028
 800b940:	0800d13c 	.word	0x0800d13c
 800b944:	0800d15c 	.word	0x0800d15c
 800b948:	0800d11c 	.word	0x0800d11c

0800b94c <abort>:
 800b94c:	b508      	push	{r3, lr}
 800b94e:	2006      	movs	r0, #6
 800b950:	f000 fa54 	bl	800bdfc <raise>
 800b954:	2001      	movs	r0, #1
 800b956:	f7f5 ff81 	bl	800185c <_exit>
	...

0800b95c <__sflush_r>:
 800b95c:	898a      	ldrh	r2, [r1, #12]
 800b95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b962:	4605      	mov	r5, r0
 800b964:	0710      	lsls	r0, r2, #28
 800b966:	460c      	mov	r4, r1
 800b968:	d458      	bmi.n	800ba1c <__sflush_r+0xc0>
 800b96a:	684b      	ldr	r3, [r1, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	dc05      	bgt.n	800b97c <__sflush_r+0x20>
 800b970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b972:	2b00      	cmp	r3, #0
 800b974:	dc02      	bgt.n	800b97c <__sflush_r+0x20>
 800b976:	2000      	movs	r0, #0
 800b978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b97c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b97e:	2e00      	cmp	r6, #0
 800b980:	d0f9      	beq.n	800b976 <__sflush_r+0x1a>
 800b982:	2300      	movs	r3, #0
 800b984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b988:	682f      	ldr	r7, [r5, #0]
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	d032      	beq.n	800b9f4 <__sflush_r+0x98>
 800b98e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	075a      	lsls	r2, r3, #29
 800b994:	d505      	bpl.n	800b9a2 <__sflush_r+0x46>
 800b996:	6863      	ldr	r3, [r4, #4]
 800b998:	1ac0      	subs	r0, r0, r3
 800b99a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b99c:	b10b      	cbz	r3, 800b9a2 <__sflush_r+0x46>
 800b99e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9a0:	1ac0      	subs	r0, r0, r3
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9a8:	6a21      	ldr	r1, [r4, #32]
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	47b0      	blx	r6
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	89a3      	ldrh	r3, [r4, #12]
 800b9b2:	d106      	bne.n	800b9c2 <__sflush_r+0x66>
 800b9b4:	6829      	ldr	r1, [r5, #0]
 800b9b6:	291d      	cmp	r1, #29
 800b9b8:	d82c      	bhi.n	800ba14 <__sflush_r+0xb8>
 800b9ba:	4a2a      	ldr	r2, [pc, #168]	; (800ba64 <__sflush_r+0x108>)
 800b9bc:	40ca      	lsrs	r2, r1
 800b9be:	07d6      	lsls	r6, r2, #31
 800b9c0:	d528      	bpl.n	800ba14 <__sflush_r+0xb8>
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	6062      	str	r2, [r4, #4]
 800b9c6:	04d9      	lsls	r1, r3, #19
 800b9c8:	6922      	ldr	r2, [r4, #16]
 800b9ca:	6022      	str	r2, [r4, #0]
 800b9cc:	d504      	bpl.n	800b9d8 <__sflush_r+0x7c>
 800b9ce:	1c42      	adds	r2, r0, #1
 800b9d0:	d101      	bne.n	800b9d6 <__sflush_r+0x7a>
 800b9d2:	682b      	ldr	r3, [r5, #0]
 800b9d4:	b903      	cbnz	r3, 800b9d8 <__sflush_r+0x7c>
 800b9d6:	6560      	str	r0, [r4, #84]	; 0x54
 800b9d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9da:	602f      	str	r7, [r5, #0]
 800b9dc:	2900      	cmp	r1, #0
 800b9de:	d0ca      	beq.n	800b976 <__sflush_r+0x1a>
 800b9e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9e4:	4299      	cmp	r1, r3
 800b9e6:	d002      	beq.n	800b9ee <__sflush_r+0x92>
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	f7ff faa5 	bl	800af38 <_free_r>
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	6360      	str	r0, [r4, #52]	; 0x34
 800b9f2:	e7c1      	b.n	800b978 <__sflush_r+0x1c>
 800b9f4:	6a21      	ldr	r1, [r4, #32]
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	47b0      	blx	r6
 800b9fc:	1c41      	adds	r1, r0, #1
 800b9fe:	d1c7      	bne.n	800b990 <__sflush_r+0x34>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d0c4      	beq.n	800b990 <__sflush_r+0x34>
 800ba06:	2b1d      	cmp	r3, #29
 800ba08:	d001      	beq.n	800ba0e <__sflush_r+0xb2>
 800ba0a:	2b16      	cmp	r3, #22
 800ba0c:	d101      	bne.n	800ba12 <__sflush_r+0xb6>
 800ba0e:	602f      	str	r7, [r5, #0]
 800ba10:	e7b1      	b.n	800b976 <__sflush_r+0x1a>
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba18:	81a3      	strh	r3, [r4, #12]
 800ba1a:	e7ad      	b.n	800b978 <__sflush_r+0x1c>
 800ba1c:	690f      	ldr	r7, [r1, #16]
 800ba1e:	2f00      	cmp	r7, #0
 800ba20:	d0a9      	beq.n	800b976 <__sflush_r+0x1a>
 800ba22:	0793      	lsls	r3, r2, #30
 800ba24:	680e      	ldr	r6, [r1, #0]
 800ba26:	bf08      	it	eq
 800ba28:	694b      	ldreq	r3, [r1, #20]
 800ba2a:	600f      	str	r7, [r1, #0]
 800ba2c:	bf18      	it	ne
 800ba2e:	2300      	movne	r3, #0
 800ba30:	eba6 0807 	sub.w	r8, r6, r7
 800ba34:	608b      	str	r3, [r1, #8]
 800ba36:	f1b8 0f00 	cmp.w	r8, #0
 800ba3a:	dd9c      	ble.n	800b976 <__sflush_r+0x1a>
 800ba3c:	6a21      	ldr	r1, [r4, #32]
 800ba3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba40:	4643      	mov	r3, r8
 800ba42:	463a      	mov	r2, r7
 800ba44:	4628      	mov	r0, r5
 800ba46:	47b0      	blx	r6
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	dc06      	bgt.n	800ba5a <__sflush_r+0xfe>
 800ba4c:	89a3      	ldrh	r3, [r4, #12]
 800ba4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba52:	81a3      	strh	r3, [r4, #12]
 800ba54:	f04f 30ff 	mov.w	r0, #4294967295
 800ba58:	e78e      	b.n	800b978 <__sflush_r+0x1c>
 800ba5a:	4407      	add	r7, r0
 800ba5c:	eba8 0800 	sub.w	r8, r8, r0
 800ba60:	e7e9      	b.n	800ba36 <__sflush_r+0xda>
 800ba62:	bf00      	nop
 800ba64:	20400001 	.word	0x20400001

0800ba68 <_fflush_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	690b      	ldr	r3, [r1, #16]
 800ba6c:	4605      	mov	r5, r0
 800ba6e:	460c      	mov	r4, r1
 800ba70:	b913      	cbnz	r3, 800ba78 <_fflush_r+0x10>
 800ba72:	2500      	movs	r5, #0
 800ba74:	4628      	mov	r0, r5
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	b118      	cbz	r0, 800ba82 <_fflush_r+0x1a>
 800ba7a:	6983      	ldr	r3, [r0, #24]
 800ba7c:	b90b      	cbnz	r3, 800ba82 <_fflush_r+0x1a>
 800ba7e:	f000 f887 	bl	800bb90 <__sinit>
 800ba82:	4b14      	ldr	r3, [pc, #80]	; (800bad4 <_fflush_r+0x6c>)
 800ba84:	429c      	cmp	r4, r3
 800ba86:	d11b      	bne.n	800bac0 <_fflush_r+0x58>
 800ba88:	686c      	ldr	r4, [r5, #4]
 800ba8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d0ef      	beq.n	800ba72 <_fflush_r+0xa>
 800ba92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba94:	07d0      	lsls	r0, r2, #31
 800ba96:	d404      	bmi.n	800baa2 <_fflush_r+0x3a>
 800ba98:	0599      	lsls	r1, r3, #22
 800ba9a:	d402      	bmi.n	800baa2 <_fflush_r+0x3a>
 800ba9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba9e:	f000 f915 	bl	800bccc <__retarget_lock_acquire_recursive>
 800baa2:	4628      	mov	r0, r5
 800baa4:	4621      	mov	r1, r4
 800baa6:	f7ff ff59 	bl	800b95c <__sflush_r>
 800baaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baac:	07da      	lsls	r2, r3, #31
 800baae:	4605      	mov	r5, r0
 800bab0:	d4e0      	bmi.n	800ba74 <_fflush_r+0xc>
 800bab2:	89a3      	ldrh	r3, [r4, #12]
 800bab4:	059b      	lsls	r3, r3, #22
 800bab6:	d4dd      	bmi.n	800ba74 <_fflush_r+0xc>
 800bab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baba:	f000 f908 	bl	800bcce <__retarget_lock_release_recursive>
 800babe:	e7d9      	b.n	800ba74 <_fflush_r+0xc>
 800bac0:	4b05      	ldr	r3, [pc, #20]	; (800bad8 <_fflush_r+0x70>)
 800bac2:	429c      	cmp	r4, r3
 800bac4:	d101      	bne.n	800baca <_fflush_r+0x62>
 800bac6:	68ac      	ldr	r4, [r5, #8]
 800bac8:	e7df      	b.n	800ba8a <_fflush_r+0x22>
 800baca:	4b04      	ldr	r3, [pc, #16]	; (800badc <_fflush_r+0x74>)
 800bacc:	429c      	cmp	r4, r3
 800bace:	bf08      	it	eq
 800bad0:	68ec      	ldreq	r4, [r5, #12]
 800bad2:	e7da      	b.n	800ba8a <_fflush_r+0x22>
 800bad4:	0800d13c 	.word	0x0800d13c
 800bad8:	0800d15c 	.word	0x0800d15c
 800badc:	0800d11c 	.word	0x0800d11c

0800bae0 <std>:
 800bae0:	2300      	movs	r3, #0
 800bae2:	b510      	push	{r4, lr}
 800bae4:	4604      	mov	r4, r0
 800bae6:	e9c0 3300 	strd	r3, r3, [r0]
 800baea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800baee:	6083      	str	r3, [r0, #8]
 800baf0:	8181      	strh	r1, [r0, #12]
 800baf2:	6643      	str	r3, [r0, #100]	; 0x64
 800baf4:	81c2      	strh	r2, [r0, #14]
 800baf6:	6183      	str	r3, [r0, #24]
 800baf8:	4619      	mov	r1, r3
 800bafa:	2208      	movs	r2, #8
 800bafc:	305c      	adds	r0, #92	; 0x5c
 800bafe:	f7fd fb69 	bl	80091d4 <memset>
 800bb02:	4b05      	ldr	r3, [pc, #20]	; (800bb18 <std+0x38>)
 800bb04:	6263      	str	r3, [r4, #36]	; 0x24
 800bb06:	4b05      	ldr	r3, [pc, #20]	; (800bb1c <std+0x3c>)
 800bb08:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb0a:	4b05      	ldr	r3, [pc, #20]	; (800bb20 <std+0x40>)
 800bb0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb0e:	4b05      	ldr	r3, [pc, #20]	; (800bb24 <std+0x44>)
 800bb10:	6224      	str	r4, [r4, #32]
 800bb12:	6323      	str	r3, [r4, #48]	; 0x30
 800bb14:	bd10      	pop	{r4, pc}
 800bb16:	bf00      	nop
 800bb18:	0800be35 	.word	0x0800be35
 800bb1c:	0800be57 	.word	0x0800be57
 800bb20:	0800be8f 	.word	0x0800be8f
 800bb24:	0800beb3 	.word	0x0800beb3

0800bb28 <_cleanup_r>:
 800bb28:	4901      	ldr	r1, [pc, #4]	; (800bb30 <_cleanup_r+0x8>)
 800bb2a:	f000 b8af 	b.w	800bc8c <_fwalk_reent>
 800bb2e:	bf00      	nop
 800bb30:	0800ba69 	.word	0x0800ba69

0800bb34 <__sfmoreglue>:
 800bb34:	b570      	push	{r4, r5, r6, lr}
 800bb36:	2268      	movs	r2, #104	; 0x68
 800bb38:	1e4d      	subs	r5, r1, #1
 800bb3a:	4355      	muls	r5, r2
 800bb3c:	460e      	mov	r6, r1
 800bb3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb42:	f7ff fa65 	bl	800b010 <_malloc_r>
 800bb46:	4604      	mov	r4, r0
 800bb48:	b140      	cbz	r0, 800bb5c <__sfmoreglue+0x28>
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	e9c0 1600 	strd	r1, r6, [r0]
 800bb50:	300c      	adds	r0, #12
 800bb52:	60a0      	str	r0, [r4, #8]
 800bb54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb58:	f7fd fb3c 	bl	80091d4 <memset>
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	bd70      	pop	{r4, r5, r6, pc}

0800bb60 <__sfp_lock_acquire>:
 800bb60:	4801      	ldr	r0, [pc, #4]	; (800bb68 <__sfp_lock_acquire+0x8>)
 800bb62:	f000 b8b3 	b.w	800bccc <__retarget_lock_acquire_recursive>
 800bb66:	bf00      	nop
 800bb68:	200008c1 	.word	0x200008c1

0800bb6c <__sfp_lock_release>:
 800bb6c:	4801      	ldr	r0, [pc, #4]	; (800bb74 <__sfp_lock_release+0x8>)
 800bb6e:	f000 b8ae 	b.w	800bcce <__retarget_lock_release_recursive>
 800bb72:	bf00      	nop
 800bb74:	200008c1 	.word	0x200008c1

0800bb78 <__sinit_lock_acquire>:
 800bb78:	4801      	ldr	r0, [pc, #4]	; (800bb80 <__sinit_lock_acquire+0x8>)
 800bb7a:	f000 b8a7 	b.w	800bccc <__retarget_lock_acquire_recursive>
 800bb7e:	bf00      	nop
 800bb80:	200008c2 	.word	0x200008c2

0800bb84 <__sinit_lock_release>:
 800bb84:	4801      	ldr	r0, [pc, #4]	; (800bb8c <__sinit_lock_release+0x8>)
 800bb86:	f000 b8a2 	b.w	800bcce <__retarget_lock_release_recursive>
 800bb8a:	bf00      	nop
 800bb8c:	200008c2 	.word	0x200008c2

0800bb90 <__sinit>:
 800bb90:	b510      	push	{r4, lr}
 800bb92:	4604      	mov	r4, r0
 800bb94:	f7ff fff0 	bl	800bb78 <__sinit_lock_acquire>
 800bb98:	69a3      	ldr	r3, [r4, #24]
 800bb9a:	b11b      	cbz	r3, 800bba4 <__sinit+0x14>
 800bb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba0:	f7ff bff0 	b.w	800bb84 <__sinit_lock_release>
 800bba4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bba8:	6523      	str	r3, [r4, #80]	; 0x50
 800bbaa:	4b13      	ldr	r3, [pc, #76]	; (800bbf8 <__sinit+0x68>)
 800bbac:	4a13      	ldr	r2, [pc, #76]	; (800bbfc <__sinit+0x6c>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbb2:	42a3      	cmp	r3, r4
 800bbb4:	bf04      	itt	eq
 800bbb6:	2301      	moveq	r3, #1
 800bbb8:	61a3      	streq	r3, [r4, #24]
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f000 f820 	bl	800bc00 <__sfp>
 800bbc0:	6060      	str	r0, [r4, #4]
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f000 f81c 	bl	800bc00 <__sfp>
 800bbc8:	60a0      	str	r0, [r4, #8]
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f000 f818 	bl	800bc00 <__sfp>
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	60e0      	str	r0, [r4, #12]
 800bbd4:	2104      	movs	r1, #4
 800bbd6:	6860      	ldr	r0, [r4, #4]
 800bbd8:	f7ff ff82 	bl	800bae0 <std>
 800bbdc:	68a0      	ldr	r0, [r4, #8]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	2109      	movs	r1, #9
 800bbe2:	f7ff ff7d 	bl	800bae0 <std>
 800bbe6:	68e0      	ldr	r0, [r4, #12]
 800bbe8:	2202      	movs	r2, #2
 800bbea:	2112      	movs	r1, #18
 800bbec:	f7ff ff78 	bl	800bae0 <std>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	61a3      	str	r3, [r4, #24]
 800bbf4:	e7d2      	b.n	800bb9c <__sinit+0xc>
 800bbf6:	bf00      	nop
 800bbf8:	0800cda0 	.word	0x0800cda0
 800bbfc:	0800bb29 	.word	0x0800bb29

0800bc00 <__sfp>:
 800bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc02:	4607      	mov	r7, r0
 800bc04:	f7ff ffac 	bl	800bb60 <__sfp_lock_acquire>
 800bc08:	4b1e      	ldr	r3, [pc, #120]	; (800bc84 <__sfp+0x84>)
 800bc0a:	681e      	ldr	r6, [r3, #0]
 800bc0c:	69b3      	ldr	r3, [r6, #24]
 800bc0e:	b913      	cbnz	r3, 800bc16 <__sfp+0x16>
 800bc10:	4630      	mov	r0, r6
 800bc12:	f7ff ffbd 	bl	800bb90 <__sinit>
 800bc16:	3648      	adds	r6, #72	; 0x48
 800bc18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	d503      	bpl.n	800bc28 <__sfp+0x28>
 800bc20:	6833      	ldr	r3, [r6, #0]
 800bc22:	b30b      	cbz	r3, 800bc68 <__sfp+0x68>
 800bc24:	6836      	ldr	r6, [r6, #0]
 800bc26:	e7f7      	b.n	800bc18 <__sfp+0x18>
 800bc28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc2c:	b9d5      	cbnz	r5, 800bc64 <__sfp+0x64>
 800bc2e:	4b16      	ldr	r3, [pc, #88]	; (800bc88 <__sfp+0x88>)
 800bc30:	60e3      	str	r3, [r4, #12]
 800bc32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc36:	6665      	str	r5, [r4, #100]	; 0x64
 800bc38:	f000 f847 	bl	800bcca <__retarget_lock_init_recursive>
 800bc3c:	f7ff ff96 	bl	800bb6c <__sfp_lock_release>
 800bc40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc48:	6025      	str	r5, [r4, #0]
 800bc4a:	61a5      	str	r5, [r4, #24]
 800bc4c:	2208      	movs	r2, #8
 800bc4e:	4629      	mov	r1, r5
 800bc50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc54:	f7fd fabe 	bl	80091d4 <memset>
 800bc58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc60:	4620      	mov	r0, r4
 800bc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc64:	3468      	adds	r4, #104	; 0x68
 800bc66:	e7d9      	b.n	800bc1c <__sfp+0x1c>
 800bc68:	2104      	movs	r1, #4
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	f7ff ff62 	bl	800bb34 <__sfmoreglue>
 800bc70:	4604      	mov	r4, r0
 800bc72:	6030      	str	r0, [r6, #0]
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d1d5      	bne.n	800bc24 <__sfp+0x24>
 800bc78:	f7ff ff78 	bl	800bb6c <__sfp_lock_release>
 800bc7c:	230c      	movs	r3, #12
 800bc7e:	603b      	str	r3, [r7, #0]
 800bc80:	e7ee      	b.n	800bc60 <__sfp+0x60>
 800bc82:	bf00      	nop
 800bc84:	0800cda0 	.word	0x0800cda0
 800bc88:	ffff0001 	.word	0xffff0001

0800bc8c <_fwalk_reent>:
 800bc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc90:	4606      	mov	r6, r0
 800bc92:	4688      	mov	r8, r1
 800bc94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc98:	2700      	movs	r7, #0
 800bc9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc9e:	f1b9 0901 	subs.w	r9, r9, #1
 800bca2:	d505      	bpl.n	800bcb0 <_fwalk_reent+0x24>
 800bca4:	6824      	ldr	r4, [r4, #0]
 800bca6:	2c00      	cmp	r4, #0
 800bca8:	d1f7      	bne.n	800bc9a <_fwalk_reent+0xe>
 800bcaa:	4638      	mov	r0, r7
 800bcac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcb0:	89ab      	ldrh	r3, [r5, #12]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d907      	bls.n	800bcc6 <_fwalk_reent+0x3a>
 800bcb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	d003      	beq.n	800bcc6 <_fwalk_reent+0x3a>
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	47c0      	blx	r8
 800bcc4:	4307      	orrs	r7, r0
 800bcc6:	3568      	adds	r5, #104	; 0x68
 800bcc8:	e7e9      	b.n	800bc9e <_fwalk_reent+0x12>

0800bcca <__retarget_lock_init_recursive>:
 800bcca:	4770      	bx	lr

0800bccc <__retarget_lock_acquire_recursive>:
 800bccc:	4770      	bx	lr

0800bcce <__retarget_lock_release_recursive>:
 800bcce:	4770      	bx	lr

0800bcd0 <__swhatbuf_r>:
 800bcd0:	b570      	push	{r4, r5, r6, lr}
 800bcd2:	460e      	mov	r6, r1
 800bcd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd8:	2900      	cmp	r1, #0
 800bcda:	b096      	sub	sp, #88	; 0x58
 800bcdc:	4614      	mov	r4, r2
 800bcde:	461d      	mov	r5, r3
 800bce0:	da08      	bge.n	800bcf4 <__swhatbuf_r+0x24>
 800bce2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	602a      	str	r2, [r5, #0]
 800bcea:	061a      	lsls	r2, r3, #24
 800bcec:	d410      	bmi.n	800bd10 <__swhatbuf_r+0x40>
 800bcee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcf2:	e00e      	b.n	800bd12 <__swhatbuf_r+0x42>
 800bcf4:	466a      	mov	r2, sp
 800bcf6:	f000 f903 	bl	800bf00 <_fstat_r>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	dbf1      	blt.n	800bce2 <__swhatbuf_r+0x12>
 800bcfe:	9a01      	ldr	r2, [sp, #4]
 800bd00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd08:	425a      	negs	r2, r3
 800bd0a:	415a      	adcs	r2, r3
 800bd0c:	602a      	str	r2, [r5, #0]
 800bd0e:	e7ee      	b.n	800bcee <__swhatbuf_r+0x1e>
 800bd10:	2340      	movs	r3, #64	; 0x40
 800bd12:	2000      	movs	r0, #0
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	b016      	add	sp, #88	; 0x58
 800bd18:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bd1c <__smakebuf_r>:
 800bd1c:	898b      	ldrh	r3, [r1, #12]
 800bd1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd20:	079d      	lsls	r5, r3, #30
 800bd22:	4606      	mov	r6, r0
 800bd24:	460c      	mov	r4, r1
 800bd26:	d507      	bpl.n	800bd38 <__smakebuf_r+0x1c>
 800bd28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd2c:	6023      	str	r3, [r4, #0]
 800bd2e:	6123      	str	r3, [r4, #16]
 800bd30:	2301      	movs	r3, #1
 800bd32:	6163      	str	r3, [r4, #20]
 800bd34:	b002      	add	sp, #8
 800bd36:	bd70      	pop	{r4, r5, r6, pc}
 800bd38:	ab01      	add	r3, sp, #4
 800bd3a:	466a      	mov	r2, sp
 800bd3c:	f7ff ffc8 	bl	800bcd0 <__swhatbuf_r>
 800bd40:	9900      	ldr	r1, [sp, #0]
 800bd42:	4605      	mov	r5, r0
 800bd44:	4630      	mov	r0, r6
 800bd46:	f7ff f963 	bl	800b010 <_malloc_r>
 800bd4a:	b948      	cbnz	r0, 800bd60 <__smakebuf_r+0x44>
 800bd4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd50:	059a      	lsls	r2, r3, #22
 800bd52:	d4ef      	bmi.n	800bd34 <__smakebuf_r+0x18>
 800bd54:	f023 0303 	bic.w	r3, r3, #3
 800bd58:	f043 0302 	orr.w	r3, r3, #2
 800bd5c:	81a3      	strh	r3, [r4, #12]
 800bd5e:	e7e3      	b.n	800bd28 <__smakebuf_r+0xc>
 800bd60:	4b0d      	ldr	r3, [pc, #52]	; (800bd98 <__smakebuf_r+0x7c>)
 800bd62:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	6020      	str	r0, [r4, #0]
 800bd68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd6c:	81a3      	strh	r3, [r4, #12]
 800bd6e:	9b00      	ldr	r3, [sp, #0]
 800bd70:	6163      	str	r3, [r4, #20]
 800bd72:	9b01      	ldr	r3, [sp, #4]
 800bd74:	6120      	str	r0, [r4, #16]
 800bd76:	b15b      	cbz	r3, 800bd90 <__smakebuf_r+0x74>
 800bd78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f000 f8d1 	bl	800bf24 <_isatty_r>
 800bd82:	b128      	cbz	r0, 800bd90 <__smakebuf_r+0x74>
 800bd84:	89a3      	ldrh	r3, [r4, #12]
 800bd86:	f023 0303 	bic.w	r3, r3, #3
 800bd8a:	f043 0301 	orr.w	r3, r3, #1
 800bd8e:	81a3      	strh	r3, [r4, #12]
 800bd90:	89a0      	ldrh	r0, [r4, #12]
 800bd92:	4305      	orrs	r5, r0
 800bd94:	81a5      	strh	r5, [r4, #12]
 800bd96:	e7cd      	b.n	800bd34 <__smakebuf_r+0x18>
 800bd98:	0800bb29 	.word	0x0800bb29

0800bd9c <_malloc_usable_size_r>:
 800bd9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bda0:	1f18      	subs	r0, r3, #4
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	bfbc      	itt	lt
 800bda6:	580b      	ldrlt	r3, [r1, r0]
 800bda8:	18c0      	addlt	r0, r0, r3
 800bdaa:	4770      	bx	lr

0800bdac <_raise_r>:
 800bdac:	291f      	cmp	r1, #31
 800bdae:	b538      	push	{r3, r4, r5, lr}
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	460d      	mov	r5, r1
 800bdb4:	d904      	bls.n	800bdc0 <_raise_r+0x14>
 800bdb6:	2316      	movs	r3, #22
 800bdb8:	6003      	str	r3, [r0, #0]
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbe:	bd38      	pop	{r3, r4, r5, pc}
 800bdc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bdc2:	b112      	cbz	r2, 800bdca <_raise_r+0x1e>
 800bdc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdc8:	b94b      	cbnz	r3, 800bdde <_raise_r+0x32>
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f000 f830 	bl	800be30 <_getpid_r>
 800bdd0:	462a      	mov	r2, r5
 800bdd2:	4601      	mov	r1, r0
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdda:	f000 b817 	b.w	800be0c <_kill_r>
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d00a      	beq.n	800bdf8 <_raise_r+0x4c>
 800bde2:	1c59      	adds	r1, r3, #1
 800bde4:	d103      	bne.n	800bdee <_raise_r+0x42>
 800bde6:	2316      	movs	r3, #22
 800bde8:	6003      	str	r3, [r0, #0]
 800bdea:	2001      	movs	r0, #1
 800bdec:	e7e7      	b.n	800bdbe <_raise_r+0x12>
 800bdee:	2400      	movs	r4, #0
 800bdf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	4798      	blx	r3
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	e7e0      	b.n	800bdbe <_raise_r+0x12>

0800bdfc <raise>:
 800bdfc:	4b02      	ldr	r3, [pc, #8]	; (800be08 <raise+0xc>)
 800bdfe:	4601      	mov	r1, r0
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	f7ff bfd3 	b.w	800bdac <_raise_r>
 800be06:	bf00      	nop
 800be08:	20000028 	.word	0x20000028

0800be0c <_kill_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	4d07      	ldr	r5, [pc, #28]	; (800be2c <_kill_r+0x20>)
 800be10:	2300      	movs	r3, #0
 800be12:	4604      	mov	r4, r0
 800be14:	4608      	mov	r0, r1
 800be16:	4611      	mov	r1, r2
 800be18:	602b      	str	r3, [r5, #0]
 800be1a:	f7f5 fd0f 	bl	800183c <_kill>
 800be1e:	1c43      	adds	r3, r0, #1
 800be20:	d102      	bne.n	800be28 <_kill_r+0x1c>
 800be22:	682b      	ldr	r3, [r5, #0]
 800be24:	b103      	cbz	r3, 800be28 <_kill_r+0x1c>
 800be26:	6023      	str	r3, [r4, #0]
 800be28:	bd38      	pop	{r3, r4, r5, pc}
 800be2a:	bf00      	nop
 800be2c:	200008bc 	.word	0x200008bc

0800be30 <_getpid_r>:
 800be30:	f7f5 bcfc 	b.w	800182c <_getpid>

0800be34 <__sread>:
 800be34:	b510      	push	{r4, lr}
 800be36:	460c      	mov	r4, r1
 800be38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be3c:	f000 f894 	bl	800bf68 <_read_r>
 800be40:	2800      	cmp	r0, #0
 800be42:	bfab      	itete	ge
 800be44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be46:	89a3      	ldrhlt	r3, [r4, #12]
 800be48:	181b      	addge	r3, r3, r0
 800be4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be4e:	bfac      	ite	ge
 800be50:	6563      	strge	r3, [r4, #84]	; 0x54
 800be52:	81a3      	strhlt	r3, [r4, #12]
 800be54:	bd10      	pop	{r4, pc}

0800be56 <__swrite>:
 800be56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5a:	461f      	mov	r7, r3
 800be5c:	898b      	ldrh	r3, [r1, #12]
 800be5e:	05db      	lsls	r3, r3, #23
 800be60:	4605      	mov	r5, r0
 800be62:	460c      	mov	r4, r1
 800be64:	4616      	mov	r6, r2
 800be66:	d505      	bpl.n	800be74 <__swrite+0x1e>
 800be68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be6c:	2302      	movs	r3, #2
 800be6e:	2200      	movs	r2, #0
 800be70:	f000 f868 	bl	800bf44 <_lseek_r>
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be7e:	81a3      	strh	r3, [r4, #12]
 800be80:	4632      	mov	r2, r6
 800be82:	463b      	mov	r3, r7
 800be84:	4628      	mov	r0, r5
 800be86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be8a:	f000 b817 	b.w	800bebc <_write_r>

0800be8e <__sseek>:
 800be8e:	b510      	push	{r4, lr}
 800be90:	460c      	mov	r4, r1
 800be92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be96:	f000 f855 	bl	800bf44 <_lseek_r>
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	89a3      	ldrh	r3, [r4, #12]
 800be9e:	bf15      	itete	ne
 800bea0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800beaa:	81a3      	strheq	r3, [r4, #12]
 800beac:	bf18      	it	ne
 800beae:	81a3      	strhne	r3, [r4, #12]
 800beb0:	bd10      	pop	{r4, pc}

0800beb2 <__sclose>:
 800beb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb6:	f000 b813 	b.w	800bee0 <_close_r>
	...

0800bebc <_write_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4d07      	ldr	r5, [pc, #28]	; (800bedc <_write_r+0x20>)
 800bec0:	4604      	mov	r4, r0
 800bec2:	4608      	mov	r0, r1
 800bec4:	4611      	mov	r1, r2
 800bec6:	2200      	movs	r2, #0
 800bec8:	602a      	str	r2, [r5, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	f7f5 fced 	bl	80018aa <_write>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d102      	bne.n	800beda <_write_r+0x1e>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	b103      	cbz	r3, 800beda <_write_r+0x1e>
 800bed8:	6023      	str	r3, [r4, #0]
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	200008bc 	.word	0x200008bc

0800bee0 <_close_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	4d06      	ldr	r5, [pc, #24]	; (800befc <_close_r+0x1c>)
 800bee4:	2300      	movs	r3, #0
 800bee6:	4604      	mov	r4, r0
 800bee8:	4608      	mov	r0, r1
 800beea:	602b      	str	r3, [r5, #0]
 800beec:	f7f5 fcf9 	bl	80018e2 <_close>
 800bef0:	1c43      	adds	r3, r0, #1
 800bef2:	d102      	bne.n	800befa <_close_r+0x1a>
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	b103      	cbz	r3, 800befa <_close_r+0x1a>
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	bd38      	pop	{r3, r4, r5, pc}
 800befc:	200008bc 	.word	0x200008bc

0800bf00 <_fstat_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	4d07      	ldr	r5, [pc, #28]	; (800bf20 <_fstat_r+0x20>)
 800bf04:	2300      	movs	r3, #0
 800bf06:	4604      	mov	r4, r0
 800bf08:	4608      	mov	r0, r1
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	602b      	str	r3, [r5, #0]
 800bf0e:	f7f5 fcf4 	bl	80018fa <_fstat>
 800bf12:	1c43      	adds	r3, r0, #1
 800bf14:	d102      	bne.n	800bf1c <_fstat_r+0x1c>
 800bf16:	682b      	ldr	r3, [r5, #0]
 800bf18:	b103      	cbz	r3, 800bf1c <_fstat_r+0x1c>
 800bf1a:	6023      	str	r3, [r4, #0]
 800bf1c:	bd38      	pop	{r3, r4, r5, pc}
 800bf1e:	bf00      	nop
 800bf20:	200008bc 	.word	0x200008bc

0800bf24 <_isatty_r>:
 800bf24:	b538      	push	{r3, r4, r5, lr}
 800bf26:	4d06      	ldr	r5, [pc, #24]	; (800bf40 <_isatty_r+0x1c>)
 800bf28:	2300      	movs	r3, #0
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	4608      	mov	r0, r1
 800bf2e:	602b      	str	r3, [r5, #0]
 800bf30:	f7f5 fcf3 	bl	800191a <_isatty>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d102      	bne.n	800bf3e <_isatty_r+0x1a>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	b103      	cbz	r3, 800bf3e <_isatty_r+0x1a>
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}
 800bf40:	200008bc 	.word	0x200008bc

0800bf44 <_lseek_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4d07      	ldr	r5, [pc, #28]	; (800bf64 <_lseek_r+0x20>)
 800bf48:	4604      	mov	r4, r0
 800bf4a:	4608      	mov	r0, r1
 800bf4c:	4611      	mov	r1, r2
 800bf4e:	2200      	movs	r2, #0
 800bf50:	602a      	str	r2, [r5, #0]
 800bf52:	461a      	mov	r2, r3
 800bf54:	f7f5 fcec 	bl	8001930 <_lseek>
 800bf58:	1c43      	adds	r3, r0, #1
 800bf5a:	d102      	bne.n	800bf62 <_lseek_r+0x1e>
 800bf5c:	682b      	ldr	r3, [r5, #0]
 800bf5e:	b103      	cbz	r3, 800bf62 <_lseek_r+0x1e>
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	bd38      	pop	{r3, r4, r5, pc}
 800bf64:	200008bc 	.word	0x200008bc

0800bf68 <_read_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	4d07      	ldr	r5, [pc, #28]	; (800bf88 <_read_r+0x20>)
 800bf6c:	4604      	mov	r4, r0
 800bf6e:	4608      	mov	r0, r1
 800bf70:	4611      	mov	r1, r2
 800bf72:	2200      	movs	r2, #0
 800bf74:	602a      	str	r2, [r5, #0]
 800bf76:	461a      	mov	r2, r3
 800bf78:	f7f5 fc7a 	bl	8001870 <_read>
 800bf7c:	1c43      	adds	r3, r0, #1
 800bf7e:	d102      	bne.n	800bf86 <_read_r+0x1e>
 800bf80:	682b      	ldr	r3, [r5, #0]
 800bf82:	b103      	cbz	r3, 800bf86 <_read_r+0x1e>
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	bd38      	pop	{r3, r4, r5, pc}
 800bf88:	200008bc 	.word	0x200008bc

0800bf8c <_init>:
 800bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8e:	bf00      	nop
 800bf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf92:	bc08      	pop	{r3}
 800bf94:	469e      	mov	lr, r3
 800bf96:	4770      	bx	lr

0800bf98 <_fini>:
 800bf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9a:	bf00      	nop
 800bf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9e:	bc08      	pop	{r3}
 800bfa0:	469e      	mov	lr, r3
 800bfa2:	4770      	bx	lr
