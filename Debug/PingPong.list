
PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000114c  0800aba8  0800aba8  0001aba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcf4  0800bcf4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcf4  0800bcf4  0001bcf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcfc  0800bcfc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcfc  0800bcfc  0001bcfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd00  0800bd00  0001bd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bd04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000624  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000804  20000804  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134b9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003032  00000000  00000000  000336c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00036700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  000378d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cba  00000000  00000000  00038958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a00  00000000  00000000  0005c612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d057f  00000000  00000000  00073012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143591  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b04  00000000  00000000  001435e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab90 	.word	0x0800ab90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ab90 	.word	0x0800ab90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_DMA_Init+0x3c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <MX_DMA_Init+0x3c>)
 8000efc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_DMA_Init+0x3c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 ffa1 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f18:	200f      	movs	r0, #15
 8000f1a:	f000 ffba 	bl	8001e92 <HAL_NVIC_EnableIRQ>

}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	4b71      	ldr	r3, [pc, #452]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a70      	ldr	r2, [pc, #448]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f4c:	f043 0310 	orr.w	r3, r3, #16
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b6e      	ldr	r3, [pc, #440]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	4b6a      	ldr	r3, [pc, #424]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a69      	ldr	r2, [pc, #420]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b67      	ldr	r3, [pc, #412]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b63      	ldr	r3, [pc, #396]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a62      	ldr	r2, [pc, #392]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b60      	ldr	r3, [pc, #384]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b5c      	ldr	r3, [pc, #368]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a5b      	ldr	r2, [pc, #364]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b59      	ldr	r3, [pc, #356]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b55      	ldr	r3, [pc, #340]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a54      	ldr	r2, [pc, #336]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b52      	ldr	r3, [pc, #328]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a4d      	ldr	r2, [pc, #308]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b4b      	ldr	r3, [pc, #300]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	4848      	ldr	r0, [pc, #288]	; (8001110 <MX_GPIO_Init+0x1e4>)
 8000ff0:	f001 fca6 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RES_Pin|LCD_CMD_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
 8000ffa:	4846      	ldr	r0, [pc, #280]	; (8001114 <MX_GPIO_Init+0x1e8>)
 8000ffc:	f001 fca0 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001006:	4844      	ldr	r0, [pc, #272]	; (8001118 <MX_GPIO_Init+0x1ec>)
 8001008:	f001 fc9a 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	483b      	ldr	r0, [pc, #236]	; (8001110 <MX_GPIO_Init+0x1e4>)
 8001024:	f001 faf0 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800102c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4837      	ldr	r0, [pc, #220]	; (800111c <MX_GPIO_Init+0x1f0>)
 800103e:	f001 fae3 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B_START_Pin|B_VIEW_Pin|B_ENC_Pin;
 8001042:	230e      	movs	r3, #14
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001046:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4831      	ldr	r0, [pc, #196]	; (800111c <MX_GPIO_Init+0x1f0>)
 8001058:	f001 fad6 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800105c:	2304      	movs	r3, #4
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4829      	ldr	r0, [pc, #164]	; (8001114 <MX_GPIO_Init+0x1e8>)
 8001070:	f001 faca 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_CMD_Pin|SPI2_CS_Pin;
 8001074:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4821      	ldr	r0, [pc, #132]	; (8001114 <MX_GPIO_Init+0x1e8>)
 800108e:	f001 fabb 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001092:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <MX_GPIO_Init+0x1ec>)
 80010ac:	f001 faac 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80010b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4815      	ldr	r0, [pc, #84]	; (800111c <MX_GPIO_Init+0x1f0>)
 80010c6:	f001 fa9f 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80010ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010dc:	230a      	movs	r3, #10
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	480d      	ldr	r0, [pc, #52]	; (800111c <MX_GPIO_Init+0x1f0>)
 80010e8:	f001 fa8e 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010ec:	2320      	movs	r3, #32
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <MX_GPIO_Init+0x1ec>)
 8001100:	f001 fa82 	bl	8002608 <HAL_GPIO_Init>

}
 8001104:	bf00      	nop
 8001106:	3730      	adds	r7, #48	; 0x30
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020800 	.word	0x40020800
 8001114:	40020400 	.word	0x40020400
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40020000 	.word	0x40020000

08001120 <HAL_I2C_MspInit>:
  /* USER CODE END I2C1_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <HAL_I2C_MspInit+0xa4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d13b      	bne.n	80011ba <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115e:	23c0      	movs	r3, #192	; 0xc0
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001162:	2312      	movs	r3, #18
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116e:	2304      	movs	r3, #4
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4814      	ldr	r0, [pc, #80]	; (80011cc <HAL_I2C_MspInit+0xac>)
 800117a:	f001 fa45 	bl	8002608 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	201f      	movs	r0, #31
 80011a0:	f000 fe5b 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011a4:	201f      	movs	r0, #31
 80011a6:	f000 fe74 	bl	8001e92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2020      	movs	r0, #32
 80011b0:	f000 fe53 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011b4:	2020      	movs	r0, #32
 80011b6:	f000 fe6c 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40005400 	.word	0x40005400
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020400 	.word	0x40020400

080011d0 <f_write_data>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */
void f_write_data()
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
	char txt[20];

	f_lcd_ClearAll();
 80011d6:	f006 fa49 	bl	800766c <f_lcd_ClearAll>

	sprintf(txt, "Vel: %2d", motorVel);
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <f_write_data+0xd8>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4932      	ldr	r1, [pc, #200]	; (80012ac <f_write_data+0xdc>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f007 fa59 	bl	800869c <siprintf>
	f_lcd_WriteTxt(0, 0, txt, &test2);
 80011ea:	1d3a      	adds	r2, r7, #4
 80011ec:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <f_write_data+0xe0>)
 80011ee:	2100      	movs	r1, #0
 80011f0:	2000      	movs	r0, #0
 80011f2:	f006 fa52 	bl	800769a <f_lcd_WriteTxt>

	bus = f_ina219_GetBusVoltageInMilis()/100;
 80011f6:	f006 f9af 	bl	8007558 <f_ina219_GetBusVoltageInMilis>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a2d      	ldr	r2, [pc, #180]	; (80012b4 <f_write_data+0xe4>)
 80011fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001202:	1152      	asrs	r2, r2, #5
 8001204:	17db      	asrs	r3, r3, #31
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	b21b      	sxth	r3, r3
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <f_write_data+0xe8>)
 800120e:	801a      	strh	r2, [r3, #0]
	power = f_ina219_GetPowerInMilis()/10;
 8001210:	f006 f97a 	bl	8007508 <f_ina219_GetPowerInMilis>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <f_write_data+0xec>)
 800121a:	fba3 2302 	umull	r2, r3, r3, r2
 800121e:	08db      	lsrs	r3, r3, #3
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <f_write_data+0xf0>)
 8001224:	801a      	strh	r2, [r3, #0]

	sprintf(txt, "Bus: %2d.%1d", bus/10, bus%10);
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <f_write_data+0xe8>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	4a24      	ldr	r2, [pc, #144]	; (80012bc <f_write_data+0xec>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	08db      	lsrs	r3, r3, #3
 8001232:	b29b      	uxth	r3, r3
 8001234:	461c      	mov	r4, r3
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <f_write_data+0xe8>)
 8001238:	881a      	ldrh	r2, [r3, #0]
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <f_write_data+0xec>)
 800123c:	fba3 1302 	umull	r1, r3, r3, r2
 8001240:	08d9      	lsrs	r1, r3, #3
 8001242:	460b      	mov	r3, r1
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	1d38      	adds	r0, r7, #4
 8001250:	4622      	mov	r2, r4
 8001252:	491c      	ldr	r1, [pc, #112]	; (80012c4 <f_write_data+0xf4>)
 8001254:	f007 fa22 	bl	800869c <siprintf>
	f_lcd_WriteTxt(0, 16, txt, &test2);
 8001258:	1d3a      	adds	r2, r7, #4
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <f_write_data+0xe0>)
 800125c:	2110      	movs	r1, #16
 800125e:	2000      	movs	r0, #0
 8001260:	f006 fa1b 	bl	800769a <f_lcd_WriteTxt>

	sprintf(txt, "Pow: %2d.%2d", power/100, power%100);
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <f_write_data+0xf0>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <f_write_data+0xe4>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	b29b      	uxth	r3, r3
 8001272:	461c      	mov	r4, r3
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <f_write_data+0xf0>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <f_write_data+0xe4>)
 800127a:	fba2 1203 	umull	r1, r2, r2, r3
 800127e:	0952      	lsrs	r2, r2, #5
 8001280:	2164      	movs	r1, #100	; 0x64
 8001282:	fb01 f202 	mul.w	r2, r1, r2
 8001286:	1a9b      	subs	r3, r3, r2
 8001288:	b29b      	uxth	r3, r3
 800128a:	1d38      	adds	r0, r7, #4
 800128c:	4622      	mov	r2, r4
 800128e:	490e      	ldr	r1, [pc, #56]	; (80012c8 <f_write_data+0xf8>)
 8001290:	f007 fa04 	bl	800869c <siprintf>
	f_lcd_WriteTxt(0, 32, txt, &test2);
 8001294:	1d3a      	adds	r2, r7, #4
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <f_write_data+0xe0>)
 8001298:	2120      	movs	r1, #32
 800129a:	2000      	movs	r0, #0
 800129c:	f006 f9fd 	bl	800769a <f_lcd_WriteTxt>

}
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	20000000 	.word	0x20000000
 80012ac:	0800aba8 	.word	0x0800aba8
 80012b0:	0800b910 	.word	0x0800b910
 80012b4:	51eb851f 	.word	0x51eb851f
 80012b8:	20000250 	.word	0x20000250
 80012bc:	cccccccd 	.word	0xcccccccd
 80012c0:	20000252 	.word	0x20000252
 80012c4:	0800abb4 	.word	0x0800abb4
 80012c8:	0800abc4 	.word	0x0800abc4

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d2:	f000 fc51 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d6:	f000 f849 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012da:	f7ff fe27 	bl	8000f2c <MX_GPIO_Init>
  MX_DMA_Init();
 80012de:	f7ff fe05 	bl	8000eec <MX_DMA_Init>
  MX_TIM3_Init();
 80012e2:	f000 fa97 	bl	8001814 <MX_TIM3_Init>
  MX_TIM10_Init();
 80012e6:	f000 fae9 	bl	80018bc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

   f_work_motor_InitTimer();
 80012ea:	f006 fcc3 	bl	8007c74 <f_work_motor_InitTimer>

   f_ina219_Init();
 80012ee:	f006 f8e4 	bl	80074ba <f_ina219_Init>
   f_lcd_Init();
 80012f2:	f006 f963 	bl	80075bc <f_lcd_Init>

   f_work_motorSetVelocity(motorVel);
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <main+0x98>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f006 fd16 	bl	8007d2c <f_work_motorSetVelocity>
   f_work_motorSet(1);
 8001300:	2001      	movs	r0, #1
 8001302:	f006 fcfb 	bl	8007cfc <f_work_motorSet>

   f_write_data();
 8001306:	f7ff ff63 	bl	80011d0 <f_write_data>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if((HAL_GetTick() - timerCTRL) >= 30)
 800130a:	f000 fc9b 	bl	8001c44 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b1d      	cmp	r3, #29
 8001316:	d917      	bls.n	8001348 <main+0x7c>
	  {
		  motorVel = (motorVel + 1) % 100;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <main+0x98>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <main+0x9c>)
 8001320:	fb82 1203 	smull	r1, r2, r2, r3
 8001324:	1151      	asrs	r1, r2, #5
 8001326:	17da      	asrs	r2, r3, #31
 8001328:	1a8a      	subs	r2, r1, r2
 800132a:	2164      	movs	r1, #100	; 0x64
 800132c:	fb01 f202 	mul.w	r2, r1, r2
 8001330:	1a9a      	subs	r2, r3, r2
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <main+0x98>)
 8001336:	701a      	strb	r2, [r3, #0]
		  f_work_motorSetVelocity(motorVel);
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <main+0x98>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f006 fcf5 	bl	8007d2c <f_work_motorSetVelocity>

		  timerCTRL = HAL_GetTick();
 8001342:	f000 fc7f 	bl	8001c44 <HAL_GetTick>
 8001346:	6038      	str	r0, [r7, #0]
	  }

	 if((HAL_GetTick() - timerLCD) >= 80)
 8001348:	f000 fc7c 	bl	8001c44 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b4f      	cmp	r3, #79	; 0x4f
 8001354:	d9d9      	bls.n	800130a <main+0x3e>
	 {
		 f_write_data();
 8001356:	f7ff ff3b 	bl	80011d0 <f_write_data>

		 timerLCD = HAL_GetTick();
 800135a:	f000 fc73 	bl	8001c44 <HAL_GetTick>
 800135e:	6078      	str	r0, [r7, #4]
	  if((HAL_GetTick() - timerCTRL) >= 30)
 8001360:	e7d3      	b.n	800130a <main+0x3e>
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000
 8001368:	51eb851f 	.word	0x51eb851f

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	; 0x50
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	2230      	movs	r2, #48	; 0x30
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f006 fd1c 	bl	8007db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	4b28      	ldr	r3, [pc, #160]	; (8001438 <SystemClock_Config+0xcc>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	4a27      	ldr	r2, [pc, #156]	; (8001438 <SystemClock_Config+0xcc>)
 800139a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139e:	6413      	str	r3, [r2, #64]	; 0x40
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <SystemClock_Config+0xcc>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <SystemClock_Config+0xd0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a21      	ldr	r2, [pc, #132]	; (800143c <SystemClock_Config+0xd0>)
 80013b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <SystemClock_Config+0xd0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d2:	2302      	movs	r3, #2
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013dc:	2308      	movs	r3, #8
 80013de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ea:	2307      	movs	r3, #7
 80013ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 ff2e 	bl	8005254 <HAL_RCC_OscConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013fe:	f000 f81f 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	230f      	movs	r3, #15
 8001404:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001406:	2302      	movs	r3, #2
 8001408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800140e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001412:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2105      	movs	r1, #5
 8001420:	4618      	mov	r0, r3
 8001422:	f004 f98f 	bl	8005744 <HAL_RCC_ClockConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800142c:	f000 f808 	bl	8001440 <Error_Handler>
  }
}
 8001430:	bf00      	nop
 8001432:	3750      	adds	r7, #80	; 0x50
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40007000 	.word	0x40007000

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <HAL_SPI_MspInit>:
  /* USER CODE END SPI2_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a3f      	ldr	r2, [pc, #252]	; (8001568 <HAL_SPI_MspInit+0x11c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d177      	bne.n	800155e <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <HAL_SPI_MspInit+0x120>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a3d      	ldr	r2, [pc, #244]	; (800156c <HAL_SPI_MspInit+0x120>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <HAL_SPI_MspInit+0x120>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <HAL_SPI_MspInit+0x120>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a36      	ldr	r2, [pc, #216]	; (800156c <HAL_SPI_MspInit+0x120>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <HAL_SPI_MspInit+0x120>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b30      	ldr	r3, [pc, #192]	; (800156c <HAL_SPI_MspInit+0x120>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <HAL_SPI_MspInit+0x120>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_SPI_MspInit+0x120>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014c2:	2308      	movs	r3, #8
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d2:	2305      	movs	r3, #5
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4824      	ldr	r0, [pc, #144]	; (8001570 <HAL_SPI_MspInit+0x124>)
 80014de:	f001 f893 	bl	8002608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f4:	2305      	movs	r3, #5
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	481d      	ldr	r0, [pc, #116]	; (8001574 <HAL_SPI_MspInit+0x128>)
 8001500:	f001 f882 	bl	8002608 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 8001506:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_SPI_MspInit+0x130>)
 8001508:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 8001512:	2240      	movs	r2, #64	; 0x40
 8001514:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 800151e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001522:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001542:	480d      	ldr	r0, [pc, #52]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 8001544:	f000 fcc0 	bl	8001ec8 <HAL_DMA_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 800154e:	f7ff ff77 	bl	8001440 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 8001556:	649a      	str	r2, [r3, #72]	; 0x48
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_SPI_MspInit+0x12c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40003800 	.word	0x40003800
 800156c:	40023800 	.word	0x40023800
 8001570:	40020800 	.word	0x40020800
 8001574:	40020400 	.word	0x40020400
 8001578:	200002ac 	.word	0x200002ac
 800157c:	40026070 	.word	0x40026070

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <HAL_MspInit+0x4c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015be:	2007      	movs	r0, #7
 80015c0:	f000 fc40 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 fafe 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  f_lcd_SendFrameCallback();
 8001620:	f006 f93c 	bl	800789c <f_lcd_SendFrameCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <DMA1_Stream4_IRQHandler+0x10>)
 800162e:	f000 fd73 	bl	8002118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002ac 	.word	0x200002ac

0800163c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <I2C1_EV_IRQHandler+0x10>)
 8001642:	f001 fdff 	bl	8003244 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200001fc 	.word	0x200001fc

08001650 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <I2C1_ER_IRQHandler+0x10>)
 8001656:	f001 ff66 	bl	8003526 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200001fc 	.word	0x200001fc

08001664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
	return 1;
 8001668:	2301      	movs	r3, #1
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_kill>:

int _kill(int pid, int sig)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800167e:	f006 fb71 	bl	8007d64 <__errno>
 8001682:	4603      	mov	r3, r0
 8001684:	2216      	movs	r2, #22
 8001686:	601a      	str	r2, [r3, #0]
	return -1;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_exit>:

void _exit (int status)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ffe7 	bl	8001674 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016a6:	e7fe      	b.n	80016a6 <_exit+0x12>

080016a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	e00a      	b.n	80016d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ba:	f3af 8000 	nop.w
 80016be:	4601      	mov	r1, r0
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	60ba      	str	r2, [r7, #8]
 80016c6:	b2ca      	uxtb	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbf0      	blt.n	80016ba <_read+0x12>
	}

return len;
 80016d8:	687b      	ldr	r3, [r7, #4]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e009      	b.n	8001708 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	60ba      	str	r2, [r7, #8]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	dbf1      	blt.n	80016f4 <_write+0x12>
	}
	return len;
 8001710:	687b      	ldr	r3, [r7, #4]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_close>:

int _close(int file)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	return -1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001742:	605a      	str	r2, [r3, #4]
	return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_isatty>:

int _isatty(int file)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	return 1;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
	return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <_sbrk+0x5c>)
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <_sbrk+0x60>)
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <_sbrk+0x64>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <_sbrk+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d207      	bcs.n	80017c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b4:	f006 fad6 	bl	8007d64 <__errno>
 80017b8:	4603      	mov	r3, r0
 80017ba:	220c      	movs	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	e009      	b.n	80017d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <_sbrk+0x64>)
 80017d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20020000 	.word	0x20020000
 80017e4:	00000400 	.word	0x00000400
 80017e8:	2000030c 	.word	0x2000030c
 80017ec:	20000808 	.word	0x20000808

080017f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <SystemInit+0x20>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <SystemInit+0x20>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <MX_TIM3_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	; 0x30
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	2224      	movs	r2, #36	; 0x24
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f006 fac8 	bl	8007db8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <MX_TIM3_Init+0xa0>)
 8001832:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <MX_TIM3_Init+0xa4>)
 8001834:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <MX_TIM3_Init+0xa0>)
 8001838:	22a8      	movs	r2, #168	; 0xa8
 800183a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <MX_TIM3_Init+0xa0>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <MX_TIM3_Init+0xa0>)
 8001844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001848:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184a:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <MX_TIM3_Init+0xa0>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <MX_TIM3_Init+0xa0>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001856:	2301      	movs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800185e:	2301      	movs	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800186e:	2301      	movs	r3, #1
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	4619      	mov	r1, r3
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <MX_TIM3_Init+0xa0>)
 8001882:	f004 ff76 	bl	8006772 <HAL_TIM_Encoder_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800188c:	f7ff fdd8 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_TIM3_Init+0xa0>)
 800189e:	f005 fd0d 	bl	80072bc <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018a8:	f7ff fdca 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	3730      	adds	r7, #48	; 0x30
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000310 	.word	0x20000310
 80018b8:	40000400 	.word	0x40000400

080018bc <MX_TIM10_Init>:
  HAL_TIM_MspPostInit(&htim9);

}
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80018c2:	463b      	mov	r3, r7
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <MX_TIM10_Init+0x88>)
 80018d0:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <MX_TIM10_Init+0x8c>)
 80018d2:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168;
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <MX_TIM10_Init+0x88>)
 80018d6:	22a8      	movs	r2, #168	; 0xa8
 80018d8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <MX_TIM10_Init+0x88>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <MX_TIM10_Init+0x88>)
 80018e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <MX_TIM10_Init+0x88>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <MX_TIM10_Init+0x88>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80018f4:	4813      	ldr	r0, [pc, #76]	; (8001944 <MX_TIM10_Init+0x88>)
 80018f6:	f004 fd0d 	bl	8006314 <HAL_TIM_Base_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8001900:	f7ff fd9e 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8001904:	480f      	ldr	r0, [pc, #60]	; (8001944 <MX_TIM10_Init+0x88>)
 8001906:	f004 fedb 	bl	80066c0 <HAL_TIM_IC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8001910:	f7ff fd96 	bl	8001440 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001914:	2300      	movs	r3, #0
 8001916:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001918:	2301      	movs	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	4619      	mov	r1, r3
 800192a:	4806      	ldr	r0, [pc, #24]	; (8001944 <MX_TIM10_Init+0x88>)
 800192c:	f004 ffc7 	bl	80068be <HAL_TIM_IC_ConfigChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 8001936:	f7ff fd83 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200003a0 	.word	0x200003a0
 8001948:	40014400 	.word	0x40014400

0800194c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12b      	bne.n	80019c6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_P_Pin|ENC_M_Pin;
 80019a6:	23c0      	movs	r3, #192	; 0xc0
 80019a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019b6:	2302      	movs	r3, #2
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80019c2:	f000 fe21 	bl	8002608 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	; 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40000400 	.word	0x40000400
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000

080019dc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <HAL_TIM_PWM_MspInit+0x3c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10d      	bne.n	8001a0a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_TIM_PWM_MspInit+0x40>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_TIM_PWM_MspInit+0x40>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_TIM_PWM_MspInit+0x40>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40014000 	.word	0x40014000
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM10)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <HAL_TIM_Base_MspInit+0x84>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12c      	bne.n	8001a9c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_TIM_Base_MspInit+0x88>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_TIM_Base_MspInit+0x88>)
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_TIM_Base_MspInit+0x88>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_TIM_Base_MspInit+0x88>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <HAL_TIM_Base_MspInit+0x88>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_TIM_Base_MspInit+0x88>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = SENSOR_IC_Pin;
 8001a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSOR_IC_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <HAL_TIM_Base_MspInit+0x8c>)
 8001a98:	f000 fdb6 	bl	8002608 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40014400 	.word	0x40014400
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020400 	.word	0x40020400

08001ab0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_TIM_MspPostInit+0x68>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d11d      	bne.n	8001b0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aee:	2320      	movs	r3, #32
 8001af0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001afe:	2303      	movs	r3, #3
 8001b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_TIM_MspPostInit+0x70>)
 8001b0a:	f000 fd7d 	bl	8002608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40014000 	.word	0x40014000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40021000 	.word	0x40021000

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b40:	4c0b      	ldr	r4, [pc, #44]	; (8001b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b4e:	f7ff fe4f 	bl	80017f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f006 f90d 	bl	8007d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7ff fbb9 	bl	80012cc <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b68:	0800bd04 	.word	0x0800bd04
  ldr r2, =_sbss
 8001b6c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b70:	20000804 	.word	0x20000804

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f94f 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f808 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fce8 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f967 	bl	8001eae <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f000 f92f 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000004 	.word	0x20000004
 8001c14:	2000000c 	.word	0x2000000c
 8001c18:	20000008 	.word	0x20000008

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	2000000c 	.word	0x2000000c
 8001c40:	200003e8 	.word	0x200003e8

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	200003e8 	.word	0x200003e8

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000000c 	.word	0x2000000c

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	; (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff29 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff3e 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff31 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff feb6 	bl	8001c44 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e099      	b.n	8002018 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f04:	e00f      	b.n	8001f26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f06:	f7ff fe9d 	bl	8001c44 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d908      	bls.n	8001f26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2220      	movs	r2, #32
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e078      	b.n	8002018 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e8      	bne.n	8001f06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <HAL_DMA_Init+0x158>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d107      	bne.n	8001f90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f023 0307 	bic.w	r3, r3, #7
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d117      	bne.n	8001fea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00e      	beq.n	8001fea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fa9f 	bl	8002510 <DMA_CheckFifoParam>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e016      	b.n	8002018 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fa56 	bl	80024a4 <DMA_CalcBaseAndBitshift>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	223f      	movs	r2, #63	; 0x3f
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	f010803f 	.word	0xf010803f

08002024 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_DMA_Start_IT+0x26>
 8002046:	2302      	movs	r3, #2
 8002048:	e040      	b.n	80020cc <HAL_DMA_Start_IT+0xa8>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d12f      	bne.n	80020be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2202      	movs	r2, #2
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f9e8 	bl	8002448 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	223f      	movs	r2, #63	; 0x3f
 800207e:	409a      	lsls	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0216 	orr.w	r2, r2, #22
 8002092:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0208 	orr.w	r2, r2, #8
 80020aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e005      	b.n	80020ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
 80020c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d004      	beq.n	80020f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00c      	b.n	800210c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2205      	movs	r2, #5
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002124:	4b8e      	ldr	r3, [pc, #568]	; (8002360 <HAL_DMA_IRQHandler+0x248>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a8e      	ldr	r2, [pc, #568]	; (8002364 <HAL_DMA_IRQHandler+0x24c>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0a9b      	lsrs	r3, r3, #10
 8002130:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2208      	movs	r2, #8
 8002144:	409a      	lsls	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01a      	beq.n	8002184 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d013      	beq.n	8002184 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0204 	bic.w	r2, r2, #4
 800216a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	2208      	movs	r2, #8
 8002172:	409a      	lsls	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	2201      	movs	r2, #1
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d012      	beq.n	80021ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	2201      	movs	r2, #1
 80021a8:	409a      	lsls	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b2:	f043 0202 	orr.w	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	2204      	movs	r2, #4
 80021c0:	409a      	lsls	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d012      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00b      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	2204      	movs	r2, #4
 80021de:	409a      	lsls	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	f043 0204 	orr.w	r2, r3, #4
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	2210      	movs	r2, #16
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d043      	beq.n	8002288 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d03c      	beq.n	8002288 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	2210      	movs	r2, #16
 8002214:	409a      	lsls	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d018      	beq.n	800225a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d108      	bne.n	8002248 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d024      	beq.n	8002288 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4798      	blx	r3
 8002246:	e01f      	b.n	8002288 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01b      	beq.n	8002288 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4798      	blx	r3
 8002258:	e016      	b.n	8002288 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d107      	bne.n	8002278 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0208 	bic.w	r2, r2, #8
 8002276:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	2220      	movs	r2, #32
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 808f 	beq.w	80023b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8087 	beq.w	80023b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	2220      	movs	r2, #32
 80022b0:	409a      	lsls	r2, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d136      	bne.n	8002330 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0216 	bic.w	r2, r2, #22
 80022d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d103      	bne.n	80022f2 <HAL_DMA_IRQHandler+0x1da>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0208 	bic.w	r2, r2, #8
 8002300:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	223f      	movs	r2, #63	; 0x3f
 8002308:	409a      	lsls	r2, r3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002322:	2b00      	cmp	r3, #0
 8002324:	d07e      	beq.n	8002424 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4798      	blx	r3
        }
        return;
 800232e:	e079      	b.n	8002424 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01d      	beq.n	800237a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10d      	bne.n	8002368 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	2b00      	cmp	r3, #0
 8002352:	d031      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
 800235c:	e02c      	b.n	80023b8 <HAL_DMA_IRQHandler+0x2a0>
 800235e:	bf00      	nop
 8002360:	20000004 	.word	0x20000004
 8002364:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d023      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
 8002378:	e01e      	b.n	80023b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10f      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0210 	bic.w	r2, r2, #16
 8002396:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d032      	beq.n	8002426 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d022      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2205      	movs	r2, #5
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	3301      	adds	r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d307      	bcc.n	8002400 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f2      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x2cc>
 80023fe:	e000      	b.n	8002402 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002400:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	4798      	blx	r3
 8002422:	e000      	b.n	8002426 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002424:	bf00      	nop
    }
  }
}
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800243a:	b2db      	uxtb	r3, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002464:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d108      	bne.n	8002488 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002486:	e007      	b.n	8002498 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	3b10      	subs	r3, #16
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <DMA_CalcBaseAndBitshift+0x64>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <DMA_CalcBaseAndBitshift+0x68>)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d909      	bls.n	80024e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	1d1a      	adds	r2, r3, #4
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	659a      	str	r2, [r3, #88]	; 0x58
 80024e4:	e007      	b.n	80024f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	aaaaaaab 	.word	0xaaaaaaab
 800250c:	0800abec 	.word	0x0800abec

08002510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11f      	bne.n	800256a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d856      	bhi.n	80025de <DMA_CheckFifoParam+0xce>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <DMA_CheckFifoParam+0x28>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002549 	.word	0x08002549
 800253c:	0800255b 	.word	0x0800255b
 8002540:	08002549 	.word	0x08002549
 8002544:	080025df 	.word	0x080025df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d046      	beq.n	80025e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002558:	e043      	b.n	80025e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002562:	d140      	bne.n	80025e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002568:	e03d      	b.n	80025e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002572:	d121      	bne.n	80025b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d837      	bhi.n	80025ea <DMA_CheckFifoParam+0xda>
 800257a:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <DMA_CheckFifoParam+0x70>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	08002591 	.word	0x08002591
 8002584:	08002597 	.word	0x08002597
 8002588:	08002591 	.word	0x08002591
 800258c:	080025a9 	.word	0x080025a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e030      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d025      	beq.n	80025ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a6:	e022      	b.n	80025ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025b0:	d11f      	bne.n	80025f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025b6:	e01c      	b.n	80025f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d903      	bls.n	80025c6 <DMA_CheckFifoParam+0xb6>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d003      	beq.n	80025cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025c4:	e018      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      break;
 80025ca:	e015      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00e      	beq.n	80025f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e00b      	b.n	80025f6 <DMA_CheckFifoParam+0xe6>
      break;
 80025de:	bf00      	nop
 80025e0:	e00a      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e008      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e006      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e004      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
 80025f0:	e002      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
    }
  } 
  
  return status; 
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop

08002608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e16b      	b.n	80028fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002624:	2201      	movs	r2, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 815a 	bne.w	80028f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d005      	beq.n	800265a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	2b02      	cmp	r3, #2
 8002658:	d130      	bne.n	80026bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 0201 	and.w	r2, r3, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d017      	beq.n	80026f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d123      	bne.n	800274c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	08da      	lsrs	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3208      	adds	r2, #8
 800270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	08da      	lsrs	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3208      	adds	r2, #8
 8002746:	69b9      	ldr	r1, [r7, #24]
 8002748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0203 	and.w	r2, r3, #3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80b4 	beq.w	80028f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b60      	ldr	r3, [pc, #384]	; (8002914 <HAL_GPIO_Init+0x30c>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a5f      	ldr	r2, [pc, #380]	; (8002914 <HAL_GPIO_Init+0x30c>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b5d      	ldr	r3, [pc, #372]	; (8002914 <HAL_GPIO_Init+0x30c>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027aa:	4a5b      	ldr	r2, [pc, #364]	; (8002918 <HAL_GPIO_Init+0x310>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a52      	ldr	r2, [pc, #328]	; (800291c <HAL_GPIO_Init+0x314>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d02b      	beq.n	800282e <HAL_GPIO_Init+0x226>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a51      	ldr	r2, [pc, #324]	; (8002920 <HAL_GPIO_Init+0x318>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d025      	beq.n	800282a <HAL_GPIO_Init+0x222>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a50      	ldr	r2, [pc, #320]	; (8002924 <HAL_GPIO_Init+0x31c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01f      	beq.n	8002826 <HAL_GPIO_Init+0x21e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4f      	ldr	r2, [pc, #316]	; (8002928 <HAL_GPIO_Init+0x320>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d019      	beq.n	8002822 <HAL_GPIO_Init+0x21a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4e      	ldr	r2, [pc, #312]	; (800292c <HAL_GPIO_Init+0x324>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_GPIO_Init+0x216>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4d      	ldr	r2, [pc, #308]	; (8002930 <HAL_GPIO_Init+0x328>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00d      	beq.n	800281a <HAL_GPIO_Init+0x212>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4c      	ldr	r2, [pc, #304]	; (8002934 <HAL_GPIO_Init+0x32c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <HAL_GPIO_Init+0x20e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4b      	ldr	r2, [pc, #300]	; (8002938 <HAL_GPIO_Init+0x330>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_GPIO_Init+0x20a>
 800280e:	2307      	movs	r3, #7
 8002810:	e00e      	b.n	8002830 <HAL_GPIO_Init+0x228>
 8002812:	2308      	movs	r3, #8
 8002814:	e00c      	b.n	8002830 <HAL_GPIO_Init+0x228>
 8002816:	2306      	movs	r3, #6
 8002818:	e00a      	b.n	8002830 <HAL_GPIO_Init+0x228>
 800281a:	2305      	movs	r3, #5
 800281c:	e008      	b.n	8002830 <HAL_GPIO_Init+0x228>
 800281e:	2304      	movs	r3, #4
 8002820:	e006      	b.n	8002830 <HAL_GPIO_Init+0x228>
 8002822:	2303      	movs	r3, #3
 8002824:	e004      	b.n	8002830 <HAL_GPIO_Init+0x228>
 8002826:	2302      	movs	r3, #2
 8002828:	e002      	b.n	8002830 <HAL_GPIO_Init+0x228>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_GPIO_Init+0x228>
 800282e:	2300      	movs	r3, #0
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	f002 0203 	and.w	r2, r2, #3
 8002836:	0092      	lsls	r2, r2, #2
 8002838:	4093      	lsls	r3, r2
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002840:	4935      	ldr	r1, [pc, #212]	; (8002918 <HAL_GPIO_Init+0x310>)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	3302      	adds	r3, #2
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_GPIO_Init+0x334>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002872:	4a32      	ldr	r2, [pc, #200]	; (800293c <HAL_GPIO_Init+0x334>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002878:	4b30      	ldr	r3, [pc, #192]	; (800293c <HAL_GPIO_Init+0x334>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800289c:	4a27      	ldr	r2, [pc, #156]	; (800293c <HAL_GPIO_Init+0x334>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028a2:	4b26      	ldr	r3, [pc, #152]	; (800293c <HAL_GPIO_Init+0x334>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028c6:	4a1d      	ldr	r2, [pc, #116]	; (800293c <HAL_GPIO_Init+0x334>)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_GPIO_Init+0x334>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f0:	4a12      	ldr	r2, [pc, #72]	; (800293c <HAL_GPIO_Init+0x334>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3301      	adds	r3, #1
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	2b0f      	cmp	r3, #15
 8002900:	f67f ae90 	bls.w	8002624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
 8002918:	40013800 	.word	0x40013800
 800291c:	40020000 	.word	0x40020000
 8002920:	40020400 	.word	0x40020400
 8002924:	40020800 	.word	0x40020800
 8002928:	40020c00 	.word	0x40020c00
 800292c:	40021000 	.word	0x40021000
 8002930:	40021400 	.word	0x40021400
 8002934:	40021800 	.word	0x40021800
 8002938:	40021c00 	.word	0x40021c00
 800293c:	40013c00 	.word	0x40013c00

08002940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
 800294c:	4613      	mov	r3, r2
 800294e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002950:	787b      	ldrb	r3, [r7, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800295c:	e003      	b.n	8002966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	041a      	lsls	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e12b      	b.n	8002bde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fbc0 	bl	8001120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2224      	movs	r2, #36	; 0x24
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029d8:	f003 f8ac 	bl	8005b34 <HAL_RCC_GetPCLK1Freq>
 80029dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4a81      	ldr	r2, [pc, #516]	; (8002be8 <HAL_I2C_Init+0x274>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d807      	bhi.n	80029f8 <HAL_I2C_Init+0x84>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a80      	ldr	r2, [pc, #512]	; (8002bec <HAL_I2C_Init+0x278>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	bf94      	ite	ls
 80029f0:	2301      	movls	r3, #1
 80029f2:	2300      	movhi	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e006      	b.n	8002a06 <HAL_I2C_Init+0x92>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a7d      	ldr	r2, [pc, #500]	; (8002bf0 <HAL_I2C_Init+0x27c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	bf94      	ite	ls
 8002a00:	2301      	movls	r3, #1
 8002a02:	2300      	movhi	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0e7      	b.n	8002bde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a78      	ldr	r2, [pc, #480]	; (8002bf4 <HAL_I2C_Init+0x280>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	0c9b      	lsrs	r3, r3, #18
 8002a18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a6a      	ldr	r2, [pc, #424]	; (8002be8 <HAL_I2C_Init+0x274>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d802      	bhi.n	8002a48 <HAL_I2C_Init+0xd4>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	3301      	adds	r3, #1
 8002a46:	e009      	b.n	8002a5c <HAL_I2C_Init+0xe8>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a4e:	fb02 f303 	mul.w	r3, r2, r3
 8002a52:	4a69      	ldr	r2, [pc, #420]	; (8002bf8 <HAL_I2C_Init+0x284>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	495c      	ldr	r1, [pc, #368]	; (8002be8 <HAL_I2C_Init+0x274>)
 8002a78:	428b      	cmp	r3, r1
 8002a7a:	d819      	bhi.n	8002ab0 <HAL_I2C_Init+0x13c>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e59      	subs	r1, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8a:	1c59      	adds	r1, r3, #1
 8002a8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a90:	400b      	ands	r3, r1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_I2C_Init+0x138>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1e59      	subs	r1, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aaa:	e051      	b.n	8002b50 <HAL_I2C_Init+0x1dc>
 8002aac:	2304      	movs	r3, #4
 8002aae:	e04f      	b.n	8002b50 <HAL_I2C_Init+0x1dc>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d111      	bne.n	8002adc <HAL_I2C_Init+0x168>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1e58      	subs	r0, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	440b      	add	r3, r1
 8002ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aca:	3301      	adds	r3, #1
 8002acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf0c      	ite	eq
 8002ad4:	2301      	moveq	r3, #1
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	e012      	b.n	8002b02 <HAL_I2C_Init+0x18e>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e58      	subs	r0, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	0099      	lsls	r1, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Init+0x196>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e022      	b.n	8002b50 <HAL_I2C_Init+0x1dc>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10e      	bne.n	8002b30 <HAL_I2C_Init+0x1bc>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1e58      	subs	r0, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6859      	ldr	r1, [r3, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	440b      	add	r3, r1
 8002b20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2e:	e00f      	b.n	8002b50 <HAL_I2C_Init+0x1dc>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1e58      	subs	r0, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	0099      	lsls	r1, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	6809      	ldr	r1, [r1, #0]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6911      	ldr	r1, [r2, #16]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68d2      	ldr	r2, [r2, #12]
 8002b8a:	4311      	orrs	r1, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	000186a0 	.word	0x000186a0
 8002bec:	001e847f 	.word	0x001e847f
 8002bf0:	003d08ff 	.word	0x003d08ff
 8002bf4:	431bde83 	.word	0x431bde83
 8002bf8:	10624dd3 	.word	0x10624dd3

08002bfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	461a      	mov	r2, r3
 8002c08:	460b      	mov	r3, r1
 8002c0a:	817b      	strh	r3, [r7, #10]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff f818 	bl	8001c44 <HAL_GetTick>
 8002c14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	f040 80e0 	bne.w	8002de4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2319      	movs	r3, #25
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4970      	ldr	r1, [pc, #448]	; (8002df0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f002 f8e6 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e0d3      	b.n	8002de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_I2C_Master_Transmit+0x50>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e0cc      	b.n	8002de6 <HAL_I2C_Master_Transmit+0x1ea>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d007      	beq.n	8002c72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2221      	movs	r2, #33	; 0x21
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	893a      	ldrh	r2, [r7, #8]
 8002ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a50      	ldr	r2, [pc, #320]	; (8002df4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cb4:	8979      	ldrh	r1, [r7, #10]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	6a3a      	ldr	r2, [r7, #32]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f001 fea8 	bl	8004a10 <I2C_MasterRequestWrite>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e08d      	b.n	8002de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ce0:	e066      	b.n	8002db0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	6a39      	ldr	r1, [r7, #32]
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f002 f960 	bl	8004fac <I2C_WaitOnTXEFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d107      	bne.n	8002d0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e06b      	b.n	8002de6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	781a      	ldrb	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d11b      	bne.n	8002d84 <HAL_I2C_Master_Transmit+0x188>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d017      	beq.n	8002d84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	6a39      	ldr	r1, [r7, #32]
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f002 f950 	bl	800502e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d107      	bne.n	8002dac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002daa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e01a      	b.n	8002de6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d194      	bne.n	8002ce2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e000      	b.n	8002de6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002de4:	2302      	movs	r3, #2
  }
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	00100002 	.word	0x00100002
 8002df4:	ffff0000 	.word	0xffff0000

08002df8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	; 0x30
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	461a      	mov	r2, r3
 8002e04:	460b      	mov	r3, r1
 8002e06:	817b      	strh	r3, [r7, #10]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7fe ff1a 	bl	8001c44 <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	f040 820b 	bne.w	8003236 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2319      	movs	r3, #25
 8002e26:	2201      	movs	r2, #1
 8002e28:	497c      	ldr	r1, [pc, #496]	; (800301c <HAL_I2C_Master_Receive+0x224>)
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f001 ffe8 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e36:	2302      	movs	r3, #2
 8002e38:	e1fe      	b.n	8003238 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_I2C_Master_Receive+0x50>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e1f7      	b.n	8003238 <HAL_I2C_Master_Receive+0x440>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d007      	beq.n	8002e6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2222      	movs	r2, #34	; 0x22
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2210      	movs	r2, #16
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	893a      	ldrh	r2, [r7, #8]
 8002e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a5c      	ldr	r2, [pc, #368]	; (8003020 <HAL_I2C_Master_Receive+0x228>)
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eb0:	8979      	ldrh	r1, [r7, #10]
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f001 fe2c 	bl	8004b14 <I2C_MasterRequestRead>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e1b8      	b.n	8003238 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d113      	bne.n	8002ef6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	623b      	str	r3, [r7, #32]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	623b      	str	r3, [r7, #32]
 8002ee2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e18c      	b.n	8003210 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d11b      	bne.n	8002f36 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	e16c      	b.n	8003210 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d11b      	bne.n	8002f76 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	e14c      	b.n	8003210 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f9c:	e138      	b.n	8003210 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	f200 80f1 	bhi.w	800318a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d123      	bne.n	8002ff8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f002 f8ad 	bl	8005114 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e139      	b.n	8003238 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ff6:	e10b      	b.n	8003210 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d14e      	bne.n	800309e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	2200      	movs	r2, #0
 8003008:	4906      	ldr	r1, [pc, #24]	; (8003024 <HAL_I2C_Master_Receive+0x22c>)
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f001 fef8 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e10e      	b.n	8003238 <HAL_I2C_Master_Receive+0x440>
 800301a:	bf00      	nop
 800301c:	00100002 	.word	0x00100002
 8003020:	ffff0000 	.word	0xffff0000
 8003024:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691a      	ldr	r2, [r3, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800309c:	e0b8      	b.n	8003210 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	2200      	movs	r2, #0
 80030a6:	4966      	ldr	r1, [pc, #408]	; (8003240 <HAL_I2C_Master_Receive+0x448>)
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f001 fea9 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0bf      	b.n	8003238 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	2200      	movs	r2, #0
 8003102:	494f      	ldr	r1, [pc, #316]	; (8003240 <HAL_I2C_Master_Receive+0x448>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f001 fe7b 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e091      	b.n	8003238 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003188:	e042      	b.n	8003210 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f001 ffc0 	bl	8005114 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e04c      	b.n	8003238 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d118      	bne.n	8003210 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	f47f aec2 	bne.w	8002f9e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e000      	b.n	8003238 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003236:	2302      	movs	r3, #2
  }
}
 8003238:	4618      	mov	r0, r3
 800323a:	3728      	adds	r7, #40	; 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	00010004 	.word	0x00010004

08003244 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003264:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b10      	cmp	r3, #16
 8003272:	d003      	beq.n	800327c <HAL_I2C_EV_IRQHandler+0x38>
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	f040 80c1 	bne.w	80033fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10d      	bne.n	80032b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800329c:	d003      	beq.n	80032a6 <HAL_I2C_EV_IRQHandler+0x62>
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80032a4:	d101      	bne.n	80032aa <HAL_I2C_EV_IRQHandler+0x66>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_I2C_EV_IRQHandler+0x68>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	f000 8132 	beq.w	8003516 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00c      	beq.n	80032d6 <HAL_I2C_EV_IRQHandler+0x92>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	0a5b      	lsrs	r3, r3, #9
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d006      	beq.n	80032d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f001 ffa8 	bl	800521e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fd83 	bl	8003dda <I2C_Master_SB>
 80032d4:	e092      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	08db      	lsrs	r3, r3, #3
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	0a5b      	lsrs	r3, r3, #9
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fdf9 	bl	8003ee6 <I2C_Master_ADD10>
 80032f4:	e082      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0xd2>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	0a5b      	lsrs	r3, r3, #9
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fe13 	bl	8003f3a <I2C_Master_ADDR>
 8003314:	e072      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	089b      	lsrs	r3, r3, #2
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d03b      	beq.n	800339a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003330:	f000 80f3 	beq.w	800351a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	09db      	lsrs	r3, r3, #7
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00f      	beq.n	8003360 <HAL_I2C_EV_IRQHandler+0x11c>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	0a9b      	lsrs	r3, r3, #10
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <HAL_I2C_EV_IRQHandler+0x11c>
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f9f3 	bl	8003744 <I2C_MasterTransmit_TXE>
 800335e:	e04d      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80d6 	beq.w	800351a <HAL_I2C_EV_IRQHandler+0x2d6>
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	0a5b      	lsrs	r3, r3, #9
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80cf 	beq.w	800351a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800337c:	7bbb      	ldrb	r3, [r7, #14]
 800337e:	2b21      	cmp	r3, #33	; 0x21
 8003380:	d103      	bne.n	800338a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fa7a 	bl	800387c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003388:	e0c7      	b.n	800351a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	f040 80c4 	bne.w	800351a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fae8 	bl	8003968 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003398:	e0bf      	b.n	800351a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a8:	f000 80b7 	beq.w	800351a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00f      	beq.n	80033d8 <HAL_I2C_EV_IRQHandler+0x194>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	0a9b      	lsrs	r3, r3, #10
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d009      	beq.n	80033d8 <HAL_I2C_EV_IRQHandler+0x194>
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fb5d 	bl	8003a90 <I2C_MasterReceive_RXNE>
 80033d6:	e011      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 809a 	beq.w	800351a <HAL_I2C_EV_IRQHandler+0x2d6>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	0a5b      	lsrs	r3, r3, #9
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8093 	beq.w	800351a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fc06 	bl	8003c06 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fa:	e08e      	b.n	800351a <HAL_I2C_EV_IRQHandler+0x2d6>
 80033fc:	e08d      	b.n	800351a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d004      	beq.n	8003410 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e007      	b.n	8003420 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d012      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x20e>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	0a5b      	lsrs	r3, r3, #9
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00c      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 ffc4 	bl	80043d8 <I2C_Slave_ADDR>
 8003450:	e066      	b.n	8003520 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <HAL_I2C_EV_IRQHandler+0x22e>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	0a5b      	lsrs	r3, r3, #9
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fffe 	bl	800446c <I2C_Slave_STOPF>
 8003470:	e056      	b.n	8003520 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003472:	7bbb      	ldrb	r3, [r7, #14]
 8003474:	2b21      	cmp	r3, #33	; 0x21
 8003476:	d002      	beq.n	800347e <HAL_I2C_EV_IRQHandler+0x23a>
 8003478:	7bbb      	ldrb	r3, [r7, #14]
 800347a:	2b29      	cmp	r3, #41	; 0x29
 800347c:	d125      	bne.n	80034ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	09db      	lsrs	r3, r3, #7
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00f      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0x266>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	0a9b      	lsrs	r3, r3, #10
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0x266>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d103      	bne.n	80034aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 feda 	bl	800425c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034a8:	e039      	b.n	800351e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d033      	beq.n	800351e <HAL_I2C_EV_IRQHandler+0x2da>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	0a5b      	lsrs	r3, r3, #9
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d02d      	beq.n	800351e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 ff07 	bl	80042d6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c8:	e029      	b.n	800351e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	099b      	lsrs	r3, r3, #6
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00f      	beq.n	80034f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	0a9b      	lsrs	r3, r3, #10
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 ff12 	bl	8004318 <I2C_SlaveReceive_RXNE>
 80034f4:	e014      	b.n	8003520 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00e      	beq.n	8003520 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	0a5b      	lsrs	r3, r3, #9
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 ff40 	bl	8004394 <I2C_SlaveReceive_BTF>
 8003514:	e004      	b.n	8003520 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003516:	bf00      	nop
 8003518:	e002      	b.n	8003520 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800351e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b08a      	sub	sp, #40	; 0x28
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003548:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00e      	beq.n	8003574 <HAL_I2C_ER_IRQHandler+0x4e>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003572:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	0a5b      	lsrs	r3, r3, #9
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <HAL_I2C_ER_IRQHandler+0x78>
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800359c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	0a9b      	lsrs	r3, r3, #10
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d03f      	beq.n	800362a <HAL_I2C_ER_IRQHandler+0x104>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d039      	beq.n	800362a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80035b6:	7efb      	ldrb	r3, [r7, #27]
 80035b8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80035d0:	7ebb      	ldrb	r3, [r7, #26]
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d112      	bne.n	80035fc <HAL_I2C_ER_IRQHandler+0xd6>
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10f      	bne.n	80035fc <HAL_I2C_ER_IRQHandler+0xd6>
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	2b21      	cmp	r3, #33	; 0x21
 80035e0:	d008      	beq.n	80035f4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	2b29      	cmp	r3, #41	; 0x29
 80035e6:	d005      	beq.n	80035f4 <HAL_I2C_ER_IRQHandler+0xce>
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b28      	cmp	r3, #40	; 0x28
 80035ec:	d106      	bne.n	80035fc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b21      	cmp	r3, #33	; 0x21
 80035f2:	d103      	bne.n	80035fc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f001 f869 	bl	80046cc <I2C_Slave_AF>
 80035fa:	e016      	b.n	800362a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003604:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800360e:	7efb      	ldrb	r3, [r7, #27]
 8003610:	2b10      	cmp	r3, #16
 8003612:	d002      	beq.n	800361a <HAL_I2C_ER_IRQHandler+0xf4>
 8003614:	7efb      	ldrb	r3, [r7, #27]
 8003616:	2b40      	cmp	r3, #64	; 0x40
 8003618:	d107      	bne.n	800362a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	0adb      	lsrs	r3, r3, #11
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <HAL_I2C_ER_IRQHandler+0x12e>
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	f043 0308 	orr.w	r3, r3, #8
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003652:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f001 f8a0 	bl	80047ac <I2C_ITError>
  }
}
 800366c:	bf00      	nop
 800366e:	3728      	adds	r7, #40	; 0x28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
 80036d0:	4613      	mov	r3, r2
 80036d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003752:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800375a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	2b00      	cmp	r3, #0
 8003768:	d150      	bne.n	800380c <I2C_MasterTransmit_TXE+0xc8>
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	2b21      	cmp	r3, #33	; 0x21
 800376e:	d14d      	bne.n	800380c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b08      	cmp	r3, #8
 8003774:	d01d      	beq.n	80037b2 <I2C_MasterTransmit_TXE+0x6e>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b20      	cmp	r3, #32
 800377a:	d01a      	beq.n	80037b2 <I2C_MasterTransmit_TXE+0x6e>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003782:	d016      	beq.n	80037b2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003792:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2211      	movs	r2, #17
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff ff62 	bl	8003674 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037b0:	e060      	b.n	8003874 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037c0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d107      	bne.n	80037fc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff7d 	bl	80036f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037fa:	e03b      	b.n	8003874 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff35 	bl	8003674 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800380a:	e033      	b.n	8003874 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b21      	cmp	r3, #33	; 0x21
 8003810:	d005      	beq.n	800381e <I2C_MasterTransmit_TXE+0xda>
 8003812:	7bbb      	ldrb	r3, [r7, #14]
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d12d      	bne.n	8003874 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b22      	cmp	r3, #34	; 0x22
 800381c:	d12a      	bne.n	8003874 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d108      	bne.n	800383a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003836:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003838:	e01c      	b.n	8003874 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d103      	bne.n	800384e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f88e 	bl	8003968 <I2C_MemoryTransmit_TXE_BTF>
}
 800384c:	e012      	b.n	8003874 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	781a      	ldrb	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003872:	e7ff      	b.n	8003874 <I2C_MasterTransmit_TXE+0x130>
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b21      	cmp	r3, #33	; 0x21
 8003894:	d164      	bne.n	8003960 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d012      	beq.n	80038c6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038c4:	e04c      	b.n	8003960 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d01d      	beq.n	8003908 <I2C_MasterTransmit_BTF+0x8c>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d01a      	beq.n	8003908 <I2C_MasterTransmit_BTF+0x8c>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038d8:	d016      	beq.n	8003908 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038e8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2211      	movs	r2, #17
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff feb7 	bl	8003674 <HAL_I2C_MasterTxCpltCallback>
}
 8003906:	e02b      	b.n	8003960 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003916:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003926:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d107      	bne.n	8003952 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff fed2 	bl	80036f4 <HAL_I2C_MemTxCpltCallback>
}
 8003950:	e006      	b.n	8003960 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fe8a 	bl	8003674 <HAL_I2C_MasterTxCpltCallback>
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003976:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397c:	2b00      	cmp	r3, #0
 800397e:	d11d      	bne.n	80039bc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003984:	2b01      	cmp	r3, #1
 8003986:	d10b      	bne.n	80039a0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398c:	b2da      	uxtb	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003998:	1c9a      	adds	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800399e:	e073      	b.n	8003a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	121b      	asrs	r3, r3, #8
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039ba:	e065      	b.n	8003a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d10b      	bne.n	80039dc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039da:	e055      	b.n	8003a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d151      	bne.n	8003a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b22      	cmp	r3, #34	; 0x22
 80039e8:	d10d      	bne.n	8003a06 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a04:	e040      	b.n	8003a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d015      	beq.n	8003a3c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b21      	cmp	r3, #33	; 0x21
 8003a14:	d112      	bne.n	8003a3c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a3a:	e025      	b.n	8003a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d120      	bne.n	8003a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	2b21      	cmp	r3, #33	; 0x21
 8003a4a:	d11d      	bne.n	8003a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a5a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fe36 	bl	80036f4 <HAL_I2C_MemTxCpltCallback>
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b22      	cmp	r3, #34	; 0x22
 8003aa2:	f040 80ac 	bne.w	8003bfe <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d921      	bls.n	8003af8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	f040 808c 	bne.w	8003bfe <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003af6:	e082      	b.n	8003bfe <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d075      	beq.n	8003bec <I2C_MasterReceive_RXNE+0x15c>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d002      	beq.n	8003b0c <I2C_MasterReceive_RXNE+0x7c>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d16f      	bne.n	8003bec <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f001 facf 	bl	80050b0 <I2C_WaitOnSTOPRequestThroughIT>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d142      	bne.n	8003b9e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b26:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b36:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d10a      	bne.n	8003b88 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff fdc1 	bl	8003708 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b86:	e03a      	b.n	8003bfe <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2212      	movs	r2, #18
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff fd76 	bl	8003688 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b9c:	e02f      	b.n	8003bfe <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fd99 	bl	800371c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bea:	e008      	b.n	8003bfe <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfa:	605a      	str	r2, [r3, #4]
}
 8003bfc:	e7ff      	b.n	8003bfe <I2C_MasterReceive_RXNE+0x16e>
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d11b      	bne.n	8003c56 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c2c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c54:	e0bd      	b.n	8003dd2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d129      	bne.n	8003cb4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d00a      	beq.n	8003c8c <I2C_MasterReceive_BTF+0x86>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d007      	beq.n	8003c8c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cb2:	e08e      	b.n	8003dd2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d176      	bne.n	8003dac <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d002      	beq.n	8003cca <I2C_MasterReceive_BTF+0xc4>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d108      	bne.n	8003cdc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e019      	b.n	8003d10 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d002      	beq.n	8003ce8 <I2C_MasterReceive_BTF+0xe2>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d108      	bne.n	8003cfa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e00a      	b.n	8003d10 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d007      	beq.n	8003d10 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d6a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d10a      	bne.n	8003d96 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fcba 	bl	8003708 <HAL_I2C_MemRxCpltCallback>
}
 8003d94:	e01d      	b.n	8003dd2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2212      	movs	r2, #18
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff fc6f 	bl	8003688 <HAL_I2C_MasterRxCpltCallback>
}
 8003daa:	e012      	b.n	8003dd2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b40      	cmp	r3, #64	; 0x40
 8003dec:	d117      	bne.n	8003e1e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e06:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e08:	e067      	b.n	8003eda <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	611a      	str	r2, [r3, #16]
}
 8003e1c:	e05d      	b.n	8003eda <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e26:	d133      	bne.n	8003e90 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b21      	cmp	r3, #33	; 0x21
 8003e32:	d109      	bne.n	8003e48 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e44:	611a      	str	r2, [r3, #16]
 8003e46:	e008      	b.n	8003e5a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d004      	beq.n	8003e6c <I2C_Master_SB+0x92>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d108      	bne.n	8003e7e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d032      	beq.n	8003eda <I2C_Master_SB+0x100>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d02d      	beq.n	8003eda <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8c:	605a      	str	r2, [r3, #4]
}
 8003e8e:	e024      	b.n	8003eda <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10e      	bne.n	8003eb6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	11db      	asrs	r3, r3, #7
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f003 0306 	and.w	r3, r3, #6
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f063 030f 	orn	r3, r3, #15
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	611a      	str	r2, [r3, #16]
}
 8003eb4:	e011      	b.n	8003eda <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d10d      	bne.n	8003eda <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	11db      	asrs	r3, r3, #7
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 0306 	and.w	r3, r3, #6
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f063 030e 	orn	r3, r3, #14
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	611a      	str	r2, [r3, #16]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <I2C_Master_ADD10+0x26>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d108      	bne.n	8003f1e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00c      	beq.n	8003f2e <I2C_Master_ADD10+0x48>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f2c:	605a      	str	r2, [r3, #4]
  }
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b091      	sub	sp, #68	; 0x44
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b22      	cmp	r3, #34	; 0x22
 8003f62:	f040 8169 	bne.w	8004238 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10f      	bne.n	8003f8e <I2C_Master_ADDR+0x54>
 8003f6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d10b      	bne.n	8003f8e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f76:	2300      	movs	r3, #0
 8003f78:	633b      	str	r3, [r7, #48]	; 0x30
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	633b      	str	r3, [r7, #48]	; 0x30
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	e160      	b.n	8004250 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d11d      	bne.n	8003fd2 <I2C_Master_ADDR+0x98>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f9e:	d118      	bne.n	8003fd2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	651a      	str	r2, [r3, #80]	; 0x50
 8003fd0:	e13e      	b.n	8004250 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d113      	bne.n	8004004 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fdc:	2300      	movs	r3, #0
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e115      	b.n	8004230 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	f040 808a 	bne.w	8004124 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004012:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004016:	d137      	bne.n	8004088 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004036:	d113      	bne.n	8004060 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004046:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	e0e7      	b.n	8004230 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004060:	2300      	movs	r3, #0
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	623b      	str	r3, [r7, #32]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	623b      	str	r3, [r7, #32]
 8004074:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e0d3      	b.n	8004230 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408a:	2b08      	cmp	r3, #8
 800408c:	d02e      	beq.n	80040ec <I2C_Master_ADDR+0x1b2>
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	2b20      	cmp	r3, #32
 8004092:	d02b      	beq.n	80040ec <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004096:	2b12      	cmp	r3, #18
 8004098:	d102      	bne.n	80040a0 <I2C_Master_ADDR+0x166>
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	2b01      	cmp	r3, #1
 800409e:	d125      	bne.n	80040ec <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d00e      	beq.n	80040c4 <I2C_Master_ADDR+0x18a>
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d00b      	beq.n	80040c4 <I2C_Master_ADDR+0x18a>
 80040ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d008      	beq.n	80040c4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e007      	b.n	80040d4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040d2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	e0a1      	b.n	8004230 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fc:	2300      	movs	r3, #0
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e085      	b.n	8004230 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d14d      	bne.n	80041ca <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004130:	2b04      	cmp	r3, #4
 8004132:	d016      	beq.n	8004162 <I2C_Master_ADDR+0x228>
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	2b02      	cmp	r3, #2
 8004138:	d013      	beq.n	8004162 <I2C_Master_ADDR+0x228>
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	2b10      	cmp	r3, #16
 800413e:	d010      	beq.n	8004162 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e007      	b.n	8004172 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004170:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004180:	d117      	bne.n	80041b2 <I2C_Master_ADDR+0x278>
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004188:	d00b      	beq.n	80041a2 <I2C_Master_ADDR+0x268>
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	2b01      	cmp	r3, #1
 800418e:	d008      	beq.n	80041a2 <I2C_Master_ADDR+0x268>
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	2b08      	cmp	r3, #8
 8004194:	d005      	beq.n	80041a2 <I2C_Master_ADDR+0x268>
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	2b10      	cmp	r3, #16
 800419a:	d002      	beq.n	80041a2 <I2C_Master_ADDR+0x268>
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d107      	bne.n	80041b2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	e032      	b.n	8004230 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041d8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e8:	d117      	bne.n	800421a <I2C_Master_ADDR+0x2e0>
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041f0:	d00b      	beq.n	800420a <I2C_Master_ADDR+0x2d0>
 80041f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d008      	beq.n	800420a <I2C_Master_ADDR+0x2d0>
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d005      	beq.n	800420a <I2C_Master_ADDR+0x2d0>
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	2b10      	cmp	r3, #16
 8004202:	d002      	beq.n	800420a <I2C_Master_ADDR+0x2d0>
 8004204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004206:	2b20      	cmp	r3, #32
 8004208:	d107      	bne.n	800421a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004218:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004236:	e00b      	b.n	8004250 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
}
 800424e:	e7ff      	b.n	8004250 <I2C_Master_ADDR+0x316>
 8004250:	bf00      	nop
 8004252:	3744      	adds	r7, #68	; 0x44
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d02b      	beq.n	80042ce <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d114      	bne.n	80042ce <I2C_SlaveTransmit_TXE+0x72>
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b29      	cmp	r3, #41	; 0x29
 80042a8:	d111      	bne.n	80042ce <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2221      	movs	r2, #33	; 0x21
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2228      	movs	r2, #40	; 0x28
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff f9e7 	bl	800369c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d011      	beq.n	800430c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	781a      	ldrb	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004326:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02c      	beq.n	800438c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d114      	bne.n	800438c <I2C_SlaveReceive_RXNE+0x74>
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2b2a      	cmp	r3, #42	; 0x2a
 8004366:	d111      	bne.n	800438c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004376:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2222      	movs	r2, #34	; 0x22
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2228      	movs	r2, #40	; 0x28
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff f992 	bl	80036b0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d012      	beq.n	80043cc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043f2:	2b28      	cmp	r3, #40	; 0x28
 80043f4:	d127      	bne.n	8004446 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004404:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	09db      	lsrs	r3, r3, #7
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	81bb      	strh	r3, [r7, #12]
 8004428:	e002      	b.n	8004430 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004438:	89ba      	ldrh	r2, [r7, #12]
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff f940 	bl	80036c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004444:	e00e      	b.n	8004464 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800448a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800448c:	2300      	movs	r3, #0
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c8:	d172      	bne.n	80045b0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b22      	cmp	r3, #34	; 0x22
 80044ce:	d002      	beq.n	80044d6 <I2C_Slave_STOPF+0x6a>
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b2a      	cmp	r3, #42	; 0x2a
 80044d4:	d135      	bne.n	8004542 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f043 0204 	orr.w	r2, r3, #4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004508:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	4618      	mov	r0, r3
 8004510:	f7fd ff8c 	bl	800242c <HAL_DMA_GetState>
 8004514:	4603      	mov	r3, r0
 8004516:	2b01      	cmp	r3, #1
 8004518:	d049      	beq.n	80045ae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	4a69      	ldr	r2, [pc, #420]	; (80046c4 <I2C_Slave_STOPF+0x258>)
 8004520:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd fdd4 	bl	80020d4 <HAL_DMA_Abort_IT>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d03d      	beq.n	80045ae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800453c:	4610      	mov	r0, r2
 800453e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004540:	e035      	b.n	80045ae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f043 0204 	orr.w	r2, r3, #4
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004574:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd ff56 	bl	800242c <HAL_DMA_GetState>
 8004580:	4603      	mov	r3, r0
 8004582:	2b01      	cmp	r3, #1
 8004584:	d014      	beq.n	80045b0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	4a4e      	ldr	r2, [pc, #312]	; (80046c4 <I2C_Slave_STOPF+0x258>)
 800458c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	4618      	mov	r0, r3
 8004594:	f7fd fd9e 	bl	80020d4 <HAL_DMA_Abort_IT>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045a8:	4610      	mov	r0, r2
 80045aa:	4798      	blx	r3
 80045ac:	e000      	b.n	80045b0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045ae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d03e      	beq.n	8004638 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d112      	bne.n	80045ee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d112      	bne.n	8004622 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	f043 0204 	orr.w	r2, r3, #4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f8b3 	bl	80047ac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004646:	e039      	b.n	80046bc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b2a      	cmp	r3, #42	; 0x2a
 800464c:	d109      	bne.n	8004662 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2228      	movs	r2, #40	; 0x28
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff f827 	bl	80036b0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b28      	cmp	r3, #40	; 0x28
 800466c:	d111      	bne.n	8004692 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <I2C_Slave_STOPF+0x25c>)
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff f828 	bl	80036e0 <HAL_I2C_ListenCpltCallback>
}
 8004690:	e014      	b.n	80046bc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	2b22      	cmp	r3, #34	; 0x22
 8004698:	d002      	beq.n	80046a0 <I2C_Slave_STOPF+0x234>
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b22      	cmp	r3, #34	; 0x22
 800469e:	d10d      	bne.n	80046bc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fe fffa 	bl	80036b0 <HAL_I2C_SlaveRxCpltCallback>
}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	08004cb1 	.word	0x08004cb1
 80046c8:	ffff0000 	.word	0xffff0000

080046cc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046da:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d002      	beq.n	80046ee <I2C_Slave_AF+0x22>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d129      	bne.n	8004742 <I2C_Slave_AF+0x76>
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b28      	cmp	r3, #40	; 0x28
 80046f2:	d126      	bne.n	8004742 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <I2C_Slave_AF+0xdc>)
 80046f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004708:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004712:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004722:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fe ffd0 	bl	80036e0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004740:	e02e      	b.n	80047a0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b21      	cmp	r3, #33	; 0x21
 8004746:	d126      	bne.n	8004796 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a17      	ldr	r2, [pc, #92]	; (80047a8 <I2C_Slave_AF+0xdc>)
 800474c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2221      	movs	r2, #33	; 0x21
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004772:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800477c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fe ff84 	bl	800369c <HAL_I2C_SlaveTxCpltCallback>
}
 8004794:	e004      	b.n	80047a0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800479e:	615a      	str	r2, [r3, #20]
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	ffff0000 	.word	0xffff0000

080047ac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047c4:	7bbb      	ldrb	r3, [r7, #14]
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d002      	beq.n	80047d0 <I2C_ITError+0x24>
 80047ca:	7bbb      	ldrb	r3, [r7, #14]
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d10a      	bne.n	80047e6 <I2C_ITError+0x3a>
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b22      	cmp	r3, #34	; 0x22
 80047d4:	d107      	bne.n	80047e6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047ec:	2b28      	cmp	r3, #40	; 0x28
 80047ee:	d107      	bne.n	8004800 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2228      	movs	r2, #40	; 0x28
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047fe:	e015      	b.n	800482c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480e:	d00a      	beq.n	8004826 <I2C_ITError+0x7a>
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	2b60      	cmp	r3, #96	; 0x60
 8004814:	d007      	beq.n	8004826 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483a:	d162      	bne.n	8004902 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b01      	cmp	r3, #1
 8004858:	d020      	beq.n	800489c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	4a6a      	ldr	r2, [pc, #424]	; (8004a08 <I2C_ITError+0x25c>)
 8004860:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd fc34 	bl	80020d4 <HAL_DMA_Abort_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8089 	beq.w	8004986 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004896:	4610      	mov	r0, r2
 8004898:	4798      	blx	r3
 800489a:	e074      	b.n	8004986 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	4a59      	ldr	r2, [pc, #356]	; (8004a08 <I2C_ITError+0x25c>)
 80048a2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fd fc13 	bl	80020d4 <HAL_DMA_Abort_IT>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d068      	beq.n	8004986 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d10b      	bne.n	80048da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048fc:	4610      	mov	r0, r2
 80048fe:	4798      	blx	r3
 8004900:	e041      	b.n	8004986 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b60      	cmp	r3, #96	; 0x60
 800490c:	d125      	bne.n	800495a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d10b      	bne.n	8004942 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fe feec 	bl	8003730 <HAL_I2C_AbortCpltCallback>
 8004958:	e015      	b.n	8004986 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d10b      	bne.n	8004980 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fe fecb 	bl	800371c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10e      	bne.n	80049b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d113      	bne.n	8004a00 <I2C_ITError+0x254>
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b28      	cmp	r3, #40	; 0x28
 80049dc:	d110      	bne.n	8004a00 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <I2C_ITError+0x260>)
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fe fe70 	bl	80036e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	08004cb1 	.word	0x08004cb1
 8004a0c:	ffff0000 	.word	0xffff0000

08004a10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d006      	beq.n	8004a3a <I2C_MasterRequestWrite+0x2a>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d003      	beq.n	8004a3a <I2C_MasterRequestWrite+0x2a>
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a38:	d108      	bne.n	8004a4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e00b      	b.n	8004a64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	2b12      	cmp	r3, #18
 8004a52:	d107      	bne.n	8004a64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f9c5 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00d      	beq.n	8004a98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8a:	d103      	bne.n	8004a94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e035      	b.n	8004b04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aa0:	d108      	bne.n	8004ab4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aa2:	897b      	ldrh	r3, [r7, #10]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ab0:	611a      	str	r2, [r3, #16]
 8004ab2:	e01b      	b.n	8004aec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ab4:	897b      	ldrh	r3, [r7, #10]
 8004ab6:	11db      	asrs	r3, r3, #7
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f003 0306 	and.w	r3, r3, #6
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f063 030f 	orn	r3, r3, #15
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	490e      	ldr	r1, [pc, #56]	; (8004b0c <I2C_MasterRequestWrite+0xfc>)
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f9eb 	bl	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e010      	b.n	8004b04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ae2:	897b      	ldrh	r3, [r7, #10]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4907      	ldr	r1, [pc, #28]	; (8004b10 <I2C_MasterRequestWrite+0x100>)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f9db 	bl	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	00010008 	.word	0x00010008
 8004b10:	00010002 	.word	0x00010002

08004b14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	460b      	mov	r3, r1
 8004b22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d006      	beq.n	8004b4e <I2C_MasterRequestRead+0x3a>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d003      	beq.n	8004b4e <I2C_MasterRequestRead+0x3a>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b4c:	d108      	bne.n	8004b60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e00b      	b.n	8004b78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	2b11      	cmp	r3, #17
 8004b66:	d107      	bne.n	8004b78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f93b 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9e:	d103      	bne.n	8004ba8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e079      	b.n	8004ca0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb4:	d108      	bne.n	8004bc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bb6:	897b      	ldrh	r3, [r7, #10]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	611a      	str	r2, [r3, #16]
 8004bc6:	e05f      	b.n	8004c88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bc8:	897b      	ldrh	r3, [r7, #10]
 8004bca:	11db      	asrs	r3, r3, #7
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f003 0306 	and.w	r3, r3, #6
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f063 030f 	orn	r3, r3, #15
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	4930      	ldr	r1, [pc, #192]	; (8004ca8 <I2C_MasterRequestRead+0x194>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f961 	bl	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e054      	b.n	8004ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4929      	ldr	r1, [pc, #164]	; (8004cac <I2C_MasterRequestRead+0x198>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f951 	bl	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e044      	b.n	8004ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f8d9 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00d      	beq.n	8004c70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c62:	d103      	bne.n	8004c6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e017      	b.n	8004ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c70:	897b      	ldrh	r3, [r7, #10]
 8004c72:	11db      	asrs	r3, r3, #7
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f003 0306 	and.w	r3, r3, #6
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f063 030e 	orn	r3, r3, #14
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	4907      	ldr	r1, [pc, #28]	; (8004cac <I2C_MasterRequestRead+0x198>)
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f90d 	bl	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	00010008 	.word	0x00010008
 8004cac:	00010002 	.word	0x00010002

08004cb0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cca:	4b4b      	ldr	r3, [pc, #300]	; (8004df8 <I2C_DMAAbort+0x148>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	08db      	lsrs	r3, r3, #3
 8004cd0:	4a4a      	ldr	r2, [pc, #296]	; (8004dfc <I2C_DMAAbort+0x14c>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	0a1a      	lsrs	r2, r3, #8
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	00da      	lsls	r2, r3, #3
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f043 0220 	orr.w	r2, r3, #32
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004cf6:	e00a      	b.n	8004d0e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d0c:	d0ea      	beq.n	8004ce4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2200      	movs	r2, #0
 8004d42:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d50:	2200      	movs	r2, #0
 8004d52:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	2200      	movs	r2, #0
 8004d62:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b60      	cmp	r3, #96	; 0x60
 8004d7e:	d10e      	bne.n	8004d9e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2200      	movs	r2, #0
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d96:	6978      	ldr	r0, [r7, #20]
 8004d98:	f7fe fcca 	bl	8003730 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d9c:	e027      	b.n	8004dee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004da4:	2b28      	cmp	r3, #40	; 0x28
 8004da6:	d117      	bne.n	8004dd8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dc6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2228      	movs	r2, #40	; 0x28
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dd6:	e007      	b.n	8004de8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004de8:	6978      	ldr	r0, [r7, #20]
 8004dea:	f7fe fc97 	bl	800371c <HAL_I2C_ErrorCallback>
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000004 	.word	0x20000004
 8004dfc:	14f8b589 	.word	0x14f8b589

08004e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e10:	e025      	b.n	8004e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d021      	beq.n	8004e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1a:	f7fc ff13 	bl	8001c44 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d302      	bcc.n	8004e30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d116      	bne.n	8004e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f043 0220 	orr.w	r2, r3, #32
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e023      	b.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10d      	bne.n	8004e84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4013      	ands	r3, r2
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bf0c      	ite	eq
 8004e7a:	2301      	moveq	r3, #1
 8004e7c:	2300      	movne	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	e00c      	b.n	8004e9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf0c      	ite	eq
 8004e96:	2301      	moveq	r3, #1
 8004e98:	2300      	movne	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d0b6      	beq.n	8004e12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ebc:	e051      	b.n	8004f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ecc:	d123      	bne.n	8004f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004edc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ee6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f043 0204 	orr.w	r2, r3, #4
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e046      	b.n	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d021      	beq.n	8004f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1e:	f7fc fe91 	bl	8001c44 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d116      	bne.n	8004f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f043 0220 	orr.w	r2, r3, #32
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e020      	b.n	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d10c      	bne.n	8004f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	43da      	mvns	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4013      	ands	r3, r2
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bf14      	ite	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	2300      	moveq	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	e00b      	b.n	8004f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	43da      	mvns	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4013      	ands	r3, r2
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bf14      	ite	ne
 8004f98:	2301      	movne	r3, #1
 8004f9a:	2300      	moveq	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d18d      	bne.n	8004ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fb8:	e02d      	b.n	8005016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f900 	bl	80051c0 <I2C_IsAcknowledgeFailed>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e02d      	b.n	8005026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d021      	beq.n	8005016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd2:	f7fc fe37 	bl	8001c44 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d302      	bcc.n	8004fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d116      	bne.n	8005016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f043 0220 	orr.w	r2, r3, #32
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e007      	b.n	8005026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005020:	2b80      	cmp	r3, #128	; 0x80
 8005022:	d1ca      	bne.n	8004fba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800503a:	e02d      	b.n	8005098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f8bf 	bl	80051c0 <I2C_IsAcknowledgeFailed>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e02d      	b.n	80050a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005052:	d021      	beq.n	8005098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005054:	f7fc fdf6 	bl	8001c44 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	429a      	cmp	r2, r3
 8005062:	d302      	bcc.n	800506a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d116      	bne.n	8005098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e007      	b.n	80050a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d1ca      	bne.n	800503c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	08db      	lsrs	r3, r3, #3
 80050c2:	4a13      	ldr	r2, [pc, #76]	; (8005110 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80050c4:	fba2 2303 	umull	r2, r3, r2, r3
 80050c8:	0a1a      	lsrs	r2, r3, #8
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d107      	bne.n	80050ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f043 0220 	orr.w	r2, r3, #32
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e008      	b.n	8005100 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050fc:	d0e9      	beq.n	80050d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	20000004 	.word	0x20000004
 8005110:	14f8b589 	.word	0x14f8b589

08005114 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005120:	e042      	b.n	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b10      	cmp	r3, #16
 800512e:	d119      	bne.n	8005164 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0210 	mvn.w	r2, #16
 8005138:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e029      	b.n	80051b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005164:	f7fc fd6e 	bl	8001c44 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	429a      	cmp	r2, r3
 8005172:	d302      	bcc.n	800517a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d116      	bne.n	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	f043 0220 	orr.w	r2, r3, #32
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e007      	b.n	80051b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b40      	cmp	r3, #64	; 0x40
 80051b4:	d1b5      	bne.n	8005122 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d6:	d11b      	bne.n	8005210 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	f043 0204 	orr.w	r2, r3, #4
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800522e:	d103      	bne.n	8005238 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005236:	e007      	b.n	8005248 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005240:	d102      	bne.n	8005248 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2208      	movs	r2, #8
 8005246:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e267      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d075      	beq.n	800535e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005272:	4b88      	ldr	r3, [pc, #544]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
 800527a:	2b04      	cmp	r3, #4
 800527c:	d00c      	beq.n	8005298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800527e:	4b85      	ldr	r3, [pc, #532]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005286:	2b08      	cmp	r3, #8
 8005288:	d112      	bne.n	80052b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800528a:	4b82      	ldr	r3, [pc, #520]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005296:	d10b      	bne.n	80052b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005298:	4b7e      	ldr	r3, [pc, #504]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d05b      	beq.n	800535c <HAL_RCC_OscConfig+0x108>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d157      	bne.n	800535c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e242      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b8:	d106      	bne.n	80052c8 <HAL_RCC_OscConfig+0x74>
 80052ba:	4b76      	ldr	r3, [pc, #472]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a75      	ldr	r2, [pc, #468]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80052c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	e01d      	b.n	8005304 <HAL_RCC_OscConfig+0xb0>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d0:	d10c      	bne.n	80052ec <HAL_RCC_OscConfig+0x98>
 80052d2:	4b70      	ldr	r3, [pc, #448]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a6f      	ldr	r2, [pc, #444]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80052d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	4b6d      	ldr	r3, [pc, #436]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a6c      	ldr	r2, [pc, #432]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80052e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e00b      	b.n	8005304 <HAL_RCC_OscConfig+0xb0>
 80052ec:	4b69      	ldr	r3, [pc, #420]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a68      	ldr	r2, [pc, #416]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80052f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	4b66      	ldr	r3, [pc, #408]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a65      	ldr	r2, [pc, #404]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80052fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d013      	beq.n	8005334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530c:	f7fc fc9a 	bl	8001c44 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005314:	f7fc fc96 	bl	8001c44 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	; 0x64
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e207      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005326:	4b5b      	ldr	r3, [pc, #364]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0xc0>
 8005332:	e014      	b.n	800535e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005334:	f7fc fc86 	bl	8001c44 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800533c:	f7fc fc82 	bl	8001c44 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b64      	cmp	r3, #100	; 0x64
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e1f3      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800534e:	4b51      	ldr	r3, [pc, #324]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f0      	bne.n	800533c <HAL_RCC_OscConfig+0xe8>
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800535c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d063      	beq.n	8005432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800536a:	4b4a      	ldr	r3, [pc, #296]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005376:	4b47      	ldr	r3, [pc, #284]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800537e:	2b08      	cmp	r3, #8
 8005380:	d11c      	bne.n	80053bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005382:	4b44      	ldr	r3, [pc, #272]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d116      	bne.n	80053bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800538e:	4b41      	ldr	r3, [pc, #260]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_RCC_OscConfig+0x152>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d001      	beq.n	80053a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e1c7      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a6:	4b3b      	ldr	r3, [pc, #236]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4937      	ldr	r1, [pc, #220]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ba:	e03a      	b.n	8005432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d020      	beq.n	8005406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053c4:	4b34      	ldr	r3, [pc, #208]	; (8005498 <HAL_RCC_OscConfig+0x244>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7fc fc3b 	bl	8001c44 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d2:	f7fc fc37 	bl	8001c44 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e1a8      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e4:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4925      	ldr	r1, [pc, #148]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 8005400:	4313      	orrs	r3, r2
 8005402:	600b      	str	r3, [r1, #0]
 8005404:	e015      	b.n	8005432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005406:	4b24      	ldr	r3, [pc, #144]	; (8005498 <HAL_RCC_OscConfig+0x244>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fc fc1a 	bl	8001c44 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005414:	f7fc fc16 	bl	8001c44 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e187      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005426:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d036      	beq.n	80054ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005446:	4b15      	ldr	r3, [pc, #84]	; (800549c <HAL_RCC_OscConfig+0x248>)
 8005448:	2201      	movs	r2, #1
 800544a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544c:	f7fc fbfa 	bl	8001c44 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005454:	f7fc fbf6 	bl	8001c44 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e167      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_RCC_OscConfig+0x240>)
 8005468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0x200>
 8005472:	e01b      	b.n	80054ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <HAL_RCC_OscConfig+0x248>)
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800547a:	f7fc fbe3 	bl	8001c44 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005480:	e00e      	b.n	80054a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005482:	f7fc fbdf 	bl	8001c44 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d907      	bls.n	80054a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e150      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
 8005494:	40023800 	.word	0x40023800
 8005498:	42470000 	.word	0x42470000
 800549c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a0:	4b88      	ldr	r3, [pc, #544]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 80054a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1ea      	bne.n	8005482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8097 	beq.w	80055e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ba:	2300      	movs	r3, #0
 80054bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054be:	4b81      	ldr	r3, [pc, #516]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	4b7d      	ldr	r3, [pc, #500]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	4a7c      	ldr	r2, [pc, #496]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 80054d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d8:	6413      	str	r3, [r2, #64]	; 0x40
 80054da:	4b7a      	ldr	r3, [pc, #488]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e2:	60bb      	str	r3, [r7, #8]
 80054e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054e6:	2301      	movs	r3, #1
 80054e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ea:	4b77      	ldr	r3, [pc, #476]	; (80056c8 <HAL_RCC_OscConfig+0x474>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d118      	bne.n	8005528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054f6:	4b74      	ldr	r3, [pc, #464]	; (80056c8 <HAL_RCC_OscConfig+0x474>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a73      	ldr	r2, [pc, #460]	; (80056c8 <HAL_RCC_OscConfig+0x474>)
 80054fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005502:	f7fc fb9f 	bl	8001c44 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550a:	f7fc fb9b 	bl	8001c44 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e10c      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551c:	4b6a      	ldr	r3, [pc, #424]	; (80056c8 <HAL_RCC_OscConfig+0x474>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d106      	bne.n	800553e <HAL_RCC_OscConfig+0x2ea>
 8005530:	4b64      	ldr	r3, [pc, #400]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	4a63      	ldr	r2, [pc, #396]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	6713      	str	r3, [r2, #112]	; 0x70
 800553c:	e01c      	b.n	8005578 <HAL_RCC_OscConfig+0x324>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2b05      	cmp	r3, #5
 8005544:	d10c      	bne.n	8005560 <HAL_RCC_OscConfig+0x30c>
 8005546:	4b5f      	ldr	r3, [pc, #380]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	4a5e      	ldr	r2, [pc, #376]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 800554c:	f043 0304 	orr.w	r3, r3, #4
 8005550:	6713      	str	r3, [r2, #112]	; 0x70
 8005552:	4b5c      	ldr	r3, [pc, #368]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005556:	4a5b      	ldr	r2, [pc, #364]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6713      	str	r3, [r2, #112]	; 0x70
 800555e:	e00b      	b.n	8005578 <HAL_RCC_OscConfig+0x324>
 8005560:	4b58      	ldr	r3, [pc, #352]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	4a57      	ldr	r2, [pc, #348]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	6713      	str	r3, [r2, #112]	; 0x70
 800556c:	4b55      	ldr	r3, [pc, #340]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 800556e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005570:	4a54      	ldr	r2, [pc, #336]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005572:	f023 0304 	bic.w	r3, r3, #4
 8005576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d015      	beq.n	80055ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005580:	f7fc fb60 	bl	8001c44 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005586:	e00a      	b.n	800559e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005588:	f7fc fb5c 	bl	8001c44 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	f241 3288 	movw	r2, #5000	; 0x1388
 8005596:	4293      	cmp	r3, r2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e0cb      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559e:	4b49      	ldr	r3, [pc, #292]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 80055a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0ee      	beq.n	8005588 <HAL_RCC_OscConfig+0x334>
 80055aa:	e014      	b.n	80055d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ac:	f7fc fb4a 	bl	8001c44 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b4:	f7fc fb46 	bl	8001c44 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e0b5      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ca:	4b3e      	ldr	r3, [pc, #248]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1ee      	bne.n	80055b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d105      	bne.n	80055e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055dc:	4b39      	ldr	r3, [pc, #228]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	4a38      	ldr	r2, [pc, #224]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 80055e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 80a1 	beq.w	8005734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055f2:	4b34      	ldr	r3, [pc, #208]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d05c      	beq.n	80056b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d141      	bne.n	800568a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005606:	4b31      	ldr	r3, [pc, #196]	; (80056cc <HAL_RCC_OscConfig+0x478>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560c:	f7fc fb1a 	bl	8001c44 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005614:	f7fc fb16 	bl	8001c44 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e087      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005626:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69da      	ldr	r2, [r3, #28]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	019b      	lsls	r3, r3, #6
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	3b01      	subs	r3, #1
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	061b      	lsls	r3, r3, #24
 8005656:	491b      	ldr	r1, [pc, #108]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005658:	4313      	orrs	r3, r2
 800565a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800565c:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <HAL_RCC_OscConfig+0x478>)
 800565e:	2201      	movs	r2, #1
 8005660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005662:	f7fc faef 	bl	8001c44 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800566a:	f7fc faeb 	bl	8001c44 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e05c      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567c:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0f0      	beq.n	800566a <HAL_RCC_OscConfig+0x416>
 8005688:	e054      	b.n	8005734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568a:	4b10      	ldr	r3, [pc, #64]	; (80056cc <HAL_RCC_OscConfig+0x478>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005690:	f7fc fad8 	bl	8001c44 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005698:	f7fc fad4 	bl	8001c44 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e045      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056aa:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <HAL_RCC_OscConfig+0x470>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x444>
 80056b6:	e03d      	b.n	8005734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d107      	bne.n	80056d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e038      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40007000 	.word	0x40007000
 80056cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056d0:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <HAL_RCC_OscConfig+0x4ec>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d028      	beq.n	8005730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d121      	bne.n	8005730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d11a      	bne.n	8005730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005700:	4013      	ands	r3, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005708:	4293      	cmp	r3, r2
 800570a:	d111      	bne.n	8005730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	3b01      	subs	r3, #1
 800571a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800571c:	429a      	cmp	r2, r3
 800571e:	d107      	bne.n	8005730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d001      	beq.n	8005734 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40023800 	.word	0x40023800

08005744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e0cc      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005758:	4b68      	ldr	r3, [pc, #416]	; (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d90c      	bls.n	8005780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005766:	4b65      	ldr	r3, [pc, #404]	; (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800576e:	4b63      	ldr	r3, [pc, #396]	; (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d001      	beq.n	8005780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e0b8      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d020      	beq.n	80057ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005798:	4b59      	ldr	r3, [pc, #356]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	4a58      	ldr	r2, [pc, #352]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 800579e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057b0:	4b53      	ldr	r3, [pc, #332]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4a52      	ldr	r2, [pc, #328]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057bc:	4b50      	ldr	r3, [pc, #320]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	494d      	ldr	r1, [pc, #308]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d044      	beq.n	8005864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d107      	bne.n	80057f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e2:	4b47      	ldr	r3, [pc, #284]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d119      	bne.n	8005822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e07f      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d003      	beq.n	8005802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d107      	bne.n	8005812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005802:	4b3f      	ldr	r3, [pc, #252]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e06f      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005812:	4b3b      	ldr	r3, [pc, #236]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e067      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005822:	4b37      	ldr	r3, [pc, #220]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f023 0203 	bic.w	r2, r3, #3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	4934      	ldr	r1, [pc, #208]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	4313      	orrs	r3, r2
 8005832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005834:	f7fc fa06 	bl	8001c44 <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583a:	e00a      	b.n	8005852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800583c:	f7fc fa02 	bl	8001c44 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f241 3288 	movw	r2, #5000	; 0x1388
 800584a:	4293      	cmp	r3, r2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e04f      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005852:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 020c 	and.w	r2, r3, #12
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	429a      	cmp	r2, r3
 8005862:	d1eb      	bne.n	800583c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005864:	4b25      	ldr	r3, [pc, #148]	; (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d20c      	bcs.n	800588c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005872:	4b22      	ldr	r3, [pc, #136]	; (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800587a:	4b20      	ldr	r3, [pc, #128]	; (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d001      	beq.n	800588c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e032      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005898:	4b19      	ldr	r3, [pc, #100]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4916      	ldr	r1, [pc, #88]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058b6:	4b12      	ldr	r3, [pc, #72]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	490e      	ldr	r1, [pc, #56]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058ca:	f000 f821 	bl	8005910 <HAL_RCC_GetSysClockFreq>
 80058ce:	4602      	mov	r2, r0
 80058d0:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	490a      	ldr	r1, [pc, #40]	; (8005904 <HAL_RCC_ClockConfig+0x1c0>)
 80058dc:	5ccb      	ldrb	r3, [r1, r3]
 80058de:	fa22 f303 	lsr.w	r3, r2, r3
 80058e2:	4a09      	ldr	r2, [pc, #36]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80058e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <HAL_RCC_ClockConfig+0x1c8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fc f966 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40023c00 	.word	0x40023c00
 8005900:	40023800 	.word	0x40023800
 8005904:	0800abd4 	.word	0x0800abd4
 8005908:	20000004 	.word	0x20000004
 800590c:	20000008 	.word	0x20000008

08005910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005914:	b094      	sub	sp, #80	; 0x50
 8005916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	647b      	str	r3, [r7, #68]	; 0x44
 800591c:	2300      	movs	r3, #0
 800591e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005920:	2300      	movs	r3, #0
 8005922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005928:	4b79      	ldr	r3, [pc, #484]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 030c 	and.w	r3, r3, #12
 8005930:	2b08      	cmp	r3, #8
 8005932:	d00d      	beq.n	8005950 <HAL_RCC_GetSysClockFreq+0x40>
 8005934:	2b08      	cmp	r3, #8
 8005936:	f200 80e1 	bhi.w	8005afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0x34>
 800593e:	2b04      	cmp	r3, #4
 8005940:	d003      	beq.n	800594a <HAL_RCC_GetSysClockFreq+0x3a>
 8005942:	e0db      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005944:	4b73      	ldr	r3, [pc, #460]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005946:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005948:	e0db      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800594a:	4b73      	ldr	r3, [pc, #460]	; (8005b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800594c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800594e:	e0d8      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005950:	4b6f      	ldr	r3, [pc, #444]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005958:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800595a:	4b6d      	ldr	r3, [pc, #436]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d063      	beq.n	8005a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005966:	4b6a      	ldr	r3, [pc, #424]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	099b      	lsrs	r3, r3, #6
 800596c:	2200      	movs	r2, #0
 800596e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005970:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005978:	633b      	str	r3, [r7, #48]	; 0x30
 800597a:	2300      	movs	r3, #0
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
 800597e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005982:	4622      	mov	r2, r4
 8005984:	462b      	mov	r3, r5
 8005986:	f04f 0000 	mov.w	r0, #0
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	0159      	lsls	r1, r3, #5
 8005990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005994:	0150      	lsls	r0, r2, #5
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4621      	mov	r1, r4
 800599c:	1a51      	subs	r1, r2, r1
 800599e:	6139      	str	r1, [r7, #16]
 80059a0:	4629      	mov	r1, r5
 80059a2:	eb63 0301 	sbc.w	r3, r3, r1
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059b4:	4659      	mov	r1, fp
 80059b6:	018b      	lsls	r3, r1, #6
 80059b8:	4651      	mov	r1, sl
 80059ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059be:	4651      	mov	r1, sl
 80059c0:	018a      	lsls	r2, r1, #6
 80059c2:	4651      	mov	r1, sl
 80059c4:	ebb2 0801 	subs.w	r8, r2, r1
 80059c8:	4659      	mov	r1, fp
 80059ca:	eb63 0901 	sbc.w	r9, r3, r1
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059e2:	4690      	mov	r8, r2
 80059e4:	4699      	mov	r9, r3
 80059e6:	4623      	mov	r3, r4
 80059e8:	eb18 0303 	adds.w	r3, r8, r3
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	462b      	mov	r3, r5
 80059f0:	eb49 0303 	adc.w	r3, r9, r3
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a02:	4629      	mov	r1, r5
 8005a04:	024b      	lsls	r3, r1, #9
 8005a06:	4621      	mov	r1, r4
 8005a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	024a      	lsls	r2, r1, #9
 8005a10:	4610      	mov	r0, r2
 8005a12:	4619      	mov	r1, r3
 8005a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a16:	2200      	movs	r2, #0
 8005a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a20:	f7fb f8e2 	bl	8000be8 <__aeabi_uldivmod>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4613      	mov	r3, r2
 8005a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a2c:	e058      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a2e:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	099b      	lsrs	r3, r3, #6
 8005a34:	2200      	movs	r2, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	4611      	mov	r1, r2
 8005a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a3e:	623b      	str	r3, [r7, #32]
 8005a40:	2300      	movs	r3, #0
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
 8005a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	f04f 0000 	mov.w	r0, #0
 8005a50:	f04f 0100 	mov.w	r1, #0
 8005a54:	0159      	lsls	r1, r3, #5
 8005a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a5a:	0150      	lsls	r0, r2, #5
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4641      	mov	r1, r8
 8005a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a66:	4649      	mov	r1, r9
 8005a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a80:	ebb2 040a 	subs.w	r4, r2, sl
 8005a84:	eb63 050b 	sbc.w	r5, r3, fp
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	00eb      	lsls	r3, r5, #3
 8005a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a96:	00e2      	lsls	r2, r4, #3
 8005a98:	4614      	mov	r4, r2
 8005a9a:	461d      	mov	r5, r3
 8005a9c:	4643      	mov	r3, r8
 8005a9e:	18e3      	adds	r3, r4, r3
 8005aa0:	603b      	str	r3, [r7, #0]
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	eb45 0303 	adc.w	r3, r5, r3
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	028b      	lsls	r3, r1, #10
 8005aba:	4621      	mov	r1, r4
 8005abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	028a      	lsls	r2, r1, #10
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aca:	2200      	movs	r2, #0
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	61fa      	str	r2, [r7, #28]
 8005ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ad4:	f7fb f888 	bl	8000be8 <__aeabi_uldivmod>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4613      	mov	r3, r2
 8005ade:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	3301      	adds	r3, #1
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005afa:	e002      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005afe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3750      	adds	r7, #80	; 0x50
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800
 8005b14:	00f42400 	.word	0x00f42400
 8005b18:	007a1200 	.word	0x007a1200

08005b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b20:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b22:	681b      	ldr	r3, [r3, #0]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000004 	.word	0x20000004

08005b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b38:	f7ff fff0 	bl	8005b1c <HAL_RCC_GetHCLKFreq>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	0a9b      	lsrs	r3, r3, #10
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	4903      	ldr	r1, [pc, #12]	; (8005b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b4a:	5ccb      	ldrb	r3, [r1, r3]
 8005b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	40023800 	.word	0x40023800
 8005b58:	0800abe4 	.word	0x0800abe4

08005b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e07b      	b.n	8005c66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d108      	bne.n	8005b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b7e:	d009      	beq.n	8005b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	61da      	str	r2, [r3, #28]
 8005b86:	e005      	b.n	8005b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fb fc4c 	bl	800144c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c18:	ea42 0103 	orr.w	r1, r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	f003 0104 	and.w	r1, r3, #4
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	f003 0210 	and.w	r2, r3, #16
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b088      	sub	sp, #32
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_SPI_Transmit+0x22>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e126      	b.n	8005ede <HAL_SPI_Transmit+0x270>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c98:	f7fb ffd4 	bl	8001c44 <HAL_GetTick>
 8005c9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d002      	beq.n	8005cb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cb2:	e10b      	b.n	8005ecc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_SPI_Transmit+0x52>
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d102      	bne.n	8005cc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cc4:	e102      	b.n	8005ecc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2203      	movs	r2, #3
 8005cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0c:	d10f      	bne.n	8005d2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	d007      	beq.n	8005d4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d54:	d14b      	bne.n	8005dee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_SPI_Transmit+0xf6>
 8005d5e:	8afb      	ldrh	r3, [r7, #22]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d13e      	bne.n	8005de2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	881a      	ldrh	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	1c9a      	adds	r2, r3, #2
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d88:	e02b      	b.n	8005de2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d112      	bne.n	8005dbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	881a      	ldrh	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dbc:	e011      	b.n	8005de2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dbe:	f7fb ff41 	bl	8001c44 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d803      	bhi.n	8005dd6 <HAL_SPI_Transmit+0x168>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd4:	d102      	bne.n	8005ddc <HAL_SPI_Transmit+0x16e>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005de0:	e074      	b.n	8005ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1ce      	bne.n	8005d8a <HAL_SPI_Transmit+0x11c>
 8005dec:	e04c      	b.n	8005e88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <HAL_SPI_Transmit+0x18e>
 8005df6:	8afb      	ldrh	r3, [r7, #22]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d140      	bne.n	8005e7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	7812      	ldrb	r2, [r2, #0]
 8005e08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e22:	e02c      	b.n	8005e7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d113      	bne.n	8005e5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	7812      	ldrb	r2, [r2, #0]
 8005e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e58:	e011      	b.n	8005e7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5a:	f7fb fef3 	bl	8001c44 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d803      	bhi.n	8005e72 <HAL_SPI_Transmit+0x204>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d102      	bne.n	8005e78 <HAL_SPI_Transmit+0x20a>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d102      	bne.n	8005e7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e7c:	e026      	b.n	8005ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1cd      	bne.n	8005e24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 f9ff 	bl	8006290 <SPI_EndRxTxTransaction>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	e000      	b.n	8005ecc <HAL_SPI_Transmit+0x25e>
  }

error:
 8005eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3720      	adds	r7, #32
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_SPI_Transmit_DMA+0x20>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e09b      	b.n	8006040 <HAL_SPI_Transmit_DMA+0x158>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d002      	beq.n	8005f22 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f20:	e089      	b.n	8006036 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <HAL_SPI_Transmit_DMA+0x46>
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f32:	e080      	b.n	8006036 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2203      	movs	r2, #3
 8005f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	88fa      	ldrh	r2, [r7, #6]
 8005f4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	88fa      	ldrh	r2, [r7, #6]
 8005f52:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7a:	d10f      	bne.n	8005f9c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa0:	4a29      	ldr	r2, [pc, #164]	; (8006048 <HAL_SPI_Transmit_DMA+0x160>)
 8005fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa8:	4a28      	ldr	r2, [pc, #160]	; (800604c <HAL_SPI_Transmit_DMA+0x164>)
 8005faa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb0:	4a27      	ldr	r2, [pc, #156]	; (8006050 <HAL_SPI_Transmit_DMA+0x168>)
 8005fb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb8:	2200      	movs	r2, #0
 8005fba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	330c      	adds	r3, #12
 8005fcc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005fd4:	f7fc f826 	bl	8002024 <HAL_DMA_Start_IT>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00c      	beq.n	8005ff8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe2:	f043 0210 	orr.w	r2, r3, #16
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005ff6:	e01e      	b.n	8006036 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	d007      	beq.n	8006016 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006014:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0220 	orr.w	r2, r2, #32
 8006024:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0202 	orr.w	r2, r2, #2
 8006034:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800603e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	08006125 	.word	0x08006125
 800604c:	0800607d 	.word	0x0800607d
 8006050:	08006141 	.word	0x08006141

08006054 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800608a:	f7fb fddb 	bl	8001c44 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609e:	d03b      	beq.n	8006118 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0220 	bic.w	r2, r2, #32
 80060ae:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0202 	bic.w	r2, r2, #2
 80060be:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	2164      	movs	r1, #100	; 0x64
 80060c4:	6978      	ldr	r0, [r7, #20]
 80060c6:	f000 f8e3 	bl	8006290 <SPI_EndRxTxTransaction>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006110:	6978      	ldr	r0, [r7, #20]
 8006112:	f7ff ffa9 	bl	8006068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006116:	e002      	b.n	800611e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006118:	6978      	ldr	r0, [r7, #20]
 800611a:	f001 fd9b 	bl	8007c54 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff ff8e 	bl	8006054 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0203 	bic.w	r2, r2, #3
 800615c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	f043 0210 	orr.w	r2, r3, #16
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff ff78 	bl	8006068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006190:	f7fb fd58 	bl	8001c44 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	1a9b      	subs	r3, r3, r2
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	4413      	add	r3, r2
 800619e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061a0:	f7fb fd50 	bl	8001c44 <HAL_GetTick>
 80061a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061a6:	4b39      	ldr	r3, [pc, #228]	; (800628c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	015b      	lsls	r3, r3, #5
 80061ac:	0d1b      	lsrs	r3, r3, #20
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	fb02 f303 	mul.w	r3, r2, r3
 80061b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061b6:	e054      	b.n	8006262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d050      	beq.n	8006262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061c0:	f7fb fd40 	bl	8001c44 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d902      	bls.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d13d      	bne.n	8006252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ee:	d111      	bne.n	8006214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f8:	d004      	beq.n	8006204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006202:	d107      	bne.n	8006214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621c:	d10f      	bne.n	800623e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800623c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e017      	b.n	8006282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	3b01      	subs	r3, #1
 8006260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4013      	ands	r3, r2
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	429a      	cmp	r2, r3
 8006270:	bf0c      	ite	eq
 8006272:	2301      	moveq	r3, #1
 8006274:	2300      	movne	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	429a      	cmp	r2, r3
 800627e:	d19b      	bne.n	80061b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000004 	.word	0x20000004

08006290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800629c:	4b1b      	ldr	r3, [pc, #108]	; (800630c <SPI_EndRxTxTransaction+0x7c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <SPI_EndRxTxTransaction+0x80>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	0d5b      	lsrs	r3, r3, #21
 80062a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062ac:	fb02 f303 	mul.w	r3, r2, r3
 80062b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ba:	d112      	bne.n	80062e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2200      	movs	r2, #0
 80062c4:	2180      	movs	r1, #128	; 0x80
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff ff5a 	bl	8006180 <SPI_WaitFlagStateUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d6:	f043 0220 	orr.w	r2, r3, #32
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e00f      	b.n	8006302 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d0f2      	beq.n	80062e2 <SPI_EndRxTxTransaction+0x52>
 80062fc:	e000      	b.n	8006300 <SPI_EndRxTxTransaction+0x70>
        break;
 80062fe:	bf00      	nop
  }

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000004 	.word	0x20000004
 8006310:	165e9f81 	.word	0x165e9f81

08006314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e041      	b.n	80063aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fb fb70 	bl	8001a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f000 fc12 	bl	8006b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e041      	b.n	8006448 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d106      	bne.n	80063de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7fb faff 	bl	80019dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3304      	adds	r3, #4
 80063ee:	4619      	mov	r1, r3
 80063f0:	4610      	mov	r0, r2
 80063f2:	f000 fbc3 	bl	8006b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d109      	bne.n	8006474 <HAL_TIM_PWM_Start+0x24>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	bf14      	ite	ne
 800646c:	2301      	movne	r3, #1
 800646e:	2300      	moveq	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	e022      	b.n	80064ba <HAL_TIM_PWM_Start+0x6a>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b04      	cmp	r3, #4
 8006478:	d109      	bne.n	800648e <HAL_TIM_PWM_Start+0x3e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b01      	cmp	r3, #1
 8006484:	bf14      	ite	ne
 8006486:	2301      	movne	r3, #1
 8006488:	2300      	moveq	r3, #0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	e015      	b.n	80064ba <HAL_TIM_PWM_Start+0x6a>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b08      	cmp	r3, #8
 8006492:	d109      	bne.n	80064a8 <HAL_TIM_PWM_Start+0x58>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	bf14      	ite	ne
 80064a0:	2301      	movne	r3, #1
 80064a2:	2300      	moveq	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	e008      	b.n	80064ba <HAL_TIM_PWM_Start+0x6a>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	bf14      	ite	ne
 80064b4:	2301      	movne	r3, #1
 80064b6:	2300      	moveq	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e07c      	b.n	80065bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_PWM_Start+0x82>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d0:	e013      	b.n	80064fa <HAL_TIM_PWM_Start+0xaa>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d104      	bne.n	80064e2 <HAL_TIM_PWM_Start+0x92>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e0:	e00b      	b.n	80064fa <HAL_TIM_PWM_Start+0xaa>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d104      	bne.n	80064f2 <HAL_TIM_PWM_Start+0xa2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f0:	e003      	b.n	80064fa <HAL_TIM_PWM_Start+0xaa>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2202      	movs	r2, #2
 80064f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2201      	movs	r2, #1
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 feb4 	bl	8007270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a2d      	ldr	r2, [pc, #180]	; (80065c4 <HAL_TIM_PWM_Start+0x174>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_TIM_PWM_Start+0xcc>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a2c      	ldr	r2, [pc, #176]	; (80065c8 <HAL_TIM_PWM_Start+0x178>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d101      	bne.n	8006520 <HAL_TIM_PWM_Start+0xd0>
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <HAL_TIM_PWM_Start+0xd2>
 8006520:	2300      	movs	r3, #0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d007      	beq.n	8006536 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006534:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a22      	ldr	r2, [pc, #136]	; (80065c4 <HAL_TIM_PWM_Start+0x174>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d022      	beq.n	8006586 <HAL_TIM_PWM_Start+0x136>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006548:	d01d      	beq.n	8006586 <HAL_TIM_PWM_Start+0x136>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <HAL_TIM_PWM_Start+0x17c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d018      	beq.n	8006586 <HAL_TIM_PWM_Start+0x136>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <HAL_TIM_PWM_Start+0x180>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_TIM_PWM_Start+0x136>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <HAL_TIM_PWM_Start+0x184>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00e      	beq.n	8006586 <HAL_TIM_PWM_Start+0x136>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <HAL_TIM_PWM_Start+0x178>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_TIM_PWM_Start+0x136>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <HAL_TIM_PWM_Start+0x188>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_TIM_PWM_Start+0x136>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a16      	ldr	r2, [pc, #88]	; (80065dc <HAL_TIM_PWM_Start+0x18c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d111      	bne.n	80065aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b06      	cmp	r3, #6
 8006596:	d010      	beq.n	80065ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a8:	e007      	b.n	80065ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0201 	orr.w	r2, r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	40010000 	.word	0x40010000
 80065c8:	40010400 	.word	0x40010400
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800
 80065d4:	40000c00 	.word	0x40000c00
 80065d8:	40014000 	.word	0x40014000
 80065dc:	40001800 	.word	0x40001800

080065e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2200      	movs	r2, #0
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fe3c 	bl	8007270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a2e      	ldr	r2, [pc, #184]	; (80066b8 <HAL_TIM_PWM_Stop+0xd8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <HAL_TIM_PWM_Stop+0x2c>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a2d      	ldr	r2, [pc, #180]	; (80066bc <HAL_TIM_PWM_Stop+0xdc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d101      	bne.n	8006610 <HAL_TIM_PWM_Stop+0x30>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <HAL_TIM_PWM_Stop+0x32>
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d017      	beq.n	8006646 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6a1a      	ldr	r2, [r3, #32]
 800661c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006620:	4013      	ands	r3, r2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10f      	bne.n	8006646 <HAL_TIM_PWM_Stop+0x66>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6a1a      	ldr	r2, [r3, #32]
 800662c:	f240 4344 	movw	r3, #1092	; 0x444
 8006630:	4013      	ands	r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d107      	bne.n	8006646 <HAL_TIM_PWM_Stop+0x66>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006644:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6a1a      	ldr	r2, [r3, #32]
 800664c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006650:	4013      	ands	r3, r2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10f      	bne.n	8006676 <HAL_TIM_PWM_Stop+0x96>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6a1a      	ldr	r2, [r3, #32]
 800665c:	f240 4344 	movw	r3, #1092	; 0x444
 8006660:	4013      	ands	r3, r2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d107      	bne.n	8006676 <HAL_TIM_PWM_Stop+0x96>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0201 	bic.w	r2, r2, #1
 8006674:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d104      	bne.n	8006686 <HAL_TIM_PWM_Stop+0xa6>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006684:	e013      	b.n	80066ae <HAL_TIM_PWM_Stop+0xce>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b04      	cmp	r3, #4
 800668a:	d104      	bne.n	8006696 <HAL_TIM_PWM_Stop+0xb6>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006694:	e00b      	b.n	80066ae <HAL_TIM_PWM_Stop+0xce>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b08      	cmp	r3, #8
 800669a:	d104      	bne.n	80066a6 <HAL_TIM_PWM_Stop+0xc6>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a4:	e003      	b.n	80066ae <HAL_TIM_PWM_Stop+0xce>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40010000 	.word	0x40010000
 80066bc:	40010400 	.word	0x40010400

080066c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e041      	b.n	8006756 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f839 	bl	800675e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3304      	adds	r3, #4
 80066fc:	4619      	mov	r1, r3
 80066fe:	4610      	mov	r0, r2
 8006700:	f000 fa3c 	bl	8006b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b086      	sub	sp, #24
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e097      	b.n	80068b6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fb f8d6 	bl	800194c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067b6:	f023 0307 	bic.w	r3, r3, #7
 80067ba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f000 f9d8 	bl	8006b7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f4:	f023 0303 	bic.w	r3, r3, #3
 80067f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	4313      	orrs	r3, r2
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006812:	f023 030c 	bic.w	r3, r3, #12
 8006816:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800681e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	4313      	orrs	r3, r2
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	011a      	lsls	r2, r3, #4
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	031b      	lsls	r3, r3, #12
 8006842:	4313      	orrs	r3, r2
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006850:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006858:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	4313      	orrs	r3, r2
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b086      	sub	sp, #24
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d101      	bne.n	80068dc <HAL_TIM_IC_ConfigChannel+0x1e>
 80068d8:	2302      	movs	r3, #2
 80068da:	e088      	b.n	80069ee <HAL_TIM_IC_ConfigChannel+0x130>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d11b      	bne.n	8006922 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6819      	ldr	r1, [r3, #0]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f000 fb8f 	bl	800701c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699a      	ldr	r2, [r3, #24]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 020c 	bic.w	r2, r2, #12
 800690c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6999      	ldr	r1, [r3, #24]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	619a      	str	r2, [r3, #24]
 8006920:	e060      	b.n	80069e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b04      	cmp	r3, #4
 8006926:	d11c      	bne.n	8006962 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6819      	ldr	r1, [r3, #0]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f000 fbe4 	bl	8007104 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	699a      	ldr	r2, [r3, #24]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800694a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6999      	ldr	r1, [r3, #24]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	021a      	lsls	r2, r3, #8
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	619a      	str	r2, [r3, #24]
 8006960:	e040      	b.n	80069e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b08      	cmp	r3, #8
 8006966:	d11b      	bne.n	80069a0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	6819      	ldr	r1, [r3, #0]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f000 fc01 	bl	800717e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69da      	ldr	r2, [r3, #28]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 020c 	bic.w	r2, r2, #12
 800698a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69d9      	ldr	r1, [r3, #28]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	61da      	str	r2, [r3, #28]
 800699e:	e021      	b.n	80069e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b0c      	cmp	r3, #12
 80069a4:	d11c      	bne.n	80069e0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	6819      	ldr	r1, [r3, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f000 fc1e 	bl	80071f6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069c8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69d9      	ldr	r1, [r3, #28]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	021a      	lsls	r2, r3, #8
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	61da      	str	r2, [r3, #28]
 80069de:	e001      	b.n	80069e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e0ae      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b0c      	cmp	r3, #12
 8006a22:	f200 809f 	bhi.w	8006b64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a61 	.word	0x08006a61
 8006a30:	08006b65 	.word	0x08006b65
 8006a34:	08006b65 	.word	0x08006b65
 8006a38:	08006b65 	.word	0x08006b65
 8006a3c:	08006aa1 	.word	0x08006aa1
 8006a40:	08006b65 	.word	0x08006b65
 8006a44:	08006b65 	.word	0x08006b65
 8006a48:	08006b65 	.word	0x08006b65
 8006a4c:	08006ae3 	.word	0x08006ae3
 8006a50:	08006b65 	.word	0x08006b65
 8006a54:	08006b65 	.word	0x08006b65
 8006a58:	08006b65 	.word	0x08006b65
 8006a5c:	08006b23 	.word	0x08006b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f928 	bl	8006cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0208 	orr.w	r2, r2, #8
 8006a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0204 	bic.w	r2, r2, #4
 8006a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6999      	ldr	r1, [r3, #24]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	691a      	ldr	r2, [r3, #16]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	619a      	str	r2, [r3, #24]
      break;
 8006a9e:	e064      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 f978 	bl	8006d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699a      	ldr	r2, [r3, #24]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6999      	ldr	r1, [r3, #24]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	021a      	lsls	r2, r3, #8
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	619a      	str	r2, [r3, #24]
      break;
 8006ae0:	e043      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 f9cd 	bl	8006e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0208 	orr.w	r2, r2, #8
 8006afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0204 	bic.w	r2, r2, #4
 8006b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69d9      	ldr	r1, [r3, #28]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	61da      	str	r2, [r3, #28]
      break;
 8006b20:	e023      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fa21 	bl	8006f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69da      	ldr	r2, [r3, #28]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69da      	ldr	r2, [r3, #28]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69d9      	ldr	r1, [r3, #28]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	021a      	lsls	r2, r3, #8
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	61da      	str	r2, [r3, #28]
      break;
 8006b62:	e002      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	75fb      	strb	r3, [r7, #23]
      break;
 8006b68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a40      	ldr	r2, [pc, #256]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9a:	d00f      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3d      	ldr	r2, [pc, #244]	; (8006c94 <TIM_Base_SetConfig+0x118>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00b      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a3c      	ldr	r2, [pc, #240]	; (8006c98 <TIM_Base_SetConfig+0x11c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d007      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a3b      	ldr	r2, [pc, #236]	; (8006c9c <TIM_Base_SetConfig+0x120>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3a      	ldr	r2, [pc, #232]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d108      	bne.n	8006bce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2f      	ldr	r2, [pc, #188]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d02b      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bdc:	d027      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2c      	ldr	r2, [pc, #176]	; (8006c94 <TIM_Base_SetConfig+0x118>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d023      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2b      	ldr	r2, [pc, #172]	; (8006c98 <TIM_Base_SetConfig+0x11c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d01f      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <TIM_Base_SetConfig+0x120>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01b      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a29      	ldr	r2, [pc, #164]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d017      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a28      	ldr	r2, [pc, #160]	; (8006ca4 <TIM_Base_SetConfig+0x128>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a27      	ldr	r2, [pc, #156]	; (8006ca8 <TIM_Base_SetConfig+0x12c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00f      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a26      	ldr	r2, [pc, #152]	; (8006cac <TIM_Base_SetConfig+0x130>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00b      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a25      	ldr	r2, [pc, #148]	; (8006cb0 <TIM_Base_SetConfig+0x134>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a24      	ldr	r2, [pc, #144]	; (8006cb4 <TIM_Base_SetConfig+0x138>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a23      	ldr	r2, [pc, #140]	; (8006cb8 <TIM_Base_SetConfig+0x13c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d108      	bne.n	8006c40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a0a      	ldr	r2, [pc, #40]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d003      	beq.n	8006c74 <TIM_Base_SetConfig+0xf8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d103      	bne.n	8006c7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	615a      	str	r2, [r3, #20]
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40000c00 	.word	0x40000c00
 8006ca0:	40010400 	.word	0x40010400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800
 8006cb0:	40001800 	.word	0x40001800
 8006cb4:	40001c00 	.word	0x40001c00
 8006cb8:	40002000 	.word	0x40002000

08006cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f023 0201 	bic.w	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 0302 	bic.w	r3, r3, #2
 8006d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a20      	ldr	r2, [pc, #128]	; (8006d94 <TIM_OC1_SetConfig+0xd8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_OC1_SetConfig+0x64>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <TIM_OC1_SetConfig+0xdc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d10c      	bne.n	8006d3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0308 	bic.w	r3, r3, #8
 8006d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 0304 	bic.w	r3, r3, #4
 8006d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a15      	ldr	r2, [pc, #84]	; (8006d94 <TIM_OC1_SetConfig+0xd8>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_OC1_SetConfig+0x8e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a14      	ldr	r2, [pc, #80]	; (8006d98 <TIM_OC1_SetConfig+0xdc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d111      	bne.n	8006d6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	621a      	str	r2, [r3, #32]
}
 8006d88:	bf00      	nop
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40010400 	.word	0x40010400

08006d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	f023 0210 	bic.w	r2, r3, #16
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f023 0320 	bic.w	r3, r3, #32
 8006de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a22      	ldr	r2, [pc, #136]	; (8006e80 <TIM_OC2_SetConfig+0xe4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC2_SetConfig+0x68>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a21      	ldr	r2, [pc, #132]	; (8006e84 <TIM_OC2_SetConfig+0xe8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d10d      	bne.n	8006e20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a17      	ldr	r2, [pc, #92]	; (8006e80 <TIM_OC2_SetConfig+0xe4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC2_SetConfig+0x94>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a16      	ldr	r2, [pc, #88]	; (8006e84 <TIM_OC2_SetConfig+0xe8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d113      	bne.n	8006e58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	621a      	str	r2, [r3, #32]
}
 8006e72:	bf00      	nop
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40010400 	.word	0x40010400

08006e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0303 	bic.w	r3, r3, #3
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a21      	ldr	r2, [pc, #132]	; (8006f68 <TIM_OC3_SetConfig+0xe0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d003      	beq.n	8006eee <TIM_OC3_SetConfig+0x66>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <TIM_OC3_SetConfig+0xe4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10d      	bne.n	8006f0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a16      	ldr	r2, [pc, #88]	; (8006f68 <TIM_OC3_SetConfig+0xe0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC3_SetConfig+0x92>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <TIM_OC3_SetConfig+0xe4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d113      	bne.n	8006f42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	621a      	str	r2, [r3, #32]
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40010400 	.word	0x40010400

08006f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	031b      	lsls	r3, r3, #12
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a12      	ldr	r2, [pc, #72]	; (8007014 <TIM_OC4_SetConfig+0xa4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC4_SetConfig+0x68>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a11      	ldr	r2, [pc, #68]	; (8007018 <TIM_OC4_SetConfig+0xa8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d109      	bne.n	8006fec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40010000 	.word	0x40010000
 8007018:	40010400 	.word	0x40010400

0800701c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f023 0201 	bic.w	r2, r3, #1
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4a28      	ldr	r2, [pc, #160]	; (80070e8 <TIM_TI1_SetConfig+0xcc>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d01b      	beq.n	8007082 <TIM_TI1_SetConfig+0x66>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007050:	d017      	beq.n	8007082 <TIM_TI1_SetConfig+0x66>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4a25      	ldr	r2, [pc, #148]	; (80070ec <TIM_TI1_SetConfig+0xd0>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d013      	beq.n	8007082 <TIM_TI1_SetConfig+0x66>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4a24      	ldr	r2, [pc, #144]	; (80070f0 <TIM_TI1_SetConfig+0xd4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00f      	beq.n	8007082 <TIM_TI1_SetConfig+0x66>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4a23      	ldr	r2, [pc, #140]	; (80070f4 <TIM_TI1_SetConfig+0xd8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00b      	beq.n	8007082 <TIM_TI1_SetConfig+0x66>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a22      	ldr	r2, [pc, #136]	; (80070f8 <TIM_TI1_SetConfig+0xdc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d007      	beq.n	8007082 <TIM_TI1_SetConfig+0x66>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4a21      	ldr	r2, [pc, #132]	; (80070fc <TIM_TI1_SetConfig+0xe0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d003      	beq.n	8007082 <TIM_TI1_SetConfig+0x66>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4a20      	ldr	r2, [pc, #128]	; (8007100 <TIM_TI1_SetConfig+0xe4>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d101      	bne.n	8007086 <TIM_TI1_SetConfig+0x6a>
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <TIM_TI1_SetConfig+0x6c>
 8007086:	2300      	movs	r3, #0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f023 0303 	bic.w	r3, r3, #3
 8007092:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4313      	orrs	r3, r2
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e003      	b.n	80070a6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f043 0301 	orr.w	r3, r3, #1
 80070a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f023 030a 	bic.w	r3, r3, #10
 80070c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f003 030a 	and.w	r3, r3, #10
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40010000 	.word	0x40010000
 80070ec:	40000400 	.word	0x40000400
 80070f0:	40000800 	.word	0x40000800
 80070f4:	40000c00 	.word	0x40000c00
 80070f8:	40010400 	.word	0x40010400
 80070fc:	40014000 	.word	0x40014000
 8007100:	40001800 	.word	0x40001800

08007104 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	f023 0210 	bic.w	r2, r3, #16
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007142:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	031b      	lsls	r3, r3, #12
 8007148:	b29b      	uxth	r3, r3
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007156:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800717e:	b480      	push	{r7}
 8007180:	b087      	sub	sp, #28
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	607a      	str	r2, [r7, #4]
 800718a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f023 0303 	bic.w	r3, r3, #3
 80071aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80071ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	021b      	lsls	r3, r3, #8
 80071d4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	4313      	orrs	r3, r2
 80071dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b087      	sub	sp, #28
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007222:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	021b      	lsls	r3, r3, #8
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007234:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	031b      	lsls	r3, r3, #12
 800723a:	b29b      	uxth	r3, r3
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007248:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	031b      	lsls	r3, r3, #12
 800724e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	621a      	str	r2, [r3, #32]
}
 8007264:	bf00      	nop
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	2201      	movs	r2, #1
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1a      	ldr	r2, [r3, #32]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	43db      	mvns	r3, r3
 8007292:	401a      	ands	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a1a      	ldr	r2, [r3, #32]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f003 031f 	and.w	r3, r3, #31
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	fa01 f303 	lsl.w	r3, r1, r3
 80072a8:	431a      	orrs	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
	...

080072bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d101      	bne.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072d0:	2302      	movs	r3, #2
 80072d2:	e05a      	b.n	800738a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a21      	ldr	r2, [pc, #132]	; (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d022      	beq.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007320:	d01d      	beq.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1d      	ldr	r2, [pc, #116]	; (800739c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d018      	beq.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1b      	ldr	r2, [pc, #108]	; (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1a      	ldr	r2, [pc, #104]	; (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00e      	beq.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d009      	beq.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a17      	ldr	r2, [pc, #92]	; (80073ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d004      	beq.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a15      	ldr	r2, [pc, #84]	; (80073b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d10c      	bne.n	8007378 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	4313      	orrs	r3, r2
 800736e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40010000 	.word	0x40010000
 800739c:	40000400 	.word	0x40000400
 80073a0:	40000800 	.word	0x40000800
 80073a4:	40000c00 	.word	0x40000c00
 80073a8:	40010400 	.word	0x40010400
 80073ac:	40014000 	.word	0x40014000
 80073b0:	40001800 	.word	0x40001800

080073b4 <f_receiveWord>:
uint16_t curr_reg = INA219_CALIB_VALUE;
uint16_t curr_lsc = INA219_CURRENT_LSB * 1000000;


static uint16_t f_receiveWord(uint8_t address)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af02      	add	r7, sp, #8
 80073ba:	4603      	mov	r3, r0
 80073bc:	71fb      	strb	r3, [r7, #7]
	uint8_t receive[2];

	HAL_I2C_Master_Transmit(&hi2c1, INA219_I2C_ADDRESS, &address, 1, 50);
 80073be:	1dfa      	adds	r2, r7, #7
 80073c0:	2332      	movs	r3, #50	; 0x32
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	2301      	movs	r3, #1
 80073c6:	2180      	movs	r1, #128	; 0x80
 80073c8:	480b      	ldr	r0, [pc, #44]	; (80073f8 <f_receiveWord+0x44>)
 80073ca:	f7fb fc17 	bl	8002bfc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, INA219_I2C_ADDRESS, (uint8_t*)&receive, 2, 50);
 80073ce:	f107 020c 	add.w	r2, r7, #12
 80073d2:	2332      	movs	r3, #50	; 0x32
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	2302      	movs	r3, #2
 80073d8:	2180      	movs	r1, #128	; 0x80
 80073da:	4807      	ldr	r0, [pc, #28]	; (80073f8 <f_receiveWord+0x44>)
 80073dc:	f7fb fd0c 	bl	8002df8 <HAL_I2C_Master_Receive>

	return (receive[0] << 8) | receive[1];
 80073e0:	7b3b      	ldrb	r3, [r7, #12]
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	b21a      	sxth	r2, r3
 80073e6:	7b7b      	ldrb	r3, [r7, #13]
 80073e8:	b21b      	sxth	r3, r3
 80073ea:	4313      	orrs	r3, r2
 80073ec:	b21b      	sxth	r3, r3
 80073ee:	b29b      	uxth	r3, r3
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	200001fc 	.word	0x200001fc

080073fc <f_sendWord>:

static inline void f_sendWord(uint8_t address, uint16_t word)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af02      	add	r7, sp, #8
 8007402:	4603      	mov	r3, r0
 8007404:	460a      	mov	r2, r1
 8007406:	71fb      	strb	r3, [r7, #7]
 8007408:	4613      	mov	r3, r2
 800740a:	80bb      	strh	r3, [r7, #4]
	uint8_t transmit[3] = {address, word >> 8, word & 0xFF};
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	733b      	strb	r3, [r7, #12]
 8007410:	88bb      	ldrh	r3, [r7, #4]
 8007412:	0a1b      	lsrs	r3, r3, #8
 8007414:	b29b      	uxth	r3, r3
 8007416:	b2db      	uxtb	r3, r3
 8007418:	737b      	strb	r3, [r7, #13]
 800741a:	88bb      	ldrh	r3, [r7, #4]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&hi2c1, INA219_I2C_ADDRESS, (uint8_t*)&transmit, 3, 50);
 8007420:	f107 020c 	add.w	r2, r7, #12
 8007424:	2332      	movs	r3, #50	; 0x32
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2303      	movs	r3, #3
 800742a:	2180      	movs	r1, #128	; 0x80
 800742c:	4803      	ldr	r0, [pc, #12]	; (800743c <f_sendWord+0x40>)
 800742e:	f7fb fbe5 	bl	8002bfc <HAL_I2C_Master_Transmit>
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	200001fc 	.word	0x200001fc

08007440 <f_ina219_HwInit>:

static void f_ina219_HwInit()
{
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
	 hi2c1.Instance = I2C1;
 8007444:	4b12      	ldr	r3, [pc, #72]	; (8007490 <f_ina219_HwInit+0x50>)
 8007446:	4a13      	ldr	r2, [pc, #76]	; (8007494 <f_ina219_HwInit+0x54>)
 8007448:	601a      	str	r2, [r3, #0]
	 hi2c1.Init.ClockSpeed = 100000;
 800744a:	4b11      	ldr	r3, [pc, #68]	; (8007490 <f_ina219_HwInit+0x50>)
 800744c:	4a12      	ldr	r2, [pc, #72]	; (8007498 <f_ina219_HwInit+0x58>)
 800744e:	605a      	str	r2, [r3, #4]
	 hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007450:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <f_ina219_HwInit+0x50>)
 8007452:	2200      	movs	r2, #0
 8007454:	609a      	str	r2, [r3, #8]
	 hi2c1.Init.OwnAddress1 = 0;
 8007456:	4b0e      	ldr	r3, [pc, #56]	; (8007490 <f_ina219_HwInit+0x50>)
 8007458:	2200      	movs	r2, #0
 800745a:	60da      	str	r2, [r3, #12]
	 hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800745c:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <f_ina219_HwInit+0x50>)
 800745e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007462:	611a      	str	r2, [r3, #16]
	 hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <f_ina219_HwInit+0x50>)
 8007466:	2200      	movs	r2, #0
 8007468:	615a      	str	r2, [r3, #20]
	 hi2c1.Init.OwnAddress2 = 0;
 800746a:	4b09      	ldr	r3, [pc, #36]	; (8007490 <f_ina219_HwInit+0x50>)
 800746c:	2200      	movs	r2, #0
 800746e:	619a      	str	r2, [r3, #24]
	 hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007470:	4b07      	ldr	r3, [pc, #28]	; (8007490 <f_ina219_HwInit+0x50>)
 8007472:	2200      	movs	r2, #0
 8007474:	61da      	str	r2, [r3, #28]
	 hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007476:	4b06      	ldr	r3, [pc, #24]	; (8007490 <f_ina219_HwInit+0x50>)
 8007478:	2200      	movs	r2, #0
 800747a:	621a      	str	r2, [r3, #32]
	 if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800747c:	4804      	ldr	r0, [pc, #16]	; (8007490 <f_ina219_HwInit+0x50>)
 800747e:	f7fb fa79 	bl	8002974 <HAL_I2C_Init>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <f_ina219_HwInit+0x4c>
	 {
	   Error_Handler();
 8007488:	f7f9 ffda 	bl	8001440 <Error_Handler>
	 }
}
 800748c:	bf00      	nop
 800748e:	bd80      	pop	{r7, pc}
 8007490:	200001fc 	.word	0x200001fc
 8007494:	40005400 	.word	0x40005400
 8007498:	000186a0 	.word	0x000186a0

0800749c <f_ina219_calibrate>:

static void f_ina219_calibrate()
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
	uint16_t calib = (uint16_t)INA219_CALIB_VALUE;
 80074a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074a6:	80fb      	strh	r3, [r7, #6]

	f_sendWord(INA219_CALIBRATION, calib);
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	4619      	mov	r1, r3
 80074ac:	2005      	movs	r0, #5
 80074ae:	f7ff ffa5 	bl	80073fc <f_sendWord>
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <f_ina219_Init>:

//============== public functions ==================

void f_ina219_Init()
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
	f_ina219_HwInit();
 80074c0:	f7ff ffbe 	bl	8007440 <f_ina219_HwInit>
	// bus voltage range = 32v
	// gain divide = 2
	// bus mode/average = 12bit/
	// shunt mode/average = 12bit/ 128
	//mode = bus and shunt, continuous
	uint16_t config = (1 << 13) | (1 << 11) | (15 << 7) | (15 << 3) | (7 << 0);
 80074c4:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80074c8:	80fb      	strh	r3, [r7, #6]

	f_ina219_reset();
 80074ca:	f000 f80e 	bl	80074ea <f_ina219_reset>
	HAL_Delay(1);
 80074ce:	2001      	movs	r0, #1
 80074d0:	f7fa fbc4 	bl	8001c5c <HAL_Delay>
	f_sendWord(INA219_CONFIG, config);
 80074d4:	88fb      	ldrh	r3, [r7, #6]
 80074d6:	4619      	mov	r1, r3
 80074d8:	2000      	movs	r0, #0
 80074da:	f7ff ff8f 	bl	80073fc <f_sendWord>

	f_ina219_calibrate();
 80074de:	f7ff ffdd 	bl	800749c <f_ina219_calibrate>

}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <f_ina219_reset>:

void f_ina219_reset()
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
	uint16_t tempConfig = (1 << 15);
 80074f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074f4:	80fb      	strh	r3, [r7, #6]

	f_sendWord(INA219_CONFIG, tempConfig);
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	4619      	mov	r1, r3
 80074fa:	2000      	movs	r0, #0
 80074fc:	f7ff ff7e 	bl	80073fc <f_sendWord>
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <f_ina219_GetPowerInMilis>:

	return 1000*current*INA219_CURRENT_LSB;
}

uint16_t f_ina219_GetPowerInMilis()
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
	uint16_t power = f_receiveWord(INA219_POWER);
 800750e:	2003      	movs	r0, #3
 8007510:	f7ff ff50 	bl	80073b4 <f_receiveWord>
 8007514:	4603      	mov	r3, r0
 8007516:	80fb      	strh	r3, [r7, #6]

	return 1000*20*power*INA219_CURRENT_LSB;
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800751e:	fb02 f303 	mul.w	r3, r2, r3
 8007522:	4618      	mov	r0, r3
 8007524:	f7f8 fffe 	bl	8000524 <__aeabi_i2d>
 8007528:	a309      	add	r3, pc, #36	; (adr r3, 8007550 <f_ina219_GetPowerInMilis+0x48>)
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	f7f9 f863 	bl	80005f8 <__aeabi_dmul>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4610      	mov	r0, r2
 8007538:	4619      	mov	r1, r3
 800753a:	f7f9 fb35 	bl	8000ba8 <__aeabi_d2uiz>
 800753e:	4603      	mov	r3, r0
 8007540:	b29b      	uxth	r3, r3
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w
 8007550:	d2f1a9fc 	.word	0xd2f1a9fc
 8007554:	3f20624d 	.word	0x3f20624d

08007558 <f_ina219_GetBusVoltageInMilis>:

int16_t f_ina219_GetBusVoltageInMilis()
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
	int16_t voltage = f_receiveWord(INA219_BUS_VOLTAGE);
 800755e:	2002      	movs	r0, #2
 8007560:	f7ff ff28 	bl	80073b4 <f_receiveWord>
 8007564:	4603      	mov	r3, r0
 8007566:	80fb      	strh	r3, [r7, #6]
	voltage = 4*(voltage >> 3);
 8007568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800756c:	10db      	asrs	r3, r3, #3
 800756e:	b21b      	sxth	r3, r3
 8007570:	b29b      	uxth	r3, r3
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	b29b      	uxth	r3, r3
 8007576:	80fb      	strh	r3, [r7, #6]

	return voltage;
 8007578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <f_SendFrameBufferPage>:

uint8_t sh1106_FrameBuffer[SH1106_HEIGHT/8][SH1106_WIDTH];
uint8_t sh1106_pageDirtyMask;

static inline void f_SendFrameBufferPage(uint8_t page)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	71fb      	strb	r3, [r7, #7]
	f_sh1106_cmd_SetColumnAddress(0);
 800758e:	2000      	movs	r0, #0
 8007590:	f000 fa72 	bl	8007a78 <f_sh1106_cmd_SetColumnAddress>
	f_sh1106_cmd_SetPageAddress(page);
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fad2 	bl	8007b40 <f_sh1106_cmd_SetPageAddress>
	f_sh1106_SendPageData(page, &sh1106_FrameBuffer[page][0], SH1106_WIDTH);
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	01db      	lsls	r3, r3, #7
 80075a0:	4a05      	ldr	r2, [pc, #20]	; (80075b8 <f_SendFrameBufferPage+0x34>)
 80075a2:	1899      	adds	r1, r3, r2
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	2280      	movs	r2, #128	; 0x80
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fb17 	bl	8007bdc <f_sh1106_SendPageData>
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	200003ec 	.word	0x200003ec

080075bc <f_lcd_Init>:

//=========== public functions =================

void f_lcd_Init()
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
	f_sh1106_Init();
 80075c2:	f000 fa45 	bl	8007a50 <f_sh1106_Init>

	f_sh1106_cmd_SetScanDirection(1);
 80075c6:	2001      	movs	r0, #1
 80075c8:	f000 fadc 	bl	8007b84 <f_sh1106_cmd_SetScanDirection>
	f_sh1106_cmd_SetSegmentDirection(1);
 80075cc:	2001      	movs	r0, #1
 80075ce:	f000 fa7d 	bl	8007acc <f_sh1106_cmd_SetSegmentDirection>
	f_lcd_ClearAll();
 80075d2:	f000 f84b 	bl	800766c <f_lcd_ClearAll>

	for(uint8_t page = 0; page < 8; page++)
 80075d6:	2300      	movs	r3, #0
 80075d8:	71fb      	strb	r3, [r7, #7]
 80075da:	e009      	b.n	80075f0 <f_lcd_Init+0x34>
	{
		f_SendFrameBufferPage(page);
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff ffd0 	bl	8007584 <f_SendFrameBufferPage>
		HAL_Delay(4);
 80075e4:	2004      	movs	r0, #4
 80075e6:	f7fa fb39 	bl	8001c5c <HAL_Delay>
	for(uint8_t page = 0; page < 8; page++)
 80075ea:	79fb      	ldrb	r3, [r7, #7]
 80075ec:	3301      	adds	r3, #1
 80075ee:	71fb      	strb	r3, [r7, #7]
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b07      	cmp	r3, #7
 80075f4:	d9f2      	bls.n	80075dc <f_lcd_Init+0x20>
	}

	f_sh1106_cmd_TogglePower(1);
 80075f6:	2001      	movs	r0, #1
 80075f8:	f000 fa85 	bl	8007b06 <f_sh1106_cmd_TogglePower>

}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <f_lcd_Clear>:

void f_lcd_Clear(uint8_t col_start, uint8_t col_end, uint8_t page)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	71fb      	strb	r3, [r7, #7]
 800760e:	460b      	mov	r3, r1
 8007610:	71bb      	strb	r3, [r7, #6]
 8007612:	4613      	mov	r3, r2
 8007614:	717b      	strb	r3, [r7, #5]
	uint8_t blank = 0x00;
 8007616:	2300      	movs	r3, #0
 8007618:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i = col_start; i < col_end; i++)
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	73fb      	strb	r3, [r7, #15]
 800761e:	e00a      	b.n	8007636 <f_lcd_Clear+0x32>
	{
		sh1106_FrameBuffer[page][i] = blank;
 8007620:	797a      	ldrb	r2, [r7, #5]
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	490f      	ldr	r1, [pc, #60]	; (8007664 <f_lcd_Clear+0x60>)
 8007626:	01d2      	lsls	r2, r2, #7
 8007628:	440a      	add	r2, r1
 800762a:	4413      	add	r3, r2
 800762c:	7bba      	ldrb	r2, [r7, #14]
 800762e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = col_start; i < col_end; i++)
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	3301      	adds	r3, #1
 8007634:	73fb      	strb	r3, [r7, #15]
 8007636:	7bfa      	ldrb	r2, [r7, #15]
 8007638:	79bb      	ldrb	r3, [r7, #6]
 800763a:	429a      	cmp	r2, r3
 800763c:	d3f0      	bcc.n	8007620 <f_lcd_Clear+0x1c>
	}

	sh1106_pageDirtyMask |= (1 << page);
 800763e:	797b      	ldrb	r3, [r7, #5]
 8007640:	2201      	movs	r2, #1
 8007642:	fa02 f303 	lsl.w	r3, r2, r3
 8007646:	b25a      	sxtb	r2, r3
 8007648:	4b07      	ldr	r3, [pc, #28]	; (8007668 <f_lcd_Clear+0x64>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	b25b      	sxtb	r3, r3
 800764e:	4313      	orrs	r3, r2
 8007650:	b25b      	sxtb	r3, r3
 8007652:	b2da      	uxtb	r2, r3
 8007654:	4b04      	ldr	r3, [pc, #16]	; (8007668 <f_lcd_Clear+0x64>)
 8007656:	701a      	strb	r2, [r3, #0]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	200003ec 	.word	0x200003ec
 8007668:	200007ec 	.word	0x200007ec

0800766c <f_lcd_ClearAll>:

void f_lcd_ClearAll()
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++) f_lcd_Clear(0, SH1106_WIDTH, page);
 8007672:	2300      	movs	r3, #0
 8007674:	71fb      	strb	r3, [r7, #7]
 8007676:	e008      	b.n	800768a <f_lcd_ClearAll+0x1e>
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	461a      	mov	r2, r3
 800767c:	2180      	movs	r1, #128	; 0x80
 800767e:	2000      	movs	r0, #0
 8007680:	f7ff ffc0 	bl	8007604 <f_lcd_Clear>
 8007684:	79fb      	ldrb	r3, [r7, #7]
 8007686:	3301      	adds	r3, #1
 8007688:	71fb      	strb	r3, [r7, #7]
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	2b07      	cmp	r3, #7
 800768e:	d9f3      	bls.n	8007678 <f_lcd_ClearAll+0xc>
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <f_lcd_WriteTxt>:

void f_lcd_WriteTxt(uint8_t x, uint8_t y, const char* txt, const tFont *font)
{
 800769a:	b590      	push	{r4, r7, lr}
 800769c:	b089      	sub	sp, #36	; 0x24
 800769e:	af02      	add	r7, sp, #8
 80076a0:	60ba      	str	r2, [r7, #8]
 80076a2:	607b      	str	r3, [r7, #4]
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]
 80076a8:	460b      	mov	r3, r1
 80076aa:	73bb      	strb	r3, [r7, #14]
	uint8_t fontHeight = font->chars->image->height;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	88db      	ldrh	r3, [r3, #6]
 80076b4:	75fb      	strb	r3, [r7, #23]
	uint8_t ch;


	while((ch = *txt++))
 80076b6:	e026      	b.n	8007706 <f_lcd_WriteTxt+0x6c>
	{
		uint8_t fontWidth = font->chars[ch - 0x20].image->width;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	7dbb      	ldrb	r3, [r7, #22]
 80076be:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80076c2:	3b20      	subs	r3, #32
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4413      	add	r3, r2
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	889b      	ldrh	r3, [r3, #4]
 80076cc:	757b      	strb	r3, [r7, #21]

		f_lcd_DrawRaw(x, y, font->chars[ch - 0x20].image->data, fontWidth, fontHeight);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	7dbb      	ldrb	r3, [r7, #22]
 80076d4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80076d8:	3b20      	subs	r3, #32
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	4413      	add	r3, r2
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	7d7c      	ldrb	r4, [r7, #21]
 80076e4:	7bb9      	ldrb	r1, [r7, #14]
 80076e6:	7bf8      	ldrb	r0, [r7, #15]
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	4623      	mov	r3, r4
 80076ee:	f000 f819 	bl	8007724 <f_lcd_DrawRaw>

		x += fontWidth;
 80076f2:	7bfa      	ldrb	r2, [r7, #15]
 80076f4:	7d7b      	ldrb	r3, [r7, #21]
 80076f6:	4413      	add	r3, r2
 80076f8:	73fb      	strb	r3, [r7, #15]
		if((SH1106_WIDTH - x) < fontWidth) break; //no line wrapping
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 8007700:	7d7b      	ldrb	r3, [r7, #21]
 8007702:	429a      	cmp	r2, r3
 8007704:	db08      	blt.n	8007718 <f_lcd_WriteTxt+0x7e>
	while((ch = *txt++))
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	60ba      	str	r2, [r7, #8]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	75bb      	strb	r3, [r7, #22]
 8007710:	7dbb      	ldrb	r3, [r7, #22]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1d0      	bne.n	80076b8 <f_lcd_WriteTxt+0x1e>
	}
}
 8007716:	e000      	b.n	800771a <f_lcd_WriteTxt+0x80>
		if((SH1106_WIDTH - x) < fontWidth) break; //no line wrapping
 8007718:	bf00      	nop
}
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	bd90      	pop	{r4, r7, pc}
	...

08007724 <f_lcd_DrawRaw>:

void f_lcd_DrawRaw(uint8_t x, uint8_t y, const uint8_t* image, uint8_t x_size, uint8_t y_size)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	603a      	str	r2, [r7, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	4603      	mov	r3, r0
 8007730:	71fb      	strb	r3, [r7, #7]
 8007732:	460b      	mov	r3, r1
 8007734:	71bb      	strb	r3, [r7, #6]
 8007736:	4613      	mov	r3, r2
 8007738:	717b      	strb	r3, [r7, #5]
	uint8_t bufferPage;
	uint8_t imagePage = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	75fb      	strb	r3, [r7, #23]

	uint8_t bitsLeftInBuffer;
	uint8_t bitsLeftInImage = 8; //first row of image is always full byte
 800773e:	2308      	movs	r3, #8
 8007740:	75bb      	strb	r3, [r7, #22]
	uint8_t bitsToWrite;

	bool writtenUpperHalf; //if false then lower half


	while(y_size)
 8007742:	e09b      	b.n	800787c <f_lcd_DrawRaw+0x158>
	{
		bufferPage = y/8;
 8007744:	79bb      	ldrb	r3, [r7, #6]
 8007746:	08db      	lsrs	r3, r3, #3
 8007748:	743b      	strb	r3, [r7, #16]
		bitsLeftInBuffer = 8 - (y & 0x07);
 800774a:	79bb      	ldrb	r3, [r7, #6]
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	b2db      	uxtb	r3, r3
 8007752:	f1c3 0308 	rsb	r3, r3, #8
 8007756:	73fb      	strb	r3, [r7, #15]

		if(bitsLeftInImage > bitsLeftInBuffer) //probably you write on lower half (upper bits)
 8007758:	7dba      	ldrb	r2, [r7, #22]
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	429a      	cmp	r2, r3
 800775e:	d904      	bls.n	800776a <f_lcd_DrawRaw+0x46>
			{
				bitsToWrite = bitsLeftInBuffer;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	757b      	strb	r3, [r7, #21]
				writtenUpperHalf = false;
 8007764:	2300      	movs	r3, #0
 8007766:	753b      	strb	r3, [r7, #20]
 8007768:	e003      	b.n	8007772 <f_lcd_DrawRaw+0x4e>
			}
		else
			{
				bitsToWrite = bitsLeftInImage;
 800776a:	7dbb      	ldrb	r3, [r7, #22]
 800776c:	757b      	strb	r3, [r7, #21]
				writtenUpperHalf = true;
 800776e:	2301      	movs	r3, #1
 8007770:	753b      	strb	r3, [r7, #20]
			}

		for(uint8_t lines = 0; lines < x_size; lines++)
 8007772:	2300      	movs	r3, #0
 8007774:	74fb      	strb	r3, [r7, #19]
 8007776:	e05a      	b.n	800782e <f_lcd_DrawRaw+0x10a>
		{
			uint8_t dataToPreserve;
			uint8_t dataToWrite;

			if(writtenUpperHalf) //preserve MSB bits
 8007778:	7d3b      	ldrb	r3, [r7, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d023      	beq.n	80077c6 <f_lcd_DrawRaw+0xa2>
			{
				dataToPreserve = sh1106_FrameBuffer[bufferPage][x + lines] & (0xFF << bitsToWrite);
 800777e:	7c3a      	ldrb	r2, [r7, #16]
 8007780:	79f9      	ldrb	r1, [r7, #7]
 8007782:	7cfb      	ldrb	r3, [r7, #19]
 8007784:	440b      	add	r3, r1
 8007786:	4943      	ldr	r1, [pc, #268]	; (8007894 <f_lcd_DrawRaw+0x170>)
 8007788:	01d2      	lsls	r2, r2, #7
 800778a:	440a      	add	r2, r1
 800778c:	4413      	add	r3, r2
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	b25a      	sxtb	r2, r3
 8007792:	7d7b      	ldrb	r3, [r7, #21]
 8007794:	21ff      	movs	r1, #255	; 0xff
 8007796:	fa01 f303 	lsl.w	r3, r1, r3
 800779a:	b25b      	sxtb	r3, r3
 800779c:	4013      	ands	r3, r2
 800779e:	b25b      	sxtb	r3, r3
 80077a0:	74bb      	strb	r3, [r7, #18]
				dataToWrite = image[imagePage*x_size + lines] >> (8 - bitsToWrite);
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	797a      	ldrb	r2, [r7, #5]
 80077a6:	fb03 f202 	mul.w	r2, r3, r2
 80077aa:	7cfb      	ldrb	r3, [r7, #19]
 80077ac:	4413      	add	r3, r2
 80077ae:	461a      	mov	r2, r3
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	4413      	add	r3, r2
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	7d7b      	ldrb	r3, [r7, #21]
 80077ba:	f1c3 0308 	rsb	r3, r3, #8
 80077be:	fa42 f303 	asr.w	r3, r2, r3
 80077c2:	747b      	strb	r3, [r7, #17]
 80077c4:	e022      	b.n	800780c <f_lcd_DrawRaw+0xe8>
			}
			else //preserve LSB bits
			{
				dataToPreserve = sh1106_FrameBuffer[bufferPage][x + lines] & (0xFF >> bitsToWrite);
 80077c6:	7c3a      	ldrb	r2, [r7, #16]
 80077c8:	79f9      	ldrb	r1, [r7, #7]
 80077ca:	7cfb      	ldrb	r3, [r7, #19]
 80077cc:	440b      	add	r3, r1
 80077ce:	4931      	ldr	r1, [pc, #196]	; (8007894 <f_lcd_DrawRaw+0x170>)
 80077d0:	01d2      	lsls	r2, r2, #7
 80077d2:	440a      	add	r2, r1
 80077d4:	4413      	add	r3, r2
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	b25a      	sxtb	r2, r3
 80077da:	7d7b      	ldrb	r3, [r7, #21]
 80077dc:	21ff      	movs	r1, #255	; 0xff
 80077de:	fa41 f303 	asr.w	r3, r1, r3
 80077e2:	b25b      	sxtb	r3, r3
 80077e4:	4013      	ands	r3, r2
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	74bb      	strb	r3, [r7, #18]
				dataToWrite = image[imagePage*x_size + lines] << (8 - bitsToWrite);
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	797a      	ldrb	r2, [r7, #5]
 80077ee:	fb03 f202 	mul.w	r2, r3, r2
 80077f2:	7cfb      	ldrb	r3, [r7, #19]
 80077f4:	4413      	add	r3, r2
 80077f6:	461a      	mov	r2, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	4413      	add	r3, r2
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	7d7b      	ldrb	r3, [r7, #21]
 8007802:	f1c3 0308 	rsb	r3, r3, #8
 8007806:	fa02 f303 	lsl.w	r3, r2, r3
 800780a:	747b      	strb	r3, [r7, #17]
			}

			sh1106_FrameBuffer[bufferPage][x + lines] = dataToPreserve | dataToWrite;//write image to page
 800780c:	7c3a      	ldrb	r2, [r7, #16]
 800780e:	79f9      	ldrb	r1, [r7, #7]
 8007810:	7cfb      	ldrb	r3, [r7, #19]
 8007812:	440b      	add	r3, r1
 8007814:	7cb8      	ldrb	r0, [r7, #18]
 8007816:	7c79      	ldrb	r1, [r7, #17]
 8007818:	4301      	orrs	r1, r0
 800781a:	b2c8      	uxtb	r0, r1
 800781c:	491d      	ldr	r1, [pc, #116]	; (8007894 <f_lcd_DrawRaw+0x170>)
 800781e:	01d2      	lsls	r2, r2, #7
 8007820:	440a      	add	r2, r1
 8007822:	4413      	add	r3, r2
 8007824:	4602      	mov	r2, r0
 8007826:	701a      	strb	r2, [r3, #0]
		for(uint8_t lines = 0; lines < x_size; lines++)
 8007828:	7cfb      	ldrb	r3, [r7, #19]
 800782a:	3301      	adds	r3, #1
 800782c:	74fb      	strb	r3, [r7, #19]
 800782e:	7cfa      	ldrb	r2, [r7, #19]
 8007830:	797b      	ldrb	r3, [r7, #5]
 8007832:	429a      	cmp	r2, r3
 8007834:	d3a0      	bcc.n	8007778 <f_lcd_DrawRaw+0x54>
		}

		bitsLeftInImage -= bitsToWrite;
 8007836:	7dba      	ldrb	r2, [r7, #22]
 8007838:	7d7b      	ldrb	r3, [r7, #21]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	75bb      	strb	r3, [r7, #22]
		if(bitsLeftInImage == 0) //jump to next page from image
 800783e:	7dbb      	ldrb	r3, [r7, #22]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d104      	bne.n	800784e <f_lcd_DrawRaw+0x12a>
		{
			imagePage++;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	3301      	adds	r3, #1
 8007848:	75fb      	strb	r3, [r7, #23]
			bitsLeftInImage = 8;
 800784a:	2308      	movs	r3, #8
 800784c:	75bb      	strb	r3, [r7, #22]
		}

		y_size -= bitsToWrite;
 800784e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007852:	7d7b      	ldrb	r3, [r7, #21]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	f887 3020 	strb.w	r3, [r7, #32]
		y += bitsToWrite;
 800785a:	79ba      	ldrb	r2, [r7, #6]
 800785c:	7d7b      	ldrb	r3, [r7, #21]
 800785e:	4413      	add	r3, r2
 8007860:	71bb      	strb	r3, [r7, #6]

		sh1106_pageDirtyMask |= (1 << bufferPage);
 8007862:	7c3b      	ldrb	r3, [r7, #16]
 8007864:	2201      	movs	r2, #1
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	b25a      	sxtb	r2, r3
 800786c:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <f_lcd_DrawRaw+0x174>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	b25b      	sxtb	r3, r3
 8007872:	4313      	orrs	r3, r2
 8007874:	b25b      	sxtb	r3, r3
 8007876:	b2da      	uxtb	r2, r3
 8007878:	4b07      	ldr	r3, [pc, #28]	; (8007898 <f_lcd_DrawRaw+0x174>)
 800787a:	701a      	strb	r2, [r3, #0]
	while(y_size)
 800787c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f47f af5f 	bne.w	8007744 <f_lcd_DrawRaw+0x20>

	}

}
 8007886:	bf00      	nop
 8007888:	bf00      	nop
 800788a:	371c      	adds	r7, #28
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	200003ec 	.word	0x200003ec
 8007898:	200007ec 	.word	0x200007ec

0800789c <f_lcd_SendFrameCallback>:
	sh1106_pageDirtyMask |= (1 << (y/8));
}


void f_lcd_SendFrameCallback()
{
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0
	static uint8_t timer;
	static uint8_t activePage;


	if((HAL_GetTick() - timer) > 5) //software timer
 80078a0:	f7fa f9d0 	bl	8001c44 <HAL_GetTick>
 80078a4:	4603      	mov	r3, r0
 80078a6:	4a1d      	ldr	r2, [pc, #116]	; (800791c <f_lcd_SendFrameCallback+0x80>)
 80078a8:	7812      	ldrb	r2, [r2, #0]
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	2b05      	cmp	r3, #5
 80078ae:	d932      	bls.n	8007916 <f_lcd_SendFrameCallback+0x7a>
	{

		if(sh1106_pageDirtyMask & (1 << activePage))
 80078b0:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <f_lcd_SendFrameCallback+0x84>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	461a      	mov	r2, r3
 80078b6:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <f_lcd_SendFrameCallback+0x88>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	fa42 f303 	asr.w	r3, r2, r3
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d014      	beq.n	80078f0 <f_lcd_SendFrameCallback+0x54>
		{
			f_SendFrameBufferPage(activePage);
 80078c6:	4b17      	ldr	r3, [pc, #92]	; (8007924 <f_lcd_SendFrameCallback+0x88>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff fe5a 	bl	8007584 <f_SendFrameBufferPage>

			sh1106_pageDirtyMask &= ~(1 << activePage);
 80078d0:	4b14      	ldr	r3, [pc, #80]	; (8007924 <f_lcd_SendFrameCallback+0x88>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	2301      	movs	r3, #1
 80078d8:	4093      	lsls	r3, r2
 80078da:	b25b      	sxtb	r3, r3
 80078dc:	43db      	mvns	r3, r3
 80078de:	b25a      	sxtb	r2, r3
 80078e0:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <f_lcd_SendFrameCallback+0x84>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b25b      	sxtb	r3, r3
 80078e6:	4013      	ands	r3, r2
 80078e8:	b25b      	sxtb	r3, r3
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <f_lcd_SendFrameCallback+0x84>)
 80078ee:	701a      	strb	r2, [r3, #0]

		}

		activePage = (activePage + 1) % 8;
 80078f0:	4b0c      	ldr	r3, [pc, #48]	; (8007924 <f_lcd_SendFrameCallback+0x88>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	425a      	negs	r2, r3
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	f002 0207 	and.w	r2, r2, #7
 8007900:	bf58      	it	pl
 8007902:	4253      	negpl	r3, r2
 8007904:	b2da      	uxtb	r2, r3
 8007906:	4b07      	ldr	r3, [pc, #28]	; (8007924 <f_lcd_SendFrameCallback+0x88>)
 8007908:	701a      	strb	r2, [r3, #0]
		timer = HAL_GetTick();
 800790a:	f7fa f99b 	bl	8001c44 <HAL_GetTick>
 800790e:	4603      	mov	r3, r0
 8007910:	b2da      	uxtb	r2, r3
 8007912:	4b02      	ldr	r3, [pc, #8]	; (800791c <f_lcd_SendFrameCallback+0x80>)
 8007914:	701a      	strb	r2, [r3, #0]
	}
}
 8007916:	bf00      	nop
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	200007ed 	.word	0x200007ed
 8007920:	200007ec 	.word	0x200007ec
 8007924:	200007ee 	.word	0x200007ee

08007928 <f_sh1106_HwInit>:
#define RES_LOW()		GPIO_LOW(LCD_RES_GPIO_Port, LCD_RES_Pin)

bool sh1106_TransmitBusy;

static void f_sh1106_HwInit()
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
	hspi2.Instance = SPI2;
 800792c:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 800792e:	4a1e      	ldr	r2, [pc, #120]	; (80079a8 <f_sh1106_HwInit+0x80>)
 8007930:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8007932:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 8007934:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007938:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800793a:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 800793c:	2200      	movs	r2, #0
 800793e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007940:	4b18      	ldr	r3, [pc, #96]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 8007942:	2200      	movs	r2, #0
 8007944:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007946:	4b17      	ldr	r3, [pc, #92]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 8007948:	2202      	movs	r2, #2
 800794a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800794c:	4b15      	ldr	r3, [pc, #84]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 800794e:	2201      	movs	r2, #1
 8007950:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8007952:	4b14      	ldr	r3, [pc, #80]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 8007954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007958:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800795a:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 800795c:	2220      	movs	r2, #32
 800795e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007960:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 8007962:	2200      	movs	r2, #0
 8007964:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007966:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 8007968:	2200      	movs	r2, #0
 800796a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800796c:	4b0d      	ldr	r3, [pc, #52]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 800796e:	2200      	movs	r2, #0
 8007970:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8007972:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 8007974:	220a      	movs	r2, #10
 8007976:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007978:	480a      	ldr	r0, [pc, #40]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 800797a:	f7fe f8ef 	bl	8005b5c <HAL_SPI_Init>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <f_sh1106_HwInit+0x60>
	{
		Error_Handler();
 8007984:	f7f9 fd5c 	bl	8001440 <Error_Handler>
	}

	__HAL_SPI_ENABLE(&hspi2);
 8007988:	4b06      	ldr	r3, [pc, #24]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <f_sh1106_HwInit+0x7c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007996:	601a      	str	r2, [r3, #0]
	CS_HIGH();
 8007998:	4b04      	ldr	r3, [pc, #16]	; (80079ac <f_sh1106_HwInit+0x84>)
 800799a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800799e:	619a      	str	r2, [r3, #24]
}
 80079a0:	bf00      	nop
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20000254 	.word	0x20000254
 80079a8:	40003800 	.word	0x40003800
 80079ac:	40020400 	.word	0x40020400

080079b0 <f_sh1106_SendData>:

static bool f_sh1106_SendData(uint8_t *data, uint16_t length, bool cmd)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	807b      	strh	r3, [r7, #2]
 80079bc:	4613      	mov	r3, r2
 80079be:	707b      	strb	r3, [r7, #1]
	bool isOk = false;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]
	uint8_t tries;

	for(tries = 0; tries < 3; tries++)
 80079c4:	2300      	movs	r3, #0
 80079c6:	73bb      	strb	r3, [r7, #14]
 80079c8:	e032      	b.n	8007a30 <f_sh1106_SendData+0x80>
	{
		if(sh1106_TransmitBusy)
 80079ca:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <f_sh1106_SendData+0x94>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <f_sh1106_SendData+0x2a>
		{
			HAL_Delay(10);
 80079d2:	200a      	movs	r0, #10
 80079d4:	f7fa f942 	bl	8001c5c <HAL_Delay>
 80079d8:	e027      	b.n	8007a2a <f_sh1106_SendData+0x7a>
		}
		else
		{
			if(cmd) CMD_LOW();
 80079da:	787b      	ldrb	r3, [r7, #1]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d004      	beq.n	80079ea <f_sh1106_SendData+0x3a>
 80079e0:	4b19      	ldr	r3, [pc, #100]	; (8007a48 <f_sh1106_SendData+0x98>)
 80079e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e6:	619a      	str	r2, [r3, #24]
 80079e8:	e003      	b.n	80079f2 <f_sh1106_SendData+0x42>
			else CMD_HIGH();
 80079ea:	4b17      	ldr	r3, [pc, #92]	; (8007a48 <f_sh1106_SendData+0x98>)
 80079ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80079f0:	619a      	str	r2, [r3, #24]

			sh1106_TransmitBusy = true;
 80079f2:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <f_sh1106_SendData+0x94>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	701a      	strb	r2, [r3, #0]
			CS_LOW();
 80079f8:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <f_sh1106_SendData+0x98>)
 80079fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80079fe:	619a      	str	r2, [r3, #24]
			HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, data, length, 10);
 8007a00:	887a      	ldrh	r2, [r7, #2]
 8007a02:	230a      	movs	r3, #10
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4811      	ldr	r0, [pc, #68]	; (8007a4c <f_sh1106_SendData+0x9c>)
 8007a08:	f7fe f931 	bl	8005c6e <HAL_SPI_Transmit>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	737b      	strb	r3, [r7, #13]
			CS_HIGH();
 8007a10:	4b0d      	ldr	r3, [pc, #52]	; (8007a48 <f_sh1106_SendData+0x98>)
 8007a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a16:	619a      	str	r2, [r3, #24]
			sh1106_TransmitBusy = false;
 8007a18:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <f_sh1106_SendData+0x94>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	701a      	strb	r2, [r3, #0]

			if(status == HAL_OK) isOk = true;
 8007a1e:	7b7b      	ldrb	r3, [r7, #13]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d109      	bne.n	8007a38 <f_sh1106_SendData+0x88>
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]

			break;
 8007a28:	e006      	b.n	8007a38 <f_sh1106_SendData+0x88>
	for(tries = 0; tries < 3; tries++)
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	73bb      	strb	r3, [r7, #14]
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d9c9      	bls.n	80079ca <f_sh1106_SendData+0x1a>
 8007a36:	e000      	b.n	8007a3a <f_sh1106_SendData+0x8a>
			break;
 8007a38:	bf00      	nop
		}
	}

	return isOk;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	200007ef 	.word	0x200007ef
 8007a48:	40020400 	.word	0x40020400
 8007a4c:	20000254 	.word	0x20000254

08007a50 <f_sh1106_Init>:

//============ public functions ========================

void f_sh1106_Init()
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
	f_sh1106_HwInit();
 8007a54:	f7ff ff68 	bl	8007928 <f_sh1106_HwInit>

	RES_LOW();
 8007a58:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <f_sh1106_Init+0x24>)
 8007a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a5e:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 8007a60:	2001      	movs	r0, #1
 8007a62:	f7fa f8fb 	bl	8001c5c <HAL_Delay>
	RES_HIGH();
 8007a66:	4b03      	ldr	r3, [pc, #12]	; (8007a74 <f_sh1106_Init+0x24>)
 8007a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a6c:	619a      	str	r2, [r3, #24]

}
 8007a6e:	bf00      	nop
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	40020400 	.word	0x40020400

08007a78 <f_sh1106_cmd_SetColumnAddress>:

bool f_sh1106_cmd_SetColumnAddress(uint8_t address)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	71fb      	strb	r3, [r7, #7]
	if(address >= SH1106_WIDTH) return false;
 8007a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da01      	bge.n	8007a8e <f_sh1106_cmd_SetColumnAddress+0x16>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e01a      	b.n	8007ac4 <f_sh1106_cmd_SetColumnAddress+0x4c>

	address += 2; //2 first and last pixels are not visible
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	3302      	adds	r3, #2
 8007a92:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[2];

	cmd[0] = 0x10 | ((address >> 4) & 0x0F);
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	091b      	lsrs	r3, r3, #4
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	b25b      	sxtb	r3, r3
 8007a9c:	f043 0310 	orr.w	r3, r3, #16
 8007aa0:	b25b      	sxtb	r3, r3
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	733b      	strb	r3, [r7, #12]
	cmd[1] = address & 0x0F;
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	f003 030f 	and.w	r3, r3, #15
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	737b      	strb	r3, [r7, #13]

	bool isOk = f_sh1106_SendData((uint8_t*)&cmd, 2, true);
 8007ab0:	f107 030c 	add.w	r3, r7, #12
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	2102      	movs	r1, #2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff ff79 	bl	80079b0 <f_sh1106_SendData>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <f_sh1106_cmd_SetSegmentDirection>:

	return isOk;
}

bool f_sh1106_cmd_SetSegmentDirection(bool reverse)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xA0 | (reverse & 0x01);
 8007ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	b25b      	sxtb	r3, r3
 8007ae0:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8007ae4:	b25b      	sxtb	r3, r3
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8007aea:	f107 030e 	add.w	r3, r7, #14
 8007aee:	2201      	movs	r2, #1
 8007af0:	2101      	movs	r1, #1
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff ff5c 	bl	80079b0 <f_sh1106_SendData>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <f_sh1106_cmd_TogglePower>:

	return isOk;
}

bool f_sh1106_cmd_TogglePower(bool sleep)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xAE | (sleep & 0x01);
 8007b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	b25b      	sxtb	r3, r3
 8007b1a:	f063 0351 	orn	r3, r3, #81	; 0x51
 8007b1e:	b25b      	sxtb	r3, r3
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8007b24:	f107 030e 	add.w	r3, r7, #14
 8007b28:	2201      	movs	r2, #1
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff ff3f 	bl	80079b0 <f_sh1106_SendData>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <f_sh1106_cmd_SetPageAddress>:

bool f_sh1106_cmd_SetPageAddress(uint8_t page)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	71fb      	strb	r3, [r7, #7]
	if(page >= SH1106_HEIGHT/8) return false;
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	2b07      	cmp	r3, #7
 8007b4e:	d901      	bls.n	8007b54 <f_sh1106_cmd_SetPageAddress+0x14>
 8007b50:	2300      	movs	r3, #0
 8007b52:	e013      	b.n	8007b7c <f_sh1106_cmd_SetPageAddress+0x3c>

	uint8_t cmd = 0xB0 | (page & 0x0F);
 8007b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b58:	f003 030f 	and.w	r3, r3, #15
 8007b5c:	b25b      	sxtb	r3, r3
 8007b5e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8007b62:	b25b      	sxtb	r3, r3
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8007b68:	f107 030e 	add.w	r3, r7, #14
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	2101      	movs	r1, #1
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff ff1d 	bl	80079b0 <f_sh1106_SendData>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <f_sh1106_cmd_SetScanDirection>:

bool f_sh1106_cmd_SetScanDirection(bool reverse)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xC0 | ((reverse << 3) & 0x0F);
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	b25b      	sxtb	r3, r3
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	b25b      	sxtb	r3, r3
 8007b9a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8007b9e:	b25b      	sxtb	r3, r3
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8007ba4:	f107 030e 	add.w	r3, r7, #14
 8007ba8:	2201      	movs	r2, #1
 8007baa:	2101      	movs	r1, #1
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff feff 	bl	80079b0 <f_sh1106_SendData>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <f_sh1106_CS_HIGH>:

	return isOk;
}

void f_sh1106_CS_HIGH()
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
	CS_HIGH();
 8007bc4:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <f_sh1106_CS_HIGH+0x18>)
 8007bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007bca:	619a      	str	r2, [r3, #24]
}
 8007bcc:	bf00      	nop
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40020400 	.word	0x40020400

08007bdc <f_sh1106_SendPageData>:

bool f_sh1106_SendPageData(uint8_t page, uint8_t *data, uint8_t length)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	6039      	str	r1, [r7, #0]
 8007be6:	71fb      	strb	r3, [r7, #7]
 8007be8:	4613      	mov	r3, r2
 8007bea:	71bb      	strb	r3, [r7, #6]
	uint8_t tries = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]

	HAL_StatusTypeDef status;
	do
	{
		CS_LOW();
 8007bf0:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <f_sh1106_SendPageData+0x6c>)
 8007bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007bf6:	619a      	str	r2, [r3, #24]
		CMD_HIGH(); //only data is send;
 8007bf8:	4b13      	ldr	r3, [pc, #76]	; (8007c48 <f_sh1106_SendPageData+0x6c>)
 8007bfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007bfe:	619a      	str	r2, [r3, #24]
		status = HAL_SPI_Transmit_DMA(&hspi2, data, length);
 8007c00:	79bb      	ldrb	r3, [r7, #6]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	461a      	mov	r2, r3
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	4810      	ldr	r0, [pc, #64]	; (8007c4c <f_sh1106_SendPageData+0x70>)
 8007c0a:	f7fe f96d 	bl	8005ee8 <HAL_SPI_Transmit_DMA>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73bb      	strb	r3, [r7, #14]
		tries ++;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
 8007c14:	3301      	adds	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]

	}while((status != HAL_OK) && tries < 5);
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <f_sh1106_SendPageData+0x48>
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d9e5      	bls.n	8007bf0 <f_sh1106_SendPageData+0x14>

	if(tries == 5)
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	2b05      	cmp	r3, #5
 8007c28:	d105      	bne.n	8007c36 <f_sh1106_SendPageData+0x5a>
		{
			CS_HIGH();
 8007c2a:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <f_sh1106_SendPageData+0x6c>)
 8007c2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007c30:	619a      	str	r2, [r3, #24]
			return false;
 8007c32:	2300      	movs	r3, #0
 8007c34:	e003      	b.n	8007c3e <f_sh1106_SendPageData+0x62>
		}

	sh1106_TransmitBusy = true;
 8007c36:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <f_sh1106_SendPageData+0x74>)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	701a      	strb	r2, [r3, #0]
	return true;
 8007c3c:	2301      	movs	r3, #1
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	40020400 	.word	0x40020400
 8007c4c:	20000254 	.word	0x20000254
 8007c50:	200007ef 	.word	0x200007ef

08007c54 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	f_sh1106_CS_HIGH();
 8007c5c:	f7ff ffb0 	bl	8007bc0 <f_sh1106_CS_HIGH>
	sh1106_TransmitBusy = false;
 8007c60:	4b03      	ldr	r3, [pc, #12]	; (8007c70 <HAL_SPI_TxCpltCallback+0x1c>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	200007ef 	.word	0x200007ef

08007c74 <f_work_motor_InitTimer>:
#include "ina219.h"

uint8_t velocityOCR;

void f_work_motor_InitTimer()
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 8007c7a:	1d3b      	adds	r3, r7, #4
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	605a      	str	r2, [r3, #4]
 8007c82:	609a      	str	r2, [r3, #8]
 8007c84:	60da      	str	r2, [r3, #12]
 8007c86:	611a      	str	r2, [r3, #16]
 8007c88:	615a      	str	r2, [r3, #20]
 8007c8a:	619a      	str	r2, [r3, #24]

	htim9.Instance = TIM9;
 8007c8c:	4b19      	ldr	r3, [pc, #100]	; (8007cf4 <f_work_motor_InitTimer+0x80>)
 8007c8e:	4a1a      	ldr	r2, [pc, #104]	; (8007cf8 <f_work_motor_InitTimer+0x84>)
 8007c90:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 167;
 8007c92:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <f_work_motor_InitTimer+0x80>)
 8007c94:	22a7      	movs	r2, #167	; 0xa7
 8007c96:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c98:	4b16      	ldr	r3, [pc, #88]	; (8007cf4 <f_work_motor_InitTimer+0x80>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 100;
 8007c9e:	4b15      	ldr	r3, [pc, #84]	; (8007cf4 <f_work_motor_InitTimer+0x80>)
 8007ca0:	2264      	movs	r2, #100	; 0x64
 8007ca2:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ca4:	4b13      	ldr	r3, [pc, #76]	; (8007cf4 <f_work_motor_InitTimer+0x80>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007caa:	4b12      	ldr	r3, [pc, #72]	; (8007cf4 <f_work_motor_InitTimer+0x80>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8007cb0:	4810      	ldr	r0, [pc, #64]	; (8007cf4 <f_work_motor_InitTimer+0x80>)
 8007cb2:	f7fe fb7e 	bl	80063b2 <HAL_TIM_PWM_Init>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <f_work_motor_InitTimer+0x4c>
	{
	Error_Handler();
 8007cbc:	f7f9 fbc0 	bl	8001440 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007cc0:	2360      	movs	r3, #96	; 0x60
 8007cc2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007cd0:	1d3b      	adds	r3, r7, #4
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4807      	ldr	r0, [pc, #28]	; (8007cf4 <f_work_motor_InitTimer+0x80>)
 8007cd8:	f7fe fe8e 	bl	80069f8 <HAL_TIM_PWM_ConfigChannel>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <f_work_motor_InitTimer+0x72>
	{
	Error_Handler();
 8007ce2:	f7f9 fbad 	bl	8001440 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim9);
 8007ce6:	4803      	ldr	r0, [pc, #12]	; (8007cf4 <f_work_motor_InitTimer+0x80>)
 8007ce8:	f7f9 fee2 	bl	8001ab0 <HAL_TIM_MspPostInit>


}
 8007cec:	bf00      	nop
 8007cee:	3720      	adds	r7, #32
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20000358 	.word	0x20000358
 8007cf8:	40014000 	.word	0x40014000

08007cfc <f_work_motorSet>:

void f_work_motorSet(bool onOff)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	71fb      	strb	r3, [r7, #7]
	if(onOff) HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d004      	beq.n	8007d16 <f_work_motorSet+0x1a>
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4806      	ldr	r0, [pc, #24]	; (8007d28 <f_work_motorSet+0x2c>)
 8007d10:	f7fe fb9e 	bl	8006450 <HAL_TIM_PWM_Start>
	else HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);
}
 8007d14:	e003      	b.n	8007d1e <f_work_motorSet+0x22>
	else HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);
 8007d16:	2100      	movs	r1, #0
 8007d18:	4803      	ldr	r0, [pc, #12]	; (8007d28 <f_work_motorSet+0x2c>)
 8007d1a:	f7fe fc61 	bl	80065e0 <HAL_TIM_PWM_Stop>
}
 8007d1e:	bf00      	nop
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000358 	.word	0x20000358

08007d2c <f_work_motorSetVelocity>:

void f_work_motorSetVelocity(uint8_t velocity)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	71fb      	strb	r3, [r7, #7]
	if(velocity >= 100) velocity = 100;
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	2b63      	cmp	r3, #99	; 0x63
 8007d3a:	d901      	bls.n	8007d40 <f_work_motorSetVelocity+0x14>
 8007d3c:	2364      	movs	r3, #100	; 0x64
 8007d3e:	71fb      	strb	r3, [r7, #7]
	velocityOCR = velocity;
 8007d40:	4a06      	ldr	r2, [pc, #24]	; (8007d5c <f_work_motorSetVelocity+0x30>)
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	7013      	strb	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, velocity);
 8007d46:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <f_work_motorSetVelocity+0x34>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	79fa      	ldrb	r2, [r7, #7]
 8007d4c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	200007f0 	.word	0x200007f0
 8007d60:	20000358 	.word	0x20000358

08007d64 <__errno>:
 8007d64:	4b01      	ldr	r3, [pc, #4]	; (8007d6c <__errno+0x8>)
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20000010 	.word	0x20000010

08007d70 <__libc_init_array>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	4d0d      	ldr	r5, [pc, #52]	; (8007da8 <__libc_init_array+0x38>)
 8007d74:	4c0d      	ldr	r4, [pc, #52]	; (8007dac <__libc_init_array+0x3c>)
 8007d76:	1b64      	subs	r4, r4, r5
 8007d78:	10a4      	asrs	r4, r4, #2
 8007d7a:	2600      	movs	r6, #0
 8007d7c:	42a6      	cmp	r6, r4
 8007d7e:	d109      	bne.n	8007d94 <__libc_init_array+0x24>
 8007d80:	4d0b      	ldr	r5, [pc, #44]	; (8007db0 <__libc_init_array+0x40>)
 8007d82:	4c0c      	ldr	r4, [pc, #48]	; (8007db4 <__libc_init_array+0x44>)
 8007d84:	f002 ff04 	bl	800ab90 <_init>
 8007d88:	1b64      	subs	r4, r4, r5
 8007d8a:	10a4      	asrs	r4, r4, #2
 8007d8c:	2600      	movs	r6, #0
 8007d8e:	42a6      	cmp	r6, r4
 8007d90:	d105      	bne.n	8007d9e <__libc_init_array+0x2e>
 8007d92:	bd70      	pop	{r4, r5, r6, pc}
 8007d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d98:	4798      	blx	r3
 8007d9a:	3601      	adds	r6, #1
 8007d9c:	e7ee      	b.n	8007d7c <__libc_init_array+0xc>
 8007d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da2:	4798      	blx	r3
 8007da4:	3601      	adds	r6, #1
 8007da6:	e7f2      	b.n	8007d8e <__libc_init_array+0x1e>
 8007da8:	0800bcfc 	.word	0x0800bcfc
 8007dac:	0800bcfc 	.word	0x0800bcfc
 8007db0:	0800bcfc 	.word	0x0800bcfc
 8007db4:	0800bd00 	.word	0x0800bd00

08007db8 <memset>:
 8007db8:	4402      	add	r2, r0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d100      	bne.n	8007dc2 <memset+0xa>
 8007dc0:	4770      	bx	lr
 8007dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8007dc6:	e7f9      	b.n	8007dbc <memset+0x4>

08007dc8 <__cvt>:
 8007dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dcc:	ec55 4b10 	vmov	r4, r5, d0
 8007dd0:	2d00      	cmp	r5, #0
 8007dd2:	460e      	mov	r6, r1
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	462b      	mov	r3, r5
 8007dd8:	bfbb      	ittet	lt
 8007dda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007dde:	461d      	movlt	r5, r3
 8007de0:	2300      	movge	r3, #0
 8007de2:	232d      	movlt	r3, #45	; 0x2d
 8007de4:	700b      	strb	r3, [r1, #0]
 8007de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007de8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007dec:	4691      	mov	r9, r2
 8007dee:	f023 0820 	bic.w	r8, r3, #32
 8007df2:	bfbc      	itt	lt
 8007df4:	4622      	movlt	r2, r4
 8007df6:	4614      	movlt	r4, r2
 8007df8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dfc:	d005      	beq.n	8007e0a <__cvt+0x42>
 8007dfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e02:	d100      	bne.n	8007e06 <__cvt+0x3e>
 8007e04:	3601      	adds	r6, #1
 8007e06:	2102      	movs	r1, #2
 8007e08:	e000      	b.n	8007e0c <__cvt+0x44>
 8007e0a:	2103      	movs	r1, #3
 8007e0c:	ab03      	add	r3, sp, #12
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	ab02      	add	r3, sp, #8
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	ec45 4b10 	vmov	d0, r4, r5
 8007e18:	4653      	mov	r3, sl
 8007e1a:	4632      	mov	r2, r6
 8007e1c:	f000 fcec 	bl	80087f8 <_dtoa_r>
 8007e20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e24:	4607      	mov	r7, r0
 8007e26:	d102      	bne.n	8007e2e <__cvt+0x66>
 8007e28:	f019 0f01 	tst.w	r9, #1
 8007e2c:	d022      	beq.n	8007e74 <__cvt+0xac>
 8007e2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e32:	eb07 0906 	add.w	r9, r7, r6
 8007e36:	d110      	bne.n	8007e5a <__cvt+0x92>
 8007e38:	783b      	ldrb	r3, [r7, #0]
 8007e3a:	2b30      	cmp	r3, #48	; 0x30
 8007e3c:	d10a      	bne.n	8007e54 <__cvt+0x8c>
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2300      	movs	r3, #0
 8007e42:	4620      	mov	r0, r4
 8007e44:	4629      	mov	r1, r5
 8007e46:	f7f8 fe3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e4a:	b918      	cbnz	r0, 8007e54 <__cvt+0x8c>
 8007e4c:	f1c6 0601 	rsb	r6, r6, #1
 8007e50:	f8ca 6000 	str.w	r6, [sl]
 8007e54:	f8da 3000 	ldr.w	r3, [sl]
 8007e58:	4499      	add	r9, r3
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	f7f8 fe31 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e66:	b108      	cbz	r0, 8007e6c <__cvt+0xa4>
 8007e68:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e6c:	2230      	movs	r2, #48	; 0x30
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	454b      	cmp	r3, r9
 8007e72:	d307      	bcc.n	8007e84 <__cvt+0xbc>
 8007e74:	9b03      	ldr	r3, [sp, #12]
 8007e76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e78:	1bdb      	subs	r3, r3, r7
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	b004      	add	sp, #16
 8007e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e84:	1c59      	adds	r1, r3, #1
 8007e86:	9103      	str	r1, [sp, #12]
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	e7f0      	b.n	8007e6e <__cvt+0xa6>

08007e8c <__exponent>:
 8007e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2900      	cmp	r1, #0
 8007e92:	bfb8      	it	lt
 8007e94:	4249      	neglt	r1, r1
 8007e96:	f803 2b02 	strb.w	r2, [r3], #2
 8007e9a:	bfb4      	ite	lt
 8007e9c:	222d      	movlt	r2, #45	; 0x2d
 8007e9e:	222b      	movge	r2, #43	; 0x2b
 8007ea0:	2909      	cmp	r1, #9
 8007ea2:	7042      	strb	r2, [r0, #1]
 8007ea4:	dd2a      	ble.n	8007efc <__exponent+0x70>
 8007ea6:	f10d 0407 	add.w	r4, sp, #7
 8007eaa:	46a4      	mov	ip, r4
 8007eac:	270a      	movs	r7, #10
 8007eae:	46a6      	mov	lr, r4
 8007eb0:	460a      	mov	r2, r1
 8007eb2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007eb6:	fb07 1516 	mls	r5, r7, r6, r1
 8007eba:	3530      	adds	r5, #48	; 0x30
 8007ebc:	2a63      	cmp	r2, #99	; 0x63
 8007ebe:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ec2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	dcf1      	bgt.n	8007eae <__exponent+0x22>
 8007eca:	3130      	adds	r1, #48	; 0x30
 8007ecc:	f1ae 0502 	sub.w	r5, lr, #2
 8007ed0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ed4:	1c44      	adds	r4, r0, #1
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	4561      	cmp	r1, ip
 8007eda:	d30a      	bcc.n	8007ef2 <__exponent+0x66>
 8007edc:	f10d 0209 	add.w	r2, sp, #9
 8007ee0:	eba2 020e 	sub.w	r2, r2, lr
 8007ee4:	4565      	cmp	r5, ip
 8007ee6:	bf88      	it	hi
 8007ee8:	2200      	movhi	r2, #0
 8007eea:	4413      	add	r3, r2
 8007eec:	1a18      	subs	r0, r3, r0
 8007eee:	b003      	add	sp, #12
 8007ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ef6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007efa:	e7ed      	b.n	8007ed8 <__exponent+0x4c>
 8007efc:	2330      	movs	r3, #48	; 0x30
 8007efe:	3130      	adds	r1, #48	; 0x30
 8007f00:	7083      	strb	r3, [r0, #2]
 8007f02:	70c1      	strb	r1, [r0, #3]
 8007f04:	1d03      	adds	r3, r0, #4
 8007f06:	e7f1      	b.n	8007eec <__exponent+0x60>

08007f08 <_printf_float>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	ed2d 8b02 	vpush	{d8}
 8007f10:	b08d      	sub	sp, #52	; 0x34
 8007f12:	460c      	mov	r4, r1
 8007f14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f18:	4616      	mov	r6, r2
 8007f1a:	461f      	mov	r7, r3
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	f001 fa59 	bl	80093d4 <_localeconv_r>
 8007f22:	f8d0 a000 	ldr.w	sl, [r0]
 8007f26:	4650      	mov	r0, sl
 8007f28:	f7f8 f952 	bl	80001d0 <strlen>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	9305      	str	r3, [sp, #20]
 8007f34:	f8d8 3000 	ldr.w	r3, [r8]
 8007f38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f3c:	3307      	adds	r3, #7
 8007f3e:	f023 0307 	bic.w	r3, r3, #7
 8007f42:	f103 0208 	add.w	r2, r3, #8
 8007f46:	f8c8 2000 	str.w	r2, [r8]
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f5a:	9307      	str	r3, [sp, #28]
 8007f5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f60:	ee08 0a10 	vmov	s16, r0
 8007f64:	4b9f      	ldr	r3, [pc, #636]	; (80081e4 <_printf_float+0x2dc>)
 8007f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6e:	f7f8 fddd 	bl	8000b2c <__aeabi_dcmpun>
 8007f72:	bb88      	cbnz	r0, 8007fd8 <_printf_float+0xd0>
 8007f74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f78:	4b9a      	ldr	r3, [pc, #616]	; (80081e4 <_printf_float+0x2dc>)
 8007f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7e:	f7f8 fdb7 	bl	8000af0 <__aeabi_dcmple>
 8007f82:	bb48      	cbnz	r0, 8007fd8 <_printf_float+0xd0>
 8007f84:	2200      	movs	r2, #0
 8007f86:	2300      	movs	r3, #0
 8007f88:	4640      	mov	r0, r8
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	f7f8 fda6 	bl	8000adc <__aeabi_dcmplt>
 8007f90:	b110      	cbz	r0, 8007f98 <_printf_float+0x90>
 8007f92:	232d      	movs	r3, #45	; 0x2d
 8007f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f98:	4b93      	ldr	r3, [pc, #588]	; (80081e8 <_printf_float+0x2e0>)
 8007f9a:	4894      	ldr	r0, [pc, #592]	; (80081ec <_printf_float+0x2e4>)
 8007f9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007fa0:	bf94      	ite	ls
 8007fa2:	4698      	movls	r8, r3
 8007fa4:	4680      	movhi	r8, r0
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	6123      	str	r3, [r4, #16]
 8007faa:	9b05      	ldr	r3, [sp, #20]
 8007fac:	f023 0204 	bic.w	r2, r3, #4
 8007fb0:	6022      	str	r2, [r4, #0]
 8007fb2:	f04f 0900 	mov.w	r9, #0
 8007fb6:	9700      	str	r7, [sp, #0]
 8007fb8:	4633      	mov	r3, r6
 8007fba:	aa0b      	add	r2, sp, #44	; 0x2c
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 f9d8 	bl	8008374 <_printf_common>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f040 8090 	bne.w	80080ea <_printf_float+0x1e2>
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295
 8007fce:	b00d      	add	sp, #52	; 0x34
 8007fd0:	ecbd 8b02 	vpop	{d8}
 8007fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd8:	4642      	mov	r2, r8
 8007fda:	464b      	mov	r3, r9
 8007fdc:	4640      	mov	r0, r8
 8007fde:	4649      	mov	r1, r9
 8007fe0:	f7f8 fda4 	bl	8000b2c <__aeabi_dcmpun>
 8007fe4:	b140      	cbz	r0, 8007ff8 <_printf_float+0xf0>
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bfbc      	itt	lt
 8007fec:	232d      	movlt	r3, #45	; 0x2d
 8007fee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ff2:	487f      	ldr	r0, [pc, #508]	; (80081f0 <_printf_float+0x2e8>)
 8007ff4:	4b7f      	ldr	r3, [pc, #508]	; (80081f4 <_printf_float+0x2ec>)
 8007ff6:	e7d1      	b.n	8007f9c <_printf_float+0x94>
 8007ff8:	6863      	ldr	r3, [r4, #4]
 8007ffa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ffe:	9206      	str	r2, [sp, #24]
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	d13f      	bne.n	8008084 <_printf_float+0x17c>
 8008004:	2306      	movs	r3, #6
 8008006:	6063      	str	r3, [r4, #4]
 8008008:	9b05      	ldr	r3, [sp, #20]
 800800a:	6861      	ldr	r1, [r4, #4]
 800800c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008010:	2300      	movs	r3, #0
 8008012:	9303      	str	r3, [sp, #12]
 8008014:	ab0a      	add	r3, sp, #40	; 0x28
 8008016:	e9cd b301 	strd	fp, r3, [sp, #4]
 800801a:	ab09      	add	r3, sp, #36	; 0x24
 800801c:	ec49 8b10 	vmov	d0, r8, r9
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	6022      	str	r2, [r4, #0]
 8008024:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008028:	4628      	mov	r0, r5
 800802a:	f7ff fecd 	bl	8007dc8 <__cvt>
 800802e:	9b06      	ldr	r3, [sp, #24]
 8008030:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008032:	2b47      	cmp	r3, #71	; 0x47
 8008034:	4680      	mov	r8, r0
 8008036:	d108      	bne.n	800804a <_printf_float+0x142>
 8008038:	1cc8      	adds	r0, r1, #3
 800803a:	db02      	blt.n	8008042 <_printf_float+0x13a>
 800803c:	6863      	ldr	r3, [r4, #4]
 800803e:	4299      	cmp	r1, r3
 8008040:	dd41      	ble.n	80080c6 <_printf_float+0x1be>
 8008042:	f1ab 0b02 	sub.w	fp, fp, #2
 8008046:	fa5f fb8b 	uxtb.w	fp, fp
 800804a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800804e:	d820      	bhi.n	8008092 <_printf_float+0x18a>
 8008050:	3901      	subs	r1, #1
 8008052:	465a      	mov	r2, fp
 8008054:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008058:	9109      	str	r1, [sp, #36]	; 0x24
 800805a:	f7ff ff17 	bl	8007e8c <__exponent>
 800805e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008060:	1813      	adds	r3, r2, r0
 8008062:	2a01      	cmp	r2, #1
 8008064:	4681      	mov	r9, r0
 8008066:	6123      	str	r3, [r4, #16]
 8008068:	dc02      	bgt.n	8008070 <_printf_float+0x168>
 800806a:	6822      	ldr	r2, [r4, #0]
 800806c:	07d2      	lsls	r2, r2, #31
 800806e:	d501      	bpl.n	8008074 <_printf_float+0x16c>
 8008070:	3301      	adds	r3, #1
 8008072:	6123      	str	r3, [r4, #16]
 8008074:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008078:	2b00      	cmp	r3, #0
 800807a:	d09c      	beq.n	8007fb6 <_printf_float+0xae>
 800807c:	232d      	movs	r3, #45	; 0x2d
 800807e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008082:	e798      	b.n	8007fb6 <_printf_float+0xae>
 8008084:	9a06      	ldr	r2, [sp, #24]
 8008086:	2a47      	cmp	r2, #71	; 0x47
 8008088:	d1be      	bne.n	8008008 <_printf_float+0x100>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1bc      	bne.n	8008008 <_printf_float+0x100>
 800808e:	2301      	movs	r3, #1
 8008090:	e7b9      	b.n	8008006 <_printf_float+0xfe>
 8008092:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008096:	d118      	bne.n	80080ca <_printf_float+0x1c2>
 8008098:	2900      	cmp	r1, #0
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	dd0b      	ble.n	80080b6 <_printf_float+0x1ae>
 800809e:	6121      	str	r1, [r4, #16]
 80080a0:	b913      	cbnz	r3, 80080a8 <_printf_float+0x1a0>
 80080a2:	6822      	ldr	r2, [r4, #0]
 80080a4:	07d0      	lsls	r0, r2, #31
 80080a6:	d502      	bpl.n	80080ae <_printf_float+0x1a6>
 80080a8:	3301      	adds	r3, #1
 80080aa:	440b      	add	r3, r1
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80080b0:	f04f 0900 	mov.w	r9, #0
 80080b4:	e7de      	b.n	8008074 <_printf_float+0x16c>
 80080b6:	b913      	cbnz	r3, 80080be <_printf_float+0x1b6>
 80080b8:	6822      	ldr	r2, [r4, #0]
 80080ba:	07d2      	lsls	r2, r2, #31
 80080bc:	d501      	bpl.n	80080c2 <_printf_float+0x1ba>
 80080be:	3302      	adds	r3, #2
 80080c0:	e7f4      	b.n	80080ac <_printf_float+0x1a4>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e7f2      	b.n	80080ac <_printf_float+0x1a4>
 80080c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80080ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080cc:	4299      	cmp	r1, r3
 80080ce:	db05      	blt.n	80080dc <_printf_float+0x1d4>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	6121      	str	r1, [r4, #16]
 80080d4:	07d8      	lsls	r0, r3, #31
 80080d6:	d5ea      	bpl.n	80080ae <_printf_float+0x1a6>
 80080d8:	1c4b      	adds	r3, r1, #1
 80080da:	e7e7      	b.n	80080ac <_printf_float+0x1a4>
 80080dc:	2900      	cmp	r1, #0
 80080de:	bfd4      	ite	le
 80080e0:	f1c1 0202 	rsble	r2, r1, #2
 80080e4:	2201      	movgt	r2, #1
 80080e6:	4413      	add	r3, r2
 80080e8:	e7e0      	b.n	80080ac <_printf_float+0x1a4>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	055a      	lsls	r2, r3, #21
 80080ee:	d407      	bmi.n	8008100 <_printf_float+0x1f8>
 80080f0:	6923      	ldr	r3, [r4, #16]
 80080f2:	4642      	mov	r2, r8
 80080f4:	4631      	mov	r1, r6
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	d12c      	bne.n	8008158 <_printf_float+0x250>
 80080fe:	e764      	b.n	8007fca <_printf_float+0xc2>
 8008100:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008104:	f240 80e0 	bls.w	80082c8 <_printf_float+0x3c0>
 8008108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800810c:	2200      	movs	r2, #0
 800810e:	2300      	movs	r3, #0
 8008110:	f7f8 fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 8008114:	2800      	cmp	r0, #0
 8008116:	d034      	beq.n	8008182 <_printf_float+0x27a>
 8008118:	4a37      	ldr	r2, [pc, #220]	; (80081f8 <_printf_float+0x2f0>)
 800811a:	2301      	movs	r3, #1
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	f43f af51 	beq.w	8007fca <_printf_float+0xc2>
 8008128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800812c:	429a      	cmp	r2, r3
 800812e:	db02      	blt.n	8008136 <_printf_float+0x22e>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	07d8      	lsls	r0, r3, #31
 8008134:	d510      	bpl.n	8008158 <_printf_float+0x250>
 8008136:	ee18 3a10 	vmov	r3, s16
 800813a:	4652      	mov	r2, sl
 800813c:	4631      	mov	r1, r6
 800813e:	4628      	mov	r0, r5
 8008140:	47b8      	blx	r7
 8008142:	3001      	adds	r0, #1
 8008144:	f43f af41 	beq.w	8007fca <_printf_float+0xc2>
 8008148:	f04f 0800 	mov.w	r8, #0
 800814c:	f104 091a 	add.w	r9, r4, #26
 8008150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008152:	3b01      	subs	r3, #1
 8008154:	4543      	cmp	r3, r8
 8008156:	dc09      	bgt.n	800816c <_printf_float+0x264>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	079b      	lsls	r3, r3, #30
 800815c:	f100 8105 	bmi.w	800836a <_printf_float+0x462>
 8008160:	68e0      	ldr	r0, [r4, #12]
 8008162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008164:	4298      	cmp	r0, r3
 8008166:	bfb8      	it	lt
 8008168:	4618      	movlt	r0, r3
 800816a:	e730      	b.n	8007fce <_printf_float+0xc6>
 800816c:	2301      	movs	r3, #1
 800816e:	464a      	mov	r2, r9
 8008170:	4631      	mov	r1, r6
 8008172:	4628      	mov	r0, r5
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	f43f af27 	beq.w	8007fca <_printf_float+0xc2>
 800817c:	f108 0801 	add.w	r8, r8, #1
 8008180:	e7e6      	b.n	8008150 <_printf_float+0x248>
 8008182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008184:	2b00      	cmp	r3, #0
 8008186:	dc39      	bgt.n	80081fc <_printf_float+0x2f4>
 8008188:	4a1b      	ldr	r2, [pc, #108]	; (80081f8 <_printf_float+0x2f0>)
 800818a:	2301      	movs	r3, #1
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	47b8      	blx	r7
 8008192:	3001      	adds	r0, #1
 8008194:	f43f af19 	beq.w	8007fca <_printf_float+0xc2>
 8008198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800819c:	4313      	orrs	r3, r2
 800819e:	d102      	bne.n	80081a6 <_printf_float+0x29e>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	07d9      	lsls	r1, r3, #31
 80081a4:	d5d8      	bpl.n	8008158 <_printf_float+0x250>
 80081a6:	ee18 3a10 	vmov	r3, s16
 80081aa:	4652      	mov	r2, sl
 80081ac:	4631      	mov	r1, r6
 80081ae:	4628      	mov	r0, r5
 80081b0:	47b8      	blx	r7
 80081b2:	3001      	adds	r0, #1
 80081b4:	f43f af09 	beq.w	8007fca <_printf_float+0xc2>
 80081b8:	f04f 0900 	mov.w	r9, #0
 80081bc:	f104 0a1a 	add.w	sl, r4, #26
 80081c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c2:	425b      	negs	r3, r3
 80081c4:	454b      	cmp	r3, r9
 80081c6:	dc01      	bgt.n	80081cc <_printf_float+0x2c4>
 80081c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ca:	e792      	b.n	80080f2 <_printf_float+0x1ea>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4652      	mov	r2, sl
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	f43f aef7 	beq.w	8007fca <_printf_float+0xc2>
 80081dc:	f109 0901 	add.w	r9, r9, #1
 80081e0:	e7ee      	b.n	80081c0 <_printf_float+0x2b8>
 80081e2:	bf00      	nop
 80081e4:	7fefffff 	.word	0x7fefffff
 80081e8:	0800b91c 	.word	0x0800b91c
 80081ec:	0800b920 	.word	0x0800b920
 80081f0:	0800b928 	.word	0x0800b928
 80081f4:	0800b924 	.word	0x0800b924
 80081f8:	0800b92c 	.word	0x0800b92c
 80081fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008200:	429a      	cmp	r2, r3
 8008202:	bfa8      	it	ge
 8008204:	461a      	movge	r2, r3
 8008206:	2a00      	cmp	r2, #0
 8008208:	4691      	mov	r9, r2
 800820a:	dc37      	bgt.n	800827c <_printf_float+0x374>
 800820c:	f04f 0b00 	mov.w	fp, #0
 8008210:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008214:	f104 021a 	add.w	r2, r4, #26
 8008218:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800821a:	9305      	str	r3, [sp, #20]
 800821c:	eba3 0309 	sub.w	r3, r3, r9
 8008220:	455b      	cmp	r3, fp
 8008222:	dc33      	bgt.n	800828c <_printf_float+0x384>
 8008224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008228:	429a      	cmp	r2, r3
 800822a:	db3b      	blt.n	80082a4 <_printf_float+0x39c>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	07da      	lsls	r2, r3, #31
 8008230:	d438      	bmi.n	80082a4 <_printf_float+0x39c>
 8008232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008234:	9a05      	ldr	r2, [sp, #20]
 8008236:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008238:	1a9a      	subs	r2, r3, r2
 800823a:	eba3 0901 	sub.w	r9, r3, r1
 800823e:	4591      	cmp	r9, r2
 8008240:	bfa8      	it	ge
 8008242:	4691      	movge	r9, r2
 8008244:	f1b9 0f00 	cmp.w	r9, #0
 8008248:	dc35      	bgt.n	80082b6 <_printf_float+0x3ae>
 800824a:	f04f 0800 	mov.w	r8, #0
 800824e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008252:	f104 0a1a 	add.w	sl, r4, #26
 8008256:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800825a:	1a9b      	subs	r3, r3, r2
 800825c:	eba3 0309 	sub.w	r3, r3, r9
 8008260:	4543      	cmp	r3, r8
 8008262:	f77f af79 	ble.w	8008158 <_printf_float+0x250>
 8008266:	2301      	movs	r3, #1
 8008268:	4652      	mov	r2, sl
 800826a:	4631      	mov	r1, r6
 800826c:	4628      	mov	r0, r5
 800826e:	47b8      	blx	r7
 8008270:	3001      	adds	r0, #1
 8008272:	f43f aeaa 	beq.w	8007fca <_printf_float+0xc2>
 8008276:	f108 0801 	add.w	r8, r8, #1
 800827a:	e7ec      	b.n	8008256 <_printf_float+0x34e>
 800827c:	4613      	mov	r3, r2
 800827e:	4631      	mov	r1, r6
 8008280:	4642      	mov	r2, r8
 8008282:	4628      	mov	r0, r5
 8008284:	47b8      	blx	r7
 8008286:	3001      	adds	r0, #1
 8008288:	d1c0      	bne.n	800820c <_printf_float+0x304>
 800828a:	e69e      	b.n	8007fca <_printf_float+0xc2>
 800828c:	2301      	movs	r3, #1
 800828e:	4631      	mov	r1, r6
 8008290:	4628      	mov	r0, r5
 8008292:	9205      	str	r2, [sp, #20]
 8008294:	47b8      	blx	r7
 8008296:	3001      	adds	r0, #1
 8008298:	f43f ae97 	beq.w	8007fca <_printf_float+0xc2>
 800829c:	9a05      	ldr	r2, [sp, #20]
 800829e:	f10b 0b01 	add.w	fp, fp, #1
 80082a2:	e7b9      	b.n	8008218 <_printf_float+0x310>
 80082a4:	ee18 3a10 	vmov	r3, s16
 80082a8:	4652      	mov	r2, sl
 80082aa:	4631      	mov	r1, r6
 80082ac:	4628      	mov	r0, r5
 80082ae:	47b8      	blx	r7
 80082b0:	3001      	adds	r0, #1
 80082b2:	d1be      	bne.n	8008232 <_printf_float+0x32a>
 80082b4:	e689      	b.n	8007fca <_printf_float+0xc2>
 80082b6:	9a05      	ldr	r2, [sp, #20]
 80082b8:	464b      	mov	r3, r9
 80082ba:	4442      	add	r2, r8
 80082bc:	4631      	mov	r1, r6
 80082be:	4628      	mov	r0, r5
 80082c0:	47b8      	blx	r7
 80082c2:	3001      	adds	r0, #1
 80082c4:	d1c1      	bne.n	800824a <_printf_float+0x342>
 80082c6:	e680      	b.n	8007fca <_printf_float+0xc2>
 80082c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ca:	2a01      	cmp	r2, #1
 80082cc:	dc01      	bgt.n	80082d2 <_printf_float+0x3ca>
 80082ce:	07db      	lsls	r3, r3, #31
 80082d0:	d538      	bpl.n	8008344 <_printf_float+0x43c>
 80082d2:	2301      	movs	r3, #1
 80082d4:	4642      	mov	r2, r8
 80082d6:	4631      	mov	r1, r6
 80082d8:	4628      	mov	r0, r5
 80082da:	47b8      	blx	r7
 80082dc:	3001      	adds	r0, #1
 80082de:	f43f ae74 	beq.w	8007fca <_printf_float+0xc2>
 80082e2:	ee18 3a10 	vmov	r3, s16
 80082e6:	4652      	mov	r2, sl
 80082e8:	4631      	mov	r1, r6
 80082ea:	4628      	mov	r0, r5
 80082ec:	47b8      	blx	r7
 80082ee:	3001      	adds	r0, #1
 80082f0:	f43f ae6b 	beq.w	8007fca <_printf_float+0xc2>
 80082f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082f8:	2200      	movs	r2, #0
 80082fa:	2300      	movs	r3, #0
 80082fc:	f7f8 fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008300:	b9d8      	cbnz	r0, 800833a <_printf_float+0x432>
 8008302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008304:	f108 0201 	add.w	r2, r8, #1
 8008308:	3b01      	subs	r3, #1
 800830a:	4631      	mov	r1, r6
 800830c:	4628      	mov	r0, r5
 800830e:	47b8      	blx	r7
 8008310:	3001      	adds	r0, #1
 8008312:	d10e      	bne.n	8008332 <_printf_float+0x42a>
 8008314:	e659      	b.n	8007fca <_printf_float+0xc2>
 8008316:	2301      	movs	r3, #1
 8008318:	4652      	mov	r2, sl
 800831a:	4631      	mov	r1, r6
 800831c:	4628      	mov	r0, r5
 800831e:	47b8      	blx	r7
 8008320:	3001      	adds	r0, #1
 8008322:	f43f ae52 	beq.w	8007fca <_printf_float+0xc2>
 8008326:	f108 0801 	add.w	r8, r8, #1
 800832a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800832c:	3b01      	subs	r3, #1
 800832e:	4543      	cmp	r3, r8
 8008330:	dcf1      	bgt.n	8008316 <_printf_float+0x40e>
 8008332:	464b      	mov	r3, r9
 8008334:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008338:	e6dc      	b.n	80080f4 <_printf_float+0x1ec>
 800833a:	f04f 0800 	mov.w	r8, #0
 800833e:	f104 0a1a 	add.w	sl, r4, #26
 8008342:	e7f2      	b.n	800832a <_printf_float+0x422>
 8008344:	2301      	movs	r3, #1
 8008346:	4642      	mov	r2, r8
 8008348:	e7df      	b.n	800830a <_printf_float+0x402>
 800834a:	2301      	movs	r3, #1
 800834c:	464a      	mov	r2, r9
 800834e:	4631      	mov	r1, r6
 8008350:	4628      	mov	r0, r5
 8008352:	47b8      	blx	r7
 8008354:	3001      	adds	r0, #1
 8008356:	f43f ae38 	beq.w	8007fca <_printf_float+0xc2>
 800835a:	f108 0801 	add.w	r8, r8, #1
 800835e:	68e3      	ldr	r3, [r4, #12]
 8008360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008362:	1a5b      	subs	r3, r3, r1
 8008364:	4543      	cmp	r3, r8
 8008366:	dcf0      	bgt.n	800834a <_printf_float+0x442>
 8008368:	e6fa      	b.n	8008160 <_printf_float+0x258>
 800836a:	f04f 0800 	mov.w	r8, #0
 800836e:	f104 0919 	add.w	r9, r4, #25
 8008372:	e7f4      	b.n	800835e <_printf_float+0x456>

08008374 <_printf_common>:
 8008374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	4616      	mov	r6, r2
 800837a:	4699      	mov	r9, r3
 800837c:	688a      	ldr	r2, [r1, #8]
 800837e:	690b      	ldr	r3, [r1, #16]
 8008380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008384:	4293      	cmp	r3, r2
 8008386:	bfb8      	it	lt
 8008388:	4613      	movlt	r3, r2
 800838a:	6033      	str	r3, [r6, #0]
 800838c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008390:	4607      	mov	r7, r0
 8008392:	460c      	mov	r4, r1
 8008394:	b10a      	cbz	r2, 800839a <_printf_common+0x26>
 8008396:	3301      	adds	r3, #1
 8008398:	6033      	str	r3, [r6, #0]
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	0699      	lsls	r1, r3, #26
 800839e:	bf42      	ittt	mi
 80083a0:	6833      	ldrmi	r3, [r6, #0]
 80083a2:	3302      	addmi	r3, #2
 80083a4:	6033      	strmi	r3, [r6, #0]
 80083a6:	6825      	ldr	r5, [r4, #0]
 80083a8:	f015 0506 	ands.w	r5, r5, #6
 80083ac:	d106      	bne.n	80083bc <_printf_common+0x48>
 80083ae:	f104 0a19 	add.w	sl, r4, #25
 80083b2:	68e3      	ldr	r3, [r4, #12]
 80083b4:	6832      	ldr	r2, [r6, #0]
 80083b6:	1a9b      	subs	r3, r3, r2
 80083b8:	42ab      	cmp	r3, r5
 80083ba:	dc26      	bgt.n	800840a <_printf_common+0x96>
 80083bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083c0:	1e13      	subs	r3, r2, #0
 80083c2:	6822      	ldr	r2, [r4, #0]
 80083c4:	bf18      	it	ne
 80083c6:	2301      	movne	r3, #1
 80083c8:	0692      	lsls	r2, r2, #26
 80083ca:	d42b      	bmi.n	8008424 <_printf_common+0xb0>
 80083cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083d0:	4649      	mov	r1, r9
 80083d2:	4638      	mov	r0, r7
 80083d4:	47c0      	blx	r8
 80083d6:	3001      	adds	r0, #1
 80083d8:	d01e      	beq.n	8008418 <_printf_common+0xa4>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	68e5      	ldr	r5, [r4, #12]
 80083de:	6832      	ldr	r2, [r6, #0]
 80083e0:	f003 0306 	and.w	r3, r3, #6
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	bf08      	it	eq
 80083e8:	1aad      	subeq	r5, r5, r2
 80083ea:	68a3      	ldr	r3, [r4, #8]
 80083ec:	6922      	ldr	r2, [r4, #16]
 80083ee:	bf0c      	ite	eq
 80083f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f4:	2500      	movne	r5, #0
 80083f6:	4293      	cmp	r3, r2
 80083f8:	bfc4      	itt	gt
 80083fa:	1a9b      	subgt	r3, r3, r2
 80083fc:	18ed      	addgt	r5, r5, r3
 80083fe:	2600      	movs	r6, #0
 8008400:	341a      	adds	r4, #26
 8008402:	42b5      	cmp	r5, r6
 8008404:	d11a      	bne.n	800843c <_printf_common+0xc8>
 8008406:	2000      	movs	r0, #0
 8008408:	e008      	b.n	800841c <_printf_common+0xa8>
 800840a:	2301      	movs	r3, #1
 800840c:	4652      	mov	r2, sl
 800840e:	4649      	mov	r1, r9
 8008410:	4638      	mov	r0, r7
 8008412:	47c0      	blx	r8
 8008414:	3001      	adds	r0, #1
 8008416:	d103      	bne.n	8008420 <_printf_common+0xac>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008420:	3501      	adds	r5, #1
 8008422:	e7c6      	b.n	80083b2 <_printf_common+0x3e>
 8008424:	18e1      	adds	r1, r4, r3
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	2030      	movs	r0, #48	; 0x30
 800842a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800842e:	4422      	add	r2, r4
 8008430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008438:	3302      	adds	r3, #2
 800843a:	e7c7      	b.n	80083cc <_printf_common+0x58>
 800843c:	2301      	movs	r3, #1
 800843e:	4622      	mov	r2, r4
 8008440:	4649      	mov	r1, r9
 8008442:	4638      	mov	r0, r7
 8008444:	47c0      	blx	r8
 8008446:	3001      	adds	r0, #1
 8008448:	d0e6      	beq.n	8008418 <_printf_common+0xa4>
 800844a:	3601      	adds	r6, #1
 800844c:	e7d9      	b.n	8008402 <_printf_common+0x8e>
	...

08008450 <_printf_i>:
 8008450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	7e0f      	ldrb	r7, [r1, #24]
 8008456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008458:	2f78      	cmp	r7, #120	; 0x78
 800845a:	4691      	mov	r9, r2
 800845c:	4680      	mov	r8, r0
 800845e:	460c      	mov	r4, r1
 8008460:	469a      	mov	sl, r3
 8008462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008466:	d807      	bhi.n	8008478 <_printf_i+0x28>
 8008468:	2f62      	cmp	r7, #98	; 0x62
 800846a:	d80a      	bhi.n	8008482 <_printf_i+0x32>
 800846c:	2f00      	cmp	r7, #0
 800846e:	f000 80d8 	beq.w	8008622 <_printf_i+0x1d2>
 8008472:	2f58      	cmp	r7, #88	; 0x58
 8008474:	f000 80a3 	beq.w	80085be <_printf_i+0x16e>
 8008478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800847c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008480:	e03a      	b.n	80084f8 <_printf_i+0xa8>
 8008482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008486:	2b15      	cmp	r3, #21
 8008488:	d8f6      	bhi.n	8008478 <_printf_i+0x28>
 800848a:	a101      	add	r1, pc, #4	; (adr r1, 8008490 <_printf_i+0x40>)
 800848c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008490:	080084e9 	.word	0x080084e9
 8008494:	080084fd 	.word	0x080084fd
 8008498:	08008479 	.word	0x08008479
 800849c:	08008479 	.word	0x08008479
 80084a0:	08008479 	.word	0x08008479
 80084a4:	08008479 	.word	0x08008479
 80084a8:	080084fd 	.word	0x080084fd
 80084ac:	08008479 	.word	0x08008479
 80084b0:	08008479 	.word	0x08008479
 80084b4:	08008479 	.word	0x08008479
 80084b8:	08008479 	.word	0x08008479
 80084bc:	08008609 	.word	0x08008609
 80084c0:	0800852d 	.word	0x0800852d
 80084c4:	080085eb 	.word	0x080085eb
 80084c8:	08008479 	.word	0x08008479
 80084cc:	08008479 	.word	0x08008479
 80084d0:	0800862b 	.word	0x0800862b
 80084d4:	08008479 	.word	0x08008479
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	08008479 	.word	0x08008479
 80084e0:	08008479 	.word	0x08008479
 80084e4:	080085f3 	.word	0x080085f3
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	1d1a      	adds	r2, r3, #4
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	602a      	str	r2, [r5, #0]
 80084f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084f8:	2301      	movs	r3, #1
 80084fa:	e0a3      	b.n	8008644 <_printf_i+0x1f4>
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	6829      	ldr	r1, [r5, #0]
 8008500:	0606      	lsls	r6, r0, #24
 8008502:	f101 0304 	add.w	r3, r1, #4
 8008506:	d50a      	bpl.n	800851e <_printf_i+0xce>
 8008508:	680e      	ldr	r6, [r1, #0]
 800850a:	602b      	str	r3, [r5, #0]
 800850c:	2e00      	cmp	r6, #0
 800850e:	da03      	bge.n	8008518 <_printf_i+0xc8>
 8008510:	232d      	movs	r3, #45	; 0x2d
 8008512:	4276      	negs	r6, r6
 8008514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008518:	485e      	ldr	r0, [pc, #376]	; (8008694 <_printf_i+0x244>)
 800851a:	230a      	movs	r3, #10
 800851c:	e019      	b.n	8008552 <_printf_i+0x102>
 800851e:	680e      	ldr	r6, [r1, #0]
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008526:	bf18      	it	ne
 8008528:	b236      	sxthne	r6, r6
 800852a:	e7ef      	b.n	800850c <_printf_i+0xbc>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	6820      	ldr	r0, [r4, #0]
 8008530:	1d19      	adds	r1, r3, #4
 8008532:	6029      	str	r1, [r5, #0]
 8008534:	0601      	lsls	r1, r0, #24
 8008536:	d501      	bpl.n	800853c <_printf_i+0xec>
 8008538:	681e      	ldr	r6, [r3, #0]
 800853a:	e002      	b.n	8008542 <_printf_i+0xf2>
 800853c:	0646      	lsls	r6, r0, #25
 800853e:	d5fb      	bpl.n	8008538 <_printf_i+0xe8>
 8008540:	881e      	ldrh	r6, [r3, #0]
 8008542:	4854      	ldr	r0, [pc, #336]	; (8008694 <_printf_i+0x244>)
 8008544:	2f6f      	cmp	r7, #111	; 0x6f
 8008546:	bf0c      	ite	eq
 8008548:	2308      	moveq	r3, #8
 800854a:	230a      	movne	r3, #10
 800854c:	2100      	movs	r1, #0
 800854e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008552:	6865      	ldr	r5, [r4, #4]
 8008554:	60a5      	str	r5, [r4, #8]
 8008556:	2d00      	cmp	r5, #0
 8008558:	bfa2      	ittt	ge
 800855a:	6821      	ldrge	r1, [r4, #0]
 800855c:	f021 0104 	bicge.w	r1, r1, #4
 8008560:	6021      	strge	r1, [r4, #0]
 8008562:	b90e      	cbnz	r6, 8008568 <_printf_i+0x118>
 8008564:	2d00      	cmp	r5, #0
 8008566:	d04d      	beq.n	8008604 <_printf_i+0x1b4>
 8008568:	4615      	mov	r5, r2
 800856a:	fbb6 f1f3 	udiv	r1, r6, r3
 800856e:	fb03 6711 	mls	r7, r3, r1, r6
 8008572:	5dc7      	ldrb	r7, [r0, r7]
 8008574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008578:	4637      	mov	r7, r6
 800857a:	42bb      	cmp	r3, r7
 800857c:	460e      	mov	r6, r1
 800857e:	d9f4      	bls.n	800856a <_printf_i+0x11a>
 8008580:	2b08      	cmp	r3, #8
 8008582:	d10b      	bne.n	800859c <_printf_i+0x14c>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	07de      	lsls	r6, r3, #31
 8008588:	d508      	bpl.n	800859c <_printf_i+0x14c>
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	6861      	ldr	r1, [r4, #4]
 800858e:	4299      	cmp	r1, r3
 8008590:	bfde      	ittt	le
 8008592:	2330      	movle	r3, #48	; 0x30
 8008594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800859c:	1b52      	subs	r2, r2, r5
 800859e:	6122      	str	r2, [r4, #16]
 80085a0:	f8cd a000 	str.w	sl, [sp]
 80085a4:	464b      	mov	r3, r9
 80085a6:	aa03      	add	r2, sp, #12
 80085a8:	4621      	mov	r1, r4
 80085aa:	4640      	mov	r0, r8
 80085ac:	f7ff fee2 	bl	8008374 <_printf_common>
 80085b0:	3001      	adds	r0, #1
 80085b2:	d14c      	bne.n	800864e <_printf_i+0x1fe>
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295
 80085b8:	b004      	add	sp, #16
 80085ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085be:	4835      	ldr	r0, [pc, #212]	; (8008694 <_printf_i+0x244>)
 80085c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085c4:	6829      	ldr	r1, [r5, #0]
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80085cc:	6029      	str	r1, [r5, #0]
 80085ce:	061d      	lsls	r5, r3, #24
 80085d0:	d514      	bpl.n	80085fc <_printf_i+0x1ac>
 80085d2:	07df      	lsls	r7, r3, #31
 80085d4:	bf44      	itt	mi
 80085d6:	f043 0320 	orrmi.w	r3, r3, #32
 80085da:	6023      	strmi	r3, [r4, #0]
 80085dc:	b91e      	cbnz	r6, 80085e6 <_printf_i+0x196>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	f023 0320 	bic.w	r3, r3, #32
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	2310      	movs	r3, #16
 80085e8:	e7b0      	b.n	800854c <_printf_i+0xfc>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	f043 0320 	orr.w	r3, r3, #32
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	2378      	movs	r3, #120	; 0x78
 80085f4:	4828      	ldr	r0, [pc, #160]	; (8008698 <_printf_i+0x248>)
 80085f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085fa:	e7e3      	b.n	80085c4 <_printf_i+0x174>
 80085fc:	0659      	lsls	r1, r3, #25
 80085fe:	bf48      	it	mi
 8008600:	b2b6      	uxthmi	r6, r6
 8008602:	e7e6      	b.n	80085d2 <_printf_i+0x182>
 8008604:	4615      	mov	r5, r2
 8008606:	e7bb      	b.n	8008580 <_printf_i+0x130>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	6826      	ldr	r6, [r4, #0]
 800860c:	6961      	ldr	r1, [r4, #20]
 800860e:	1d18      	adds	r0, r3, #4
 8008610:	6028      	str	r0, [r5, #0]
 8008612:	0635      	lsls	r5, r6, #24
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	d501      	bpl.n	800861c <_printf_i+0x1cc>
 8008618:	6019      	str	r1, [r3, #0]
 800861a:	e002      	b.n	8008622 <_printf_i+0x1d2>
 800861c:	0670      	lsls	r0, r6, #25
 800861e:	d5fb      	bpl.n	8008618 <_printf_i+0x1c8>
 8008620:	8019      	strh	r1, [r3, #0]
 8008622:	2300      	movs	r3, #0
 8008624:	6123      	str	r3, [r4, #16]
 8008626:	4615      	mov	r5, r2
 8008628:	e7ba      	b.n	80085a0 <_printf_i+0x150>
 800862a:	682b      	ldr	r3, [r5, #0]
 800862c:	1d1a      	adds	r2, r3, #4
 800862e:	602a      	str	r2, [r5, #0]
 8008630:	681d      	ldr	r5, [r3, #0]
 8008632:	6862      	ldr	r2, [r4, #4]
 8008634:	2100      	movs	r1, #0
 8008636:	4628      	mov	r0, r5
 8008638:	f7f7 fdd2 	bl	80001e0 <memchr>
 800863c:	b108      	cbz	r0, 8008642 <_printf_i+0x1f2>
 800863e:	1b40      	subs	r0, r0, r5
 8008640:	6060      	str	r0, [r4, #4]
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	6123      	str	r3, [r4, #16]
 8008646:	2300      	movs	r3, #0
 8008648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800864c:	e7a8      	b.n	80085a0 <_printf_i+0x150>
 800864e:	6923      	ldr	r3, [r4, #16]
 8008650:	462a      	mov	r2, r5
 8008652:	4649      	mov	r1, r9
 8008654:	4640      	mov	r0, r8
 8008656:	47d0      	blx	sl
 8008658:	3001      	adds	r0, #1
 800865a:	d0ab      	beq.n	80085b4 <_printf_i+0x164>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	079b      	lsls	r3, r3, #30
 8008660:	d413      	bmi.n	800868a <_printf_i+0x23a>
 8008662:	68e0      	ldr	r0, [r4, #12]
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	4298      	cmp	r0, r3
 8008668:	bfb8      	it	lt
 800866a:	4618      	movlt	r0, r3
 800866c:	e7a4      	b.n	80085b8 <_printf_i+0x168>
 800866e:	2301      	movs	r3, #1
 8008670:	4632      	mov	r2, r6
 8008672:	4649      	mov	r1, r9
 8008674:	4640      	mov	r0, r8
 8008676:	47d0      	blx	sl
 8008678:	3001      	adds	r0, #1
 800867a:	d09b      	beq.n	80085b4 <_printf_i+0x164>
 800867c:	3501      	adds	r5, #1
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	9903      	ldr	r1, [sp, #12]
 8008682:	1a5b      	subs	r3, r3, r1
 8008684:	42ab      	cmp	r3, r5
 8008686:	dcf2      	bgt.n	800866e <_printf_i+0x21e>
 8008688:	e7eb      	b.n	8008662 <_printf_i+0x212>
 800868a:	2500      	movs	r5, #0
 800868c:	f104 0619 	add.w	r6, r4, #25
 8008690:	e7f5      	b.n	800867e <_printf_i+0x22e>
 8008692:	bf00      	nop
 8008694:	0800b92e 	.word	0x0800b92e
 8008698:	0800b93f 	.word	0x0800b93f

0800869c <siprintf>:
 800869c:	b40e      	push	{r1, r2, r3}
 800869e:	b500      	push	{lr}
 80086a0:	b09c      	sub	sp, #112	; 0x70
 80086a2:	ab1d      	add	r3, sp, #116	; 0x74
 80086a4:	9002      	str	r0, [sp, #8]
 80086a6:	9006      	str	r0, [sp, #24]
 80086a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086ac:	4809      	ldr	r0, [pc, #36]	; (80086d4 <siprintf+0x38>)
 80086ae:	9107      	str	r1, [sp, #28]
 80086b0:	9104      	str	r1, [sp, #16]
 80086b2:	4909      	ldr	r1, [pc, #36]	; (80086d8 <siprintf+0x3c>)
 80086b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b8:	9105      	str	r1, [sp, #20]
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	a902      	add	r1, sp, #8
 80086c0:	f001 fb78 	bl	8009db4 <_svfiprintf_r>
 80086c4:	9b02      	ldr	r3, [sp, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	b01c      	add	sp, #112	; 0x70
 80086cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d0:	b003      	add	sp, #12
 80086d2:	4770      	bx	lr
 80086d4:	20000010 	.word	0x20000010
 80086d8:	ffff0208 	.word	0xffff0208

080086dc <quorem>:
 80086dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e0:	6903      	ldr	r3, [r0, #16]
 80086e2:	690c      	ldr	r4, [r1, #16]
 80086e4:	42a3      	cmp	r3, r4
 80086e6:	4607      	mov	r7, r0
 80086e8:	f2c0 8081 	blt.w	80087ee <quorem+0x112>
 80086ec:	3c01      	subs	r4, #1
 80086ee:	f101 0814 	add.w	r8, r1, #20
 80086f2:	f100 0514 	add.w	r5, r0, #20
 80086f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008700:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008704:	3301      	adds	r3, #1
 8008706:	429a      	cmp	r2, r3
 8008708:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800870c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008710:	fbb2 f6f3 	udiv	r6, r2, r3
 8008714:	d331      	bcc.n	800877a <quorem+0x9e>
 8008716:	f04f 0e00 	mov.w	lr, #0
 800871a:	4640      	mov	r0, r8
 800871c:	46ac      	mov	ip, r5
 800871e:	46f2      	mov	sl, lr
 8008720:	f850 2b04 	ldr.w	r2, [r0], #4
 8008724:	b293      	uxth	r3, r2
 8008726:	fb06 e303 	mla	r3, r6, r3, lr
 800872a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800872e:	b29b      	uxth	r3, r3
 8008730:	ebaa 0303 	sub.w	r3, sl, r3
 8008734:	f8dc a000 	ldr.w	sl, [ip]
 8008738:	0c12      	lsrs	r2, r2, #16
 800873a:	fa13 f38a 	uxtah	r3, r3, sl
 800873e:	fb06 e202 	mla	r2, r6, r2, lr
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	9b00      	ldr	r3, [sp, #0]
 8008746:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800874a:	b292      	uxth	r2, r2
 800874c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008750:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008754:	f8bd 3000 	ldrh.w	r3, [sp]
 8008758:	4581      	cmp	r9, r0
 800875a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800875e:	f84c 3b04 	str.w	r3, [ip], #4
 8008762:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008766:	d2db      	bcs.n	8008720 <quorem+0x44>
 8008768:	f855 300b 	ldr.w	r3, [r5, fp]
 800876c:	b92b      	cbnz	r3, 800877a <quorem+0x9e>
 800876e:	9b01      	ldr	r3, [sp, #4]
 8008770:	3b04      	subs	r3, #4
 8008772:	429d      	cmp	r5, r3
 8008774:	461a      	mov	r2, r3
 8008776:	d32e      	bcc.n	80087d6 <quorem+0xfa>
 8008778:	613c      	str	r4, [r7, #16]
 800877a:	4638      	mov	r0, r7
 800877c:	f001 f8c6 	bl	800990c <__mcmp>
 8008780:	2800      	cmp	r0, #0
 8008782:	db24      	blt.n	80087ce <quorem+0xf2>
 8008784:	3601      	adds	r6, #1
 8008786:	4628      	mov	r0, r5
 8008788:	f04f 0c00 	mov.w	ip, #0
 800878c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008790:	f8d0 e000 	ldr.w	lr, [r0]
 8008794:	b293      	uxth	r3, r2
 8008796:	ebac 0303 	sub.w	r3, ip, r3
 800879a:	0c12      	lsrs	r2, r2, #16
 800879c:	fa13 f38e 	uxtah	r3, r3, lr
 80087a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ae:	45c1      	cmp	r9, r8
 80087b0:	f840 3b04 	str.w	r3, [r0], #4
 80087b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087b8:	d2e8      	bcs.n	800878c <quorem+0xb0>
 80087ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087c2:	b922      	cbnz	r2, 80087ce <quorem+0xf2>
 80087c4:	3b04      	subs	r3, #4
 80087c6:	429d      	cmp	r5, r3
 80087c8:	461a      	mov	r2, r3
 80087ca:	d30a      	bcc.n	80087e2 <quorem+0x106>
 80087cc:	613c      	str	r4, [r7, #16]
 80087ce:	4630      	mov	r0, r6
 80087d0:	b003      	add	sp, #12
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	6812      	ldr	r2, [r2, #0]
 80087d8:	3b04      	subs	r3, #4
 80087da:	2a00      	cmp	r2, #0
 80087dc:	d1cc      	bne.n	8008778 <quorem+0x9c>
 80087de:	3c01      	subs	r4, #1
 80087e0:	e7c7      	b.n	8008772 <quorem+0x96>
 80087e2:	6812      	ldr	r2, [r2, #0]
 80087e4:	3b04      	subs	r3, #4
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	d1f0      	bne.n	80087cc <quorem+0xf0>
 80087ea:	3c01      	subs	r4, #1
 80087ec:	e7eb      	b.n	80087c6 <quorem+0xea>
 80087ee:	2000      	movs	r0, #0
 80087f0:	e7ee      	b.n	80087d0 <quorem+0xf4>
 80087f2:	0000      	movs	r0, r0
 80087f4:	0000      	movs	r0, r0
	...

080087f8 <_dtoa_r>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	ed2d 8b04 	vpush	{d8-d9}
 8008800:	ec57 6b10 	vmov	r6, r7, d0
 8008804:	b093      	sub	sp, #76	; 0x4c
 8008806:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008808:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800880c:	9106      	str	r1, [sp, #24]
 800880e:	ee10 aa10 	vmov	sl, s0
 8008812:	4604      	mov	r4, r0
 8008814:	9209      	str	r2, [sp, #36]	; 0x24
 8008816:	930c      	str	r3, [sp, #48]	; 0x30
 8008818:	46bb      	mov	fp, r7
 800881a:	b975      	cbnz	r5, 800883a <_dtoa_r+0x42>
 800881c:	2010      	movs	r0, #16
 800881e:	f000 fddd 	bl	80093dc <malloc>
 8008822:	4602      	mov	r2, r0
 8008824:	6260      	str	r0, [r4, #36]	; 0x24
 8008826:	b920      	cbnz	r0, 8008832 <_dtoa_r+0x3a>
 8008828:	4ba7      	ldr	r3, [pc, #668]	; (8008ac8 <_dtoa_r+0x2d0>)
 800882a:	21ea      	movs	r1, #234	; 0xea
 800882c:	48a7      	ldr	r0, [pc, #668]	; (8008acc <_dtoa_r+0x2d4>)
 800882e:	f001 fbd1 	bl	8009fd4 <__assert_func>
 8008832:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008836:	6005      	str	r5, [r0, #0]
 8008838:	60c5      	str	r5, [r0, #12]
 800883a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800883c:	6819      	ldr	r1, [r3, #0]
 800883e:	b151      	cbz	r1, 8008856 <_dtoa_r+0x5e>
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	604a      	str	r2, [r1, #4]
 8008844:	2301      	movs	r3, #1
 8008846:	4093      	lsls	r3, r2
 8008848:	608b      	str	r3, [r1, #8]
 800884a:	4620      	mov	r0, r4
 800884c:	f000 fe1c 	bl	8009488 <_Bfree>
 8008850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	1e3b      	subs	r3, r7, #0
 8008858:	bfaa      	itet	ge
 800885a:	2300      	movge	r3, #0
 800885c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008860:	f8c8 3000 	strge.w	r3, [r8]
 8008864:	4b9a      	ldr	r3, [pc, #616]	; (8008ad0 <_dtoa_r+0x2d8>)
 8008866:	bfbc      	itt	lt
 8008868:	2201      	movlt	r2, #1
 800886a:	f8c8 2000 	strlt.w	r2, [r8]
 800886e:	ea33 030b 	bics.w	r3, r3, fp
 8008872:	d11b      	bne.n	80088ac <_dtoa_r+0xb4>
 8008874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008876:	f242 730f 	movw	r3, #9999	; 0x270f
 800887a:	6013      	str	r3, [r2, #0]
 800887c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008880:	4333      	orrs	r3, r6
 8008882:	f000 8592 	beq.w	80093aa <_dtoa_r+0xbb2>
 8008886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008888:	b963      	cbnz	r3, 80088a4 <_dtoa_r+0xac>
 800888a:	4b92      	ldr	r3, [pc, #584]	; (8008ad4 <_dtoa_r+0x2dc>)
 800888c:	e022      	b.n	80088d4 <_dtoa_r+0xdc>
 800888e:	4b92      	ldr	r3, [pc, #584]	; (8008ad8 <_dtoa_r+0x2e0>)
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	3308      	adds	r3, #8
 8008894:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	9801      	ldr	r0, [sp, #4]
 800889a:	b013      	add	sp, #76	; 0x4c
 800889c:	ecbd 8b04 	vpop	{d8-d9}
 80088a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a4:	4b8b      	ldr	r3, [pc, #556]	; (8008ad4 <_dtoa_r+0x2dc>)
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	3303      	adds	r3, #3
 80088aa:	e7f3      	b.n	8008894 <_dtoa_r+0x9c>
 80088ac:	2200      	movs	r2, #0
 80088ae:	2300      	movs	r3, #0
 80088b0:	4650      	mov	r0, sl
 80088b2:	4659      	mov	r1, fp
 80088b4:	f7f8 f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80088b8:	ec4b ab19 	vmov	d9, sl, fp
 80088bc:	4680      	mov	r8, r0
 80088be:	b158      	cbz	r0, 80088d8 <_dtoa_r+0xe0>
 80088c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088c2:	2301      	movs	r3, #1
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 856b 	beq.w	80093a4 <_dtoa_r+0xbac>
 80088ce:	4883      	ldr	r0, [pc, #524]	; (8008adc <_dtoa_r+0x2e4>)
 80088d0:	6018      	str	r0, [r3, #0]
 80088d2:	1e43      	subs	r3, r0, #1
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	e7df      	b.n	8008898 <_dtoa_r+0xa0>
 80088d8:	ec4b ab10 	vmov	d0, sl, fp
 80088dc:	aa10      	add	r2, sp, #64	; 0x40
 80088de:	a911      	add	r1, sp, #68	; 0x44
 80088e0:	4620      	mov	r0, r4
 80088e2:	f001 f8b9 	bl	8009a58 <__d2b>
 80088e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80088ea:	ee08 0a10 	vmov	s16, r0
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	f000 8084 	beq.w	80089fc <_dtoa_r+0x204>
 80088f4:	ee19 3a90 	vmov	r3, s19
 80088f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008900:	4656      	mov	r6, sl
 8008902:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008906:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800890a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800890e:	4b74      	ldr	r3, [pc, #464]	; (8008ae0 <_dtoa_r+0x2e8>)
 8008910:	2200      	movs	r2, #0
 8008912:	4630      	mov	r0, r6
 8008914:	4639      	mov	r1, r7
 8008916:	f7f7 fcb7 	bl	8000288 <__aeabi_dsub>
 800891a:	a365      	add	r3, pc, #404	; (adr r3, 8008ab0 <_dtoa_r+0x2b8>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f7f7 fe6a 	bl	80005f8 <__aeabi_dmul>
 8008924:	a364      	add	r3, pc, #400	; (adr r3, 8008ab8 <_dtoa_r+0x2c0>)
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	f7f7 fcaf 	bl	800028c <__adddf3>
 800892e:	4606      	mov	r6, r0
 8008930:	4628      	mov	r0, r5
 8008932:	460f      	mov	r7, r1
 8008934:	f7f7 fdf6 	bl	8000524 <__aeabi_i2d>
 8008938:	a361      	add	r3, pc, #388	; (adr r3, 8008ac0 <_dtoa_r+0x2c8>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 fe5b 	bl	80005f8 <__aeabi_dmul>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4630      	mov	r0, r6
 8008948:	4639      	mov	r1, r7
 800894a:	f7f7 fc9f 	bl	800028c <__adddf3>
 800894e:	4606      	mov	r6, r0
 8008950:	460f      	mov	r7, r1
 8008952:	f7f8 f901 	bl	8000b58 <__aeabi_d2iz>
 8008956:	2200      	movs	r2, #0
 8008958:	9000      	str	r0, [sp, #0]
 800895a:	2300      	movs	r3, #0
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f7f8 f8bc 	bl	8000adc <__aeabi_dcmplt>
 8008964:	b150      	cbz	r0, 800897c <_dtoa_r+0x184>
 8008966:	9800      	ldr	r0, [sp, #0]
 8008968:	f7f7 fddc 	bl	8000524 <__aeabi_i2d>
 800896c:	4632      	mov	r2, r6
 800896e:	463b      	mov	r3, r7
 8008970:	f7f8 f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008974:	b910      	cbnz	r0, 800897c <_dtoa_r+0x184>
 8008976:	9b00      	ldr	r3, [sp, #0]
 8008978:	3b01      	subs	r3, #1
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	9b00      	ldr	r3, [sp, #0]
 800897e:	2b16      	cmp	r3, #22
 8008980:	d85a      	bhi.n	8008a38 <_dtoa_r+0x240>
 8008982:	9a00      	ldr	r2, [sp, #0]
 8008984:	4b57      	ldr	r3, [pc, #348]	; (8008ae4 <_dtoa_r+0x2ec>)
 8008986:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	ec51 0b19 	vmov	r0, r1, d9
 8008992:	f7f8 f8a3 	bl	8000adc <__aeabi_dcmplt>
 8008996:	2800      	cmp	r0, #0
 8008998:	d050      	beq.n	8008a3c <_dtoa_r+0x244>
 800899a:	9b00      	ldr	r3, [sp, #0]
 800899c:	3b01      	subs	r3, #1
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	2300      	movs	r3, #0
 80089a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80089a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089a6:	1b5d      	subs	r5, r3, r5
 80089a8:	1e6b      	subs	r3, r5, #1
 80089aa:	9305      	str	r3, [sp, #20]
 80089ac:	bf45      	ittet	mi
 80089ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80089b2:	9304      	strmi	r3, [sp, #16]
 80089b4:	2300      	movpl	r3, #0
 80089b6:	2300      	movmi	r3, #0
 80089b8:	bf4c      	ite	mi
 80089ba:	9305      	strmi	r3, [sp, #20]
 80089bc:	9304      	strpl	r3, [sp, #16]
 80089be:	9b00      	ldr	r3, [sp, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	db3d      	blt.n	8008a40 <_dtoa_r+0x248>
 80089c4:	9b05      	ldr	r3, [sp, #20]
 80089c6:	9a00      	ldr	r2, [sp, #0]
 80089c8:	920a      	str	r2, [sp, #40]	; 0x28
 80089ca:	4413      	add	r3, r2
 80089cc:	9305      	str	r3, [sp, #20]
 80089ce:	2300      	movs	r3, #0
 80089d0:	9307      	str	r3, [sp, #28]
 80089d2:	9b06      	ldr	r3, [sp, #24]
 80089d4:	2b09      	cmp	r3, #9
 80089d6:	f200 8089 	bhi.w	8008aec <_dtoa_r+0x2f4>
 80089da:	2b05      	cmp	r3, #5
 80089dc:	bfc4      	itt	gt
 80089de:	3b04      	subgt	r3, #4
 80089e0:	9306      	strgt	r3, [sp, #24]
 80089e2:	9b06      	ldr	r3, [sp, #24]
 80089e4:	f1a3 0302 	sub.w	r3, r3, #2
 80089e8:	bfcc      	ite	gt
 80089ea:	2500      	movgt	r5, #0
 80089ec:	2501      	movle	r5, #1
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	f200 8087 	bhi.w	8008b02 <_dtoa_r+0x30a>
 80089f4:	e8df f003 	tbb	[pc, r3]
 80089f8:	59383a2d 	.word	0x59383a2d
 80089fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008a00:	441d      	add	r5, r3
 8008a02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	bfc1      	itttt	gt
 8008a0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a12:	fa0b f303 	lslgt.w	r3, fp, r3
 8008a16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a1a:	bfda      	itte	le
 8008a1c:	f1c3 0320 	rsble	r3, r3, #32
 8008a20:	fa06 f003 	lslle.w	r0, r6, r3
 8008a24:	4318      	orrgt	r0, r3
 8008a26:	f7f7 fd6d 	bl	8000504 <__aeabi_ui2d>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a32:	3d01      	subs	r5, #1
 8008a34:	930e      	str	r3, [sp, #56]	; 0x38
 8008a36:	e76a      	b.n	800890e <_dtoa_r+0x116>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e7b2      	b.n	80089a2 <_dtoa_r+0x1aa>
 8008a3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a3e:	e7b1      	b.n	80089a4 <_dtoa_r+0x1ac>
 8008a40:	9b04      	ldr	r3, [sp, #16]
 8008a42:	9a00      	ldr	r2, [sp, #0]
 8008a44:	1a9b      	subs	r3, r3, r2
 8008a46:	9304      	str	r3, [sp, #16]
 8008a48:	4253      	negs	r3, r2
 8008a4a:	9307      	str	r3, [sp, #28]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a50:	e7bf      	b.n	80089d2 <_dtoa_r+0x1da>
 8008a52:	2300      	movs	r3, #0
 8008a54:	9308      	str	r3, [sp, #32]
 8008a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dc55      	bgt.n	8008b08 <_dtoa_r+0x310>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008a62:	461a      	mov	r2, r3
 8008a64:	9209      	str	r2, [sp, #36]	; 0x24
 8008a66:	e00c      	b.n	8008a82 <_dtoa_r+0x28a>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e7f3      	b.n	8008a54 <_dtoa_r+0x25c>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a70:	9308      	str	r3, [sp, #32]
 8008a72:	9b00      	ldr	r3, [sp, #0]
 8008a74:	4413      	add	r3, r2
 8008a76:	9302      	str	r3, [sp, #8]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	9303      	str	r3, [sp, #12]
 8008a7e:	bfb8      	it	lt
 8008a80:	2301      	movlt	r3, #1
 8008a82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a84:	2200      	movs	r2, #0
 8008a86:	6042      	str	r2, [r0, #4]
 8008a88:	2204      	movs	r2, #4
 8008a8a:	f102 0614 	add.w	r6, r2, #20
 8008a8e:	429e      	cmp	r6, r3
 8008a90:	6841      	ldr	r1, [r0, #4]
 8008a92:	d93d      	bls.n	8008b10 <_dtoa_r+0x318>
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 fcb7 	bl	8009408 <_Balloc>
 8008a9a:	9001      	str	r0, [sp, #4]
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d13b      	bne.n	8008b18 <_dtoa_r+0x320>
 8008aa0:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <_dtoa_r+0x2f0>)
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008aa8:	e6c0      	b.n	800882c <_dtoa_r+0x34>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e7df      	b.n	8008a6e <_dtoa_r+0x276>
 8008aae:	bf00      	nop
 8008ab0:	636f4361 	.word	0x636f4361
 8008ab4:	3fd287a7 	.word	0x3fd287a7
 8008ab8:	8b60c8b3 	.word	0x8b60c8b3
 8008abc:	3fc68a28 	.word	0x3fc68a28
 8008ac0:	509f79fb 	.word	0x509f79fb
 8008ac4:	3fd34413 	.word	0x3fd34413
 8008ac8:	0800b95d 	.word	0x0800b95d
 8008acc:	0800b974 	.word	0x0800b974
 8008ad0:	7ff00000 	.word	0x7ff00000
 8008ad4:	0800b959 	.word	0x0800b959
 8008ad8:	0800b950 	.word	0x0800b950
 8008adc:	0800b92d 	.word	0x0800b92d
 8008ae0:	3ff80000 	.word	0x3ff80000
 8008ae4:	0800ba68 	.word	0x0800ba68
 8008ae8:	0800b9cf 	.word	0x0800b9cf
 8008aec:	2501      	movs	r5, #1
 8008aee:	2300      	movs	r3, #0
 8008af0:	9306      	str	r3, [sp, #24]
 8008af2:	9508      	str	r5, [sp, #32]
 8008af4:	f04f 33ff 	mov.w	r3, #4294967295
 8008af8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008afc:	2200      	movs	r2, #0
 8008afe:	2312      	movs	r3, #18
 8008b00:	e7b0      	b.n	8008a64 <_dtoa_r+0x26c>
 8008b02:	2301      	movs	r3, #1
 8008b04:	9308      	str	r3, [sp, #32]
 8008b06:	e7f5      	b.n	8008af4 <_dtoa_r+0x2fc>
 8008b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b0e:	e7b8      	b.n	8008a82 <_dtoa_r+0x28a>
 8008b10:	3101      	adds	r1, #1
 8008b12:	6041      	str	r1, [r0, #4]
 8008b14:	0052      	lsls	r2, r2, #1
 8008b16:	e7b8      	b.n	8008a8a <_dtoa_r+0x292>
 8008b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1a:	9a01      	ldr	r2, [sp, #4]
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	9b03      	ldr	r3, [sp, #12]
 8008b20:	2b0e      	cmp	r3, #14
 8008b22:	f200 809d 	bhi.w	8008c60 <_dtoa_r+0x468>
 8008b26:	2d00      	cmp	r5, #0
 8008b28:	f000 809a 	beq.w	8008c60 <_dtoa_r+0x468>
 8008b2c:	9b00      	ldr	r3, [sp, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	dd32      	ble.n	8008b98 <_dtoa_r+0x3a0>
 8008b32:	4ab7      	ldr	r2, [pc, #732]	; (8008e10 <_dtoa_r+0x618>)
 8008b34:	f003 030f 	and.w	r3, r3, #15
 8008b38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b40:	9b00      	ldr	r3, [sp, #0]
 8008b42:	05d8      	lsls	r0, r3, #23
 8008b44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008b48:	d516      	bpl.n	8008b78 <_dtoa_r+0x380>
 8008b4a:	4bb2      	ldr	r3, [pc, #712]	; (8008e14 <_dtoa_r+0x61c>)
 8008b4c:	ec51 0b19 	vmov	r0, r1, d9
 8008b50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b54:	f7f7 fe7a 	bl	800084c <__aeabi_ddiv>
 8008b58:	f007 070f 	and.w	r7, r7, #15
 8008b5c:	4682      	mov	sl, r0
 8008b5e:	468b      	mov	fp, r1
 8008b60:	2503      	movs	r5, #3
 8008b62:	4eac      	ldr	r6, [pc, #688]	; (8008e14 <_dtoa_r+0x61c>)
 8008b64:	b957      	cbnz	r7, 8008b7c <_dtoa_r+0x384>
 8008b66:	4642      	mov	r2, r8
 8008b68:	464b      	mov	r3, r9
 8008b6a:	4650      	mov	r0, sl
 8008b6c:	4659      	mov	r1, fp
 8008b6e:	f7f7 fe6d 	bl	800084c <__aeabi_ddiv>
 8008b72:	4682      	mov	sl, r0
 8008b74:	468b      	mov	fp, r1
 8008b76:	e028      	b.n	8008bca <_dtoa_r+0x3d2>
 8008b78:	2502      	movs	r5, #2
 8008b7a:	e7f2      	b.n	8008b62 <_dtoa_r+0x36a>
 8008b7c:	07f9      	lsls	r1, r7, #31
 8008b7e:	d508      	bpl.n	8008b92 <_dtoa_r+0x39a>
 8008b80:	4640      	mov	r0, r8
 8008b82:	4649      	mov	r1, r9
 8008b84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b88:	f7f7 fd36 	bl	80005f8 <__aeabi_dmul>
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	4680      	mov	r8, r0
 8008b90:	4689      	mov	r9, r1
 8008b92:	107f      	asrs	r7, r7, #1
 8008b94:	3608      	adds	r6, #8
 8008b96:	e7e5      	b.n	8008b64 <_dtoa_r+0x36c>
 8008b98:	f000 809b 	beq.w	8008cd2 <_dtoa_r+0x4da>
 8008b9c:	9b00      	ldr	r3, [sp, #0]
 8008b9e:	4f9d      	ldr	r7, [pc, #628]	; (8008e14 <_dtoa_r+0x61c>)
 8008ba0:	425e      	negs	r6, r3
 8008ba2:	4b9b      	ldr	r3, [pc, #620]	; (8008e10 <_dtoa_r+0x618>)
 8008ba4:	f006 020f 	and.w	r2, r6, #15
 8008ba8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	ec51 0b19 	vmov	r0, r1, d9
 8008bb4:	f7f7 fd20 	bl	80005f8 <__aeabi_dmul>
 8008bb8:	1136      	asrs	r6, r6, #4
 8008bba:	4682      	mov	sl, r0
 8008bbc:	468b      	mov	fp, r1
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	2502      	movs	r5, #2
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d17a      	bne.n	8008cbc <_dtoa_r+0x4c4>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1d3      	bne.n	8008b72 <_dtoa_r+0x37a>
 8008bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 8082 	beq.w	8008cd6 <_dtoa_r+0x4de>
 8008bd2:	4b91      	ldr	r3, [pc, #580]	; (8008e18 <_dtoa_r+0x620>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	4650      	mov	r0, sl
 8008bd8:	4659      	mov	r1, fp
 8008bda:	f7f7 ff7f 	bl	8000adc <__aeabi_dcmplt>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d079      	beq.n	8008cd6 <_dtoa_r+0x4de>
 8008be2:	9b03      	ldr	r3, [sp, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d076      	beq.n	8008cd6 <_dtoa_r+0x4de>
 8008be8:	9b02      	ldr	r3, [sp, #8]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	dd36      	ble.n	8008c5c <_dtoa_r+0x464>
 8008bee:	9b00      	ldr	r3, [sp, #0]
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	1e5f      	subs	r7, r3, #1
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	4b88      	ldr	r3, [pc, #544]	; (8008e1c <_dtoa_r+0x624>)
 8008bfa:	f7f7 fcfd 	bl	80005f8 <__aeabi_dmul>
 8008bfe:	9e02      	ldr	r6, [sp, #8]
 8008c00:	4682      	mov	sl, r0
 8008c02:	468b      	mov	fp, r1
 8008c04:	3501      	adds	r5, #1
 8008c06:	4628      	mov	r0, r5
 8008c08:	f7f7 fc8c 	bl	8000524 <__aeabi_i2d>
 8008c0c:	4652      	mov	r2, sl
 8008c0e:	465b      	mov	r3, fp
 8008c10:	f7f7 fcf2 	bl	80005f8 <__aeabi_dmul>
 8008c14:	4b82      	ldr	r3, [pc, #520]	; (8008e20 <_dtoa_r+0x628>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	f7f7 fb38 	bl	800028c <__adddf3>
 8008c1c:	46d0      	mov	r8, sl
 8008c1e:	46d9      	mov	r9, fp
 8008c20:	4682      	mov	sl, r0
 8008c22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008c26:	2e00      	cmp	r6, #0
 8008c28:	d158      	bne.n	8008cdc <_dtoa_r+0x4e4>
 8008c2a:	4b7e      	ldr	r3, [pc, #504]	; (8008e24 <_dtoa_r+0x62c>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4640      	mov	r0, r8
 8008c30:	4649      	mov	r1, r9
 8008c32:	f7f7 fb29 	bl	8000288 <__aeabi_dsub>
 8008c36:	4652      	mov	r2, sl
 8008c38:	465b      	mov	r3, fp
 8008c3a:	4680      	mov	r8, r0
 8008c3c:	4689      	mov	r9, r1
 8008c3e:	f7f7 ff6b 	bl	8000b18 <__aeabi_dcmpgt>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f040 8295 	bne.w	8009172 <_dtoa_r+0x97a>
 8008c48:	4652      	mov	r2, sl
 8008c4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008c4e:	4640      	mov	r0, r8
 8008c50:	4649      	mov	r1, r9
 8008c52:	f7f7 ff43 	bl	8000adc <__aeabi_dcmplt>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f040 8289 	bne.w	800916e <_dtoa_r+0x976>
 8008c5c:	ec5b ab19 	vmov	sl, fp, d9
 8008c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f2c0 8148 	blt.w	8008ef8 <_dtoa_r+0x700>
 8008c68:	9a00      	ldr	r2, [sp, #0]
 8008c6a:	2a0e      	cmp	r2, #14
 8008c6c:	f300 8144 	bgt.w	8008ef8 <_dtoa_r+0x700>
 8008c70:	4b67      	ldr	r3, [pc, #412]	; (8008e10 <_dtoa_r+0x618>)
 8008c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f280 80d5 	bge.w	8008e2c <_dtoa_r+0x634>
 8008c82:	9b03      	ldr	r3, [sp, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f300 80d1 	bgt.w	8008e2c <_dtoa_r+0x634>
 8008c8a:	f040 826f 	bne.w	800916c <_dtoa_r+0x974>
 8008c8e:	4b65      	ldr	r3, [pc, #404]	; (8008e24 <_dtoa_r+0x62c>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	4640      	mov	r0, r8
 8008c94:	4649      	mov	r1, r9
 8008c96:	f7f7 fcaf 	bl	80005f8 <__aeabi_dmul>
 8008c9a:	4652      	mov	r2, sl
 8008c9c:	465b      	mov	r3, fp
 8008c9e:	f7f7 ff31 	bl	8000b04 <__aeabi_dcmpge>
 8008ca2:	9e03      	ldr	r6, [sp, #12]
 8008ca4:	4637      	mov	r7, r6
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	f040 8245 	bne.w	8009136 <_dtoa_r+0x93e>
 8008cac:	9d01      	ldr	r5, [sp, #4]
 8008cae:	2331      	movs	r3, #49	; 0x31
 8008cb0:	f805 3b01 	strb.w	r3, [r5], #1
 8008cb4:	9b00      	ldr	r3, [sp, #0]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	e240      	b.n	800913e <_dtoa_r+0x946>
 8008cbc:	07f2      	lsls	r2, r6, #31
 8008cbe:	d505      	bpl.n	8008ccc <_dtoa_r+0x4d4>
 8008cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc4:	f7f7 fc98 	bl	80005f8 <__aeabi_dmul>
 8008cc8:	3501      	adds	r5, #1
 8008cca:	2301      	movs	r3, #1
 8008ccc:	1076      	asrs	r6, r6, #1
 8008cce:	3708      	adds	r7, #8
 8008cd0:	e777      	b.n	8008bc2 <_dtoa_r+0x3ca>
 8008cd2:	2502      	movs	r5, #2
 8008cd4:	e779      	b.n	8008bca <_dtoa_r+0x3d2>
 8008cd6:	9f00      	ldr	r7, [sp, #0]
 8008cd8:	9e03      	ldr	r6, [sp, #12]
 8008cda:	e794      	b.n	8008c06 <_dtoa_r+0x40e>
 8008cdc:	9901      	ldr	r1, [sp, #4]
 8008cde:	4b4c      	ldr	r3, [pc, #304]	; (8008e10 <_dtoa_r+0x618>)
 8008ce0:	4431      	add	r1, r6
 8008ce2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ce4:	9908      	ldr	r1, [sp, #32]
 8008ce6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008cea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008cee:	2900      	cmp	r1, #0
 8008cf0:	d043      	beq.n	8008d7a <_dtoa_r+0x582>
 8008cf2:	494d      	ldr	r1, [pc, #308]	; (8008e28 <_dtoa_r+0x630>)
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	f7f7 fda9 	bl	800084c <__aeabi_ddiv>
 8008cfa:	4652      	mov	r2, sl
 8008cfc:	465b      	mov	r3, fp
 8008cfe:	f7f7 fac3 	bl	8000288 <__aeabi_dsub>
 8008d02:	9d01      	ldr	r5, [sp, #4]
 8008d04:	4682      	mov	sl, r0
 8008d06:	468b      	mov	fp, r1
 8008d08:	4649      	mov	r1, r9
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	f7f7 ff24 	bl	8000b58 <__aeabi_d2iz>
 8008d10:	4606      	mov	r6, r0
 8008d12:	f7f7 fc07 	bl	8000524 <__aeabi_i2d>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	4649      	mov	r1, r9
 8008d1e:	f7f7 fab3 	bl	8000288 <__aeabi_dsub>
 8008d22:	3630      	adds	r6, #48	; 0x30
 8008d24:	f805 6b01 	strb.w	r6, [r5], #1
 8008d28:	4652      	mov	r2, sl
 8008d2a:	465b      	mov	r3, fp
 8008d2c:	4680      	mov	r8, r0
 8008d2e:	4689      	mov	r9, r1
 8008d30:	f7f7 fed4 	bl	8000adc <__aeabi_dcmplt>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d163      	bne.n	8008e00 <_dtoa_r+0x608>
 8008d38:	4642      	mov	r2, r8
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	4936      	ldr	r1, [pc, #216]	; (8008e18 <_dtoa_r+0x620>)
 8008d3e:	2000      	movs	r0, #0
 8008d40:	f7f7 faa2 	bl	8000288 <__aeabi_dsub>
 8008d44:	4652      	mov	r2, sl
 8008d46:	465b      	mov	r3, fp
 8008d48:	f7f7 fec8 	bl	8000adc <__aeabi_dcmplt>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f040 80b5 	bne.w	8008ebc <_dtoa_r+0x6c4>
 8008d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d54:	429d      	cmp	r5, r3
 8008d56:	d081      	beq.n	8008c5c <_dtoa_r+0x464>
 8008d58:	4b30      	ldr	r3, [pc, #192]	; (8008e1c <_dtoa_r+0x624>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	4650      	mov	r0, sl
 8008d5e:	4659      	mov	r1, fp
 8008d60:	f7f7 fc4a 	bl	80005f8 <__aeabi_dmul>
 8008d64:	4b2d      	ldr	r3, [pc, #180]	; (8008e1c <_dtoa_r+0x624>)
 8008d66:	4682      	mov	sl, r0
 8008d68:	468b      	mov	fp, r1
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f7f7 fc42 	bl	80005f8 <__aeabi_dmul>
 8008d74:	4680      	mov	r8, r0
 8008d76:	4689      	mov	r9, r1
 8008d78:	e7c6      	b.n	8008d08 <_dtoa_r+0x510>
 8008d7a:	4650      	mov	r0, sl
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	f7f7 fc3b 	bl	80005f8 <__aeabi_dmul>
 8008d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d84:	9d01      	ldr	r5, [sp, #4]
 8008d86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d88:	4682      	mov	sl, r0
 8008d8a:	468b      	mov	fp, r1
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	4640      	mov	r0, r8
 8008d90:	f7f7 fee2 	bl	8000b58 <__aeabi_d2iz>
 8008d94:	4606      	mov	r6, r0
 8008d96:	f7f7 fbc5 	bl	8000524 <__aeabi_i2d>
 8008d9a:	3630      	adds	r6, #48	; 0x30
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4640      	mov	r0, r8
 8008da2:	4649      	mov	r1, r9
 8008da4:	f7f7 fa70 	bl	8000288 <__aeabi_dsub>
 8008da8:	f805 6b01 	strb.w	r6, [r5], #1
 8008dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dae:	429d      	cmp	r5, r3
 8008db0:	4680      	mov	r8, r0
 8008db2:	4689      	mov	r9, r1
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	d124      	bne.n	8008e04 <_dtoa_r+0x60c>
 8008dba:	4b1b      	ldr	r3, [pc, #108]	; (8008e28 <_dtoa_r+0x630>)
 8008dbc:	4650      	mov	r0, sl
 8008dbe:	4659      	mov	r1, fp
 8008dc0:	f7f7 fa64 	bl	800028c <__adddf3>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4640      	mov	r0, r8
 8008dca:	4649      	mov	r1, r9
 8008dcc:	f7f7 fea4 	bl	8000b18 <__aeabi_dcmpgt>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d173      	bne.n	8008ebc <_dtoa_r+0x6c4>
 8008dd4:	4652      	mov	r2, sl
 8008dd6:	465b      	mov	r3, fp
 8008dd8:	4913      	ldr	r1, [pc, #76]	; (8008e28 <_dtoa_r+0x630>)
 8008dda:	2000      	movs	r0, #0
 8008ddc:	f7f7 fa54 	bl	8000288 <__aeabi_dsub>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4640      	mov	r0, r8
 8008de6:	4649      	mov	r1, r9
 8008de8:	f7f7 fe78 	bl	8000adc <__aeabi_dcmplt>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	f43f af35 	beq.w	8008c5c <_dtoa_r+0x464>
 8008df2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008df4:	1e6b      	subs	r3, r5, #1
 8008df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008df8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008dfc:	2b30      	cmp	r3, #48	; 0x30
 8008dfe:	d0f8      	beq.n	8008df2 <_dtoa_r+0x5fa>
 8008e00:	9700      	str	r7, [sp, #0]
 8008e02:	e049      	b.n	8008e98 <_dtoa_r+0x6a0>
 8008e04:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <_dtoa_r+0x624>)
 8008e06:	f7f7 fbf7 	bl	80005f8 <__aeabi_dmul>
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	4689      	mov	r9, r1
 8008e0e:	e7bd      	b.n	8008d8c <_dtoa_r+0x594>
 8008e10:	0800ba68 	.word	0x0800ba68
 8008e14:	0800ba40 	.word	0x0800ba40
 8008e18:	3ff00000 	.word	0x3ff00000
 8008e1c:	40240000 	.word	0x40240000
 8008e20:	401c0000 	.word	0x401c0000
 8008e24:	40140000 	.word	0x40140000
 8008e28:	3fe00000 	.word	0x3fe00000
 8008e2c:	9d01      	ldr	r5, [sp, #4]
 8008e2e:	4656      	mov	r6, sl
 8008e30:	465f      	mov	r7, fp
 8008e32:	4642      	mov	r2, r8
 8008e34:	464b      	mov	r3, r9
 8008e36:	4630      	mov	r0, r6
 8008e38:	4639      	mov	r1, r7
 8008e3a:	f7f7 fd07 	bl	800084c <__aeabi_ddiv>
 8008e3e:	f7f7 fe8b 	bl	8000b58 <__aeabi_d2iz>
 8008e42:	4682      	mov	sl, r0
 8008e44:	f7f7 fb6e 	bl	8000524 <__aeabi_i2d>
 8008e48:	4642      	mov	r2, r8
 8008e4a:	464b      	mov	r3, r9
 8008e4c:	f7f7 fbd4 	bl	80005f8 <__aeabi_dmul>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4630      	mov	r0, r6
 8008e56:	4639      	mov	r1, r7
 8008e58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008e5c:	f7f7 fa14 	bl	8000288 <__aeabi_dsub>
 8008e60:	f805 6b01 	strb.w	r6, [r5], #1
 8008e64:	9e01      	ldr	r6, [sp, #4]
 8008e66:	9f03      	ldr	r7, [sp, #12]
 8008e68:	1bae      	subs	r6, r5, r6
 8008e6a:	42b7      	cmp	r7, r6
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	d135      	bne.n	8008ede <_dtoa_r+0x6e6>
 8008e72:	f7f7 fa0b 	bl	800028c <__adddf3>
 8008e76:	4642      	mov	r2, r8
 8008e78:	464b      	mov	r3, r9
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	460f      	mov	r7, r1
 8008e7e:	f7f7 fe4b 	bl	8000b18 <__aeabi_dcmpgt>
 8008e82:	b9d0      	cbnz	r0, 8008eba <_dtoa_r+0x6c2>
 8008e84:	4642      	mov	r2, r8
 8008e86:	464b      	mov	r3, r9
 8008e88:	4630      	mov	r0, r6
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	f7f7 fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e90:	b110      	cbz	r0, 8008e98 <_dtoa_r+0x6a0>
 8008e92:	f01a 0f01 	tst.w	sl, #1
 8008e96:	d110      	bne.n	8008eba <_dtoa_r+0x6c2>
 8008e98:	4620      	mov	r0, r4
 8008e9a:	ee18 1a10 	vmov	r1, s16
 8008e9e:	f000 faf3 	bl	8009488 <_Bfree>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9800      	ldr	r0, [sp, #0]
 8008ea6:	702b      	strb	r3, [r5, #0]
 8008ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eaa:	3001      	adds	r0, #1
 8008eac:	6018      	str	r0, [r3, #0]
 8008eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f43f acf1 	beq.w	8008898 <_dtoa_r+0xa0>
 8008eb6:	601d      	str	r5, [r3, #0]
 8008eb8:	e4ee      	b.n	8008898 <_dtoa_r+0xa0>
 8008eba:	9f00      	ldr	r7, [sp, #0]
 8008ebc:	462b      	mov	r3, r5
 8008ebe:	461d      	mov	r5, r3
 8008ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ec4:	2a39      	cmp	r2, #57	; 0x39
 8008ec6:	d106      	bne.n	8008ed6 <_dtoa_r+0x6de>
 8008ec8:	9a01      	ldr	r2, [sp, #4]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d1f7      	bne.n	8008ebe <_dtoa_r+0x6c6>
 8008ece:	9901      	ldr	r1, [sp, #4]
 8008ed0:	2230      	movs	r2, #48	; 0x30
 8008ed2:	3701      	adds	r7, #1
 8008ed4:	700a      	strb	r2, [r1, #0]
 8008ed6:	781a      	ldrb	r2, [r3, #0]
 8008ed8:	3201      	adds	r2, #1
 8008eda:	701a      	strb	r2, [r3, #0]
 8008edc:	e790      	b.n	8008e00 <_dtoa_r+0x608>
 8008ede:	4ba6      	ldr	r3, [pc, #664]	; (8009178 <_dtoa_r+0x980>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f7f7 fb89 	bl	80005f8 <__aeabi_dmul>
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2300      	movs	r3, #0
 8008eea:	4606      	mov	r6, r0
 8008eec:	460f      	mov	r7, r1
 8008eee:	f7f7 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d09d      	beq.n	8008e32 <_dtoa_r+0x63a>
 8008ef6:	e7cf      	b.n	8008e98 <_dtoa_r+0x6a0>
 8008ef8:	9a08      	ldr	r2, [sp, #32]
 8008efa:	2a00      	cmp	r2, #0
 8008efc:	f000 80d7 	beq.w	80090ae <_dtoa_r+0x8b6>
 8008f00:	9a06      	ldr	r2, [sp, #24]
 8008f02:	2a01      	cmp	r2, #1
 8008f04:	f300 80ba 	bgt.w	800907c <_dtoa_r+0x884>
 8008f08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	f000 80b2 	beq.w	8009074 <_dtoa_r+0x87c>
 8008f10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f14:	9e07      	ldr	r6, [sp, #28]
 8008f16:	9d04      	ldr	r5, [sp, #16]
 8008f18:	9a04      	ldr	r2, [sp, #16]
 8008f1a:	441a      	add	r2, r3
 8008f1c:	9204      	str	r2, [sp, #16]
 8008f1e:	9a05      	ldr	r2, [sp, #20]
 8008f20:	2101      	movs	r1, #1
 8008f22:	441a      	add	r2, r3
 8008f24:	4620      	mov	r0, r4
 8008f26:	9205      	str	r2, [sp, #20]
 8008f28:	f000 fb66 	bl	80095f8 <__i2b>
 8008f2c:	4607      	mov	r7, r0
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	dd0c      	ble.n	8008f4c <_dtoa_r+0x754>
 8008f32:	9b05      	ldr	r3, [sp, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	dd09      	ble.n	8008f4c <_dtoa_r+0x754>
 8008f38:	42ab      	cmp	r3, r5
 8008f3a:	9a04      	ldr	r2, [sp, #16]
 8008f3c:	bfa8      	it	ge
 8008f3e:	462b      	movge	r3, r5
 8008f40:	1ad2      	subs	r2, r2, r3
 8008f42:	9204      	str	r2, [sp, #16]
 8008f44:	9a05      	ldr	r2, [sp, #20]
 8008f46:	1aed      	subs	r5, r5, r3
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	9305      	str	r3, [sp, #20]
 8008f4c:	9b07      	ldr	r3, [sp, #28]
 8008f4e:	b31b      	cbz	r3, 8008f98 <_dtoa_r+0x7a0>
 8008f50:	9b08      	ldr	r3, [sp, #32]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 80af 	beq.w	80090b6 <_dtoa_r+0x8be>
 8008f58:	2e00      	cmp	r6, #0
 8008f5a:	dd13      	ble.n	8008f84 <_dtoa_r+0x78c>
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	4632      	mov	r2, r6
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fc09 	bl	8009778 <__pow5mult>
 8008f66:	ee18 2a10 	vmov	r2, s16
 8008f6a:	4601      	mov	r1, r0
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 fb58 	bl	8009624 <__multiply>
 8008f74:	ee18 1a10 	vmov	r1, s16
 8008f78:	4680      	mov	r8, r0
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 fa84 	bl	8009488 <_Bfree>
 8008f80:	ee08 8a10 	vmov	s16, r8
 8008f84:	9b07      	ldr	r3, [sp, #28]
 8008f86:	1b9a      	subs	r2, r3, r6
 8008f88:	d006      	beq.n	8008f98 <_dtoa_r+0x7a0>
 8008f8a:	ee18 1a10 	vmov	r1, s16
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 fbf2 	bl	8009778 <__pow5mult>
 8008f94:	ee08 0a10 	vmov	s16, r0
 8008f98:	2101      	movs	r1, #1
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 fb2c 	bl	80095f8 <__i2b>
 8008fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	f340 8088 	ble.w	80090ba <_dtoa_r+0x8c2>
 8008faa:	461a      	mov	r2, r3
 8008fac:	4601      	mov	r1, r0
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 fbe2 	bl	8009778 <__pow5mult>
 8008fb4:	9b06      	ldr	r3, [sp, #24]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	4606      	mov	r6, r0
 8008fba:	f340 8081 	ble.w	80090c0 <_dtoa_r+0x8c8>
 8008fbe:	f04f 0800 	mov.w	r8, #0
 8008fc2:	6933      	ldr	r3, [r6, #16]
 8008fc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008fc8:	6918      	ldr	r0, [r3, #16]
 8008fca:	f000 fac5 	bl	8009558 <__hi0bits>
 8008fce:	f1c0 0020 	rsb	r0, r0, #32
 8008fd2:	9b05      	ldr	r3, [sp, #20]
 8008fd4:	4418      	add	r0, r3
 8008fd6:	f010 001f 	ands.w	r0, r0, #31
 8008fda:	f000 8092 	beq.w	8009102 <_dtoa_r+0x90a>
 8008fde:	f1c0 0320 	rsb	r3, r0, #32
 8008fe2:	2b04      	cmp	r3, #4
 8008fe4:	f340 808a 	ble.w	80090fc <_dtoa_r+0x904>
 8008fe8:	f1c0 001c 	rsb	r0, r0, #28
 8008fec:	9b04      	ldr	r3, [sp, #16]
 8008fee:	4403      	add	r3, r0
 8008ff0:	9304      	str	r3, [sp, #16]
 8008ff2:	9b05      	ldr	r3, [sp, #20]
 8008ff4:	4403      	add	r3, r0
 8008ff6:	4405      	add	r5, r0
 8008ff8:	9305      	str	r3, [sp, #20]
 8008ffa:	9b04      	ldr	r3, [sp, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dd07      	ble.n	8009010 <_dtoa_r+0x818>
 8009000:	ee18 1a10 	vmov	r1, s16
 8009004:	461a      	mov	r2, r3
 8009006:	4620      	mov	r0, r4
 8009008:	f000 fc10 	bl	800982c <__lshift>
 800900c:	ee08 0a10 	vmov	s16, r0
 8009010:	9b05      	ldr	r3, [sp, #20]
 8009012:	2b00      	cmp	r3, #0
 8009014:	dd05      	ble.n	8009022 <_dtoa_r+0x82a>
 8009016:	4631      	mov	r1, r6
 8009018:	461a      	mov	r2, r3
 800901a:	4620      	mov	r0, r4
 800901c:	f000 fc06 	bl	800982c <__lshift>
 8009020:	4606      	mov	r6, r0
 8009022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d06e      	beq.n	8009106 <_dtoa_r+0x90e>
 8009028:	ee18 0a10 	vmov	r0, s16
 800902c:	4631      	mov	r1, r6
 800902e:	f000 fc6d 	bl	800990c <__mcmp>
 8009032:	2800      	cmp	r0, #0
 8009034:	da67      	bge.n	8009106 <_dtoa_r+0x90e>
 8009036:	9b00      	ldr	r3, [sp, #0]
 8009038:	3b01      	subs	r3, #1
 800903a:	ee18 1a10 	vmov	r1, s16
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	220a      	movs	r2, #10
 8009042:	2300      	movs	r3, #0
 8009044:	4620      	mov	r0, r4
 8009046:	f000 fa41 	bl	80094cc <__multadd>
 800904a:	9b08      	ldr	r3, [sp, #32]
 800904c:	ee08 0a10 	vmov	s16, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 81b1 	beq.w	80093b8 <_dtoa_r+0xbc0>
 8009056:	2300      	movs	r3, #0
 8009058:	4639      	mov	r1, r7
 800905a:	220a      	movs	r2, #10
 800905c:	4620      	mov	r0, r4
 800905e:	f000 fa35 	bl	80094cc <__multadd>
 8009062:	9b02      	ldr	r3, [sp, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	4607      	mov	r7, r0
 8009068:	f300 808e 	bgt.w	8009188 <_dtoa_r+0x990>
 800906c:	9b06      	ldr	r3, [sp, #24]
 800906e:	2b02      	cmp	r3, #2
 8009070:	dc51      	bgt.n	8009116 <_dtoa_r+0x91e>
 8009072:	e089      	b.n	8009188 <_dtoa_r+0x990>
 8009074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800907a:	e74b      	b.n	8008f14 <_dtoa_r+0x71c>
 800907c:	9b03      	ldr	r3, [sp, #12]
 800907e:	1e5e      	subs	r6, r3, #1
 8009080:	9b07      	ldr	r3, [sp, #28]
 8009082:	42b3      	cmp	r3, r6
 8009084:	bfbf      	itttt	lt
 8009086:	9b07      	ldrlt	r3, [sp, #28]
 8009088:	9607      	strlt	r6, [sp, #28]
 800908a:	1af2      	sublt	r2, r6, r3
 800908c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800908e:	bfb6      	itet	lt
 8009090:	189b      	addlt	r3, r3, r2
 8009092:	1b9e      	subge	r6, r3, r6
 8009094:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009096:	9b03      	ldr	r3, [sp, #12]
 8009098:	bfb8      	it	lt
 800909a:	2600      	movlt	r6, #0
 800909c:	2b00      	cmp	r3, #0
 800909e:	bfb7      	itett	lt
 80090a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80090a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80090a8:	1a9d      	sublt	r5, r3, r2
 80090aa:	2300      	movlt	r3, #0
 80090ac:	e734      	b.n	8008f18 <_dtoa_r+0x720>
 80090ae:	9e07      	ldr	r6, [sp, #28]
 80090b0:	9d04      	ldr	r5, [sp, #16]
 80090b2:	9f08      	ldr	r7, [sp, #32]
 80090b4:	e73b      	b.n	8008f2e <_dtoa_r+0x736>
 80090b6:	9a07      	ldr	r2, [sp, #28]
 80090b8:	e767      	b.n	8008f8a <_dtoa_r+0x792>
 80090ba:	9b06      	ldr	r3, [sp, #24]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	dc18      	bgt.n	80090f2 <_dtoa_r+0x8fa>
 80090c0:	f1ba 0f00 	cmp.w	sl, #0
 80090c4:	d115      	bne.n	80090f2 <_dtoa_r+0x8fa>
 80090c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090ca:	b993      	cbnz	r3, 80090f2 <_dtoa_r+0x8fa>
 80090cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090d0:	0d1b      	lsrs	r3, r3, #20
 80090d2:	051b      	lsls	r3, r3, #20
 80090d4:	b183      	cbz	r3, 80090f8 <_dtoa_r+0x900>
 80090d6:	9b04      	ldr	r3, [sp, #16]
 80090d8:	3301      	adds	r3, #1
 80090da:	9304      	str	r3, [sp, #16]
 80090dc:	9b05      	ldr	r3, [sp, #20]
 80090de:	3301      	adds	r3, #1
 80090e0:	9305      	str	r3, [sp, #20]
 80090e2:	f04f 0801 	mov.w	r8, #1
 80090e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f47f af6a 	bne.w	8008fc2 <_dtoa_r+0x7ca>
 80090ee:	2001      	movs	r0, #1
 80090f0:	e76f      	b.n	8008fd2 <_dtoa_r+0x7da>
 80090f2:	f04f 0800 	mov.w	r8, #0
 80090f6:	e7f6      	b.n	80090e6 <_dtoa_r+0x8ee>
 80090f8:	4698      	mov	r8, r3
 80090fa:	e7f4      	b.n	80090e6 <_dtoa_r+0x8ee>
 80090fc:	f43f af7d 	beq.w	8008ffa <_dtoa_r+0x802>
 8009100:	4618      	mov	r0, r3
 8009102:	301c      	adds	r0, #28
 8009104:	e772      	b.n	8008fec <_dtoa_r+0x7f4>
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	dc37      	bgt.n	800917c <_dtoa_r+0x984>
 800910c:	9b06      	ldr	r3, [sp, #24]
 800910e:	2b02      	cmp	r3, #2
 8009110:	dd34      	ble.n	800917c <_dtoa_r+0x984>
 8009112:	9b03      	ldr	r3, [sp, #12]
 8009114:	9302      	str	r3, [sp, #8]
 8009116:	9b02      	ldr	r3, [sp, #8]
 8009118:	b96b      	cbnz	r3, 8009136 <_dtoa_r+0x93e>
 800911a:	4631      	mov	r1, r6
 800911c:	2205      	movs	r2, #5
 800911e:	4620      	mov	r0, r4
 8009120:	f000 f9d4 	bl	80094cc <__multadd>
 8009124:	4601      	mov	r1, r0
 8009126:	4606      	mov	r6, r0
 8009128:	ee18 0a10 	vmov	r0, s16
 800912c:	f000 fbee 	bl	800990c <__mcmp>
 8009130:	2800      	cmp	r0, #0
 8009132:	f73f adbb 	bgt.w	8008cac <_dtoa_r+0x4b4>
 8009136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009138:	9d01      	ldr	r5, [sp, #4]
 800913a:	43db      	mvns	r3, r3
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	f04f 0800 	mov.w	r8, #0
 8009142:	4631      	mov	r1, r6
 8009144:	4620      	mov	r0, r4
 8009146:	f000 f99f 	bl	8009488 <_Bfree>
 800914a:	2f00      	cmp	r7, #0
 800914c:	f43f aea4 	beq.w	8008e98 <_dtoa_r+0x6a0>
 8009150:	f1b8 0f00 	cmp.w	r8, #0
 8009154:	d005      	beq.n	8009162 <_dtoa_r+0x96a>
 8009156:	45b8      	cmp	r8, r7
 8009158:	d003      	beq.n	8009162 <_dtoa_r+0x96a>
 800915a:	4641      	mov	r1, r8
 800915c:	4620      	mov	r0, r4
 800915e:	f000 f993 	bl	8009488 <_Bfree>
 8009162:	4639      	mov	r1, r7
 8009164:	4620      	mov	r0, r4
 8009166:	f000 f98f 	bl	8009488 <_Bfree>
 800916a:	e695      	b.n	8008e98 <_dtoa_r+0x6a0>
 800916c:	2600      	movs	r6, #0
 800916e:	4637      	mov	r7, r6
 8009170:	e7e1      	b.n	8009136 <_dtoa_r+0x93e>
 8009172:	9700      	str	r7, [sp, #0]
 8009174:	4637      	mov	r7, r6
 8009176:	e599      	b.n	8008cac <_dtoa_r+0x4b4>
 8009178:	40240000 	.word	0x40240000
 800917c:	9b08      	ldr	r3, [sp, #32]
 800917e:	2b00      	cmp	r3, #0
 8009180:	f000 80ca 	beq.w	8009318 <_dtoa_r+0xb20>
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	9302      	str	r3, [sp, #8]
 8009188:	2d00      	cmp	r5, #0
 800918a:	dd05      	ble.n	8009198 <_dtoa_r+0x9a0>
 800918c:	4639      	mov	r1, r7
 800918e:	462a      	mov	r2, r5
 8009190:	4620      	mov	r0, r4
 8009192:	f000 fb4b 	bl	800982c <__lshift>
 8009196:	4607      	mov	r7, r0
 8009198:	f1b8 0f00 	cmp.w	r8, #0
 800919c:	d05b      	beq.n	8009256 <_dtoa_r+0xa5e>
 800919e:	6879      	ldr	r1, [r7, #4]
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 f931 	bl	8009408 <_Balloc>
 80091a6:	4605      	mov	r5, r0
 80091a8:	b928      	cbnz	r0, 80091b6 <_dtoa_r+0x9be>
 80091aa:	4b87      	ldr	r3, [pc, #540]	; (80093c8 <_dtoa_r+0xbd0>)
 80091ac:	4602      	mov	r2, r0
 80091ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091b2:	f7ff bb3b 	b.w	800882c <_dtoa_r+0x34>
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	3202      	adds	r2, #2
 80091ba:	0092      	lsls	r2, r2, #2
 80091bc:	f107 010c 	add.w	r1, r7, #12
 80091c0:	300c      	adds	r0, #12
 80091c2:	f000 f913 	bl	80093ec <memcpy>
 80091c6:	2201      	movs	r2, #1
 80091c8:	4629      	mov	r1, r5
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 fb2e 	bl	800982c <__lshift>
 80091d0:	9b01      	ldr	r3, [sp, #4]
 80091d2:	f103 0901 	add.w	r9, r3, #1
 80091d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80091da:	4413      	add	r3, r2
 80091dc:	9305      	str	r3, [sp, #20]
 80091de:	f00a 0301 	and.w	r3, sl, #1
 80091e2:	46b8      	mov	r8, r7
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	4607      	mov	r7, r0
 80091e8:	4631      	mov	r1, r6
 80091ea:	ee18 0a10 	vmov	r0, s16
 80091ee:	f7ff fa75 	bl	80086dc <quorem>
 80091f2:	4641      	mov	r1, r8
 80091f4:	9002      	str	r0, [sp, #8]
 80091f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80091fa:	ee18 0a10 	vmov	r0, s16
 80091fe:	f000 fb85 	bl	800990c <__mcmp>
 8009202:	463a      	mov	r2, r7
 8009204:	9003      	str	r0, [sp, #12]
 8009206:	4631      	mov	r1, r6
 8009208:	4620      	mov	r0, r4
 800920a:	f000 fb9b 	bl	8009944 <__mdiff>
 800920e:	68c2      	ldr	r2, [r0, #12]
 8009210:	f109 3bff 	add.w	fp, r9, #4294967295
 8009214:	4605      	mov	r5, r0
 8009216:	bb02      	cbnz	r2, 800925a <_dtoa_r+0xa62>
 8009218:	4601      	mov	r1, r0
 800921a:	ee18 0a10 	vmov	r0, s16
 800921e:	f000 fb75 	bl	800990c <__mcmp>
 8009222:	4602      	mov	r2, r0
 8009224:	4629      	mov	r1, r5
 8009226:	4620      	mov	r0, r4
 8009228:	9207      	str	r2, [sp, #28]
 800922a:	f000 f92d 	bl	8009488 <_Bfree>
 800922e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009232:	ea43 0102 	orr.w	r1, r3, r2
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	430b      	orrs	r3, r1
 800923a:	464d      	mov	r5, r9
 800923c:	d10f      	bne.n	800925e <_dtoa_r+0xa66>
 800923e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009242:	d02a      	beq.n	800929a <_dtoa_r+0xaa2>
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	dd02      	ble.n	8009250 <_dtoa_r+0xa58>
 800924a:	9b02      	ldr	r3, [sp, #8]
 800924c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009250:	f88b a000 	strb.w	sl, [fp]
 8009254:	e775      	b.n	8009142 <_dtoa_r+0x94a>
 8009256:	4638      	mov	r0, r7
 8009258:	e7ba      	b.n	80091d0 <_dtoa_r+0x9d8>
 800925a:	2201      	movs	r2, #1
 800925c:	e7e2      	b.n	8009224 <_dtoa_r+0xa2c>
 800925e:	9b03      	ldr	r3, [sp, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	db04      	blt.n	800926e <_dtoa_r+0xa76>
 8009264:	9906      	ldr	r1, [sp, #24]
 8009266:	430b      	orrs	r3, r1
 8009268:	9904      	ldr	r1, [sp, #16]
 800926a:	430b      	orrs	r3, r1
 800926c:	d122      	bne.n	80092b4 <_dtoa_r+0xabc>
 800926e:	2a00      	cmp	r2, #0
 8009270:	ddee      	ble.n	8009250 <_dtoa_r+0xa58>
 8009272:	ee18 1a10 	vmov	r1, s16
 8009276:	2201      	movs	r2, #1
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fad7 	bl	800982c <__lshift>
 800927e:	4631      	mov	r1, r6
 8009280:	ee08 0a10 	vmov	s16, r0
 8009284:	f000 fb42 	bl	800990c <__mcmp>
 8009288:	2800      	cmp	r0, #0
 800928a:	dc03      	bgt.n	8009294 <_dtoa_r+0xa9c>
 800928c:	d1e0      	bne.n	8009250 <_dtoa_r+0xa58>
 800928e:	f01a 0f01 	tst.w	sl, #1
 8009292:	d0dd      	beq.n	8009250 <_dtoa_r+0xa58>
 8009294:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009298:	d1d7      	bne.n	800924a <_dtoa_r+0xa52>
 800929a:	2339      	movs	r3, #57	; 0x39
 800929c:	f88b 3000 	strb.w	r3, [fp]
 80092a0:	462b      	mov	r3, r5
 80092a2:	461d      	mov	r5, r3
 80092a4:	3b01      	subs	r3, #1
 80092a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092aa:	2a39      	cmp	r2, #57	; 0x39
 80092ac:	d071      	beq.n	8009392 <_dtoa_r+0xb9a>
 80092ae:	3201      	adds	r2, #1
 80092b0:	701a      	strb	r2, [r3, #0]
 80092b2:	e746      	b.n	8009142 <_dtoa_r+0x94a>
 80092b4:	2a00      	cmp	r2, #0
 80092b6:	dd07      	ble.n	80092c8 <_dtoa_r+0xad0>
 80092b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092bc:	d0ed      	beq.n	800929a <_dtoa_r+0xaa2>
 80092be:	f10a 0301 	add.w	r3, sl, #1
 80092c2:	f88b 3000 	strb.w	r3, [fp]
 80092c6:	e73c      	b.n	8009142 <_dtoa_r+0x94a>
 80092c8:	9b05      	ldr	r3, [sp, #20]
 80092ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80092ce:	4599      	cmp	r9, r3
 80092d0:	d047      	beq.n	8009362 <_dtoa_r+0xb6a>
 80092d2:	ee18 1a10 	vmov	r1, s16
 80092d6:	2300      	movs	r3, #0
 80092d8:	220a      	movs	r2, #10
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 f8f6 	bl	80094cc <__multadd>
 80092e0:	45b8      	cmp	r8, r7
 80092e2:	ee08 0a10 	vmov	s16, r0
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	f04f 020a 	mov.w	r2, #10
 80092ee:	4641      	mov	r1, r8
 80092f0:	4620      	mov	r0, r4
 80092f2:	d106      	bne.n	8009302 <_dtoa_r+0xb0a>
 80092f4:	f000 f8ea 	bl	80094cc <__multadd>
 80092f8:	4680      	mov	r8, r0
 80092fa:	4607      	mov	r7, r0
 80092fc:	f109 0901 	add.w	r9, r9, #1
 8009300:	e772      	b.n	80091e8 <_dtoa_r+0x9f0>
 8009302:	f000 f8e3 	bl	80094cc <__multadd>
 8009306:	4639      	mov	r1, r7
 8009308:	4680      	mov	r8, r0
 800930a:	2300      	movs	r3, #0
 800930c:	220a      	movs	r2, #10
 800930e:	4620      	mov	r0, r4
 8009310:	f000 f8dc 	bl	80094cc <__multadd>
 8009314:	4607      	mov	r7, r0
 8009316:	e7f1      	b.n	80092fc <_dtoa_r+0xb04>
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	9302      	str	r3, [sp, #8]
 800931c:	9d01      	ldr	r5, [sp, #4]
 800931e:	ee18 0a10 	vmov	r0, s16
 8009322:	4631      	mov	r1, r6
 8009324:	f7ff f9da 	bl	80086dc <quorem>
 8009328:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800932c:	9b01      	ldr	r3, [sp, #4]
 800932e:	f805 ab01 	strb.w	sl, [r5], #1
 8009332:	1aea      	subs	r2, r5, r3
 8009334:	9b02      	ldr	r3, [sp, #8]
 8009336:	4293      	cmp	r3, r2
 8009338:	dd09      	ble.n	800934e <_dtoa_r+0xb56>
 800933a:	ee18 1a10 	vmov	r1, s16
 800933e:	2300      	movs	r3, #0
 8009340:	220a      	movs	r2, #10
 8009342:	4620      	mov	r0, r4
 8009344:	f000 f8c2 	bl	80094cc <__multadd>
 8009348:	ee08 0a10 	vmov	s16, r0
 800934c:	e7e7      	b.n	800931e <_dtoa_r+0xb26>
 800934e:	9b02      	ldr	r3, [sp, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	bfc8      	it	gt
 8009354:	461d      	movgt	r5, r3
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	bfd8      	it	le
 800935a:	2501      	movle	r5, #1
 800935c:	441d      	add	r5, r3
 800935e:	f04f 0800 	mov.w	r8, #0
 8009362:	ee18 1a10 	vmov	r1, s16
 8009366:	2201      	movs	r2, #1
 8009368:	4620      	mov	r0, r4
 800936a:	f000 fa5f 	bl	800982c <__lshift>
 800936e:	4631      	mov	r1, r6
 8009370:	ee08 0a10 	vmov	s16, r0
 8009374:	f000 faca 	bl	800990c <__mcmp>
 8009378:	2800      	cmp	r0, #0
 800937a:	dc91      	bgt.n	80092a0 <_dtoa_r+0xaa8>
 800937c:	d102      	bne.n	8009384 <_dtoa_r+0xb8c>
 800937e:	f01a 0f01 	tst.w	sl, #1
 8009382:	d18d      	bne.n	80092a0 <_dtoa_r+0xaa8>
 8009384:	462b      	mov	r3, r5
 8009386:	461d      	mov	r5, r3
 8009388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800938c:	2a30      	cmp	r2, #48	; 0x30
 800938e:	d0fa      	beq.n	8009386 <_dtoa_r+0xb8e>
 8009390:	e6d7      	b.n	8009142 <_dtoa_r+0x94a>
 8009392:	9a01      	ldr	r2, [sp, #4]
 8009394:	429a      	cmp	r2, r3
 8009396:	d184      	bne.n	80092a2 <_dtoa_r+0xaaa>
 8009398:	9b00      	ldr	r3, [sp, #0]
 800939a:	3301      	adds	r3, #1
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	2331      	movs	r3, #49	; 0x31
 80093a0:	7013      	strb	r3, [r2, #0]
 80093a2:	e6ce      	b.n	8009142 <_dtoa_r+0x94a>
 80093a4:	4b09      	ldr	r3, [pc, #36]	; (80093cc <_dtoa_r+0xbd4>)
 80093a6:	f7ff ba95 	b.w	80088d4 <_dtoa_r+0xdc>
 80093aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f47f aa6e 	bne.w	800888e <_dtoa_r+0x96>
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <_dtoa_r+0xbd8>)
 80093b4:	f7ff ba8e 	b.w	80088d4 <_dtoa_r+0xdc>
 80093b8:	9b02      	ldr	r3, [sp, #8]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	dcae      	bgt.n	800931c <_dtoa_r+0xb24>
 80093be:	9b06      	ldr	r3, [sp, #24]
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	f73f aea8 	bgt.w	8009116 <_dtoa_r+0x91e>
 80093c6:	e7a9      	b.n	800931c <_dtoa_r+0xb24>
 80093c8:	0800b9cf 	.word	0x0800b9cf
 80093cc:	0800b92c 	.word	0x0800b92c
 80093d0:	0800b950 	.word	0x0800b950

080093d4 <_localeconv_r>:
 80093d4:	4800      	ldr	r0, [pc, #0]	; (80093d8 <_localeconv_r+0x4>)
 80093d6:	4770      	bx	lr
 80093d8:	20000164 	.word	0x20000164

080093dc <malloc>:
 80093dc:	4b02      	ldr	r3, [pc, #8]	; (80093e8 <malloc+0xc>)
 80093de:	4601      	mov	r1, r0
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	f000 bc17 	b.w	8009c14 <_malloc_r>
 80093e6:	bf00      	nop
 80093e8:	20000010 	.word	0x20000010

080093ec <memcpy>:
 80093ec:	440a      	add	r2, r1
 80093ee:	4291      	cmp	r1, r2
 80093f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80093f4:	d100      	bne.n	80093f8 <memcpy+0xc>
 80093f6:	4770      	bx	lr
 80093f8:	b510      	push	{r4, lr}
 80093fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009402:	4291      	cmp	r1, r2
 8009404:	d1f9      	bne.n	80093fa <memcpy+0xe>
 8009406:	bd10      	pop	{r4, pc}

08009408 <_Balloc>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800940c:	4604      	mov	r4, r0
 800940e:	460d      	mov	r5, r1
 8009410:	b976      	cbnz	r6, 8009430 <_Balloc+0x28>
 8009412:	2010      	movs	r0, #16
 8009414:	f7ff ffe2 	bl	80093dc <malloc>
 8009418:	4602      	mov	r2, r0
 800941a:	6260      	str	r0, [r4, #36]	; 0x24
 800941c:	b920      	cbnz	r0, 8009428 <_Balloc+0x20>
 800941e:	4b18      	ldr	r3, [pc, #96]	; (8009480 <_Balloc+0x78>)
 8009420:	4818      	ldr	r0, [pc, #96]	; (8009484 <_Balloc+0x7c>)
 8009422:	2166      	movs	r1, #102	; 0x66
 8009424:	f000 fdd6 	bl	8009fd4 <__assert_func>
 8009428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800942c:	6006      	str	r6, [r0, #0]
 800942e:	60c6      	str	r6, [r0, #12]
 8009430:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009432:	68f3      	ldr	r3, [r6, #12]
 8009434:	b183      	cbz	r3, 8009458 <_Balloc+0x50>
 8009436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800943e:	b9b8      	cbnz	r0, 8009470 <_Balloc+0x68>
 8009440:	2101      	movs	r1, #1
 8009442:	fa01 f605 	lsl.w	r6, r1, r5
 8009446:	1d72      	adds	r2, r6, #5
 8009448:	0092      	lsls	r2, r2, #2
 800944a:	4620      	mov	r0, r4
 800944c:	f000 fb60 	bl	8009b10 <_calloc_r>
 8009450:	b160      	cbz	r0, 800946c <_Balloc+0x64>
 8009452:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009456:	e00e      	b.n	8009476 <_Balloc+0x6e>
 8009458:	2221      	movs	r2, #33	; 0x21
 800945a:	2104      	movs	r1, #4
 800945c:	4620      	mov	r0, r4
 800945e:	f000 fb57 	bl	8009b10 <_calloc_r>
 8009462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009464:	60f0      	str	r0, [r6, #12]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1e4      	bne.n	8009436 <_Balloc+0x2e>
 800946c:	2000      	movs	r0, #0
 800946e:	bd70      	pop	{r4, r5, r6, pc}
 8009470:	6802      	ldr	r2, [r0, #0]
 8009472:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009476:	2300      	movs	r3, #0
 8009478:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800947c:	e7f7      	b.n	800946e <_Balloc+0x66>
 800947e:	bf00      	nop
 8009480:	0800b95d 	.word	0x0800b95d
 8009484:	0800b9e0 	.word	0x0800b9e0

08009488 <_Bfree>:
 8009488:	b570      	push	{r4, r5, r6, lr}
 800948a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800948c:	4605      	mov	r5, r0
 800948e:	460c      	mov	r4, r1
 8009490:	b976      	cbnz	r6, 80094b0 <_Bfree+0x28>
 8009492:	2010      	movs	r0, #16
 8009494:	f7ff ffa2 	bl	80093dc <malloc>
 8009498:	4602      	mov	r2, r0
 800949a:	6268      	str	r0, [r5, #36]	; 0x24
 800949c:	b920      	cbnz	r0, 80094a8 <_Bfree+0x20>
 800949e:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <_Bfree+0x3c>)
 80094a0:	4809      	ldr	r0, [pc, #36]	; (80094c8 <_Bfree+0x40>)
 80094a2:	218a      	movs	r1, #138	; 0x8a
 80094a4:	f000 fd96 	bl	8009fd4 <__assert_func>
 80094a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094ac:	6006      	str	r6, [r0, #0]
 80094ae:	60c6      	str	r6, [r0, #12]
 80094b0:	b13c      	cbz	r4, 80094c2 <_Bfree+0x3a>
 80094b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094b4:	6862      	ldr	r2, [r4, #4]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094bc:	6021      	str	r1, [r4, #0]
 80094be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094c2:	bd70      	pop	{r4, r5, r6, pc}
 80094c4:	0800b95d 	.word	0x0800b95d
 80094c8:	0800b9e0 	.word	0x0800b9e0

080094cc <__multadd>:
 80094cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d0:	690d      	ldr	r5, [r1, #16]
 80094d2:	4607      	mov	r7, r0
 80094d4:	460c      	mov	r4, r1
 80094d6:	461e      	mov	r6, r3
 80094d8:	f101 0c14 	add.w	ip, r1, #20
 80094dc:	2000      	movs	r0, #0
 80094de:	f8dc 3000 	ldr.w	r3, [ip]
 80094e2:	b299      	uxth	r1, r3
 80094e4:	fb02 6101 	mla	r1, r2, r1, r6
 80094e8:	0c1e      	lsrs	r6, r3, #16
 80094ea:	0c0b      	lsrs	r3, r1, #16
 80094ec:	fb02 3306 	mla	r3, r2, r6, r3
 80094f0:	b289      	uxth	r1, r1
 80094f2:	3001      	adds	r0, #1
 80094f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094f8:	4285      	cmp	r5, r0
 80094fa:	f84c 1b04 	str.w	r1, [ip], #4
 80094fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009502:	dcec      	bgt.n	80094de <__multadd+0x12>
 8009504:	b30e      	cbz	r6, 800954a <__multadd+0x7e>
 8009506:	68a3      	ldr	r3, [r4, #8]
 8009508:	42ab      	cmp	r3, r5
 800950a:	dc19      	bgt.n	8009540 <__multadd+0x74>
 800950c:	6861      	ldr	r1, [r4, #4]
 800950e:	4638      	mov	r0, r7
 8009510:	3101      	adds	r1, #1
 8009512:	f7ff ff79 	bl	8009408 <_Balloc>
 8009516:	4680      	mov	r8, r0
 8009518:	b928      	cbnz	r0, 8009526 <__multadd+0x5a>
 800951a:	4602      	mov	r2, r0
 800951c:	4b0c      	ldr	r3, [pc, #48]	; (8009550 <__multadd+0x84>)
 800951e:	480d      	ldr	r0, [pc, #52]	; (8009554 <__multadd+0x88>)
 8009520:	21b5      	movs	r1, #181	; 0xb5
 8009522:	f000 fd57 	bl	8009fd4 <__assert_func>
 8009526:	6922      	ldr	r2, [r4, #16]
 8009528:	3202      	adds	r2, #2
 800952a:	f104 010c 	add.w	r1, r4, #12
 800952e:	0092      	lsls	r2, r2, #2
 8009530:	300c      	adds	r0, #12
 8009532:	f7ff ff5b 	bl	80093ec <memcpy>
 8009536:	4621      	mov	r1, r4
 8009538:	4638      	mov	r0, r7
 800953a:	f7ff ffa5 	bl	8009488 <_Bfree>
 800953e:	4644      	mov	r4, r8
 8009540:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009544:	3501      	adds	r5, #1
 8009546:	615e      	str	r6, [r3, #20]
 8009548:	6125      	str	r5, [r4, #16]
 800954a:	4620      	mov	r0, r4
 800954c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009550:	0800b9cf 	.word	0x0800b9cf
 8009554:	0800b9e0 	.word	0x0800b9e0

08009558 <__hi0bits>:
 8009558:	0c03      	lsrs	r3, r0, #16
 800955a:	041b      	lsls	r3, r3, #16
 800955c:	b9d3      	cbnz	r3, 8009594 <__hi0bits+0x3c>
 800955e:	0400      	lsls	r0, r0, #16
 8009560:	2310      	movs	r3, #16
 8009562:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009566:	bf04      	itt	eq
 8009568:	0200      	lsleq	r0, r0, #8
 800956a:	3308      	addeq	r3, #8
 800956c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009570:	bf04      	itt	eq
 8009572:	0100      	lsleq	r0, r0, #4
 8009574:	3304      	addeq	r3, #4
 8009576:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800957a:	bf04      	itt	eq
 800957c:	0080      	lsleq	r0, r0, #2
 800957e:	3302      	addeq	r3, #2
 8009580:	2800      	cmp	r0, #0
 8009582:	db05      	blt.n	8009590 <__hi0bits+0x38>
 8009584:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009588:	f103 0301 	add.w	r3, r3, #1
 800958c:	bf08      	it	eq
 800958e:	2320      	moveq	r3, #32
 8009590:	4618      	mov	r0, r3
 8009592:	4770      	bx	lr
 8009594:	2300      	movs	r3, #0
 8009596:	e7e4      	b.n	8009562 <__hi0bits+0xa>

08009598 <__lo0bits>:
 8009598:	6803      	ldr	r3, [r0, #0]
 800959a:	f013 0207 	ands.w	r2, r3, #7
 800959e:	4601      	mov	r1, r0
 80095a0:	d00b      	beq.n	80095ba <__lo0bits+0x22>
 80095a2:	07da      	lsls	r2, r3, #31
 80095a4:	d423      	bmi.n	80095ee <__lo0bits+0x56>
 80095a6:	0798      	lsls	r0, r3, #30
 80095a8:	bf49      	itett	mi
 80095aa:	085b      	lsrmi	r3, r3, #1
 80095ac:	089b      	lsrpl	r3, r3, #2
 80095ae:	2001      	movmi	r0, #1
 80095b0:	600b      	strmi	r3, [r1, #0]
 80095b2:	bf5c      	itt	pl
 80095b4:	600b      	strpl	r3, [r1, #0]
 80095b6:	2002      	movpl	r0, #2
 80095b8:	4770      	bx	lr
 80095ba:	b298      	uxth	r0, r3
 80095bc:	b9a8      	cbnz	r0, 80095ea <__lo0bits+0x52>
 80095be:	0c1b      	lsrs	r3, r3, #16
 80095c0:	2010      	movs	r0, #16
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	b90a      	cbnz	r2, 80095ca <__lo0bits+0x32>
 80095c6:	3008      	adds	r0, #8
 80095c8:	0a1b      	lsrs	r3, r3, #8
 80095ca:	071a      	lsls	r2, r3, #28
 80095cc:	bf04      	itt	eq
 80095ce:	091b      	lsreq	r3, r3, #4
 80095d0:	3004      	addeq	r0, #4
 80095d2:	079a      	lsls	r2, r3, #30
 80095d4:	bf04      	itt	eq
 80095d6:	089b      	lsreq	r3, r3, #2
 80095d8:	3002      	addeq	r0, #2
 80095da:	07da      	lsls	r2, r3, #31
 80095dc:	d403      	bmi.n	80095e6 <__lo0bits+0x4e>
 80095de:	085b      	lsrs	r3, r3, #1
 80095e0:	f100 0001 	add.w	r0, r0, #1
 80095e4:	d005      	beq.n	80095f2 <__lo0bits+0x5a>
 80095e6:	600b      	str	r3, [r1, #0]
 80095e8:	4770      	bx	lr
 80095ea:	4610      	mov	r0, r2
 80095ec:	e7e9      	b.n	80095c2 <__lo0bits+0x2a>
 80095ee:	2000      	movs	r0, #0
 80095f0:	4770      	bx	lr
 80095f2:	2020      	movs	r0, #32
 80095f4:	4770      	bx	lr
	...

080095f8 <__i2b>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	460c      	mov	r4, r1
 80095fc:	2101      	movs	r1, #1
 80095fe:	f7ff ff03 	bl	8009408 <_Balloc>
 8009602:	4602      	mov	r2, r0
 8009604:	b928      	cbnz	r0, 8009612 <__i2b+0x1a>
 8009606:	4b05      	ldr	r3, [pc, #20]	; (800961c <__i2b+0x24>)
 8009608:	4805      	ldr	r0, [pc, #20]	; (8009620 <__i2b+0x28>)
 800960a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800960e:	f000 fce1 	bl	8009fd4 <__assert_func>
 8009612:	2301      	movs	r3, #1
 8009614:	6144      	str	r4, [r0, #20]
 8009616:	6103      	str	r3, [r0, #16]
 8009618:	bd10      	pop	{r4, pc}
 800961a:	bf00      	nop
 800961c:	0800b9cf 	.word	0x0800b9cf
 8009620:	0800b9e0 	.word	0x0800b9e0

08009624 <__multiply>:
 8009624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	4691      	mov	r9, r2
 800962a:	690a      	ldr	r2, [r1, #16]
 800962c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009630:	429a      	cmp	r2, r3
 8009632:	bfb8      	it	lt
 8009634:	460b      	movlt	r3, r1
 8009636:	460c      	mov	r4, r1
 8009638:	bfbc      	itt	lt
 800963a:	464c      	movlt	r4, r9
 800963c:	4699      	movlt	r9, r3
 800963e:	6927      	ldr	r7, [r4, #16]
 8009640:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009644:	68a3      	ldr	r3, [r4, #8]
 8009646:	6861      	ldr	r1, [r4, #4]
 8009648:	eb07 060a 	add.w	r6, r7, sl
 800964c:	42b3      	cmp	r3, r6
 800964e:	b085      	sub	sp, #20
 8009650:	bfb8      	it	lt
 8009652:	3101      	addlt	r1, #1
 8009654:	f7ff fed8 	bl	8009408 <_Balloc>
 8009658:	b930      	cbnz	r0, 8009668 <__multiply+0x44>
 800965a:	4602      	mov	r2, r0
 800965c:	4b44      	ldr	r3, [pc, #272]	; (8009770 <__multiply+0x14c>)
 800965e:	4845      	ldr	r0, [pc, #276]	; (8009774 <__multiply+0x150>)
 8009660:	f240 115d 	movw	r1, #349	; 0x15d
 8009664:	f000 fcb6 	bl	8009fd4 <__assert_func>
 8009668:	f100 0514 	add.w	r5, r0, #20
 800966c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009670:	462b      	mov	r3, r5
 8009672:	2200      	movs	r2, #0
 8009674:	4543      	cmp	r3, r8
 8009676:	d321      	bcc.n	80096bc <__multiply+0x98>
 8009678:	f104 0314 	add.w	r3, r4, #20
 800967c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009680:	f109 0314 	add.w	r3, r9, #20
 8009684:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009688:	9202      	str	r2, [sp, #8]
 800968a:	1b3a      	subs	r2, r7, r4
 800968c:	3a15      	subs	r2, #21
 800968e:	f022 0203 	bic.w	r2, r2, #3
 8009692:	3204      	adds	r2, #4
 8009694:	f104 0115 	add.w	r1, r4, #21
 8009698:	428f      	cmp	r7, r1
 800969a:	bf38      	it	cc
 800969c:	2204      	movcc	r2, #4
 800969e:	9201      	str	r2, [sp, #4]
 80096a0:	9a02      	ldr	r2, [sp, #8]
 80096a2:	9303      	str	r3, [sp, #12]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d80c      	bhi.n	80096c2 <__multiply+0x9e>
 80096a8:	2e00      	cmp	r6, #0
 80096aa:	dd03      	ble.n	80096b4 <__multiply+0x90>
 80096ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d05a      	beq.n	800976a <__multiply+0x146>
 80096b4:	6106      	str	r6, [r0, #16]
 80096b6:	b005      	add	sp, #20
 80096b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096bc:	f843 2b04 	str.w	r2, [r3], #4
 80096c0:	e7d8      	b.n	8009674 <__multiply+0x50>
 80096c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80096c6:	f1ba 0f00 	cmp.w	sl, #0
 80096ca:	d024      	beq.n	8009716 <__multiply+0xf2>
 80096cc:	f104 0e14 	add.w	lr, r4, #20
 80096d0:	46a9      	mov	r9, r5
 80096d2:	f04f 0c00 	mov.w	ip, #0
 80096d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096da:	f8d9 1000 	ldr.w	r1, [r9]
 80096de:	fa1f fb82 	uxth.w	fp, r2
 80096e2:	b289      	uxth	r1, r1
 80096e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80096e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096ec:	f8d9 2000 	ldr.w	r2, [r9]
 80096f0:	4461      	add	r1, ip
 80096f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80096fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096fe:	b289      	uxth	r1, r1
 8009700:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009704:	4577      	cmp	r7, lr
 8009706:	f849 1b04 	str.w	r1, [r9], #4
 800970a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800970e:	d8e2      	bhi.n	80096d6 <__multiply+0xb2>
 8009710:	9a01      	ldr	r2, [sp, #4]
 8009712:	f845 c002 	str.w	ip, [r5, r2]
 8009716:	9a03      	ldr	r2, [sp, #12]
 8009718:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800971c:	3304      	adds	r3, #4
 800971e:	f1b9 0f00 	cmp.w	r9, #0
 8009722:	d020      	beq.n	8009766 <__multiply+0x142>
 8009724:	6829      	ldr	r1, [r5, #0]
 8009726:	f104 0c14 	add.w	ip, r4, #20
 800972a:	46ae      	mov	lr, r5
 800972c:	f04f 0a00 	mov.w	sl, #0
 8009730:	f8bc b000 	ldrh.w	fp, [ip]
 8009734:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009738:	fb09 220b 	mla	r2, r9, fp, r2
 800973c:	4492      	add	sl, r2
 800973e:	b289      	uxth	r1, r1
 8009740:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009744:	f84e 1b04 	str.w	r1, [lr], #4
 8009748:	f85c 2b04 	ldr.w	r2, [ip], #4
 800974c:	f8be 1000 	ldrh.w	r1, [lr]
 8009750:	0c12      	lsrs	r2, r2, #16
 8009752:	fb09 1102 	mla	r1, r9, r2, r1
 8009756:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800975a:	4567      	cmp	r7, ip
 800975c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009760:	d8e6      	bhi.n	8009730 <__multiply+0x10c>
 8009762:	9a01      	ldr	r2, [sp, #4]
 8009764:	50a9      	str	r1, [r5, r2]
 8009766:	3504      	adds	r5, #4
 8009768:	e79a      	b.n	80096a0 <__multiply+0x7c>
 800976a:	3e01      	subs	r6, #1
 800976c:	e79c      	b.n	80096a8 <__multiply+0x84>
 800976e:	bf00      	nop
 8009770:	0800b9cf 	.word	0x0800b9cf
 8009774:	0800b9e0 	.word	0x0800b9e0

08009778 <__pow5mult>:
 8009778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800977c:	4615      	mov	r5, r2
 800977e:	f012 0203 	ands.w	r2, r2, #3
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	d007      	beq.n	8009798 <__pow5mult+0x20>
 8009788:	4c25      	ldr	r4, [pc, #148]	; (8009820 <__pow5mult+0xa8>)
 800978a:	3a01      	subs	r2, #1
 800978c:	2300      	movs	r3, #0
 800978e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009792:	f7ff fe9b 	bl	80094cc <__multadd>
 8009796:	4607      	mov	r7, r0
 8009798:	10ad      	asrs	r5, r5, #2
 800979a:	d03d      	beq.n	8009818 <__pow5mult+0xa0>
 800979c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800979e:	b97c      	cbnz	r4, 80097c0 <__pow5mult+0x48>
 80097a0:	2010      	movs	r0, #16
 80097a2:	f7ff fe1b 	bl	80093dc <malloc>
 80097a6:	4602      	mov	r2, r0
 80097a8:	6270      	str	r0, [r6, #36]	; 0x24
 80097aa:	b928      	cbnz	r0, 80097b8 <__pow5mult+0x40>
 80097ac:	4b1d      	ldr	r3, [pc, #116]	; (8009824 <__pow5mult+0xac>)
 80097ae:	481e      	ldr	r0, [pc, #120]	; (8009828 <__pow5mult+0xb0>)
 80097b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097b4:	f000 fc0e 	bl	8009fd4 <__assert_func>
 80097b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097bc:	6004      	str	r4, [r0, #0]
 80097be:	60c4      	str	r4, [r0, #12]
 80097c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097c8:	b94c      	cbnz	r4, 80097de <__pow5mult+0x66>
 80097ca:	f240 2171 	movw	r1, #625	; 0x271
 80097ce:	4630      	mov	r0, r6
 80097d0:	f7ff ff12 	bl	80095f8 <__i2b>
 80097d4:	2300      	movs	r3, #0
 80097d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80097da:	4604      	mov	r4, r0
 80097dc:	6003      	str	r3, [r0, #0]
 80097de:	f04f 0900 	mov.w	r9, #0
 80097e2:	07eb      	lsls	r3, r5, #31
 80097e4:	d50a      	bpl.n	80097fc <__pow5mult+0x84>
 80097e6:	4639      	mov	r1, r7
 80097e8:	4622      	mov	r2, r4
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7ff ff1a 	bl	8009624 <__multiply>
 80097f0:	4639      	mov	r1, r7
 80097f2:	4680      	mov	r8, r0
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff fe47 	bl	8009488 <_Bfree>
 80097fa:	4647      	mov	r7, r8
 80097fc:	106d      	asrs	r5, r5, #1
 80097fe:	d00b      	beq.n	8009818 <__pow5mult+0xa0>
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	b938      	cbnz	r0, 8009814 <__pow5mult+0x9c>
 8009804:	4622      	mov	r2, r4
 8009806:	4621      	mov	r1, r4
 8009808:	4630      	mov	r0, r6
 800980a:	f7ff ff0b 	bl	8009624 <__multiply>
 800980e:	6020      	str	r0, [r4, #0]
 8009810:	f8c0 9000 	str.w	r9, [r0]
 8009814:	4604      	mov	r4, r0
 8009816:	e7e4      	b.n	80097e2 <__pow5mult+0x6a>
 8009818:	4638      	mov	r0, r7
 800981a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981e:	bf00      	nop
 8009820:	0800bb30 	.word	0x0800bb30
 8009824:	0800b95d 	.word	0x0800b95d
 8009828:	0800b9e0 	.word	0x0800b9e0

0800982c <__lshift>:
 800982c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009830:	460c      	mov	r4, r1
 8009832:	6849      	ldr	r1, [r1, #4]
 8009834:	6923      	ldr	r3, [r4, #16]
 8009836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800983a:	68a3      	ldr	r3, [r4, #8]
 800983c:	4607      	mov	r7, r0
 800983e:	4691      	mov	r9, r2
 8009840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009844:	f108 0601 	add.w	r6, r8, #1
 8009848:	42b3      	cmp	r3, r6
 800984a:	db0b      	blt.n	8009864 <__lshift+0x38>
 800984c:	4638      	mov	r0, r7
 800984e:	f7ff fddb 	bl	8009408 <_Balloc>
 8009852:	4605      	mov	r5, r0
 8009854:	b948      	cbnz	r0, 800986a <__lshift+0x3e>
 8009856:	4602      	mov	r2, r0
 8009858:	4b2a      	ldr	r3, [pc, #168]	; (8009904 <__lshift+0xd8>)
 800985a:	482b      	ldr	r0, [pc, #172]	; (8009908 <__lshift+0xdc>)
 800985c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009860:	f000 fbb8 	bl	8009fd4 <__assert_func>
 8009864:	3101      	adds	r1, #1
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	e7ee      	b.n	8009848 <__lshift+0x1c>
 800986a:	2300      	movs	r3, #0
 800986c:	f100 0114 	add.w	r1, r0, #20
 8009870:	f100 0210 	add.w	r2, r0, #16
 8009874:	4618      	mov	r0, r3
 8009876:	4553      	cmp	r3, sl
 8009878:	db37      	blt.n	80098ea <__lshift+0xbe>
 800987a:	6920      	ldr	r0, [r4, #16]
 800987c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009880:	f104 0314 	add.w	r3, r4, #20
 8009884:	f019 091f 	ands.w	r9, r9, #31
 8009888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800988c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009890:	d02f      	beq.n	80098f2 <__lshift+0xc6>
 8009892:	f1c9 0e20 	rsb	lr, r9, #32
 8009896:	468a      	mov	sl, r1
 8009898:	f04f 0c00 	mov.w	ip, #0
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	fa02 f209 	lsl.w	r2, r2, r9
 80098a2:	ea42 020c 	orr.w	r2, r2, ip
 80098a6:	f84a 2b04 	str.w	r2, [sl], #4
 80098aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ae:	4298      	cmp	r0, r3
 80098b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80098b4:	d8f2      	bhi.n	800989c <__lshift+0x70>
 80098b6:	1b03      	subs	r3, r0, r4
 80098b8:	3b15      	subs	r3, #21
 80098ba:	f023 0303 	bic.w	r3, r3, #3
 80098be:	3304      	adds	r3, #4
 80098c0:	f104 0215 	add.w	r2, r4, #21
 80098c4:	4290      	cmp	r0, r2
 80098c6:	bf38      	it	cc
 80098c8:	2304      	movcc	r3, #4
 80098ca:	f841 c003 	str.w	ip, [r1, r3]
 80098ce:	f1bc 0f00 	cmp.w	ip, #0
 80098d2:	d001      	beq.n	80098d8 <__lshift+0xac>
 80098d4:	f108 0602 	add.w	r6, r8, #2
 80098d8:	3e01      	subs	r6, #1
 80098da:	4638      	mov	r0, r7
 80098dc:	612e      	str	r6, [r5, #16]
 80098de:	4621      	mov	r1, r4
 80098e0:	f7ff fdd2 	bl	8009488 <_Bfree>
 80098e4:	4628      	mov	r0, r5
 80098e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ee:	3301      	adds	r3, #1
 80098f0:	e7c1      	b.n	8009876 <__lshift+0x4a>
 80098f2:	3904      	subs	r1, #4
 80098f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80098fc:	4298      	cmp	r0, r3
 80098fe:	d8f9      	bhi.n	80098f4 <__lshift+0xc8>
 8009900:	e7ea      	b.n	80098d8 <__lshift+0xac>
 8009902:	bf00      	nop
 8009904:	0800b9cf 	.word	0x0800b9cf
 8009908:	0800b9e0 	.word	0x0800b9e0

0800990c <__mcmp>:
 800990c:	b530      	push	{r4, r5, lr}
 800990e:	6902      	ldr	r2, [r0, #16]
 8009910:	690c      	ldr	r4, [r1, #16]
 8009912:	1b12      	subs	r2, r2, r4
 8009914:	d10e      	bne.n	8009934 <__mcmp+0x28>
 8009916:	f100 0314 	add.w	r3, r0, #20
 800991a:	3114      	adds	r1, #20
 800991c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009920:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009924:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009928:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800992c:	42a5      	cmp	r5, r4
 800992e:	d003      	beq.n	8009938 <__mcmp+0x2c>
 8009930:	d305      	bcc.n	800993e <__mcmp+0x32>
 8009932:	2201      	movs	r2, #1
 8009934:	4610      	mov	r0, r2
 8009936:	bd30      	pop	{r4, r5, pc}
 8009938:	4283      	cmp	r3, r0
 800993a:	d3f3      	bcc.n	8009924 <__mcmp+0x18>
 800993c:	e7fa      	b.n	8009934 <__mcmp+0x28>
 800993e:	f04f 32ff 	mov.w	r2, #4294967295
 8009942:	e7f7      	b.n	8009934 <__mcmp+0x28>

08009944 <__mdiff>:
 8009944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	460c      	mov	r4, r1
 800994a:	4606      	mov	r6, r0
 800994c:	4611      	mov	r1, r2
 800994e:	4620      	mov	r0, r4
 8009950:	4690      	mov	r8, r2
 8009952:	f7ff ffdb 	bl	800990c <__mcmp>
 8009956:	1e05      	subs	r5, r0, #0
 8009958:	d110      	bne.n	800997c <__mdiff+0x38>
 800995a:	4629      	mov	r1, r5
 800995c:	4630      	mov	r0, r6
 800995e:	f7ff fd53 	bl	8009408 <_Balloc>
 8009962:	b930      	cbnz	r0, 8009972 <__mdiff+0x2e>
 8009964:	4b3a      	ldr	r3, [pc, #232]	; (8009a50 <__mdiff+0x10c>)
 8009966:	4602      	mov	r2, r0
 8009968:	f240 2132 	movw	r1, #562	; 0x232
 800996c:	4839      	ldr	r0, [pc, #228]	; (8009a54 <__mdiff+0x110>)
 800996e:	f000 fb31 	bl	8009fd4 <__assert_func>
 8009972:	2301      	movs	r3, #1
 8009974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997c:	bfa4      	itt	ge
 800997e:	4643      	movge	r3, r8
 8009980:	46a0      	movge	r8, r4
 8009982:	4630      	mov	r0, r6
 8009984:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009988:	bfa6      	itte	ge
 800998a:	461c      	movge	r4, r3
 800998c:	2500      	movge	r5, #0
 800998e:	2501      	movlt	r5, #1
 8009990:	f7ff fd3a 	bl	8009408 <_Balloc>
 8009994:	b920      	cbnz	r0, 80099a0 <__mdiff+0x5c>
 8009996:	4b2e      	ldr	r3, [pc, #184]	; (8009a50 <__mdiff+0x10c>)
 8009998:	4602      	mov	r2, r0
 800999a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800999e:	e7e5      	b.n	800996c <__mdiff+0x28>
 80099a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099a4:	6926      	ldr	r6, [r4, #16]
 80099a6:	60c5      	str	r5, [r0, #12]
 80099a8:	f104 0914 	add.w	r9, r4, #20
 80099ac:	f108 0514 	add.w	r5, r8, #20
 80099b0:	f100 0e14 	add.w	lr, r0, #20
 80099b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80099b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099bc:	f108 0210 	add.w	r2, r8, #16
 80099c0:	46f2      	mov	sl, lr
 80099c2:	2100      	movs	r1, #0
 80099c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80099c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099cc:	fa1f f883 	uxth.w	r8, r3
 80099d0:	fa11 f18b 	uxtah	r1, r1, fp
 80099d4:	0c1b      	lsrs	r3, r3, #16
 80099d6:	eba1 0808 	sub.w	r8, r1, r8
 80099da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099e2:	fa1f f888 	uxth.w	r8, r8
 80099e6:	1419      	asrs	r1, r3, #16
 80099e8:	454e      	cmp	r6, r9
 80099ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099ee:	f84a 3b04 	str.w	r3, [sl], #4
 80099f2:	d8e7      	bhi.n	80099c4 <__mdiff+0x80>
 80099f4:	1b33      	subs	r3, r6, r4
 80099f6:	3b15      	subs	r3, #21
 80099f8:	f023 0303 	bic.w	r3, r3, #3
 80099fc:	3304      	adds	r3, #4
 80099fe:	3415      	adds	r4, #21
 8009a00:	42a6      	cmp	r6, r4
 8009a02:	bf38      	it	cc
 8009a04:	2304      	movcc	r3, #4
 8009a06:	441d      	add	r5, r3
 8009a08:	4473      	add	r3, lr
 8009a0a:	469e      	mov	lr, r3
 8009a0c:	462e      	mov	r6, r5
 8009a0e:	4566      	cmp	r6, ip
 8009a10:	d30e      	bcc.n	8009a30 <__mdiff+0xec>
 8009a12:	f10c 0203 	add.w	r2, ip, #3
 8009a16:	1b52      	subs	r2, r2, r5
 8009a18:	f022 0203 	bic.w	r2, r2, #3
 8009a1c:	3d03      	subs	r5, #3
 8009a1e:	45ac      	cmp	ip, r5
 8009a20:	bf38      	it	cc
 8009a22:	2200      	movcc	r2, #0
 8009a24:	441a      	add	r2, r3
 8009a26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a2a:	b17b      	cbz	r3, 8009a4c <__mdiff+0x108>
 8009a2c:	6107      	str	r7, [r0, #16]
 8009a2e:	e7a3      	b.n	8009978 <__mdiff+0x34>
 8009a30:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a34:	fa11 f288 	uxtah	r2, r1, r8
 8009a38:	1414      	asrs	r4, r2, #16
 8009a3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a3e:	b292      	uxth	r2, r2
 8009a40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a44:	f84e 2b04 	str.w	r2, [lr], #4
 8009a48:	1421      	asrs	r1, r4, #16
 8009a4a:	e7e0      	b.n	8009a0e <__mdiff+0xca>
 8009a4c:	3f01      	subs	r7, #1
 8009a4e:	e7ea      	b.n	8009a26 <__mdiff+0xe2>
 8009a50:	0800b9cf 	.word	0x0800b9cf
 8009a54:	0800b9e0 	.word	0x0800b9e0

08009a58 <__d2b>:
 8009a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a5c:	4689      	mov	r9, r1
 8009a5e:	2101      	movs	r1, #1
 8009a60:	ec57 6b10 	vmov	r6, r7, d0
 8009a64:	4690      	mov	r8, r2
 8009a66:	f7ff fccf 	bl	8009408 <_Balloc>
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	b930      	cbnz	r0, 8009a7c <__d2b+0x24>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	4b25      	ldr	r3, [pc, #148]	; (8009b08 <__d2b+0xb0>)
 8009a72:	4826      	ldr	r0, [pc, #152]	; (8009b0c <__d2b+0xb4>)
 8009a74:	f240 310a 	movw	r1, #778	; 0x30a
 8009a78:	f000 faac 	bl	8009fd4 <__assert_func>
 8009a7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a84:	bb35      	cbnz	r5, 8009ad4 <__d2b+0x7c>
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	d028      	beq.n	8009ade <__d2b+0x86>
 8009a8c:	4668      	mov	r0, sp
 8009a8e:	9600      	str	r6, [sp, #0]
 8009a90:	f7ff fd82 	bl	8009598 <__lo0bits>
 8009a94:	9900      	ldr	r1, [sp, #0]
 8009a96:	b300      	cbz	r0, 8009ada <__d2b+0x82>
 8009a98:	9a01      	ldr	r2, [sp, #4]
 8009a9a:	f1c0 0320 	rsb	r3, r0, #32
 8009a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa2:	430b      	orrs	r3, r1
 8009aa4:	40c2      	lsrs	r2, r0
 8009aa6:	6163      	str	r3, [r4, #20]
 8009aa8:	9201      	str	r2, [sp, #4]
 8009aaa:	9b01      	ldr	r3, [sp, #4]
 8009aac:	61a3      	str	r3, [r4, #24]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bf14      	ite	ne
 8009ab2:	2202      	movne	r2, #2
 8009ab4:	2201      	moveq	r2, #1
 8009ab6:	6122      	str	r2, [r4, #16]
 8009ab8:	b1d5      	cbz	r5, 8009af0 <__d2b+0x98>
 8009aba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009abe:	4405      	add	r5, r0
 8009ac0:	f8c9 5000 	str.w	r5, [r9]
 8009ac4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ac8:	f8c8 0000 	str.w	r0, [r8]
 8009acc:	4620      	mov	r0, r4
 8009ace:	b003      	add	sp, #12
 8009ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ad8:	e7d5      	b.n	8009a86 <__d2b+0x2e>
 8009ada:	6161      	str	r1, [r4, #20]
 8009adc:	e7e5      	b.n	8009aaa <__d2b+0x52>
 8009ade:	a801      	add	r0, sp, #4
 8009ae0:	f7ff fd5a 	bl	8009598 <__lo0bits>
 8009ae4:	9b01      	ldr	r3, [sp, #4]
 8009ae6:	6163      	str	r3, [r4, #20]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	6122      	str	r2, [r4, #16]
 8009aec:	3020      	adds	r0, #32
 8009aee:	e7e3      	b.n	8009ab8 <__d2b+0x60>
 8009af0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009af4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009af8:	f8c9 0000 	str.w	r0, [r9]
 8009afc:	6918      	ldr	r0, [r3, #16]
 8009afe:	f7ff fd2b 	bl	8009558 <__hi0bits>
 8009b02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b06:	e7df      	b.n	8009ac8 <__d2b+0x70>
 8009b08:	0800b9cf 	.word	0x0800b9cf
 8009b0c:	0800b9e0 	.word	0x0800b9e0

08009b10 <_calloc_r>:
 8009b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b12:	fba1 2402 	umull	r2, r4, r1, r2
 8009b16:	b94c      	cbnz	r4, 8009b2c <_calloc_r+0x1c>
 8009b18:	4611      	mov	r1, r2
 8009b1a:	9201      	str	r2, [sp, #4]
 8009b1c:	f000 f87a 	bl	8009c14 <_malloc_r>
 8009b20:	9a01      	ldr	r2, [sp, #4]
 8009b22:	4605      	mov	r5, r0
 8009b24:	b930      	cbnz	r0, 8009b34 <_calloc_r+0x24>
 8009b26:	4628      	mov	r0, r5
 8009b28:	b003      	add	sp, #12
 8009b2a:	bd30      	pop	{r4, r5, pc}
 8009b2c:	220c      	movs	r2, #12
 8009b2e:	6002      	str	r2, [r0, #0]
 8009b30:	2500      	movs	r5, #0
 8009b32:	e7f8      	b.n	8009b26 <_calloc_r+0x16>
 8009b34:	4621      	mov	r1, r4
 8009b36:	f7fe f93f 	bl	8007db8 <memset>
 8009b3a:	e7f4      	b.n	8009b26 <_calloc_r+0x16>

08009b3c <_free_r>:
 8009b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b3e:	2900      	cmp	r1, #0
 8009b40:	d044      	beq.n	8009bcc <_free_r+0x90>
 8009b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b46:	9001      	str	r0, [sp, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b4e:	bfb8      	it	lt
 8009b50:	18e4      	addlt	r4, r4, r3
 8009b52:	f000 fa9b 	bl	800a08c <__malloc_lock>
 8009b56:	4a1e      	ldr	r2, [pc, #120]	; (8009bd0 <_free_r+0x94>)
 8009b58:	9801      	ldr	r0, [sp, #4]
 8009b5a:	6813      	ldr	r3, [r2, #0]
 8009b5c:	b933      	cbnz	r3, 8009b6c <_free_r+0x30>
 8009b5e:	6063      	str	r3, [r4, #4]
 8009b60:	6014      	str	r4, [r2, #0]
 8009b62:	b003      	add	sp, #12
 8009b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b68:	f000 ba96 	b.w	800a098 <__malloc_unlock>
 8009b6c:	42a3      	cmp	r3, r4
 8009b6e:	d908      	bls.n	8009b82 <_free_r+0x46>
 8009b70:	6825      	ldr	r5, [r4, #0]
 8009b72:	1961      	adds	r1, r4, r5
 8009b74:	428b      	cmp	r3, r1
 8009b76:	bf01      	itttt	eq
 8009b78:	6819      	ldreq	r1, [r3, #0]
 8009b7a:	685b      	ldreq	r3, [r3, #4]
 8009b7c:	1949      	addeq	r1, r1, r5
 8009b7e:	6021      	streq	r1, [r4, #0]
 8009b80:	e7ed      	b.n	8009b5e <_free_r+0x22>
 8009b82:	461a      	mov	r2, r3
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	b10b      	cbz	r3, 8009b8c <_free_r+0x50>
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	d9fa      	bls.n	8009b82 <_free_r+0x46>
 8009b8c:	6811      	ldr	r1, [r2, #0]
 8009b8e:	1855      	adds	r5, r2, r1
 8009b90:	42a5      	cmp	r5, r4
 8009b92:	d10b      	bne.n	8009bac <_free_r+0x70>
 8009b94:	6824      	ldr	r4, [r4, #0]
 8009b96:	4421      	add	r1, r4
 8009b98:	1854      	adds	r4, r2, r1
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	6011      	str	r1, [r2, #0]
 8009b9e:	d1e0      	bne.n	8009b62 <_free_r+0x26>
 8009ba0:	681c      	ldr	r4, [r3, #0]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	6053      	str	r3, [r2, #4]
 8009ba6:	4421      	add	r1, r4
 8009ba8:	6011      	str	r1, [r2, #0]
 8009baa:	e7da      	b.n	8009b62 <_free_r+0x26>
 8009bac:	d902      	bls.n	8009bb4 <_free_r+0x78>
 8009bae:	230c      	movs	r3, #12
 8009bb0:	6003      	str	r3, [r0, #0]
 8009bb2:	e7d6      	b.n	8009b62 <_free_r+0x26>
 8009bb4:	6825      	ldr	r5, [r4, #0]
 8009bb6:	1961      	adds	r1, r4, r5
 8009bb8:	428b      	cmp	r3, r1
 8009bba:	bf04      	itt	eq
 8009bbc:	6819      	ldreq	r1, [r3, #0]
 8009bbe:	685b      	ldreq	r3, [r3, #4]
 8009bc0:	6063      	str	r3, [r4, #4]
 8009bc2:	bf04      	itt	eq
 8009bc4:	1949      	addeq	r1, r1, r5
 8009bc6:	6021      	streq	r1, [r4, #0]
 8009bc8:	6054      	str	r4, [r2, #4]
 8009bca:	e7ca      	b.n	8009b62 <_free_r+0x26>
 8009bcc:	b003      	add	sp, #12
 8009bce:	bd30      	pop	{r4, r5, pc}
 8009bd0:	200007f4 	.word	0x200007f4

08009bd4 <sbrk_aligned>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	4e0e      	ldr	r6, [pc, #56]	; (8009c10 <sbrk_aligned+0x3c>)
 8009bd8:	460c      	mov	r4, r1
 8009bda:	6831      	ldr	r1, [r6, #0]
 8009bdc:	4605      	mov	r5, r0
 8009bde:	b911      	cbnz	r1, 8009be6 <sbrk_aligned+0x12>
 8009be0:	f000 f9e8 	bl	8009fb4 <_sbrk_r>
 8009be4:	6030      	str	r0, [r6, #0]
 8009be6:	4621      	mov	r1, r4
 8009be8:	4628      	mov	r0, r5
 8009bea:	f000 f9e3 	bl	8009fb4 <_sbrk_r>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d00a      	beq.n	8009c08 <sbrk_aligned+0x34>
 8009bf2:	1cc4      	adds	r4, r0, #3
 8009bf4:	f024 0403 	bic.w	r4, r4, #3
 8009bf8:	42a0      	cmp	r0, r4
 8009bfa:	d007      	beq.n	8009c0c <sbrk_aligned+0x38>
 8009bfc:	1a21      	subs	r1, r4, r0
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f000 f9d8 	bl	8009fb4 <_sbrk_r>
 8009c04:	3001      	adds	r0, #1
 8009c06:	d101      	bne.n	8009c0c <sbrk_aligned+0x38>
 8009c08:	f04f 34ff 	mov.w	r4, #4294967295
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}
 8009c10:	200007f8 	.word	0x200007f8

08009c14 <_malloc_r>:
 8009c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c18:	1ccd      	adds	r5, r1, #3
 8009c1a:	f025 0503 	bic.w	r5, r5, #3
 8009c1e:	3508      	adds	r5, #8
 8009c20:	2d0c      	cmp	r5, #12
 8009c22:	bf38      	it	cc
 8009c24:	250c      	movcc	r5, #12
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	4607      	mov	r7, r0
 8009c2a:	db01      	blt.n	8009c30 <_malloc_r+0x1c>
 8009c2c:	42a9      	cmp	r1, r5
 8009c2e:	d905      	bls.n	8009c3c <_malloc_r+0x28>
 8009c30:	230c      	movs	r3, #12
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	2600      	movs	r6, #0
 8009c36:	4630      	mov	r0, r6
 8009c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c3c:	4e2e      	ldr	r6, [pc, #184]	; (8009cf8 <_malloc_r+0xe4>)
 8009c3e:	f000 fa25 	bl	800a08c <__malloc_lock>
 8009c42:	6833      	ldr	r3, [r6, #0]
 8009c44:	461c      	mov	r4, r3
 8009c46:	bb34      	cbnz	r4, 8009c96 <_malloc_r+0x82>
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	f7ff ffc2 	bl	8009bd4 <sbrk_aligned>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	4604      	mov	r4, r0
 8009c54:	d14d      	bne.n	8009cf2 <_malloc_r+0xde>
 8009c56:	6834      	ldr	r4, [r6, #0]
 8009c58:	4626      	mov	r6, r4
 8009c5a:	2e00      	cmp	r6, #0
 8009c5c:	d140      	bne.n	8009ce0 <_malloc_r+0xcc>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	4631      	mov	r1, r6
 8009c62:	4638      	mov	r0, r7
 8009c64:	eb04 0803 	add.w	r8, r4, r3
 8009c68:	f000 f9a4 	bl	8009fb4 <_sbrk_r>
 8009c6c:	4580      	cmp	r8, r0
 8009c6e:	d13a      	bne.n	8009ce6 <_malloc_r+0xd2>
 8009c70:	6821      	ldr	r1, [r4, #0]
 8009c72:	3503      	adds	r5, #3
 8009c74:	1a6d      	subs	r5, r5, r1
 8009c76:	f025 0503 	bic.w	r5, r5, #3
 8009c7a:	3508      	adds	r5, #8
 8009c7c:	2d0c      	cmp	r5, #12
 8009c7e:	bf38      	it	cc
 8009c80:	250c      	movcc	r5, #12
 8009c82:	4629      	mov	r1, r5
 8009c84:	4638      	mov	r0, r7
 8009c86:	f7ff ffa5 	bl	8009bd4 <sbrk_aligned>
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d02b      	beq.n	8009ce6 <_malloc_r+0xd2>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	442b      	add	r3, r5
 8009c92:	6023      	str	r3, [r4, #0]
 8009c94:	e00e      	b.n	8009cb4 <_malloc_r+0xa0>
 8009c96:	6822      	ldr	r2, [r4, #0]
 8009c98:	1b52      	subs	r2, r2, r5
 8009c9a:	d41e      	bmi.n	8009cda <_malloc_r+0xc6>
 8009c9c:	2a0b      	cmp	r2, #11
 8009c9e:	d916      	bls.n	8009cce <_malloc_r+0xba>
 8009ca0:	1961      	adds	r1, r4, r5
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	6025      	str	r5, [r4, #0]
 8009ca6:	bf18      	it	ne
 8009ca8:	6059      	strne	r1, [r3, #4]
 8009caa:	6863      	ldr	r3, [r4, #4]
 8009cac:	bf08      	it	eq
 8009cae:	6031      	streq	r1, [r6, #0]
 8009cb0:	5162      	str	r2, [r4, r5]
 8009cb2:	604b      	str	r3, [r1, #4]
 8009cb4:	4638      	mov	r0, r7
 8009cb6:	f104 060b 	add.w	r6, r4, #11
 8009cba:	f000 f9ed 	bl	800a098 <__malloc_unlock>
 8009cbe:	f026 0607 	bic.w	r6, r6, #7
 8009cc2:	1d23      	adds	r3, r4, #4
 8009cc4:	1af2      	subs	r2, r6, r3
 8009cc6:	d0b6      	beq.n	8009c36 <_malloc_r+0x22>
 8009cc8:	1b9b      	subs	r3, r3, r6
 8009cca:	50a3      	str	r3, [r4, r2]
 8009ccc:	e7b3      	b.n	8009c36 <_malloc_r+0x22>
 8009cce:	6862      	ldr	r2, [r4, #4]
 8009cd0:	42a3      	cmp	r3, r4
 8009cd2:	bf0c      	ite	eq
 8009cd4:	6032      	streq	r2, [r6, #0]
 8009cd6:	605a      	strne	r2, [r3, #4]
 8009cd8:	e7ec      	b.n	8009cb4 <_malloc_r+0xa0>
 8009cda:	4623      	mov	r3, r4
 8009cdc:	6864      	ldr	r4, [r4, #4]
 8009cde:	e7b2      	b.n	8009c46 <_malloc_r+0x32>
 8009ce0:	4634      	mov	r4, r6
 8009ce2:	6876      	ldr	r6, [r6, #4]
 8009ce4:	e7b9      	b.n	8009c5a <_malloc_r+0x46>
 8009ce6:	230c      	movs	r3, #12
 8009ce8:	603b      	str	r3, [r7, #0]
 8009cea:	4638      	mov	r0, r7
 8009cec:	f000 f9d4 	bl	800a098 <__malloc_unlock>
 8009cf0:	e7a1      	b.n	8009c36 <_malloc_r+0x22>
 8009cf2:	6025      	str	r5, [r4, #0]
 8009cf4:	e7de      	b.n	8009cb4 <_malloc_r+0xa0>
 8009cf6:	bf00      	nop
 8009cf8:	200007f4 	.word	0x200007f4

08009cfc <__ssputs_r>:
 8009cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	688e      	ldr	r6, [r1, #8]
 8009d02:	429e      	cmp	r6, r3
 8009d04:	4682      	mov	sl, r0
 8009d06:	460c      	mov	r4, r1
 8009d08:	4690      	mov	r8, r2
 8009d0a:	461f      	mov	r7, r3
 8009d0c:	d838      	bhi.n	8009d80 <__ssputs_r+0x84>
 8009d0e:	898a      	ldrh	r2, [r1, #12]
 8009d10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d14:	d032      	beq.n	8009d7c <__ssputs_r+0x80>
 8009d16:	6825      	ldr	r5, [r4, #0]
 8009d18:	6909      	ldr	r1, [r1, #16]
 8009d1a:	eba5 0901 	sub.w	r9, r5, r1
 8009d1e:	6965      	ldr	r5, [r4, #20]
 8009d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d28:	3301      	adds	r3, #1
 8009d2a:	444b      	add	r3, r9
 8009d2c:	106d      	asrs	r5, r5, #1
 8009d2e:	429d      	cmp	r5, r3
 8009d30:	bf38      	it	cc
 8009d32:	461d      	movcc	r5, r3
 8009d34:	0553      	lsls	r3, r2, #21
 8009d36:	d531      	bpl.n	8009d9c <__ssputs_r+0xa0>
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7ff ff6b 	bl	8009c14 <_malloc_r>
 8009d3e:	4606      	mov	r6, r0
 8009d40:	b950      	cbnz	r0, 8009d58 <__ssputs_r+0x5c>
 8009d42:	230c      	movs	r3, #12
 8009d44:	f8ca 3000 	str.w	r3, [sl]
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d4e:	81a3      	strh	r3, [r4, #12]
 8009d50:	f04f 30ff 	mov.w	r0, #4294967295
 8009d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d58:	6921      	ldr	r1, [r4, #16]
 8009d5a:	464a      	mov	r2, r9
 8009d5c:	f7ff fb46 	bl	80093ec <memcpy>
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6a:	81a3      	strh	r3, [r4, #12]
 8009d6c:	6126      	str	r6, [r4, #16]
 8009d6e:	6165      	str	r5, [r4, #20]
 8009d70:	444e      	add	r6, r9
 8009d72:	eba5 0509 	sub.w	r5, r5, r9
 8009d76:	6026      	str	r6, [r4, #0]
 8009d78:	60a5      	str	r5, [r4, #8]
 8009d7a:	463e      	mov	r6, r7
 8009d7c:	42be      	cmp	r6, r7
 8009d7e:	d900      	bls.n	8009d82 <__ssputs_r+0x86>
 8009d80:	463e      	mov	r6, r7
 8009d82:	6820      	ldr	r0, [r4, #0]
 8009d84:	4632      	mov	r2, r6
 8009d86:	4641      	mov	r1, r8
 8009d88:	f000 f966 	bl	800a058 <memmove>
 8009d8c:	68a3      	ldr	r3, [r4, #8]
 8009d8e:	1b9b      	subs	r3, r3, r6
 8009d90:	60a3      	str	r3, [r4, #8]
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	4433      	add	r3, r6
 8009d96:	6023      	str	r3, [r4, #0]
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e7db      	b.n	8009d54 <__ssputs_r+0x58>
 8009d9c:	462a      	mov	r2, r5
 8009d9e:	f000 f981 	bl	800a0a4 <_realloc_r>
 8009da2:	4606      	mov	r6, r0
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d1e1      	bne.n	8009d6c <__ssputs_r+0x70>
 8009da8:	6921      	ldr	r1, [r4, #16]
 8009daa:	4650      	mov	r0, sl
 8009dac:	f7ff fec6 	bl	8009b3c <_free_r>
 8009db0:	e7c7      	b.n	8009d42 <__ssputs_r+0x46>
	...

08009db4 <_svfiprintf_r>:
 8009db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db8:	4698      	mov	r8, r3
 8009dba:	898b      	ldrh	r3, [r1, #12]
 8009dbc:	061b      	lsls	r3, r3, #24
 8009dbe:	b09d      	sub	sp, #116	; 0x74
 8009dc0:	4607      	mov	r7, r0
 8009dc2:	460d      	mov	r5, r1
 8009dc4:	4614      	mov	r4, r2
 8009dc6:	d50e      	bpl.n	8009de6 <_svfiprintf_r+0x32>
 8009dc8:	690b      	ldr	r3, [r1, #16]
 8009dca:	b963      	cbnz	r3, 8009de6 <_svfiprintf_r+0x32>
 8009dcc:	2140      	movs	r1, #64	; 0x40
 8009dce:	f7ff ff21 	bl	8009c14 <_malloc_r>
 8009dd2:	6028      	str	r0, [r5, #0]
 8009dd4:	6128      	str	r0, [r5, #16]
 8009dd6:	b920      	cbnz	r0, 8009de2 <_svfiprintf_r+0x2e>
 8009dd8:	230c      	movs	r3, #12
 8009dda:	603b      	str	r3, [r7, #0]
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8009de0:	e0d1      	b.n	8009f86 <_svfiprintf_r+0x1d2>
 8009de2:	2340      	movs	r3, #64	; 0x40
 8009de4:	616b      	str	r3, [r5, #20]
 8009de6:	2300      	movs	r3, #0
 8009de8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dea:	2320      	movs	r3, #32
 8009dec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009df4:	2330      	movs	r3, #48	; 0x30
 8009df6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009fa0 <_svfiprintf_r+0x1ec>
 8009dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dfe:	f04f 0901 	mov.w	r9, #1
 8009e02:	4623      	mov	r3, r4
 8009e04:	469a      	mov	sl, r3
 8009e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e0a:	b10a      	cbz	r2, 8009e10 <_svfiprintf_r+0x5c>
 8009e0c:	2a25      	cmp	r2, #37	; 0x25
 8009e0e:	d1f9      	bne.n	8009e04 <_svfiprintf_r+0x50>
 8009e10:	ebba 0b04 	subs.w	fp, sl, r4
 8009e14:	d00b      	beq.n	8009e2e <_svfiprintf_r+0x7a>
 8009e16:	465b      	mov	r3, fp
 8009e18:	4622      	mov	r2, r4
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f7ff ff6d 	bl	8009cfc <__ssputs_r>
 8009e22:	3001      	adds	r0, #1
 8009e24:	f000 80aa 	beq.w	8009f7c <_svfiprintf_r+0x1c8>
 8009e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e2a:	445a      	add	r2, fp
 8009e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 80a2 	beq.w	8009f7c <_svfiprintf_r+0x1c8>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e42:	f10a 0a01 	add.w	sl, sl, #1
 8009e46:	9304      	str	r3, [sp, #16]
 8009e48:	9307      	str	r3, [sp, #28]
 8009e4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e4e:	931a      	str	r3, [sp, #104]	; 0x68
 8009e50:	4654      	mov	r4, sl
 8009e52:	2205      	movs	r2, #5
 8009e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e58:	4851      	ldr	r0, [pc, #324]	; (8009fa0 <_svfiprintf_r+0x1ec>)
 8009e5a:	f7f6 f9c1 	bl	80001e0 <memchr>
 8009e5e:	9a04      	ldr	r2, [sp, #16]
 8009e60:	b9d8      	cbnz	r0, 8009e9a <_svfiprintf_r+0xe6>
 8009e62:	06d0      	lsls	r0, r2, #27
 8009e64:	bf44      	itt	mi
 8009e66:	2320      	movmi	r3, #32
 8009e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e6c:	0711      	lsls	r1, r2, #28
 8009e6e:	bf44      	itt	mi
 8009e70:	232b      	movmi	r3, #43	; 0x2b
 8009e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e76:	f89a 3000 	ldrb.w	r3, [sl]
 8009e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e7c:	d015      	beq.n	8009eaa <_svfiprintf_r+0xf6>
 8009e7e:	9a07      	ldr	r2, [sp, #28]
 8009e80:	4654      	mov	r4, sl
 8009e82:	2000      	movs	r0, #0
 8009e84:	f04f 0c0a 	mov.w	ip, #10
 8009e88:	4621      	mov	r1, r4
 8009e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e8e:	3b30      	subs	r3, #48	; 0x30
 8009e90:	2b09      	cmp	r3, #9
 8009e92:	d94e      	bls.n	8009f32 <_svfiprintf_r+0x17e>
 8009e94:	b1b0      	cbz	r0, 8009ec4 <_svfiprintf_r+0x110>
 8009e96:	9207      	str	r2, [sp, #28]
 8009e98:	e014      	b.n	8009ec4 <_svfiprintf_r+0x110>
 8009e9a:	eba0 0308 	sub.w	r3, r0, r8
 8009e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	9304      	str	r3, [sp, #16]
 8009ea6:	46a2      	mov	sl, r4
 8009ea8:	e7d2      	b.n	8009e50 <_svfiprintf_r+0x9c>
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	1d19      	adds	r1, r3, #4
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	9103      	str	r1, [sp, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	bfbb      	ittet	lt
 8009eb6:	425b      	neglt	r3, r3
 8009eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8009ebc:	9307      	strge	r3, [sp, #28]
 8009ebe:	9307      	strlt	r3, [sp, #28]
 8009ec0:	bfb8      	it	lt
 8009ec2:	9204      	strlt	r2, [sp, #16]
 8009ec4:	7823      	ldrb	r3, [r4, #0]
 8009ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ec8:	d10c      	bne.n	8009ee4 <_svfiprintf_r+0x130>
 8009eca:	7863      	ldrb	r3, [r4, #1]
 8009ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8009ece:	d135      	bne.n	8009f3c <_svfiprintf_r+0x188>
 8009ed0:	9b03      	ldr	r3, [sp, #12]
 8009ed2:	1d1a      	adds	r2, r3, #4
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	9203      	str	r2, [sp, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	bfb8      	it	lt
 8009edc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ee0:	3402      	adds	r4, #2
 8009ee2:	9305      	str	r3, [sp, #20]
 8009ee4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fb0 <_svfiprintf_r+0x1fc>
 8009ee8:	7821      	ldrb	r1, [r4, #0]
 8009eea:	2203      	movs	r2, #3
 8009eec:	4650      	mov	r0, sl
 8009eee:	f7f6 f977 	bl	80001e0 <memchr>
 8009ef2:	b140      	cbz	r0, 8009f06 <_svfiprintf_r+0x152>
 8009ef4:	2340      	movs	r3, #64	; 0x40
 8009ef6:	eba0 000a 	sub.w	r0, r0, sl
 8009efa:	fa03 f000 	lsl.w	r0, r3, r0
 8009efe:	9b04      	ldr	r3, [sp, #16]
 8009f00:	4303      	orrs	r3, r0
 8009f02:	3401      	adds	r4, #1
 8009f04:	9304      	str	r3, [sp, #16]
 8009f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0a:	4826      	ldr	r0, [pc, #152]	; (8009fa4 <_svfiprintf_r+0x1f0>)
 8009f0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f10:	2206      	movs	r2, #6
 8009f12:	f7f6 f965 	bl	80001e0 <memchr>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d038      	beq.n	8009f8c <_svfiprintf_r+0x1d8>
 8009f1a:	4b23      	ldr	r3, [pc, #140]	; (8009fa8 <_svfiprintf_r+0x1f4>)
 8009f1c:	bb1b      	cbnz	r3, 8009f66 <_svfiprintf_r+0x1b2>
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	3307      	adds	r3, #7
 8009f22:	f023 0307 	bic.w	r3, r3, #7
 8009f26:	3308      	adds	r3, #8
 8009f28:	9303      	str	r3, [sp, #12]
 8009f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2c:	4433      	add	r3, r6
 8009f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f30:	e767      	b.n	8009e02 <_svfiprintf_r+0x4e>
 8009f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f36:	460c      	mov	r4, r1
 8009f38:	2001      	movs	r0, #1
 8009f3a:	e7a5      	b.n	8009e88 <_svfiprintf_r+0xd4>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	3401      	adds	r4, #1
 8009f40:	9305      	str	r3, [sp, #20]
 8009f42:	4619      	mov	r1, r3
 8009f44:	f04f 0c0a 	mov.w	ip, #10
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f4e:	3a30      	subs	r2, #48	; 0x30
 8009f50:	2a09      	cmp	r2, #9
 8009f52:	d903      	bls.n	8009f5c <_svfiprintf_r+0x1a8>
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0c5      	beq.n	8009ee4 <_svfiprintf_r+0x130>
 8009f58:	9105      	str	r1, [sp, #20]
 8009f5a:	e7c3      	b.n	8009ee4 <_svfiprintf_r+0x130>
 8009f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f60:	4604      	mov	r4, r0
 8009f62:	2301      	movs	r3, #1
 8009f64:	e7f0      	b.n	8009f48 <_svfiprintf_r+0x194>
 8009f66:	ab03      	add	r3, sp, #12
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	462a      	mov	r2, r5
 8009f6c:	4b0f      	ldr	r3, [pc, #60]	; (8009fac <_svfiprintf_r+0x1f8>)
 8009f6e:	a904      	add	r1, sp, #16
 8009f70:	4638      	mov	r0, r7
 8009f72:	f7fd ffc9 	bl	8007f08 <_printf_float>
 8009f76:	1c42      	adds	r2, r0, #1
 8009f78:	4606      	mov	r6, r0
 8009f7a:	d1d6      	bne.n	8009f2a <_svfiprintf_r+0x176>
 8009f7c:	89ab      	ldrh	r3, [r5, #12]
 8009f7e:	065b      	lsls	r3, r3, #25
 8009f80:	f53f af2c 	bmi.w	8009ddc <_svfiprintf_r+0x28>
 8009f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f86:	b01d      	add	sp, #116	; 0x74
 8009f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8c:	ab03      	add	r3, sp, #12
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	462a      	mov	r2, r5
 8009f92:	4b06      	ldr	r3, [pc, #24]	; (8009fac <_svfiprintf_r+0x1f8>)
 8009f94:	a904      	add	r1, sp, #16
 8009f96:	4638      	mov	r0, r7
 8009f98:	f7fe fa5a 	bl	8008450 <_printf_i>
 8009f9c:	e7eb      	b.n	8009f76 <_svfiprintf_r+0x1c2>
 8009f9e:	bf00      	nop
 8009fa0:	0800bb3c 	.word	0x0800bb3c
 8009fa4:	0800bb46 	.word	0x0800bb46
 8009fa8:	08007f09 	.word	0x08007f09
 8009fac:	08009cfd 	.word	0x08009cfd
 8009fb0:	0800bb42 	.word	0x0800bb42

08009fb4 <_sbrk_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	4d06      	ldr	r5, [pc, #24]	; (8009fd0 <_sbrk_r+0x1c>)
 8009fb8:	2300      	movs	r3, #0
 8009fba:	4604      	mov	r4, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	602b      	str	r3, [r5, #0]
 8009fc0:	f7f7 fbe0 	bl	8001784 <_sbrk>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d102      	bne.n	8009fce <_sbrk_r+0x1a>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	b103      	cbz	r3, 8009fce <_sbrk_r+0x1a>
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	200007fc 	.word	0x200007fc

08009fd4 <__assert_func>:
 8009fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fd6:	4614      	mov	r4, r2
 8009fd8:	461a      	mov	r2, r3
 8009fda:	4b09      	ldr	r3, [pc, #36]	; (800a000 <__assert_func+0x2c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4605      	mov	r5, r0
 8009fe0:	68d8      	ldr	r0, [r3, #12]
 8009fe2:	b14c      	cbz	r4, 8009ff8 <__assert_func+0x24>
 8009fe4:	4b07      	ldr	r3, [pc, #28]	; (800a004 <__assert_func+0x30>)
 8009fe6:	9100      	str	r1, [sp, #0]
 8009fe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fec:	4906      	ldr	r1, [pc, #24]	; (800a008 <__assert_func+0x34>)
 8009fee:	462b      	mov	r3, r5
 8009ff0:	f000 f80e 	bl	800a010 <fiprintf>
 8009ff4:	f000 faac 	bl	800a550 <abort>
 8009ff8:	4b04      	ldr	r3, [pc, #16]	; (800a00c <__assert_func+0x38>)
 8009ffa:	461c      	mov	r4, r3
 8009ffc:	e7f3      	b.n	8009fe6 <__assert_func+0x12>
 8009ffe:	bf00      	nop
 800a000:	20000010 	.word	0x20000010
 800a004:	0800bb4d 	.word	0x0800bb4d
 800a008:	0800bb5a 	.word	0x0800bb5a
 800a00c:	0800bb88 	.word	0x0800bb88

0800a010 <fiprintf>:
 800a010:	b40e      	push	{r1, r2, r3}
 800a012:	b503      	push	{r0, r1, lr}
 800a014:	4601      	mov	r1, r0
 800a016:	ab03      	add	r3, sp, #12
 800a018:	4805      	ldr	r0, [pc, #20]	; (800a030 <fiprintf+0x20>)
 800a01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a01e:	6800      	ldr	r0, [r0, #0]
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	f000 f897 	bl	800a154 <_vfiprintf_r>
 800a026:	b002      	add	sp, #8
 800a028:	f85d eb04 	ldr.w	lr, [sp], #4
 800a02c:	b003      	add	sp, #12
 800a02e:	4770      	bx	lr
 800a030:	20000010 	.word	0x20000010

0800a034 <__ascii_mbtowc>:
 800a034:	b082      	sub	sp, #8
 800a036:	b901      	cbnz	r1, 800a03a <__ascii_mbtowc+0x6>
 800a038:	a901      	add	r1, sp, #4
 800a03a:	b142      	cbz	r2, 800a04e <__ascii_mbtowc+0x1a>
 800a03c:	b14b      	cbz	r3, 800a052 <__ascii_mbtowc+0x1e>
 800a03e:	7813      	ldrb	r3, [r2, #0]
 800a040:	600b      	str	r3, [r1, #0]
 800a042:	7812      	ldrb	r2, [r2, #0]
 800a044:	1e10      	subs	r0, r2, #0
 800a046:	bf18      	it	ne
 800a048:	2001      	movne	r0, #1
 800a04a:	b002      	add	sp, #8
 800a04c:	4770      	bx	lr
 800a04e:	4610      	mov	r0, r2
 800a050:	e7fb      	b.n	800a04a <__ascii_mbtowc+0x16>
 800a052:	f06f 0001 	mvn.w	r0, #1
 800a056:	e7f8      	b.n	800a04a <__ascii_mbtowc+0x16>

0800a058 <memmove>:
 800a058:	4288      	cmp	r0, r1
 800a05a:	b510      	push	{r4, lr}
 800a05c:	eb01 0402 	add.w	r4, r1, r2
 800a060:	d902      	bls.n	800a068 <memmove+0x10>
 800a062:	4284      	cmp	r4, r0
 800a064:	4623      	mov	r3, r4
 800a066:	d807      	bhi.n	800a078 <memmove+0x20>
 800a068:	1e43      	subs	r3, r0, #1
 800a06a:	42a1      	cmp	r1, r4
 800a06c:	d008      	beq.n	800a080 <memmove+0x28>
 800a06e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a072:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a076:	e7f8      	b.n	800a06a <memmove+0x12>
 800a078:	4402      	add	r2, r0
 800a07a:	4601      	mov	r1, r0
 800a07c:	428a      	cmp	r2, r1
 800a07e:	d100      	bne.n	800a082 <memmove+0x2a>
 800a080:	bd10      	pop	{r4, pc}
 800a082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a08a:	e7f7      	b.n	800a07c <memmove+0x24>

0800a08c <__malloc_lock>:
 800a08c:	4801      	ldr	r0, [pc, #4]	; (800a094 <__malloc_lock+0x8>)
 800a08e:	f000 bc1f 	b.w	800a8d0 <__retarget_lock_acquire_recursive>
 800a092:	bf00      	nop
 800a094:	20000800 	.word	0x20000800

0800a098 <__malloc_unlock>:
 800a098:	4801      	ldr	r0, [pc, #4]	; (800a0a0 <__malloc_unlock+0x8>)
 800a09a:	f000 bc1a 	b.w	800a8d2 <__retarget_lock_release_recursive>
 800a09e:	bf00      	nop
 800a0a0:	20000800 	.word	0x20000800

0800a0a4 <_realloc_r>:
 800a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a8:	4680      	mov	r8, r0
 800a0aa:	4614      	mov	r4, r2
 800a0ac:	460e      	mov	r6, r1
 800a0ae:	b921      	cbnz	r1, 800a0ba <_realloc_r+0x16>
 800a0b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	f7ff bdad 	b.w	8009c14 <_malloc_r>
 800a0ba:	b92a      	cbnz	r2, 800a0c8 <_realloc_r+0x24>
 800a0bc:	f7ff fd3e 	bl	8009b3c <_free_r>
 800a0c0:	4625      	mov	r5, r4
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c8:	f000 fc6a 	bl	800a9a0 <_malloc_usable_size_r>
 800a0cc:	4284      	cmp	r4, r0
 800a0ce:	4607      	mov	r7, r0
 800a0d0:	d802      	bhi.n	800a0d8 <_realloc_r+0x34>
 800a0d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0d6:	d812      	bhi.n	800a0fe <_realloc_r+0x5a>
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4640      	mov	r0, r8
 800a0dc:	f7ff fd9a 	bl	8009c14 <_malloc_r>
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d0ed      	beq.n	800a0c2 <_realloc_r+0x1e>
 800a0e6:	42bc      	cmp	r4, r7
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	bf28      	it	cs
 800a0ee:	463a      	movcs	r2, r7
 800a0f0:	f7ff f97c 	bl	80093ec <memcpy>
 800a0f4:	4631      	mov	r1, r6
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	f7ff fd20 	bl	8009b3c <_free_r>
 800a0fc:	e7e1      	b.n	800a0c2 <_realloc_r+0x1e>
 800a0fe:	4635      	mov	r5, r6
 800a100:	e7df      	b.n	800a0c2 <_realloc_r+0x1e>

0800a102 <__sfputc_r>:
 800a102:	6893      	ldr	r3, [r2, #8]
 800a104:	3b01      	subs	r3, #1
 800a106:	2b00      	cmp	r3, #0
 800a108:	b410      	push	{r4}
 800a10a:	6093      	str	r3, [r2, #8]
 800a10c:	da08      	bge.n	800a120 <__sfputc_r+0x1e>
 800a10e:	6994      	ldr	r4, [r2, #24]
 800a110:	42a3      	cmp	r3, r4
 800a112:	db01      	blt.n	800a118 <__sfputc_r+0x16>
 800a114:	290a      	cmp	r1, #10
 800a116:	d103      	bne.n	800a120 <__sfputc_r+0x1e>
 800a118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a11c:	f000 b94a 	b.w	800a3b4 <__swbuf_r>
 800a120:	6813      	ldr	r3, [r2, #0]
 800a122:	1c58      	adds	r0, r3, #1
 800a124:	6010      	str	r0, [r2, #0]
 800a126:	7019      	strb	r1, [r3, #0]
 800a128:	4608      	mov	r0, r1
 800a12a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <__sfputs_r>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	4606      	mov	r6, r0
 800a134:	460f      	mov	r7, r1
 800a136:	4614      	mov	r4, r2
 800a138:	18d5      	adds	r5, r2, r3
 800a13a:	42ac      	cmp	r4, r5
 800a13c:	d101      	bne.n	800a142 <__sfputs_r+0x12>
 800a13e:	2000      	movs	r0, #0
 800a140:	e007      	b.n	800a152 <__sfputs_r+0x22>
 800a142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a146:	463a      	mov	r2, r7
 800a148:	4630      	mov	r0, r6
 800a14a:	f7ff ffda 	bl	800a102 <__sfputc_r>
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	d1f3      	bne.n	800a13a <__sfputs_r+0xa>
 800a152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a154 <_vfiprintf_r>:
 800a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a158:	460d      	mov	r5, r1
 800a15a:	b09d      	sub	sp, #116	; 0x74
 800a15c:	4614      	mov	r4, r2
 800a15e:	4698      	mov	r8, r3
 800a160:	4606      	mov	r6, r0
 800a162:	b118      	cbz	r0, 800a16c <_vfiprintf_r+0x18>
 800a164:	6983      	ldr	r3, [r0, #24]
 800a166:	b90b      	cbnz	r3, 800a16c <_vfiprintf_r+0x18>
 800a168:	f000 fb14 	bl	800a794 <__sinit>
 800a16c:	4b89      	ldr	r3, [pc, #548]	; (800a394 <_vfiprintf_r+0x240>)
 800a16e:	429d      	cmp	r5, r3
 800a170:	d11b      	bne.n	800a1aa <_vfiprintf_r+0x56>
 800a172:	6875      	ldr	r5, [r6, #4]
 800a174:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a176:	07d9      	lsls	r1, r3, #31
 800a178:	d405      	bmi.n	800a186 <_vfiprintf_r+0x32>
 800a17a:	89ab      	ldrh	r3, [r5, #12]
 800a17c:	059a      	lsls	r2, r3, #22
 800a17e:	d402      	bmi.n	800a186 <_vfiprintf_r+0x32>
 800a180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a182:	f000 fba5 	bl	800a8d0 <__retarget_lock_acquire_recursive>
 800a186:	89ab      	ldrh	r3, [r5, #12]
 800a188:	071b      	lsls	r3, r3, #28
 800a18a:	d501      	bpl.n	800a190 <_vfiprintf_r+0x3c>
 800a18c:	692b      	ldr	r3, [r5, #16]
 800a18e:	b9eb      	cbnz	r3, 800a1cc <_vfiprintf_r+0x78>
 800a190:	4629      	mov	r1, r5
 800a192:	4630      	mov	r0, r6
 800a194:	f000 f96e 	bl	800a474 <__swsetup_r>
 800a198:	b1c0      	cbz	r0, 800a1cc <_vfiprintf_r+0x78>
 800a19a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a19c:	07dc      	lsls	r4, r3, #31
 800a19e:	d50e      	bpl.n	800a1be <_vfiprintf_r+0x6a>
 800a1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a4:	b01d      	add	sp, #116	; 0x74
 800a1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1aa:	4b7b      	ldr	r3, [pc, #492]	; (800a398 <_vfiprintf_r+0x244>)
 800a1ac:	429d      	cmp	r5, r3
 800a1ae:	d101      	bne.n	800a1b4 <_vfiprintf_r+0x60>
 800a1b0:	68b5      	ldr	r5, [r6, #8]
 800a1b2:	e7df      	b.n	800a174 <_vfiprintf_r+0x20>
 800a1b4:	4b79      	ldr	r3, [pc, #484]	; (800a39c <_vfiprintf_r+0x248>)
 800a1b6:	429d      	cmp	r5, r3
 800a1b8:	bf08      	it	eq
 800a1ba:	68f5      	ldreq	r5, [r6, #12]
 800a1bc:	e7da      	b.n	800a174 <_vfiprintf_r+0x20>
 800a1be:	89ab      	ldrh	r3, [r5, #12]
 800a1c0:	0598      	lsls	r0, r3, #22
 800a1c2:	d4ed      	bmi.n	800a1a0 <_vfiprintf_r+0x4c>
 800a1c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1c6:	f000 fb84 	bl	800a8d2 <__retarget_lock_release_recursive>
 800a1ca:	e7e9      	b.n	800a1a0 <_vfiprintf_r+0x4c>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d0:	2320      	movs	r3, #32
 800a1d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1da:	2330      	movs	r3, #48	; 0x30
 800a1dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a3a0 <_vfiprintf_r+0x24c>
 800a1e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1e4:	f04f 0901 	mov.w	r9, #1
 800a1e8:	4623      	mov	r3, r4
 800a1ea:	469a      	mov	sl, r3
 800a1ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1f0:	b10a      	cbz	r2, 800a1f6 <_vfiprintf_r+0xa2>
 800a1f2:	2a25      	cmp	r2, #37	; 0x25
 800a1f4:	d1f9      	bne.n	800a1ea <_vfiprintf_r+0x96>
 800a1f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a1fa:	d00b      	beq.n	800a214 <_vfiprintf_r+0xc0>
 800a1fc:	465b      	mov	r3, fp
 800a1fe:	4622      	mov	r2, r4
 800a200:	4629      	mov	r1, r5
 800a202:	4630      	mov	r0, r6
 800a204:	f7ff ff94 	bl	800a130 <__sfputs_r>
 800a208:	3001      	adds	r0, #1
 800a20a:	f000 80aa 	beq.w	800a362 <_vfiprintf_r+0x20e>
 800a20e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a210:	445a      	add	r2, fp
 800a212:	9209      	str	r2, [sp, #36]	; 0x24
 800a214:	f89a 3000 	ldrb.w	r3, [sl]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 80a2 	beq.w	800a362 <_vfiprintf_r+0x20e>
 800a21e:	2300      	movs	r3, #0
 800a220:	f04f 32ff 	mov.w	r2, #4294967295
 800a224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a228:	f10a 0a01 	add.w	sl, sl, #1
 800a22c:	9304      	str	r3, [sp, #16]
 800a22e:	9307      	str	r3, [sp, #28]
 800a230:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a234:	931a      	str	r3, [sp, #104]	; 0x68
 800a236:	4654      	mov	r4, sl
 800a238:	2205      	movs	r2, #5
 800a23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23e:	4858      	ldr	r0, [pc, #352]	; (800a3a0 <_vfiprintf_r+0x24c>)
 800a240:	f7f5 ffce 	bl	80001e0 <memchr>
 800a244:	9a04      	ldr	r2, [sp, #16]
 800a246:	b9d8      	cbnz	r0, 800a280 <_vfiprintf_r+0x12c>
 800a248:	06d1      	lsls	r1, r2, #27
 800a24a:	bf44      	itt	mi
 800a24c:	2320      	movmi	r3, #32
 800a24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a252:	0713      	lsls	r3, r2, #28
 800a254:	bf44      	itt	mi
 800a256:	232b      	movmi	r3, #43	; 0x2b
 800a258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a25c:	f89a 3000 	ldrb.w	r3, [sl]
 800a260:	2b2a      	cmp	r3, #42	; 0x2a
 800a262:	d015      	beq.n	800a290 <_vfiprintf_r+0x13c>
 800a264:	9a07      	ldr	r2, [sp, #28]
 800a266:	4654      	mov	r4, sl
 800a268:	2000      	movs	r0, #0
 800a26a:	f04f 0c0a 	mov.w	ip, #10
 800a26e:	4621      	mov	r1, r4
 800a270:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a274:	3b30      	subs	r3, #48	; 0x30
 800a276:	2b09      	cmp	r3, #9
 800a278:	d94e      	bls.n	800a318 <_vfiprintf_r+0x1c4>
 800a27a:	b1b0      	cbz	r0, 800a2aa <_vfiprintf_r+0x156>
 800a27c:	9207      	str	r2, [sp, #28]
 800a27e:	e014      	b.n	800a2aa <_vfiprintf_r+0x156>
 800a280:	eba0 0308 	sub.w	r3, r0, r8
 800a284:	fa09 f303 	lsl.w	r3, r9, r3
 800a288:	4313      	orrs	r3, r2
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	46a2      	mov	sl, r4
 800a28e:	e7d2      	b.n	800a236 <_vfiprintf_r+0xe2>
 800a290:	9b03      	ldr	r3, [sp, #12]
 800a292:	1d19      	adds	r1, r3, #4
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	9103      	str	r1, [sp, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	bfbb      	ittet	lt
 800a29c:	425b      	neglt	r3, r3
 800a29e:	f042 0202 	orrlt.w	r2, r2, #2
 800a2a2:	9307      	strge	r3, [sp, #28]
 800a2a4:	9307      	strlt	r3, [sp, #28]
 800a2a6:	bfb8      	it	lt
 800a2a8:	9204      	strlt	r2, [sp, #16]
 800a2aa:	7823      	ldrb	r3, [r4, #0]
 800a2ac:	2b2e      	cmp	r3, #46	; 0x2e
 800a2ae:	d10c      	bne.n	800a2ca <_vfiprintf_r+0x176>
 800a2b0:	7863      	ldrb	r3, [r4, #1]
 800a2b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2b4:	d135      	bne.n	800a322 <_vfiprintf_r+0x1ce>
 800a2b6:	9b03      	ldr	r3, [sp, #12]
 800a2b8:	1d1a      	adds	r2, r3, #4
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	9203      	str	r2, [sp, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	bfb8      	it	lt
 800a2c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2c6:	3402      	adds	r4, #2
 800a2c8:	9305      	str	r3, [sp, #20]
 800a2ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3b0 <_vfiprintf_r+0x25c>
 800a2ce:	7821      	ldrb	r1, [r4, #0]
 800a2d0:	2203      	movs	r2, #3
 800a2d2:	4650      	mov	r0, sl
 800a2d4:	f7f5 ff84 	bl	80001e0 <memchr>
 800a2d8:	b140      	cbz	r0, 800a2ec <_vfiprintf_r+0x198>
 800a2da:	2340      	movs	r3, #64	; 0x40
 800a2dc:	eba0 000a 	sub.w	r0, r0, sl
 800a2e0:	fa03 f000 	lsl.w	r0, r3, r0
 800a2e4:	9b04      	ldr	r3, [sp, #16]
 800a2e6:	4303      	orrs	r3, r0
 800a2e8:	3401      	adds	r4, #1
 800a2ea:	9304      	str	r3, [sp, #16]
 800a2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f0:	482c      	ldr	r0, [pc, #176]	; (800a3a4 <_vfiprintf_r+0x250>)
 800a2f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2f6:	2206      	movs	r2, #6
 800a2f8:	f7f5 ff72 	bl	80001e0 <memchr>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d03f      	beq.n	800a380 <_vfiprintf_r+0x22c>
 800a300:	4b29      	ldr	r3, [pc, #164]	; (800a3a8 <_vfiprintf_r+0x254>)
 800a302:	bb1b      	cbnz	r3, 800a34c <_vfiprintf_r+0x1f8>
 800a304:	9b03      	ldr	r3, [sp, #12]
 800a306:	3307      	adds	r3, #7
 800a308:	f023 0307 	bic.w	r3, r3, #7
 800a30c:	3308      	adds	r3, #8
 800a30e:	9303      	str	r3, [sp, #12]
 800a310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a312:	443b      	add	r3, r7
 800a314:	9309      	str	r3, [sp, #36]	; 0x24
 800a316:	e767      	b.n	800a1e8 <_vfiprintf_r+0x94>
 800a318:	fb0c 3202 	mla	r2, ip, r2, r3
 800a31c:	460c      	mov	r4, r1
 800a31e:	2001      	movs	r0, #1
 800a320:	e7a5      	b.n	800a26e <_vfiprintf_r+0x11a>
 800a322:	2300      	movs	r3, #0
 800a324:	3401      	adds	r4, #1
 800a326:	9305      	str	r3, [sp, #20]
 800a328:	4619      	mov	r1, r3
 800a32a:	f04f 0c0a 	mov.w	ip, #10
 800a32e:	4620      	mov	r0, r4
 800a330:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a334:	3a30      	subs	r2, #48	; 0x30
 800a336:	2a09      	cmp	r2, #9
 800a338:	d903      	bls.n	800a342 <_vfiprintf_r+0x1ee>
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0c5      	beq.n	800a2ca <_vfiprintf_r+0x176>
 800a33e:	9105      	str	r1, [sp, #20]
 800a340:	e7c3      	b.n	800a2ca <_vfiprintf_r+0x176>
 800a342:	fb0c 2101 	mla	r1, ip, r1, r2
 800a346:	4604      	mov	r4, r0
 800a348:	2301      	movs	r3, #1
 800a34a:	e7f0      	b.n	800a32e <_vfiprintf_r+0x1da>
 800a34c:	ab03      	add	r3, sp, #12
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	462a      	mov	r2, r5
 800a352:	4b16      	ldr	r3, [pc, #88]	; (800a3ac <_vfiprintf_r+0x258>)
 800a354:	a904      	add	r1, sp, #16
 800a356:	4630      	mov	r0, r6
 800a358:	f7fd fdd6 	bl	8007f08 <_printf_float>
 800a35c:	4607      	mov	r7, r0
 800a35e:	1c78      	adds	r0, r7, #1
 800a360:	d1d6      	bne.n	800a310 <_vfiprintf_r+0x1bc>
 800a362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a364:	07d9      	lsls	r1, r3, #31
 800a366:	d405      	bmi.n	800a374 <_vfiprintf_r+0x220>
 800a368:	89ab      	ldrh	r3, [r5, #12]
 800a36a:	059a      	lsls	r2, r3, #22
 800a36c:	d402      	bmi.n	800a374 <_vfiprintf_r+0x220>
 800a36e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a370:	f000 faaf 	bl	800a8d2 <__retarget_lock_release_recursive>
 800a374:	89ab      	ldrh	r3, [r5, #12]
 800a376:	065b      	lsls	r3, r3, #25
 800a378:	f53f af12 	bmi.w	800a1a0 <_vfiprintf_r+0x4c>
 800a37c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a37e:	e711      	b.n	800a1a4 <_vfiprintf_r+0x50>
 800a380:	ab03      	add	r3, sp, #12
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	462a      	mov	r2, r5
 800a386:	4b09      	ldr	r3, [pc, #36]	; (800a3ac <_vfiprintf_r+0x258>)
 800a388:	a904      	add	r1, sp, #16
 800a38a:	4630      	mov	r0, r6
 800a38c:	f7fe f860 	bl	8008450 <_printf_i>
 800a390:	e7e4      	b.n	800a35c <_vfiprintf_r+0x208>
 800a392:	bf00      	nop
 800a394:	0800bcb4 	.word	0x0800bcb4
 800a398:	0800bcd4 	.word	0x0800bcd4
 800a39c:	0800bc94 	.word	0x0800bc94
 800a3a0:	0800bb3c 	.word	0x0800bb3c
 800a3a4:	0800bb46 	.word	0x0800bb46
 800a3a8:	08007f09 	.word	0x08007f09
 800a3ac:	0800a131 	.word	0x0800a131
 800a3b0:	0800bb42 	.word	0x0800bb42

0800a3b4 <__swbuf_r>:
 800a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b6:	460e      	mov	r6, r1
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	4605      	mov	r5, r0
 800a3bc:	b118      	cbz	r0, 800a3c6 <__swbuf_r+0x12>
 800a3be:	6983      	ldr	r3, [r0, #24]
 800a3c0:	b90b      	cbnz	r3, 800a3c6 <__swbuf_r+0x12>
 800a3c2:	f000 f9e7 	bl	800a794 <__sinit>
 800a3c6:	4b21      	ldr	r3, [pc, #132]	; (800a44c <__swbuf_r+0x98>)
 800a3c8:	429c      	cmp	r4, r3
 800a3ca:	d12b      	bne.n	800a424 <__swbuf_r+0x70>
 800a3cc:	686c      	ldr	r4, [r5, #4]
 800a3ce:	69a3      	ldr	r3, [r4, #24]
 800a3d0:	60a3      	str	r3, [r4, #8]
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	071a      	lsls	r2, r3, #28
 800a3d6:	d52f      	bpl.n	800a438 <__swbuf_r+0x84>
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	b36b      	cbz	r3, 800a438 <__swbuf_r+0x84>
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	6820      	ldr	r0, [r4, #0]
 800a3e0:	1ac0      	subs	r0, r0, r3
 800a3e2:	6963      	ldr	r3, [r4, #20]
 800a3e4:	b2f6      	uxtb	r6, r6
 800a3e6:	4283      	cmp	r3, r0
 800a3e8:	4637      	mov	r7, r6
 800a3ea:	dc04      	bgt.n	800a3f6 <__swbuf_r+0x42>
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f000 f93c 	bl	800a66c <_fflush_r>
 800a3f4:	bb30      	cbnz	r0, 800a444 <__swbuf_r+0x90>
 800a3f6:	68a3      	ldr	r3, [r4, #8]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	60a3      	str	r3, [r4, #8]
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	6022      	str	r2, [r4, #0]
 800a402:	701e      	strb	r6, [r3, #0]
 800a404:	6963      	ldr	r3, [r4, #20]
 800a406:	3001      	adds	r0, #1
 800a408:	4283      	cmp	r3, r0
 800a40a:	d004      	beq.n	800a416 <__swbuf_r+0x62>
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	07db      	lsls	r3, r3, #31
 800a410:	d506      	bpl.n	800a420 <__swbuf_r+0x6c>
 800a412:	2e0a      	cmp	r6, #10
 800a414:	d104      	bne.n	800a420 <__swbuf_r+0x6c>
 800a416:	4621      	mov	r1, r4
 800a418:	4628      	mov	r0, r5
 800a41a:	f000 f927 	bl	800a66c <_fflush_r>
 800a41e:	b988      	cbnz	r0, 800a444 <__swbuf_r+0x90>
 800a420:	4638      	mov	r0, r7
 800a422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a424:	4b0a      	ldr	r3, [pc, #40]	; (800a450 <__swbuf_r+0x9c>)
 800a426:	429c      	cmp	r4, r3
 800a428:	d101      	bne.n	800a42e <__swbuf_r+0x7a>
 800a42a:	68ac      	ldr	r4, [r5, #8]
 800a42c:	e7cf      	b.n	800a3ce <__swbuf_r+0x1a>
 800a42e:	4b09      	ldr	r3, [pc, #36]	; (800a454 <__swbuf_r+0xa0>)
 800a430:	429c      	cmp	r4, r3
 800a432:	bf08      	it	eq
 800a434:	68ec      	ldreq	r4, [r5, #12]
 800a436:	e7ca      	b.n	800a3ce <__swbuf_r+0x1a>
 800a438:	4621      	mov	r1, r4
 800a43a:	4628      	mov	r0, r5
 800a43c:	f000 f81a 	bl	800a474 <__swsetup_r>
 800a440:	2800      	cmp	r0, #0
 800a442:	d0cb      	beq.n	800a3dc <__swbuf_r+0x28>
 800a444:	f04f 37ff 	mov.w	r7, #4294967295
 800a448:	e7ea      	b.n	800a420 <__swbuf_r+0x6c>
 800a44a:	bf00      	nop
 800a44c:	0800bcb4 	.word	0x0800bcb4
 800a450:	0800bcd4 	.word	0x0800bcd4
 800a454:	0800bc94 	.word	0x0800bc94

0800a458 <__ascii_wctomb>:
 800a458:	b149      	cbz	r1, 800a46e <__ascii_wctomb+0x16>
 800a45a:	2aff      	cmp	r2, #255	; 0xff
 800a45c:	bf85      	ittet	hi
 800a45e:	238a      	movhi	r3, #138	; 0x8a
 800a460:	6003      	strhi	r3, [r0, #0]
 800a462:	700a      	strbls	r2, [r1, #0]
 800a464:	f04f 30ff 	movhi.w	r0, #4294967295
 800a468:	bf98      	it	ls
 800a46a:	2001      	movls	r0, #1
 800a46c:	4770      	bx	lr
 800a46e:	4608      	mov	r0, r1
 800a470:	4770      	bx	lr
	...

0800a474 <__swsetup_r>:
 800a474:	4b32      	ldr	r3, [pc, #200]	; (800a540 <__swsetup_r+0xcc>)
 800a476:	b570      	push	{r4, r5, r6, lr}
 800a478:	681d      	ldr	r5, [r3, #0]
 800a47a:	4606      	mov	r6, r0
 800a47c:	460c      	mov	r4, r1
 800a47e:	b125      	cbz	r5, 800a48a <__swsetup_r+0x16>
 800a480:	69ab      	ldr	r3, [r5, #24]
 800a482:	b913      	cbnz	r3, 800a48a <__swsetup_r+0x16>
 800a484:	4628      	mov	r0, r5
 800a486:	f000 f985 	bl	800a794 <__sinit>
 800a48a:	4b2e      	ldr	r3, [pc, #184]	; (800a544 <__swsetup_r+0xd0>)
 800a48c:	429c      	cmp	r4, r3
 800a48e:	d10f      	bne.n	800a4b0 <__swsetup_r+0x3c>
 800a490:	686c      	ldr	r4, [r5, #4]
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a498:	0719      	lsls	r1, r3, #28
 800a49a:	d42c      	bmi.n	800a4f6 <__swsetup_r+0x82>
 800a49c:	06dd      	lsls	r5, r3, #27
 800a49e:	d411      	bmi.n	800a4c4 <__swsetup_r+0x50>
 800a4a0:	2309      	movs	r3, #9
 800a4a2:	6033      	str	r3, [r6, #0]
 800a4a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4a8:	81a3      	strh	r3, [r4, #12]
 800a4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ae:	e03e      	b.n	800a52e <__swsetup_r+0xba>
 800a4b0:	4b25      	ldr	r3, [pc, #148]	; (800a548 <__swsetup_r+0xd4>)
 800a4b2:	429c      	cmp	r4, r3
 800a4b4:	d101      	bne.n	800a4ba <__swsetup_r+0x46>
 800a4b6:	68ac      	ldr	r4, [r5, #8]
 800a4b8:	e7eb      	b.n	800a492 <__swsetup_r+0x1e>
 800a4ba:	4b24      	ldr	r3, [pc, #144]	; (800a54c <__swsetup_r+0xd8>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	bf08      	it	eq
 800a4c0:	68ec      	ldreq	r4, [r5, #12]
 800a4c2:	e7e6      	b.n	800a492 <__swsetup_r+0x1e>
 800a4c4:	0758      	lsls	r0, r3, #29
 800a4c6:	d512      	bpl.n	800a4ee <__swsetup_r+0x7a>
 800a4c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ca:	b141      	cbz	r1, 800a4de <__swsetup_r+0x6a>
 800a4cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4d0:	4299      	cmp	r1, r3
 800a4d2:	d002      	beq.n	800a4da <__swsetup_r+0x66>
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f7ff fb31 	bl	8009b3c <_free_r>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4e4:	81a3      	strh	r3, [r4, #12]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	6063      	str	r3, [r4, #4]
 800a4ea:	6923      	ldr	r3, [r4, #16]
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	f043 0308 	orr.w	r3, r3, #8
 800a4f4:	81a3      	strh	r3, [r4, #12]
 800a4f6:	6923      	ldr	r3, [r4, #16]
 800a4f8:	b94b      	cbnz	r3, 800a50e <__swsetup_r+0x9a>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a504:	d003      	beq.n	800a50e <__swsetup_r+0x9a>
 800a506:	4621      	mov	r1, r4
 800a508:	4630      	mov	r0, r6
 800a50a:	f000 fa09 	bl	800a920 <__smakebuf_r>
 800a50e:	89a0      	ldrh	r0, [r4, #12]
 800a510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a514:	f010 0301 	ands.w	r3, r0, #1
 800a518:	d00a      	beq.n	800a530 <__swsetup_r+0xbc>
 800a51a:	2300      	movs	r3, #0
 800a51c:	60a3      	str	r3, [r4, #8]
 800a51e:	6963      	ldr	r3, [r4, #20]
 800a520:	425b      	negs	r3, r3
 800a522:	61a3      	str	r3, [r4, #24]
 800a524:	6923      	ldr	r3, [r4, #16]
 800a526:	b943      	cbnz	r3, 800a53a <__swsetup_r+0xc6>
 800a528:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a52c:	d1ba      	bne.n	800a4a4 <__swsetup_r+0x30>
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	0781      	lsls	r1, r0, #30
 800a532:	bf58      	it	pl
 800a534:	6963      	ldrpl	r3, [r4, #20]
 800a536:	60a3      	str	r3, [r4, #8]
 800a538:	e7f4      	b.n	800a524 <__swsetup_r+0xb0>
 800a53a:	2000      	movs	r0, #0
 800a53c:	e7f7      	b.n	800a52e <__swsetup_r+0xba>
 800a53e:	bf00      	nop
 800a540:	20000010 	.word	0x20000010
 800a544:	0800bcb4 	.word	0x0800bcb4
 800a548:	0800bcd4 	.word	0x0800bcd4
 800a54c:	0800bc94 	.word	0x0800bc94

0800a550 <abort>:
 800a550:	b508      	push	{r3, lr}
 800a552:	2006      	movs	r0, #6
 800a554:	f000 fa54 	bl	800aa00 <raise>
 800a558:	2001      	movs	r0, #1
 800a55a:	f7f7 f89b 	bl	8001694 <_exit>
	...

0800a560 <__sflush_r>:
 800a560:	898a      	ldrh	r2, [r1, #12]
 800a562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a566:	4605      	mov	r5, r0
 800a568:	0710      	lsls	r0, r2, #28
 800a56a:	460c      	mov	r4, r1
 800a56c:	d458      	bmi.n	800a620 <__sflush_r+0xc0>
 800a56e:	684b      	ldr	r3, [r1, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	dc05      	bgt.n	800a580 <__sflush_r+0x20>
 800a574:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	dc02      	bgt.n	800a580 <__sflush_r+0x20>
 800a57a:	2000      	movs	r0, #0
 800a57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a582:	2e00      	cmp	r6, #0
 800a584:	d0f9      	beq.n	800a57a <__sflush_r+0x1a>
 800a586:	2300      	movs	r3, #0
 800a588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a58c:	682f      	ldr	r7, [r5, #0]
 800a58e:	602b      	str	r3, [r5, #0]
 800a590:	d032      	beq.n	800a5f8 <__sflush_r+0x98>
 800a592:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	075a      	lsls	r2, r3, #29
 800a598:	d505      	bpl.n	800a5a6 <__sflush_r+0x46>
 800a59a:	6863      	ldr	r3, [r4, #4]
 800a59c:	1ac0      	subs	r0, r0, r3
 800a59e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5a0:	b10b      	cbz	r3, 800a5a6 <__sflush_r+0x46>
 800a5a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5a4:	1ac0      	subs	r0, r0, r3
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5ac:	6a21      	ldr	r1, [r4, #32]
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	47b0      	blx	r6
 800a5b2:	1c43      	adds	r3, r0, #1
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	d106      	bne.n	800a5c6 <__sflush_r+0x66>
 800a5b8:	6829      	ldr	r1, [r5, #0]
 800a5ba:	291d      	cmp	r1, #29
 800a5bc:	d82c      	bhi.n	800a618 <__sflush_r+0xb8>
 800a5be:	4a2a      	ldr	r2, [pc, #168]	; (800a668 <__sflush_r+0x108>)
 800a5c0:	40ca      	lsrs	r2, r1
 800a5c2:	07d6      	lsls	r6, r2, #31
 800a5c4:	d528      	bpl.n	800a618 <__sflush_r+0xb8>
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	6062      	str	r2, [r4, #4]
 800a5ca:	04d9      	lsls	r1, r3, #19
 800a5cc:	6922      	ldr	r2, [r4, #16]
 800a5ce:	6022      	str	r2, [r4, #0]
 800a5d0:	d504      	bpl.n	800a5dc <__sflush_r+0x7c>
 800a5d2:	1c42      	adds	r2, r0, #1
 800a5d4:	d101      	bne.n	800a5da <__sflush_r+0x7a>
 800a5d6:	682b      	ldr	r3, [r5, #0]
 800a5d8:	b903      	cbnz	r3, 800a5dc <__sflush_r+0x7c>
 800a5da:	6560      	str	r0, [r4, #84]	; 0x54
 800a5dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5de:	602f      	str	r7, [r5, #0]
 800a5e0:	2900      	cmp	r1, #0
 800a5e2:	d0ca      	beq.n	800a57a <__sflush_r+0x1a>
 800a5e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e8:	4299      	cmp	r1, r3
 800a5ea:	d002      	beq.n	800a5f2 <__sflush_r+0x92>
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	f7ff faa5 	bl	8009b3c <_free_r>
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	6360      	str	r0, [r4, #52]	; 0x34
 800a5f6:	e7c1      	b.n	800a57c <__sflush_r+0x1c>
 800a5f8:	6a21      	ldr	r1, [r4, #32]
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	47b0      	blx	r6
 800a600:	1c41      	adds	r1, r0, #1
 800a602:	d1c7      	bne.n	800a594 <__sflush_r+0x34>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0c4      	beq.n	800a594 <__sflush_r+0x34>
 800a60a:	2b1d      	cmp	r3, #29
 800a60c:	d001      	beq.n	800a612 <__sflush_r+0xb2>
 800a60e:	2b16      	cmp	r3, #22
 800a610:	d101      	bne.n	800a616 <__sflush_r+0xb6>
 800a612:	602f      	str	r7, [r5, #0]
 800a614:	e7b1      	b.n	800a57a <__sflush_r+0x1a>
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a61c:	81a3      	strh	r3, [r4, #12]
 800a61e:	e7ad      	b.n	800a57c <__sflush_r+0x1c>
 800a620:	690f      	ldr	r7, [r1, #16]
 800a622:	2f00      	cmp	r7, #0
 800a624:	d0a9      	beq.n	800a57a <__sflush_r+0x1a>
 800a626:	0793      	lsls	r3, r2, #30
 800a628:	680e      	ldr	r6, [r1, #0]
 800a62a:	bf08      	it	eq
 800a62c:	694b      	ldreq	r3, [r1, #20]
 800a62e:	600f      	str	r7, [r1, #0]
 800a630:	bf18      	it	ne
 800a632:	2300      	movne	r3, #0
 800a634:	eba6 0807 	sub.w	r8, r6, r7
 800a638:	608b      	str	r3, [r1, #8]
 800a63a:	f1b8 0f00 	cmp.w	r8, #0
 800a63e:	dd9c      	ble.n	800a57a <__sflush_r+0x1a>
 800a640:	6a21      	ldr	r1, [r4, #32]
 800a642:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a644:	4643      	mov	r3, r8
 800a646:	463a      	mov	r2, r7
 800a648:	4628      	mov	r0, r5
 800a64a:	47b0      	blx	r6
 800a64c:	2800      	cmp	r0, #0
 800a64e:	dc06      	bgt.n	800a65e <__sflush_r+0xfe>
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	f04f 30ff 	mov.w	r0, #4294967295
 800a65c:	e78e      	b.n	800a57c <__sflush_r+0x1c>
 800a65e:	4407      	add	r7, r0
 800a660:	eba8 0800 	sub.w	r8, r8, r0
 800a664:	e7e9      	b.n	800a63a <__sflush_r+0xda>
 800a666:	bf00      	nop
 800a668:	20400001 	.word	0x20400001

0800a66c <_fflush_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	690b      	ldr	r3, [r1, #16]
 800a670:	4605      	mov	r5, r0
 800a672:	460c      	mov	r4, r1
 800a674:	b913      	cbnz	r3, 800a67c <_fflush_r+0x10>
 800a676:	2500      	movs	r5, #0
 800a678:	4628      	mov	r0, r5
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	b118      	cbz	r0, 800a686 <_fflush_r+0x1a>
 800a67e:	6983      	ldr	r3, [r0, #24]
 800a680:	b90b      	cbnz	r3, 800a686 <_fflush_r+0x1a>
 800a682:	f000 f887 	bl	800a794 <__sinit>
 800a686:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <_fflush_r+0x6c>)
 800a688:	429c      	cmp	r4, r3
 800a68a:	d11b      	bne.n	800a6c4 <_fflush_r+0x58>
 800a68c:	686c      	ldr	r4, [r5, #4]
 800a68e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d0ef      	beq.n	800a676 <_fflush_r+0xa>
 800a696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a698:	07d0      	lsls	r0, r2, #31
 800a69a:	d404      	bmi.n	800a6a6 <_fflush_r+0x3a>
 800a69c:	0599      	lsls	r1, r3, #22
 800a69e:	d402      	bmi.n	800a6a6 <_fflush_r+0x3a>
 800a6a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6a2:	f000 f915 	bl	800a8d0 <__retarget_lock_acquire_recursive>
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	4621      	mov	r1, r4
 800a6aa:	f7ff ff59 	bl	800a560 <__sflush_r>
 800a6ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6b0:	07da      	lsls	r2, r3, #31
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	d4e0      	bmi.n	800a678 <_fflush_r+0xc>
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	059b      	lsls	r3, r3, #22
 800a6ba:	d4dd      	bmi.n	800a678 <_fflush_r+0xc>
 800a6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6be:	f000 f908 	bl	800a8d2 <__retarget_lock_release_recursive>
 800a6c2:	e7d9      	b.n	800a678 <_fflush_r+0xc>
 800a6c4:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <_fflush_r+0x70>)
 800a6c6:	429c      	cmp	r4, r3
 800a6c8:	d101      	bne.n	800a6ce <_fflush_r+0x62>
 800a6ca:	68ac      	ldr	r4, [r5, #8]
 800a6cc:	e7df      	b.n	800a68e <_fflush_r+0x22>
 800a6ce:	4b04      	ldr	r3, [pc, #16]	; (800a6e0 <_fflush_r+0x74>)
 800a6d0:	429c      	cmp	r4, r3
 800a6d2:	bf08      	it	eq
 800a6d4:	68ec      	ldreq	r4, [r5, #12]
 800a6d6:	e7da      	b.n	800a68e <_fflush_r+0x22>
 800a6d8:	0800bcb4 	.word	0x0800bcb4
 800a6dc:	0800bcd4 	.word	0x0800bcd4
 800a6e0:	0800bc94 	.word	0x0800bc94

0800a6e4 <std>:
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	b510      	push	{r4, lr}
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	e9c0 3300 	strd	r3, r3, [r0]
 800a6ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6f2:	6083      	str	r3, [r0, #8]
 800a6f4:	8181      	strh	r1, [r0, #12]
 800a6f6:	6643      	str	r3, [r0, #100]	; 0x64
 800a6f8:	81c2      	strh	r2, [r0, #14]
 800a6fa:	6183      	str	r3, [r0, #24]
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	2208      	movs	r2, #8
 800a700:	305c      	adds	r0, #92	; 0x5c
 800a702:	f7fd fb59 	bl	8007db8 <memset>
 800a706:	4b05      	ldr	r3, [pc, #20]	; (800a71c <std+0x38>)
 800a708:	6263      	str	r3, [r4, #36]	; 0x24
 800a70a:	4b05      	ldr	r3, [pc, #20]	; (800a720 <std+0x3c>)
 800a70c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a70e:	4b05      	ldr	r3, [pc, #20]	; (800a724 <std+0x40>)
 800a710:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a712:	4b05      	ldr	r3, [pc, #20]	; (800a728 <std+0x44>)
 800a714:	6224      	str	r4, [r4, #32]
 800a716:	6323      	str	r3, [r4, #48]	; 0x30
 800a718:	bd10      	pop	{r4, pc}
 800a71a:	bf00      	nop
 800a71c:	0800aa39 	.word	0x0800aa39
 800a720:	0800aa5b 	.word	0x0800aa5b
 800a724:	0800aa93 	.word	0x0800aa93
 800a728:	0800aab7 	.word	0x0800aab7

0800a72c <_cleanup_r>:
 800a72c:	4901      	ldr	r1, [pc, #4]	; (800a734 <_cleanup_r+0x8>)
 800a72e:	f000 b8af 	b.w	800a890 <_fwalk_reent>
 800a732:	bf00      	nop
 800a734:	0800a66d 	.word	0x0800a66d

0800a738 <__sfmoreglue>:
 800a738:	b570      	push	{r4, r5, r6, lr}
 800a73a:	2268      	movs	r2, #104	; 0x68
 800a73c:	1e4d      	subs	r5, r1, #1
 800a73e:	4355      	muls	r5, r2
 800a740:	460e      	mov	r6, r1
 800a742:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a746:	f7ff fa65 	bl	8009c14 <_malloc_r>
 800a74a:	4604      	mov	r4, r0
 800a74c:	b140      	cbz	r0, 800a760 <__sfmoreglue+0x28>
 800a74e:	2100      	movs	r1, #0
 800a750:	e9c0 1600 	strd	r1, r6, [r0]
 800a754:	300c      	adds	r0, #12
 800a756:	60a0      	str	r0, [r4, #8]
 800a758:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a75c:	f7fd fb2c 	bl	8007db8 <memset>
 800a760:	4620      	mov	r0, r4
 800a762:	bd70      	pop	{r4, r5, r6, pc}

0800a764 <__sfp_lock_acquire>:
 800a764:	4801      	ldr	r0, [pc, #4]	; (800a76c <__sfp_lock_acquire+0x8>)
 800a766:	f000 b8b3 	b.w	800a8d0 <__retarget_lock_acquire_recursive>
 800a76a:	bf00      	nop
 800a76c:	20000801 	.word	0x20000801

0800a770 <__sfp_lock_release>:
 800a770:	4801      	ldr	r0, [pc, #4]	; (800a778 <__sfp_lock_release+0x8>)
 800a772:	f000 b8ae 	b.w	800a8d2 <__retarget_lock_release_recursive>
 800a776:	bf00      	nop
 800a778:	20000801 	.word	0x20000801

0800a77c <__sinit_lock_acquire>:
 800a77c:	4801      	ldr	r0, [pc, #4]	; (800a784 <__sinit_lock_acquire+0x8>)
 800a77e:	f000 b8a7 	b.w	800a8d0 <__retarget_lock_acquire_recursive>
 800a782:	bf00      	nop
 800a784:	20000802 	.word	0x20000802

0800a788 <__sinit_lock_release>:
 800a788:	4801      	ldr	r0, [pc, #4]	; (800a790 <__sinit_lock_release+0x8>)
 800a78a:	f000 b8a2 	b.w	800a8d2 <__retarget_lock_release_recursive>
 800a78e:	bf00      	nop
 800a790:	20000802 	.word	0x20000802

0800a794 <__sinit>:
 800a794:	b510      	push	{r4, lr}
 800a796:	4604      	mov	r4, r0
 800a798:	f7ff fff0 	bl	800a77c <__sinit_lock_acquire>
 800a79c:	69a3      	ldr	r3, [r4, #24]
 800a79e:	b11b      	cbz	r3, 800a7a8 <__sinit+0x14>
 800a7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a4:	f7ff bff0 	b.w	800a788 <__sinit_lock_release>
 800a7a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7ac:	6523      	str	r3, [r4, #80]	; 0x50
 800a7ae:	4b13      	ldr	r3, [pc, #76]	; (800a7fc <__sinit+0x68>)
 800a7b0:	4a13      	ldr	r2, [pc, #76]	; (800a800 <__sinit+0x6c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7b6:	42a3      	cmp	r3, r4
 800a7b8:	bf04      	itt	eq
 800a7ba:	2301      	moveq	r3, #1
 800a7bc:	61a3      	streq	r3, [r4, #24]
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f000 f820 	bl	800a804 <__sfp>
 800a7c4:	6060      	str	r0, [r4, #4]
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f000 f81c 	bl	800a804 <__sfp>
 800a7cc:	60a0      	str	r0, [r4, #8]
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 f818 	bl	800a804 <__sfp>
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	60e0      	str	r0, [r4, #12]
 800a7d8:	2104      	movs	r1, #4
 800a7da:	6860      	ldr	r0, [r4, #4]
 800a7dc:	f7ff ff82 	bl	800a6e4 <std>
 800a7e0:	68a0      	ldr	r0, [r4, #8]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	2109      	movs	r1, #9
 800a7e6:	f7ff ff7d 	bl	800a6e4 <std>
 800a7ea:	68e0      	ldr	r0, [r4, #12]
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	2112      	movs	r1, #18
 800a7f0:	f7ff ff78 	bl	800a6e4 <std>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	61a3      	str	r3, [r4, #24]
 800a7f8:	e7d2      	b.n	800a7a0 <__sinit+0xc>
 800a7fa:	bf00      	nop
 800a7fc:	0800b918 	.word	0x0800b918
 800a800:	0800a72d 	.word	0x0800a72d

0800a804 <__sfp>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	4607      	mov	r7, r0
 800a808:	f7ff ffac 	bl	800a764 <__sfp_lock_acquire>
 800a80c:	4b1e      	ldr	r3, [pc, #120]	; (800a888 <__sfp+0x84>)
 800a80e:	681e      	ldr	r6, [r3, #0]
 800a810:	69b3      	ldr	r3, [r6, #24]
 800a812:	b913      	cbnz	r3, 800a81a <__sfp+0x16>
 800a814:	4630      	mov	r0, r6
 800a816:	f7ff ffbd 	bl	800a794 <__sinit>
 800a81a:	3648      	adds	r6, #72	; 0x48
 800a81c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a820:	3b01      	subs	r3, #1
 800a822:	d503      	bpl.n	800a82c <__sfp+0x28>
 800a824:	6833      	ldr	r3, [r6, #0]
 800a826:	b30b      	cbz	r3, 800a86c <__sfp+0x68>
 800a828:	6836      	ldr	r6, [r6, #0]
 800a82a:	e7f7      	b.n	800a81c <__sfp+0x18>
 800a82c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a830:	b9d5      	cbnz	r5, 800a868 <__sfp+0x64>
 800a832:	4b16      	ldr	r3, [pc, #88]	; (800a88c <__sfp+0x88>)
 800a834:	60e3      	str	r3, [r4, #12]
 800a836:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a83a:	6665      	str	r5, [r4, #100]	; 0x64
 800a83c:	f000 f847 	bl	800a8ce <__retarget_lock_init_recursive>
 800a840:	f7ff ff96 	bl	800a770 <__sfp_lock_release>
 800a844:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a848:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a84c:	6025      	str	r5, [r4, #0]
 800a84e:	61a5      	str	r5, [r4, #24]
 800a850:	2208      	movs	r2, #8
 800a852:	4629      	mov	r1, r5
 800a854:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a858:	f7fd faae 	bl	8007db8 <memset>
 800a85c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a860:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a864:	4620      	mov	r0, r4
 800a866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a868:	3468      	adds	r4, #104	; 0x68
 800a86a:	e7d9      	b.n	800a820 <__sfp+0x1c>
 800a86c:	2104      	movs	r1, #4
 800a86e:	4638      	mov	r0, r7
 800a870:	f7ff ff62 	bl	800a738 <__sfmoreglue>
 800a874:	4604      	mov	r4, r0
 800a876:	6030      	str	r0, [r6, #0]
 800a878:	2800      	cmp	r0, #0
 800a87a:	d1d5      	bne.n	800a828 <__sfp+0x24>
 800a87c:	f7ff ff78 	bl	800a770 <__sfp_lock_release>
 800a880:	230c      	movs	r3, #12
 800a882:	603b      	str	r3, [r7, #0]
 800a884:	e7ee      	b.n	800a864 <__sfp+0x60>
 800a886:	bf00      	nop
 800a888:	0800b918 	.word	0x0800b918
 800a88c:	ffff0001 	.word	0xffff0001

0800a890 <_fwalk_reent>:
 800a890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a894:	4606      	mov	r6, r0
 800a896:	4688      	mov	r8, r1
 800a898:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a89c:	2700      	movs	r7, #0
 800a89e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8a2:	f1b9 0901 	subs.w	r9, r9, #1
 800a8a6:	d505      	bpl.n	800a8b4 <_fwalk_reent+0x24>
 800a8a8:	6824      	ldr	r4, [r4, #0]
 800a8aa:	2c00      	cmp	r4, #0
 800a8ac:	d1f7      	bne.n	800a89e <_fwalk_reent+0xe>
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b4:	89ab      	ldrh	r3, [r5, #12]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d907      	bls.n	800a8ca <_fwalk_reent+0x3a>
 800a8ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	d003      	beq.n	800a8ca <_fwalk_reent+0x3a>
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	47c0      	blx	r8
 800a8c8:	4307      	orrs	r7, r0
 800a8ca:	3568      	adds	r5, #104	; 0x68
 800a8cc:	e7e9      	b.n	800a8a2 <_fwalk_reent+0x12>

0800a8ce <__retarget_lock_init_recursive>:
 800a8ce:	4770      	bx	lr

0800a8d0 <__retarget_lock_acquire_recursive>:
 800a8d0:	4770      	bx	lr

0800a8d2 <__retarget_lock_release_recursive>:
 800a8d2:	4770      	bx	lr

0800a8d4 <__swhatbuf_r>:
 800a8d4:	b570      	push	{r4, r5, r6, lr}
 800a8d6:	460e      	mov	r6, r1
 800a8d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	b096      	sub	sp, #88	; 0x58
 800a8e0:	4614      	mov	r4, r2
 800a8e2:	461d      	mov	r5, r3
 800a8e4:	da08      	bge.n	800a8f8 <__swhatbuf_r+0x24>
 800a8e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	602a      	str	r2, [r5, #0]
 800a8ee:	061a      	lsls	r2, r3, #24
 800a8f0:	d410      	bmi.n	800a914 <__swhatbuf_r+0x40>
 800a8f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8f6:	e00e      	b.n	800a916 <__swhatbuf_r+0x42>
 800a8f8:	466a      	mov	r2, sp
 800a8fa:	f000 f903 	bl	800ab04 <_fstat_r>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	dbf1      	blt.n	800a8e6 <__swhatbuf_r+0x12>
 800a902:	9a01      	ldr	r2, [sp, #4]
 800a904:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a908:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a90c:	425a      	negs	r2, r3
 800a90e:	415a      	adcs	r2, r3
 800a910:	602a      	str	r2, [r5, #0]
 800a912:	e7ee      	b.n	800a8f2 <__swhatbuf_r+0x1e>
 800a914:	2340      	movs	r3, #64	; 0x40
 800a916:	2000      	movs	r0, #0
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	b016      	add	sp, #88	; 0x58
 800a91c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a920 <__smakebuf_r>:
 800a920:	898b      	ldrh	r3, [r1, #12]
 800a922:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a924:	079d      	lsls	r5, r3, #30
 800a926:	4606      	mov	r6, r0
 800a928:	460c      	mov	r4, r1
 800a92a:	d507      	bpl.n	800a93c <__smakebuf_r+0x1c>
 800a92c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	6123      	str	r3, [r4, #16]
 800a934:	2301      	movs	r3, #1
 800a936:	6163      	str	r3, [r4, #20]
 800a938:	b002      	add	sp, #8
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	ab01      	add	r3, sp, #4
 800a93e:	466a      	mov	r2, sp
 800a940:	f7ff ffc8 	bl	800a8d4 <__swhatbuf_r>
 800a944:	9900      	ldr	r1, [sp, #0]
 800a946:	4605      	mov	r5, r0
 800a948:	4630      	mov	r0, r6
 800a94a:	f7ff f963 	bl	8009c14 <_malloc_r>
 800a94e:	b948      	cbnz	r0, 800a964 <__smakebuf_r+0x44>
 800a950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a954:	059a      	lsls	r2, r3, #22
 800a956:	d4ef      	bmi.n	800a938 <__smakebuf_r+0x18>
 800a958:	f023 0303 	bic.w	r3, r3, #3
 800a95c:	f043 0302 	orr.w	r3, r3, #2
 800a960:	81a3      	strh	r3, [r4, #12]
 800a962:	e7e3      	b.n	800a92c <__smakebuf_r+0xc>
 800a964:	4b0d      	ldr	r3, [pc, #52]	; (800a99c <__smakebuf_r+0x7c>)
 800a966:	62b3      	str	r3, [r6, #40]	; 0x28
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	6020      	str	r0, [r4, #0]
 800a96c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a970:	81a3      	strh	r3, [r4, #12]
 800a972:	9b00      	ldr	r3, [sp, #0]
 800a974:	6163      	str	r3, [r4, #20]
 800a976:	9b01      	ldr	r3, [sp, #4]
 800a978:	6120      	str	r0, [r4, #16]
 800a97a:	b15b      	cbz	r3, 800a994 <__smakebuf_r+0x74>
 800a97c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a980:	4630      	mov	r0, r6
 800a982:	f000 f8d1 	bl	800ab28 <_isatty_r>
 800a986:	b128      	cbz	r0, 800a994 <__smakebuf_r+0x74>
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	f023 0303 	bic.w	r3, r3, #3
 800a98e:	f043 0301 	orr.w	r3, r3, #1
 800a992:	81a3      	strh	r3, [r4, #12]
 800a994:	89a0      	ldrh	r0, [r4, #12]
 800a996:	4305      	orrs	r5, r0
 800a998:	81a5      	strh	r5, [r4, #12]
 800a99a:	e7cd      	b.n	800a938 <__smakebuf_r+0x18>
 800a99c:	0800a72d 	.word	0x0800a72d

0800a9a0 <_malloc_usable_size_r>:
 800a9a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9a4:	1f18      	subs	r0, r3, #4
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	bfbc      	itt	lt
 800a9aa:	580b      	ldrlt	r3, [r1, r0]
 800a9ac:	18c0      	addlt	r0, r0, r3
 800a9ae:	4770      	bx	lr

0800a9b0 <_raise_r>:
 800a9b0:	291f      	cmp	r1, #31
 800a9b2:	b538      	push	{r3, r4, r5, lr}
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	460d      	mov	r5, r1
 800a9b8:	d904      	bls.n	800a9c4 <_raise_r+0x14>
 800a9ba:	2316      	movs	r3, #22
 800a9bc:	6003      	str	r3, [r0, #0]
 800a9be:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9c6:	b112      	cbz	r2, 800a9ce <_raise_r+0x1e>
 800a9c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9cc:	b94b      	cbnz	r3, 800a9e2 <_raise_r+0x32>
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f000 f830 	bl	800aa34 <_getpid_r>
 800a9d4:	462a      	mov	r2, r5
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	4620      	mov	r0, r4
 800a9da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9de:	f000 b817 	b.w	800aa10 <_kill_r>
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d00a      	beq.n	800a9fc <_raise_r+0x4c>
 800a9e6:	1c59      	adds	r1, r3, #1
 800a9e8:	d103      	bne.n	800a9f2 <_raise_r+0x42>
 800a9ea:	2316      	movs	r3, #22
 800a9ec:	6003      	str	r3, [r0, #0]
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	e7e7      	b.n	800a9c2 <_raise_r+0x12>
 800a9f2:	2400      	movs	r4, #0
 800a9f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	4798      	blx	r3
 800a9fc:	2000      	movs	r0, #0
 800a9fe:	e7e0      	b.n	800a9c2 <_raise_r+0x12>

0800aa00 <raise>:
 800aa00:	4b02      	ldr	r3, [pc, #8]	; (800aa0c <raise+0xc>)
 800aa02:	4601      	mov	r1, r0
 800aa04:	6818      	ldr	r0, [r3, #0]
 800aa06:	f7ff bfd3 	b.w	800a9b0 <_raise_r>
 800aa0a:	bf00      	nop
 800aa0c:	20000010 	.word	0x20000010

0800aa10 <_kill_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4d07      	ldr	r5, [pc, #28]	; (800aa30 <_kill_r+0x20>)
 800aa14:	2300      	movs	r3, #0
 800aa16:	4604      	mov	r4, r0
 800aa18:	4608      	mov	r0, r1
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	602b      	str	r3, [r5, #0]
 800aa1e:	f7f6 fe29 	bl	8001674 <_kill>
 800aa22:	1c43      	adds	r3, r0, #1
 800aa24:	d102      	bne.n	800aa2c <_kill_r+0x1c>
 800aa26:	682b      	ldr	r3, [r5, #0]
 800aa28:	b103      	cbz	r3, 800aa2c <_kill_r+0x1c>
 800aa2a:	6023      	str	r3, [r4, #0]
 800aa2c:	bd38      	pop	{r3, r4, r5, pc}
 800aa2e:	bf00      	nop
 800aa30:	200007fc 	.word	0x200007fc

0800aa34 <_getpid_r>:
 800aa34:	f7f6 be16 	b.w	8001664 <_getpid>

0800aa38 <__sread>:
 800aa38:	b510      	push	{r4, lr}
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa40:	f000 f894 	bl	800ab6c <_read_r>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	bfab      	itete	ge
 800aa48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa4a:	89a3      	ldrhlt	r3, [r4, #12]
 800aa4c:	181b      	addge	r3, r3, r0
 800aa4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa52:	bfac      	ite	ge
 800aa54:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa56:	81a3      	strhlt	r3, [r4, #12]
 800aa58:	bd10      	pop	{r4, pc}

0800aa5a <__swrite>:
 800aa5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5e:	461f      	mov	r7, r3
 800aa60:	898b      	ldrh	r3, [r1, #12]
 800aa62:	05db      	lsls	r3, r3, #23
 800aa64:	4605      	mov	r5, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	4616      	mov	r6, r2
 800aa6a:	d505      	bpl.n	800aa78 <__swrite+0x1e>
 800aa6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa70:	2302      	movs	r3, #2
 800aa72:	2200      	movs	r2, #0
 800aa74:	f000 f868 	bl	800ab48 <_lseek_r>
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa82:	81a3      	strh	r3, [r4, #12]
 800aa84:	4632      	mov	r2, r6
 800aa86:	463b      	mov	r3, r7
 800aa88:	4628      	mov	r0, r5
 800aa8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8e:	f000 b817 	b.w	800aac0 <_write_r>

0800aa92 <__sseek>:
 800aa92:	b510      	push	{r4, lr}
 800aa94:	460c      	mov	r4, r1
 800aa96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa9a:	f000 f855 	bl	800ab48 <_lseek_r>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	bf15      	itete	ne
 800aaa4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aaa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aaaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aaae:	81a3      	strheq	r3, [r4, #12]
 800aab0:	bf18      	it	ne
 800aab2:	81a3      	strhne	r3, [r4, #12]
 800aab4:	bd10      	pop	{r4, pc}

0800aab6 <__sclose>:
 800aab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaba:	f000 b813 	b.w	800aae4 <_close_r>
	...

0800aac0 <_write_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4d07      	ldr	r5, [pc, #28]	; (800aae0 <_write_r+0x20>)
 800aac4:	4604      	mov	r4, r0
 800aac6:	4608      	mov	r0, r1
 800aac8:	4611      	mov	r1, r2
 800aaca:	2200      	movs	r2, #0
 800aacc:	602a      	str	r2, [r5, #0]
 800aace:	461a      	mov	r2, r3
 800aad0:	f7f6 fe07 	bl	80016e2 <_write>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	d102      	bne.n	800aade <_write_r+0x1e>
 800aad8:	682b      	ldr	r3, [r5, #0]
 800aada:	b103      	cbz	r3, 800aade <_write_r+0x1e>
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	200007fc 	.word	0x200007fc

0800aae4 <_close_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4d06      	ldr	r5, [pc, #24]	; (800ab00 <_close_r+0x1c>)
 800aae8:	2300      	movs	r3, #0
 800aaea:	4604      	mov	r4, r0
 800aaec:	4608      	mov	r0, r1
 800aaee:	602b      	str	r3, [r5, #0]
 800aaf0:	f7f6 fe13 	bl	800171a <_close>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d102      	bne.n	800aafe <_close_r+0x1a>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	b103      	cbz	r3, 800aafe <_close_r+0x1a>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	200007fc 	.word	0x200007fc

0800ab04 <_fstat_r>:
 800ab04:	b538      	push	{r3, r4, r5, lr}
 800ab06:	4d07      	ldr	r5, [pc, #28]	; (800ab24 <_fstat_r+0x20>)
 800ab08:	2300      	movs	r3, #0
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	4608      	mov	r0, r1
 800ab0e:	4611      	mov	r1, r2
 800ab10:	602b      	str	r3, [r5, #0]
 800ab12:	f7f6 fe0e 	bl	8001732 <_fstat>
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	d102      	bne.n	800ab20 <_fstat_r+0x1c>
 800ab1a:	682b      	ldr	r3, [r5, #0]
 800ab1c:	b103      	cbz	r3, 800ab20 <_fstat_r+0x1c>
 800ab1e:	6023      	str	r3, [r4, #0]
 800ab20:	bd38      	pop	{r3, r4, r5, pc}
 800ab22:	bf00      	nop
 800ab24:	200007fc 	.word	0x200007fc

0800ab28 <_isatty_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4d06      	ldr	r5, [pc, #24]	; (800ab44 <_isatty_r+0x1c>)
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4604      	mov	r4, r0
 800ab30:	4608      	mov	r0, r1
 800ab32:	602b      	str	r3, [r5, #0]
 800ab34:	f7f6 fe0d 	bl	8001752 <_isatty>
 800ab38:	1c43      	adds	r3, r0, #1
 800ab3a:	d102      	bne.n	800ab42 <_isatty_r+0x1a>
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	b103      	cbz	r3, 800ab42 <_isatty_r+0x1a>
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	bd38      	pop	{r3, r4, r5, pc}
 800ab44:	200007fc 	.word	0x200007fc

0800ab48 <_lseek_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	4d07      	ldr	r5, [pc, #28]	; (800ab68 <_lseek_r+0x20>)
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	4608      	mov	r0, r1
 800ab50:	4611      	mov	r1, r2
 800ab52:	2200      	movs	r2, #0
 800ab54:	602a      	str	r2, [r5, #0]
 800ab56:	461a      	mov	r2, r3
 800ab58:	f7f6 fe06 	bl	8001768 <_lseek>
 800ab5c:	1c43      	adds	r3, r0, #1
 800ab5e:	d102      	bne.n	800ab66 <_lseek_r+0x1e>
 800ab60:	682b      	ldr	r3, [r5, #0]
 800ab62:	b103      	cbz	r3, 800ab66 <_lseek_r+0x1e>
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	bd38      	pop	{r3, r4, r5, pc}
 800ab68:	200007fc 	.word	0x200007fc

0800ab6c <_read_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4d07      	ldr	r5, [pc, #28]	; (800ab8c <_read_r+0x20>)
 800ab70:	4604      	mov	r4, r0
 800ab72:	4608      	mov	r0, r1
 800ab74:	4611      	mov	r1, r2
 800ab76:	2200      	movs	r2, #0
 800ab78:	602a      	str	r2, [r5, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f7f6 fd94 	bl	80016a8 <_read>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	d102      	bne.n	800ab8a <_read_r+0x1e>
 800ab84:	682b      	ldr	r3, [r5, #0]
 800ab86:	b103      	cbz	r3, 800ab8a <_read_r+0x1e>
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
 800ab8c:	200007fc 	.word	0x200007fc

0800ab90 <_init>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	bf00      	nop
 800ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab96:	bc08      	pop	{r3}
 800ab98:	469e      	mov	lr, r3
 800ab9a:	4770      	bx	lr

0800ab9c <_fini>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr
