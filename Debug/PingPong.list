
PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012dc  0800cdc0  0800cdc0  0001cdc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e09c  0800e09c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e09c  0800e09c  0001e09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0a4  0800e0a4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0a4  0800e0a4  0001e0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0a8  0800e0a8  0001e0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e0ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000714  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008f4  200008f4  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173e6  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039b9  00000000  00000000  000375f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0003afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f0  00000000  00000000  0003c348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e9d  00000000  00000000  0003d538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a06e  00000000  00000000  000623d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2197  00000000  00000000  0007c443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e5da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006130  00000000  00000000  0014e62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cda4 	.word	0x0800cda4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cda4 	.word	0x0800cda4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_DMA_Init+0x3c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <MX_DMA_Init+0x3c>)
 8000f9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_DMA_Init+0x3c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f001 faa1 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fb8:	200f      	movs	r0, #15
 8000fba:	f001 faba 	bl	8002532 <HAL_NVIC_EnableIRQ>

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	4b80      	ldr	r3, [pc, #512]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a7f      	ldr	r2, [pc, #508]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b7d      	ldr	r3, [pc, #500]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	4b79      	ldr	r3, [pc, #484]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a78      	ldr	r2, [pc, #480]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b76      	ldr	r3, [pc, #472]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b72      	ldr	r3, [pc, #456]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a71      	ldr	r2, [pc, #452]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b6f      	ldr	r3, [pc, #444]	; (80011e8 <MX_GPIO_Init+0x21c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b6b      	ldr	r3, [pc, #428]	; (80011e8 <MX_GPIO_Init+0x21c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a6a      	ldr	r2, [pc, #424]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b68      	ldr	r3, [pc, #416]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b64      	ldr	r3, [pc, #400]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a63      	ldr	r2, [pc, #396]	; (80011e8 <MX_GPIO_Init+0x21c>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b61      	ldr	r3, [pc, #388]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b5d      	ldr	r3, [pc, #372]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a5c      	ldr	r2, [pc, #368]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b5a      	ldr	r3, [pc, #360]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2101      	movs	r1, #1
 800108e:	4857      	ldr	r0, [pc, #348]	; (80011ec <MX_GPIO_Init+0x220>)
 8001090:	f001 ffbe 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RES_Pin|LCD_CMD_Pin|SPI2_CS_Pin|SENSOR_TRIG_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 41b4 	mov.w	r1, #23040	; 0x5a00
 800109a:	4855      	ldr	r0, [pc, #340]	; (80011f0 <MX_GPIO_Init+0x224>)
 800109c:	f001 ffb8 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010a6:	4853      	ldr	r0, [pc, #332]	; (80011f4 <MX_GPIO_Init+0x228>)
 80010a8:	f001 ffb2 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	484a      	ldr	r0, [pc, #296]	; (80011ec <MX_GPIO_Init+0x220>)
 80010c4:	f001 fdf0 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	4846      	ldr	r0, [pc, #280]	; (80011f8 <MX_GPIO_Init+0x22c>)
 80010de:	f001 fde3 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B_NEXT_Pin|B_PREV_Pin;
 80010e2:	2306      	movs	r3, #6
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010e6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4840      	ldr	r0, [pc, #256]	; (80011f8 <MX_GPIO_Init+0x22c>)
 80010f8:	f001 fdd6 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_ENC_Pin;
 80010fc:	2308      	movs	r3, #8
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001100:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_ENC_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	4839      	ldr	r0, [pc, #228]	; (80011f8 <MX_GPIO_Init+0x22c>)
 8001112:	f001 fdc9 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001116:	2304      	movs	r3, #4
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4831      	ldr	r0, [pc, #196]	; (80011f0 <MX_GPIO_Init+0x224>)
 800112a:	f001 fdbd 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_CMD_Pin|SPI2_CS_Pin|SENSOR_TRIG_Pin;
 800112e:	f44f 43b4 	mov.w	r3, #23040	; 0x5a00
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	482a      	ldr	r0, [pc, #168]	; (80011f0 <MX_GPIO_Init+0x224>)
 8001148:	f001 fdae 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800114c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4823      	ldr	r0, [pc, #140]	; (80011f4 <MX_GPIO_Init+0x228>)
 8001166:	f001 fd9f 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800116a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	481e      	ldr	r0, [pc, #120]	; (80011f8 <MX_GPIO_Init+0x22c>)
 8001180:	f001 fd92 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001184:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001196:	230a      	movs	r3, #10
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4815      	ldr	r0, [pc, #84]	; (80011f8 <MX_GPIO_Init+0x22c>)
 80011a2:	f001 fd81 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011a6:	2320      	movs	r3, #32
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	480e      	ldr	r0, [pc, #56]	; (80011f4 <MX_GPIO_Init+0x228>)
 80011ba:	f001 fd75 	bl	8002ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2007      	movs	r0, #7
 80011c4:	f001 f999 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011c8:	2007      	movs	r0, #7
 80011ca:	f001 f9b2 	bl	8002532 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2008      	movs	r0, #8
 80011d4:	f001 f991 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011d8:	2008      	movs	r0, #8
 80011da:	f001 f9aa 	bl	8002532 <HAL_NVIC_EnableIRQ>

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40020000 	.word	0x40020000

080011fc <HAL_I2C_MspInit>:
  /* USER CODE END I2C1_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a21      	ldr	r2, [pc, #132]	; (80012a0 <HAL_I2C_MspInit+0xa4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d13b      	bne.n	8001296 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800123a:	23c0      	movs	r3, #192	; 0xc0
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123e:	2312      	movs	r3, #18
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800124a:	2304      	movs	r3, #4
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <HAL_I2C_MspInit+0xac>)
 8001256:	f001 fd27 	bl	8002ca8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 8001264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	201f      	movs	r0, #31
 800127c:	f001 f93d 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001280:	201f      	movs	r0, #31
 8001282:	f001 f956 	bl	8002532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2020      	movs	r0, #32
 800128c:	f001 f935 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001290:	2020      	movs	r0, #32
 8001292:	f001 f94e 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	; 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40005400 	.word	0x40005400
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400

080012ac <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_IWDG_Init+0x2c>)
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <MX_IWDG_Init+0x30>)
 80012b4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_IWDG_Init+0x2c>)
 80012b8:	2204      	movs	r2, #4
 80012ba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_IWDG_Init+0x2c>)
 80012be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012c2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_IWDG_Init+0x2c>)
 80012c6:	f004 fb5f 	bl	8005988 <HAL_IWDG_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80012d0:	f000 fc1a 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000250 	.word	0x20000250
 80012dc:	40003000 	.word	0x40003000

080012e0 <f_sm_ClearEventFlag>:
/* USER CODE BEGIN PFP */
uint8_t f_dwt_counterEnable();
static inline void f_dwt_addSample();

static inline void f_sm_ClearEventFlag()
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	eventFlag = false;
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <f_sm_ClearEventFlag+0x1c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
	SM.event = EV_NO_EVENT;
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <f_sm_ClearEventFlag+0x20>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	705a      	strb	r2, [r3, #1]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2000025c 	.word	0x2000025c
 8001300:	200002a4 	.word	0x200002a4

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001308:	f000 ff86 	bl	8002218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130c:	f000 f82c 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001310:	f7ff fe5c 	bl	8000fcc <MX_GPIO_Init>
  MX_DMA_Init();
 8001314:	f7ff fe3a 	bl	8000f8c <MX_DMA_Init>
  MX_TIM3_Init();
 8001318:	f000 fe04 	bl	8001f24 <MX_TIM3_Init>
  MX_IWDG_Init();
 800131c:	f7ff ffc6 	bl	80012ac <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  SM.currentState = ST_INIT;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <main+0x58>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(StateHandler[SM.currentState] != NULL)
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <main+0x58>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <main+0x5c>)
 800132e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00e      	beq.n	8001354 <main+0x50>
	  {
		  SM.currentState = (StateHandler[SM.currentState])();
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <main+0x58>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <main+0x5c>)
 800133e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001342:	4798      	blx	r3
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <main+0x58>)
 800134a:	701a      	strb	r2, [r3, #0]
	  }
	  else// Invalid code
	  {
		  break;
	  }
	  HAL_IWDG_Refresh(&hiwdg);
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <main+0x60>)
 800134e:	f004 fb5d 	bl	8005a0c <HAL_IWDG_Refresh>
	  if(StateHandler[SM.currentState] != NULL)
 8001352:	e7e8      	b.n	8001326 <main+0x22>
		  break;
 8001354:	bf00      	nop
 8001356:	2300      	movs	r3, #0

  }
  /* USER CODE END 3 */
}
 8001358:	4618      	mov	r0, r3
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200002a4 	.word	0x200002a4
 8001360:	0800cf10 	.word	0x0800cf10
 8001364:	20000250 	.word	0x20000250

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	; 0x50
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	2230      	movs	r2, #48	; 0x30
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f008 fe36 	bl	8009fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <SystemClock_Config+0xd0>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	4a28      	ldr	r2, [pc, #160]	; (8001438 <SystemClock_Config+0xd0>)
 8001396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139a:	6413      	str	r3, [r2, #64]	; 0x40
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <SystemClock_Config+0xd0>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <SystemClock_Config+0xd4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a22      	ldr	r2, [pc, #136]	; (800143c <SystemClock_Config+0xd4>)
 80013b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <SystemClock_Config+0xd4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80013c4:	2309      	movs	r3, #9
 80013c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013ce:	2301      	movs	r3, #1
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d2:	2302      	movs	r3, #2
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013dc:	2308      	movs	r3, #8
 80013de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ea:	2307      	movs	r3, #7
 80013ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 fb1a 	bl	8005a2c <HAL_RCC_OscConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013fe:	f000 fb83 	bl	8001b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	230f      	movs	r3, #15
 8001404:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001406:	2302      	movs	r3, #2
 8001408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800140e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001412:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2105      	movs	r1, #5
 8001420:	4618      	mov	r0, r3
 8001422:	f004 fd7b 	bl	8005f1c <HAL_RCC_ClockConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800142c:	f000 fb6c 	bl	8001b08 <Error_Handler>
  }
}
 8001430:	bf00      	nop
 8001432:	3750      	adds	r7, #80	; 0x50
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40007000 	.word	0x40007000

08001440 <f_sm_Error>:

/* USER CODE BEGIN 4 */

e_sm_State f_sm_Error()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	f_lcd_ClearAll();
 8001444:	f007 fc8a 	bl	8008d5c <f_lcd_ClearAll>
	f_gui_DrawHeading(SM.currentState, LCD_ERROR);
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <f_sm_Error+0x34>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f007 fa38 	bl	80088c4 <f_gui_DrawHeading>
	f_lcd_WriteTxt(0, 32, "ERROR!", &font_msSansSerif_14);
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <f_sm_Error+0x38>)
 8001456:	4a09      	ldr	r2, [pc, #36]	; (800147c <f_sm_Error+0x3c>)
 8001458:	2120      	movs	r1, #32
 800145a:	2000      	movs	r0, #0
 800145c:	f007 fc95 	bl	8008d8a <f_lcd_WriteTxt>

	while(1)
	{
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <f_sm_Error+0x40>)
 8001466:	f001 fdec 	bl	8003042 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800146a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146e:	f000 ff45 	bl	80022fc <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001472:	e7f5      	b.n	8001460 <f_sm_Error+0x20>
 8001474:	200002a4 	.word	0x200002a4
 8001478:	0800dc84 	.word	0x0800dc84
 800147c:	0800cdc0 	.word	0x0800cdc0
 8001480:	40020c00 	.word	0x40020c00

08001484 <f_sm_Init>:

	return ST_ERROR;
}

e_sm_State f_sm_Init()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
		"Init test",
		"Test ok",
		"Test failure"
	};
	e_sm_State nextState;
	uint8_t isOkCounter = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	71bb      	strb	r3, [r7, #6]

	isOkCounter += f_runtime_FirstInit();
 800148e:	f008 fa4d 	bl	800992c <f_runtime_FirstInit>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	79bb      	ldrb	r3, [r7, #6]
 8001498:	4413      	add	r3, r2
 800149a:	71bb      	strb	r3, [r7, #6]

	f_lcd_ClearAll();
 800149c:	f007 fc5e 	bl	8008d5c <f_lcd_ClearAll>
	f_gui_DrawHeading(SM.currentState, LCD_NOPAGE);
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <f_sm_Init+0x90>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2106      	movs	r1, #6
 80014a6:	4618      	mov	r0, r3
 80014a8:	f007 fa0c 	bl	80088c4 <f_gui_DrawHeading>
	f_lcd_WriteTxt(0, 32, infoTxt[0], &font_msSansSerif_14);
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <f_sm_Init+0x94>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <f_sm_Init+0x98>)
 80014b2:	2120      	movs	r1, #32
 80014b4:	2000      	movs	r0, #0
 80014b6:	f007 fc68 	bl	8008d8a <f_lcd_WriteTxt>
	HAL_Delay(500);
 80014ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014be:	f000 ff1d 	bl	80022fc <HAL_Delay>

	isOkCounter += f_runtime_FirstTest();
 80014c2:	f008 fa75 	bl	80099b0 <f_runtime_FirstTest>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	4413      	add	r3, r2
 80014ce:	71bb      	strb	r3, [r7, #6]

	f_lcd_ClearAll();
 80014d0:	f007 fc44 	bl	8008d5c <f_lcd_ClearAll>
	if(isOkCounter == 2)
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d109      	bne.n	80014ee <f_sm_Init+0x6a>
	{
		f_lcd_WriteTxt(0, 32, infoTxt[1], &font_msSansSerif_14);
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <f_sm_Init+0x94>)
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <f_sm_Init+0x98>)
 80014e0:	2120      	movs	r1, #32
 80014e2:	2000      	movs	r0, #0
 80014e4:	f007 fc51 	bl	8008d8a <f_lcd_WriteTxt>
		nextState = ST_IDLE;
 80014e8:	2302      	movs	r3, #2
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	e008      	b.n	8001500 <f_sm_Init+0x7c>
	}
	else
	{
		f_lcd_WriteTxt(0, 32, infoTxt[2], &font_msSansSerif_14);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <f_sm_Init+0x94>)
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <f_sm_Init+0x98>)
 80014f4:	2120      	movs	r1, #32
 80014f6:	2000      	movs	r0, #0
 80014f8:	f007 fc47 	bl	8008d8a <f_lcd_WriteTxt>
		nextState = ST_ERROR;
 80014fc:	2300      	movs	r3, #0
 80014fe:	71fb      	strb	r3, [r7, #7]
	}
	HAL_Delay(1500);
 8001500:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001504:	f000 fefa 	bl	80022fc <HAL_Delay>

	return nextState;
 8001508:	79fb      	ldrb	r3, [r7, #7]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200002a4 	.word	0x200002a4
 8001518:	0800cf28 	.word	0x0800cf28
 800151c:	0800dc84 	.word	0x0800dc84

08001520 <f_sm_Idle>:

e_sm_State f_sm_Idle()
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
	static enum {PROLOGUE, SET_P, SET_I, SET_D, EPILOGUE} Substate;
	e_sm_State nextState = ST_IDLE;
 8001526:	2302      	movs	r3, #2
 8001528:	71fb      	strb	r3, [r7, #7]
		"Set I value:",
		"Set D value:",
		"Press OK"
	};

	f_lcd_Clear(0, 128, 4);
 800152a:	2204      	movs	r2, #4
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	2000      	movs	r0, #0
 8001530:	f007 fbe0 	bl	8008cf4 <f_lcd_Clear>
	f_lcd_Clear(0, 128, 5);
 8001534:	2205      	movs	r2, #5
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	2000      	movs	r0, #0
 800153a:	f007 fbdb 	bl	8008cf4 <f_lcd_Clear>

	switch (Substate)
 800153e:	4b52      	ldr	r3, [pc, #328]	; (8001688 <f_sm_Idle+0x168>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b04      	cmp	r3, #4
 8001544:	d87b      	bhi.n	800163e <f_sm_Idle+0x11e>
 8001546:	a201      	add	r2, pc, #4	; (adr r2, 800154c <f_sm_Idle+0x2c>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	08001561 	.word	0x08001561
 8001550:	08001589 	.word	0x08001589
 8001554:	080015a9 	.word	0x080015a9
 8001558:	080015c9 	.word	0x080015c9
 800155c:	080015e9 	.word	0x080015e9
	{
		case PROLOGUE:
			f_gui_DrawHeading(SM.currentState, LCD_INPUT);
 8001560:	4b4a      	ldr	r3, [pc, #296]	; (800168c <f_sm_Idle+0x16c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2102      	movs	r1, #2
 8001566:	4618      	mov	r0, r3
 8001568:	f007 f9ac 	bl	80088c4 <f_gui_DrawHeading>
			f_lcd_WriteTxt(0, 16, infoTxt[0], &font_msSansSerif_14);
 800156c:	4b48      	ldr	r3, [pc, #288]	; (8001690 <f_sm_Idle+0x170>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b48      	ldr	r3, [pc, #288]	; (8001694 <f_sm_Idle+0x174>)
 8001572:	2110      	movs	r1, #16
 8001574:	2000      	movs	r0, #0
 8001576:	f007 fc08 	bl	8008d8a <f_lcd_WriteTxt>
			Substate = SET_P;
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <f_sm_Idle+0x168>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
			SM.event = EV_NO_EVENT;
 8001580:	4b42      	ldr	r3, [pc, #264]	; (800168c <f_sm_Idle+0x16c>)
 8001582:	2201      	movs	r2, #1
 8001584:	705a      	strb	r2, [r3, #1]
			break;
 8001586:	e05b      	b.n	8001640 <f_sm_Idle+0x120>

		case SET_P: //could be optimized with SET_I and SET_D, left for better readability what's going on
			f_lcd_WriteTxt(0, 32, infoTxt[1], &font_msSansSerif_14);
 8001588:	4b41      	ldr	r3, [pc, #260]	; (8001690 <f_sm_Idle+0x170>)
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4b41      	ldr	r3, [pc, #260]	; (8001694 <f_sm_Idle+0x174>)
 800158e:	2120      	movs	r1, #32
 8001590:	2000      	movs	r0, #0
 8001592:	f007 fbfa 	bl	8008d8a <f_lcd_WriteTxt>
			PidParam.Kp = f_runtime_GetParamInput(10);
 8001596:	200a      	movs	r0, #10
 8001598:	f008 fa4e 	bl	8009a38 <f_runtime_GetParamInput>
 800159c:	eef0 7a40 	vmov.f32	s15, s0
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <f_sm_Idle+0x178>)
 80015a2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80015a6:	e04b      	b.n	8001640 <f_sm_Idle+0x120>

		case SET_I:
			f_lcd_WriteTxt(0, 32, infoTxt[2], &font_msSansSerif_14);
 80015a8:	4b39      	ldr	r3, [pc, #228]	; (8001690 <f_sm_Idle+0x170>)
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	4b39      	ldr	r3, [pc, #228]	; (8001694 <f_sm_Idle+0x174>)
 80015ae:	2120      	movs	r1, #32
 80015b0:	2000      	movs	r0, #0
 80015b2:	f007 fbea 	bl	8008d8a <f_lcd_WriteTxt>
			PidParam.Ki = f_runtime_GetParamInput(1);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f008 fa3e 	bl	8009a38 <f_runtime_GetParamInput>
 80015bc:	eef0 7a40 	vmov.f32	s15, s0
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <f_sm_Idle+0x178>)
 80015c2:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 80015c6:	e03b      	b.n	8001640 <f_sm_Idle+0x120>

		case SET_D:
			f_lcd_WriteTxt(0, 32, infoTxt[3], &font_msSansSerif_14);
 80015c8:	4b31      	ldr	r3, [pc, #196]	; (8001690 <f_sm_Idle+0x170>)
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <f_sm_Idle+0x174>)
 80015ce:	2120      	movs	r1, #32
 80015d0:	2000      	movs	r0, #0
 80015d2:	f007 fbda 	bl	8008d8a <f_lcd_WriteTxt>
			PidParam.Kd = f_runtime_GetParamInput(5);
 80015d6:	2005      	movs	r0, #5
 80015d8:	f008 fa2e 	bl	8009a38 <f_runtime_GetParamInput>
 80015dc:	eef0 7a40 	vmov.f32	s15, s0
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <f_sm_Idle+0x178>)
 80015e2:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 80015e6:	e02b      	b.n	8001640 <f_sm_Idle+0x120>

		case EPILOGUE:
			f_lcd_ClearAll();
 80015e8:	f007 fbb8 	bl	8008d5c <f_lcd_ClearAll>
			f_gui_DrawHeading(SM.currentState, LCD_NOPAGE);
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <f_sm_Idle+0x16c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2106      	movs	r1, #6
 80015f2:	4618      	mov	r0, r3
 80015f4:	f007 f966 	bl	80088c4 <f_gui_DrawHeading>
			f_lcd_WriteTxt(0, 32, infoTxt[4], &font_msSansSerif_14);
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <f_sm_Idle+0x170>)
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <f_sm_Idle+0x174>)
 80015fe:	2120      	movs	r1, #32
 8001600:	2000      	movs	r0, #0
 8001602:	f007 fbc2 	bl	8008d8a <f_lcd_WriteTxt>

			while(!eventFlag)
 8001606:	bf00      	nop
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <f_sm_Idle+0x17c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	f083 0301 	eor.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f8      	bne.n	8001608 <f_sm_Idle+0xe8>
				;
			f_sm_ClearEventFlag(); //if not, the EV_BUTTON_A would increase the substate to SET_P
 8001616:	f7ff fe63 	bl	80012e0 <f_sm_ClearEventFlag>
			PidParam.I_maxRange = 1000;
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <f_sm_Idle+0x178>)
 800161c:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <f_sm_Idle+0x180>)
 800161e:	611a      	str	r2, [r3, #16]
			PidParam.I_minRange = -1000;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <f_sm_Idle+0x178>)
 8001622:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <f_sm_Idle+0x184>)
 8001624:	60da      	str	r2, [r3, #12]
			PidParam.maxRange = MAX_MOTOR_PWM/2;
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <f_sm_Idle+0x178>)
 8001628:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <f_sm_Idle+0x188>)
 800162a:	619a      	str	r2, [r3, #24]
			PidParam.minRange = -(MAX_MOTOR_PWM/2);
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <f_sm_Idle+0x178>)
 800162e:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <f_sm_Idle+0x18c>)
 8001630:	615a      	str	r2, [r3, #20]

			Substate = PROLOGUE;
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <f_sm_Idle+0x168>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
			nextState = ST_WORK;
 8001638:	2303      	movs	r3, #3
 800163a:	71fb      	strb	r3, [r7, #7]
			break;
 800163c:	e000      	b.n	8001640 <f_sm_Idle+0x120>

		default:
			break;
 800163e:	bf00      	nop
	}

	if(SM.event == EV_BUTTON_A) Substate++;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <f_sm_Idle+0x16c>)
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d106      	bne.n	8001656 <f_sm_Idle+0x136>
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <f_sm_Idle+0x168>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <f_sm_Idle+0x168>)
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e010      	b.n	8001678 <f_sm_Idle+0x158>
	else if(SM.event == EV_BUTTON_B) Substate--;
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <f_sm_Idle+0x16c>)
 8001658:	785b      	ldrb	r3, [r3, #1]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d106      	bne.n	800166c <f_sm_Idle+0x14c>
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <f_sm_Idle+0x168>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	3b01      	subs	r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <f_sm_Idle+0x168>)
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	e005      	b.n	8001678 <f_sm_Idle+0x158>
	else if(SM.event == EV_ERROR) nextState = ST_ERROR;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <f_sm_Idle+0x16c>)
 800166e:	785b      	ldrb	r3, [r3, #1]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <f_sm_Idle+0x158>
 8001674:	2300      	movs	r3, #0
 8001676:	71fb      	strb	r3, [r7, #7]
	f_sm_ClearEventFlag();
 8001678:	f7ff fe32 	bl	80012e0 <f_sm_ClearEventFlag>

	return nextState;
 800167c:	79fb      	ldrb	r3, [r7, #7]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200002a6 	.word	0x200002a6
 800168c:	200002a4 	.word	0x200002a4
 8001690:	0800cf34 	.word	0x0800cf34
 8001694:	0800dc84 	.word	0x0800dc84
 8001698:	20000288 	.word	0x20000288
 800169c:	2000025c 	.word	0x2000025c
 80016a0:	447a0000 	.word	0x447a0000
 80016a4:	c47a0000 	.word	0xc47a0000
 80016a8:	44ffe000 	.word	0x44ffe000
 80016ac:	c4ffe000 	.word	0xc4ffe000

080016b0 <f_sm_Work>:

e_sm_State f_sm_Work()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af02      	add	r7, sp, #8
	e_sm_State nextState = ST_WORK;
 80016b6:	2303      	movs	r3, #3
 80016b8:	77fb      	strb	r3, [r7, #31]
	static enum {PREPARE, WORK, POSTPARE, EXIT} Substate;
	uint32_t timerLcdInput, timerLcdHeading, timerMotor, timerMotorTest;
	//distanceSet is encoder counter address
	uint16_t *distanceSet = (uint16_t*)&htim3.Instance->CNT;
 80016ba:	4b8d      	ldr	r3, [pc, #564]	; (80018f0 <f_sm_Work+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3324      	adds	r3, #36	; 0x24
 80016c0:	607b      	str	r3, [r7, #4]
	*distanceSet = (PINGPONG_MAX_DISTANCE-PINGPONG_MIN_DISTANCE)/2;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	22c8      	movs	r2, #200	; 0xc8
 80016c6:	801a      	strh	r2, [r3, #0]
	uint16_t motorPwm;
	uint16_t motorPwmMean;//for calculating pwm stability
	static e_gui_lcdPage currentLcdPage = LCD_PARAM;
	bool changePage;

	f_machine_SensorTriggerMeasure();
 80016c8:	f007 ffa8 	bl	800961c <f_machine_SensorTriggerMeasure>

	switch (Substate)
 80016cc:	4b89      	ldr	r3, [pc, #548]	; (80018f4 <f_sm_Work+0x244>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	f000 80f3 	beq.w	80018bc <f_sm_Work+0x20c>
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	f300 80f4 	bgt.w	80018c4 <f_sm_Work+0x214>
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <f_sm_Work+0x36>
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d00c      	beq.n	80016fe <f_sm_Work+0x4e>
		case POSTPARE:
			f_machine_MotorSet(0);
			break;

		default:
			break;
 80016e4:	e0ee      	b.n	80018c4 <f_sm_Work+0x214>
			if(!f_machine_MotorTestIfOk()) nextState = ST_ERROR;
 80016e6:	f007 fe4b 	bl	8009380 <f_machine_MotorTestIfOk>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80e8 	beq.w	80018c8 <f_sm_Work+0x218>
 80016f8:	2300      	movs	r3, #0
 80016fa:	77fb      	strb	r3, [r7, #31]
			break;
 80016fc:	e0e4      	b.n	80018c8 <f_sm_Work+0x218>
			f_gui_DrawHeading(ST_WORK, currentLcdPage);
 80016fe:	4b7e      	ldr	r3, [pc, #504]	; (80018f8 <f_sm_Work+0x248>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	4619      	mov	r1, r3
 8001704:	2003      	movs	r0, #3
 8001706:	f007 f8dd 	bl	80088c4 <f_gui_DrawHeading>
			f_machine_MotorSet(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f007 fdf8 	bl	8009300 <f_machine_MotorSet>
			timerLcdInput = timerMotor = timerLcdHeading = timerMotorTest = HAL_GetTick();
 8001710:	f000 fde8 	bl	80022e4 <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	61bb      	str	r3, [r7, #24]
				if((HAL_GetTick() - timerLcdInput) > 200) //if timer or input changed
 8001722:	f000 fddf 	bl	80022e4 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2bc8      	cmp	r3, #200	; 0xc8
 800172e:	d921      	bls.n	8001774 <f_sm_Work+0xc4>
					if(changePage)
 8001730:	7a7b      	ldrb	r3, [r7, #9]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00e      	beq.n	8001754 <f_sm_Work+0xa4>
						currentLcdPage++;
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <f_sm_Work+0x248>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <f_sm_Work+0x248>)
 8001740:	701a      	strb	r2, [r3, #0]
						if(currentLcdPage == LCD_NOPAGE) currentLcdPage = LCD_PARAM;
 8001742:	4b6d      	ldr	r3, [pc, #436]	; (80018f8 <f_sm_Work+0x248>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b06      	cmp	r3, #6
 8001748:	d102      	bne.n	8001750 <f_sm_Work+0xa0>
 800174a:	4b6b      	ldr	r3, [pc, #428]	; (80018f8 <f_sm_Work+0x248>)
 800174c:	2203      	movs	r2, #3
 800174e:	701a      	strb	r2, [r3, #0]
						changePage = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	727b      	strb	r3, [r7, #9]
					f_gui_DrawPage(currentLcdPage, &PidParam, &PidCtrl, motorPwm, *distanceSet, distanceGet);
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <f_sm_Work+0x248>)
 8001756:	7818      	ldrb	r0, [r3, #0]
 8001758:	8839      	ldrh	r1, [r7, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	9201      	str	r2, [sp, #4]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	460b      	mov	r3, r1
 8001766:	4a65      	ldr	r2, [pc, #404]	; (80018fc <f_sm_Work+0x24c>)
 8001768:	4965      	ldr	r1, [pc, #404]	; (8001900 <f_sm_Work+0x250>)
 800176a:	f007 f8e9 	bl	8008940 <f_gui_DrawPage>
					timerLcdInput = HAL_GetTick();
 800176e:	f000 fdb9 	bl	80022e4 <HAL_GetTick>
 8001772:	61b8      	str	r0, [r7, #24]
				if(( HAL_GetTick() - timerLcdHeading) > 500)
 8001774:	f000 fdb6 	bl	80022e4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001782:	d90a      	bls.n	800179a <f_sm_Work+0xea>
					f_gui_DrawHeading(SM.currentState, currentLcdPage);
 8001784:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <f_sm_Work+0x254>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4a5b      	ldr	r2, [pc, #364]	; (80018f8 <f_sm_Work+0x248>)
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f007 f898 	bl	80088c4 <f_gui_DrawHeading>
					timerLcdHeading = HAL_GetTick();
 8001794:	f000 fda6 	bl	80022e4 <HAL_GetTick>
 8001798:	6178      	str	r0, [r7, #20]
				if(encoderInputChanged) //if encoder input changed
 800179a:	4b5b      	ldr	r3, [pc, #364]	; (8001908 <f_sm_Work+0x258>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d024      	beq.n	80017ec <f_sm_Work+0x13c>
					if(*distanceSet > PINGPONG_MAX_DISTANCE) *distanceSet = PINGPONG_MAX_DISTANCE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80017aa:	d904      	bls.n	80017b6 <f_sm_Work+0x106>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80017b2:	801a      	strh	r2, [r3, #0]
 80017b4:	e006      	b.n	80017c4 <f_sm_Work+0x114>
					else if(*distanceSet < PINGPONG_MIN_DISTANCE) *distanceSet = PINGPONG_MIN_DISTANCE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	2b31      	cmp	r3, #49	; 0x31
 80017bc:	d802      	bhi.n	80017c4 <f_sm_Work+0x114>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2232      	movs	r2, #50	; 0x32
 80017c2:	801a      	strh	r2, [r3, #0]
					encoderInputChanged = false;
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <f_sm_Work+0x258>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
					if(currentLcdPage == LCD_CTRL) f_gui_DrawPage(currentLcdPage, &PidParam, &PidCtrl, motorPwm, *distanceSet, distanceGet); //to prevent to big refresh latency
 80017ca:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <f_sm_Work+0x248>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d10c      	bne.n	80017ec <f_sm_Work+0x13c>
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <f_sm_Work+0x248>)
 80017d4:	7818      	ldrb	r0, [r3, #0]
 80017d6:	8839      	ldrh	r1, [r7, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	887a      	ldrh	r2, [r7, #2]
 80017de:	9201      	str	r2, [sp, #4]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	460b      	mov	r3, r1
 80017e4:	4a45      	ldr	r2, [pc, #276]	; (80018fc <f_sm_Work+0x24c>)
 80017e6:	4946      	ldr	r1, [pc, #280]	; (8001900 <f_sm_Work+0x250>)
 80017e8:	f007 f8aa 	bl	8008940 <f_gui_DrawPage>
				if((HAL_GetTick() - timerMotor) > 20)
 80017ec:	f000 fd7a 	bl	80022e4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b14      	cmp	r3, #20
 80017f8:	d917      	bls.n	800182a <f_sm_Work+0x17a>
					motorPwm = f_runtime_WorkMotorHandler(&distanceGet, distanceSet, &motorPwm, &PidParam, &PidCtrl);
 80017fa:	463a      	mov	r2, r7
 80017fc:	1cb8      	adds	r0, r7, #2
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <f_sm_Work+0x24c>)
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <f_sm_Work+0x250>)
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	f008 f995 	bl	8009b34 <f_runtime_WorkMotorHandler>
 800180a:	4603      	mov	r3, r0
 800180c:	803b      	strh	r3, [r7, #0]
					motorPwmMean = (15*motorPwmMean + motorPwm)/16;
 800180e:	897a      	ldrh	r2, [r7, #10]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	883a      	ldrh	r2, [r7, #0]
 8001818:	4413      	add	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	da00      	bge.n	8001820 <f_sm_Work+0x170>
 800181e:	330f      	adds	r3, #15
 8001820:	111b      	asrs	r3, r3, #4
 8001822:	817b      	strh	r3, [r7, #10]
					timerMotor = HAL_GetTick();
 8001824:	f000 fd5e 	bl	80022e4 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]
				if((HAL_GetTick() - timerMotorTest) > 200)
 800182a:	f000 fd5b 	bl	80022e4 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2bc8      	cmp	r3, #200	; 0xc8
 8001836:	d91e      	bls.n	8001876 <f_sm_Work+0x1c6>
					if(abs(motorPwmMean - motorPwm) < (MAX_MOTOR_PWM/100)) // if motorPwm is stabilized
 8001838:	897b      	ldrh	r3, [r7, #10]
 800183a:	883a      	ldrh	r2, [r7, #0]
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8001842:	db15      	blt.n	8001870 <f_sm_Work+0x1c0>
 8001844:	897b      	ldrh	r3, [r7, #10]
 8001846:	883a      	ldrh	r2, [r7, #0]
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	2b27      	cmp	r3, #39	; 0x27
 800184c:	dc10      	bgt.n	8001870 <f_sm_Work+0x1c0>
						if((distanceGet == 0) || !f_machine_MotorTestIfOk())
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <f_sm_Work+0x1b4>
 8001854:	f007 fd94 	bl	8009380 <f_machine_MotorTestIfOk>
 8001858:	4603      	mov	r3, r0
 800185a:	f083 0301 	eor.w	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <f_sm_Work+0x1c0>
							f_machine_MotorSet(0);
 8001864:	2000      	movs	r0, #0
 8001866:	f007 fd4b 	bl	8009300 <f_machine_MotorSet>
							nextState = ST_ERROR;
 800186a:	2300      	movs	r3, #0
 800186c:	77fb      	strb	r3, [r7, #31]
							break;
 800186e:	e024      	b.n	80018ba <f_sm_Work+0x20a>
					timerMotorTest = HAL_GetTick();
 8001870:	f000 fd38 	bl	80022e4 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]
				HAL_IWDG_Refresh(&hiwdg);
 8001876:	4825      	ldr	r0, [pc, #148]	; (800190c <f_sm_Work+0x25c>)
 8001878:	f004 f8c8 	bl	8005a0c <HAL_IWDG_Refresh>
				if(eventFlag) //check if anything happened
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <f_sm_Work+0x260>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	f43f af4e 	beq.w	8001722 <f_sm_Work+0x72>
					if(SM.event == EV_BUTTON_B)	break;
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <f_sm_Work+0x254>)
 8001888:	785b      	ldrb	r3, [r3, #1]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d014      	beq.n	80018b8 <f_sm_Work+0x208>
					else if(SM.event == EV_BUTTON_A) changePage = 1;
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <f_sm_Work+0x254>)
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d102      	bne.n	800189c <f_sm_Work+0x1ec>
 8001896:	2301      	movs	r3, #1
 8001898:	727b      	strb	r3, [r7, #9]
 800189a:	e006      	b.n	80018aa <f_sm_Work+0x1fa>
					else if(SM.event == EV_ERROR)
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <f_sm_Work+0x254>)
 800189e:	785b      	ldrb	r3, [r3, #1]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <f_sm_Work+0x1fa>
						nextState = ST_ERROR;
 80018a4:	2300      	movs	r3, #0
 80018a6:	77fb      	strb	r3, [r7, #31]
						break;
 80018a8:	e007      	b.n	80018ba <f_sm_Work+0x20a>
					SM.event = EV_NO_EVENT;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <f_sm_Work+0x254>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	705a      	strb	r2, [r3, #1]
					eventFlag = 0;
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <f_sm_Work+0x260>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
				if((HAL_GetTick() - timerLcdInput) > 200) //if timer or input changed
 80018b6:	e734      	b.n	8001722 <f_sm_Work+0x72>
					if(SM.event == EV_BUTTON_B)	break;
 80018b8:	bf00      	nop
			break;
 80018ba:	e006      	b.n	80018ca <f_sm_Work+0x21a>
			f_machine_MotorSet(0);
 80018bc:	2000      	movs	r0, #0
 80018be:	f007 fd1f 	bl	8009300 <f_machine_MotorSet>
			break;
 80018c2:	e002      	b.n	80018ca <f_sm_Work+0x21a>
			break;
 80018c4:	bf00      	nop
 80018c6:	e000      	b.n	80018ca <f_sm_Work+0x21a>
			break;
 80018c8:	bf00      	nop
	}

	Substate++;
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <f_sm_Work+0x244>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <f_sm_Work+0x244>)
 80018d4:	701a      	strb	r2, [r3, #0]
	f_sm_ClearEventFlag();
 80018d6:	f7ff fd03 	bl	80012e0 <f_sm_ClearEventFlag>
	if(Substate == EXIT) nextState = ST_REPLAY;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <f_sm_Work+0x244>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d101      	bne.n	80018e6 <f_sm_Work+0x236>
 80018e2:	2304      	movs	r3, #4
 80018e4:	77fb      	strb	r3, [r7, #31]

	return nextState;
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000364 	.word	0x20000364
 80018f4:	200002a7 	.word	0x200002a7
 80018f8:	20000000 	.word	0x20000000
 80018fc:	2000026c 	.word	0x2000026c
 8001900:	20000288 	.word	0x20000288
 8001904:	200002a4 	.word	0x200002a4
 8001908:	2000025d 	.word	0x2000025d
 800190c:	20000250 	.word	0x20000250
 8001910:	2000025c 	.word	0x2000025c

08001914 <f_sm_Replay>:

e_sm_State f_sm_Replay()
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
	e_sm_State nextState;

	f_lcd_ClearAll();
 800191a:	f007 fa1f 	bl	8008d5c <f_lcd_ClearAll>
	f_gui_DrawHeading(SM.currentState, LCD_NOPAGE);
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <f_sm_Replay+0x68>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2106      	movs	r1, #6
 8001924:	4618      	mov	r0, r3
 8001926:	f006 ffcd 	bl	80088c4 <f_gui_DrawHeading>
	f_lcd_WriteTxt(0, 32, "Replay?", &font_msSansSerif_14);
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <f_sm_Replay+0x6c>)
 800192c:	4a15      	ldr	r2, [pc, #84]	; (8001984 <f_sm_Replay+0x70>)
 800192e:	2120      	movs	r1, #32
 8001930:	2000      	movs	r0, #0
 8001932:	f007 fa2a 	bl	8008d8a <f_lcd_WriteTxt>

	while(!eventFlag)
 8001936:	bf00      	nop
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <f_sm_Replay+0x74>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f083 0301 	eor.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f8      	bne.n	8001938 <f_sm_Replay+0x24>
		;

	if(SM.event == EV_BUTTON_A)	nextState = ST_IDLE;
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <f_sm_Replay+0x68>)
 8001948:	785b      	ldrb	r3, [r3, #1]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d102      	bne.n	8001954 <f_sm_Replay+0x40>
 800194e:	2302      	movs	r3, #2
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	e00c      	b.n	800196e <f_sm_Replay+0x5a>
	else if(SM.event == EV_BUTTON_B) nextState = ST_EXIT;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <f_sm_Replay+0x68>)
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d102      	bne.n	8001962 <f_sm_Replay+0x4e>
 800195c:	2305      	movs	r3, #5
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	e005      	b.n	800196e <f_sm_Replay+0x5a>
	else if(SM.event == EV_ERROR) nextState = ST_ERROR;
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <f_sm_Replay+0x68>)
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <f_sm_Replay+0x5a>
 800196a:	2300      	movs	r3, #0
 800196c:	71fb      	strb	r3, [r7, #7]
	f_sm_ClearEventFlag();
 800196e:	f7ff fcb7 	bl	80012e0 <f_sm_ClearEventFlag>

	return nextState;
 8001972:	79fb      	ldrb	r3, [r7, #7]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200002a4 	.word	0x200002a4
 8001980:	0800dc84 	.word	0x0800dc84
 8001984:	0800cdc8 	.word	0x0800cdc8
 8001988:	2000025c 	.word	0x2000025c

0800198c <f_sm_Exit>:

e_sm_State f_sm_Exit()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	f_lcd_ClearAll();
 8001990:	f007 f9e4 	bl	8008d5c <f_lcd_ClearAll>
	f_lcd_WriteTxt(0, 32, "EXIT", &font_msSansSerif_14);
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <f_sm_Exit+0x18>)
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <f_sm_Exit+0x1c>)
 8001998:	2120      	movs	r1, #32
 800199a:	2000      	movs	r0, #0
 800199c:	f007 f9f5 	bl	8008d8a <f_lcd_WriteTxt>

	while(1)
 80019a0:	e7fe      	b.n	80019a0 <f_sm_Exit+0x14>
 80019a2:	bf00      	nop
 80019a4:	0800dc84 	.word	0x0800dc84
 80019a8:	0800cdd0 	.word	0x0800cdd0

080019ac <f_CheckButtonsCallback>:
		dwtSamples = 0;
	}
}

void f_CheckButtonsCallback()
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	if(Button.counterEnableA && HAL_GPIO_ReadPin(B_NEXT_GPIO_Port, B_NEXT_Pin))
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <f_CheckButtonsCallback+0x8c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d018      	beq.n	80019ea <f_CheckButtonsCallback+0x3e>
 80019b8:	2102      	movs	r1, #2
 80019ba:	4820      	ldr	r0, [pc, #128]	; (8001a3c <f_CheckButtonsCallback+0x90>)
 80019bc:	f001 fb10 	bl	8002fe0 <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d011      	beq.n	80019ea <f_CheckButtonsCallback+0x3e>
	{
		if((HAL_GetTick() - Button.counterA) >= BUTTON_PRESSED_CHECKOUT_TIME)
 80019c6:	f000 fc8d 	bl	80022e4 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <f_CheckButtonsCallback+0x8c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b63      	cmp	r3, #99	; 0x63
 80019d4:	d90c      	bls.n	80019f0 <f_CheckButtonsCallback+0x44>
		{
			eventFlag = true;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <f_CheckButtonsCallback+0x94>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
			SM.event = EV_BUTTON_A;
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <f_CheckButtonsCallback+0x98>)
 80019de:	2202      	movs	r2, #2
 80019e0:	705a      	strb	r2, [r3, #1]
			Button.counterEnableA = false;
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <f_CheckButtonsCallback+0x8c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
		if((HAL_GetTick() - Button.counterA) >= BUTTON_PRESSED_CHECKOUT_TIME)
 80019e8:	e002      	b.n	80019f0 <f_CheckButtonsCallback+0x44>
		}
	}
	else Button.counterEnableA = false;
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <f_CheckButtonsCallback+0x8c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]

	if(Button.counterEnableB && HAL_GPIO_ReadPin(B_PREV_GPIO_Port, B_PREV_Pin))
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <f_CheckButtonsCallback+0x8c>)
 80019f2:	785b      	ldrb	r3, [r3, #1]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d018      	beq.n	8001a2a <f_CheckButtonsCallback+0x7e>
 80019f8:	2104      	movs	r1, #4
 80019fa:	4810      	ldr	r0, [pc, #64]	; (8001a3c <f_CheckButtonsCallback+0x90>)
 80019fc:	f001 faf0 	bl	8002fe0 <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d011      	beq.n	8001a2a <f_CheckButtonsCallback+0x7e>
	{
		if((HAL_GetTick() - Button.counterB) >= BUTTON_PRESSED_CHECKOUT_TIME)
 8001a06:	f000 fc6d 	bl	80022e4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <f_CheckButtonsCallback+0x8c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b63      	cmp	r3, #99	; 0x63
 8001a14:	d90d      	bls.n	8001a32 <f_CheckButtonsCallback+0x86>
		{
			eventFlag = true;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <f_CheckButtonsCallback+0x94>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
			SM.event = EV_BUTTON_B;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <f_CheckButtonsCallback+0x98>)
 8001a1e:	2203      	movs	r2, #3
 8001a20:	705a      	strb	r2, [r3, #1]
			Button.counterEnableB = false;
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <f_CheckButtonsCallback+0x8c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	705a      	strb	r2, [r3, #1]
		if((HAL_GetTick() - Button.counterB) >= BUTTON_PRESSED_CHECKOUT_TIME)
 8001a28:	e003      	b.n	8001a32 <f_CheckButtonsCallback+0x86>
		}
	}
	else Button.counterEnableB = false;
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <f_CheckButtonsCallback+0x8c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	705a      	strb	r2, [r3, #1]
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000260 	.word	0x20000260
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	2000025c 	.word	0x2000025c
 8001a44:	200002a4 	.word	0x200002a4

08001a48 <HAL_GPIO_EXTI_Callback>:

// =========== INTERRUPT CALLBACKS ===================

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]

	if((GPIO_Pin == B_NEXT_Pin) && HAL_GPIO_ReadPin(B_NEXT_GPIO_Port, B_NEXT_Pin))
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d10f      	bne.n	8001a78 <HAL_GPIO_EXTI_Callback+0x30>
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a5c:	f001 fac0 	bl	8002fe0 <HAL_GPIO_ReadPin>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d008      	beq.n	8001a78 <HAL_GPIO_EXTI_Callback+0x30>
	{
		Button.counterEnableA = true;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	701a      	strb	r2, [r3, #0]
		Button.counterA = HAL_GetTick();
 8001a6c:	f000 fc3a 	bl	80022e4 <HAL_GetTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001a74:	6053      	str	r3, [r2, #4]
	else if((GPIO_Pin == B_PREV_Pin) && HAL_GPIO_ReadPin(B_PREV_GPIO_Port, B_PREV_Pin))
	{
		Button.counterEnableB = true;
		Button.counterB = HAL_GetTick();
	}
}
 8001a76:	e011      	b.n	8001a9c <HAL_GPIO_EXTI_Callback+0x54>
	else if((GPIO_Pin == B_PREV_Pin) && HAL_GPIO_ReadPin(B_PREV_GPIO_Port, B_PREV_Pin))
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d10e      	bne.n	8001a9c <HAL_GPIO_EXTI_Callback+0x54>
 8001a7e:	2104      	movs	r1, #4
 8001a80:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a82:	f001 faad 	bl	8002fe0 <HAL_GPIO_ReadPin>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <HAL_GPIO_EXTI_Callback+0x54>
		Button.counterEnableB = true;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	705a      	strb	r2, [r3, #1]
		Button.counterB = HAL_GetTick();
 8001a92:	f000 fc27 	bl	80022e4 <HAL_GetTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001a9a:	6093      	str	r3, [r2, #8]
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	20000260 	.word	0x20000260

08001aac <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	f_machine_SensorOutputCompareCallback(htim);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f007 fe0f 	bl	80096d8 <f_machine_SensorOutputCompareCallback>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
	f_machine_SensorPeriodElapsedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f007 fe6a 	bl	80097a4 <f_machine_SensorPeriodElapsedCallback>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	f_machine_SensorCaptureCallback(htim);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f007 fe23 	bl	800972c <f_machine_SensorCaptureCallback>
	if(htim->Instance == TIM3) encoderInputChanged = true;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d102      	bne.n	8001af6 <HAL_TIM_IC_CaptureCallback+0x1e>
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40000400 	.word	0x40000400
 8001b04:	2000025d 	.word	0x2000025d

08001b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0c:	b672      	cpsid	i
}
 8001b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <Error_Handler+0x8>
	...

08001b14 <HAL_SPI_MspInit>:
  /* USER CODE END SPI2_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a3f      	ldr	r2, [pc, #252]	; (8001c30 <HAL_SPI_MspInit+0x11c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d177      	bne.n	8001c26 <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <HAL_SPI_MspInit+0x120>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a3d      	ldr	r2, [pc, #244]	; (8001c34 <HAL_SPI_MspInit+0x120>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_SPI_MspInit+0x120>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <HAL_SPI_MspInit+0x120>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a36      	ldr	r2, [pc, #216]	; (8001c34 <HAL_SPI_MspInit+0x120>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_SPI_MspInit+0x120>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_SPI_MspInit+0x120>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a2f      	ldr	r2, [pc, #188]	; (8001c34 <HAL_SPI_MspInit+0x120>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_SPI_MspInit+0x120>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4824      	ldr	r0, [pc, #144]	; (8001c38 <HAL_SPI_MspInit+0x124>)
 8001ba6:	f001 f87f 	bl	8002ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bbc:	2305      	movs	r3, #5
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	481d      	ldr	r0, [pc, #116]	; (8001c3c <HAL_SPI_MspInit+0x128>)
 8001bc8:	f001 f86e 	bl	8002ca8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001bce:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_SPI_MspInit+0x130>)
 8001bd0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001bda:	2240      	movs	r2, #64	; 0x40
 8001bdc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bea:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001c0a:	480d      	ldr	r0, [pc, #52]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001c0c:	f000 fcac 	bl	8002568 <HAL_DMA_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001c16:	f7ff ff77 	bl	8001b08 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001c1e:	649a      	str	r2, [r3, #72]	; 0x48
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_SPI_MspInit+0x12c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c26:	bf00      	nop
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40003800 	.word	0x40003800
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	20000300 	.word	0x20000300
 8001c44:	40026070 	.word	0x40026070

08001c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c86:	2007      	movs	r0, #7
 8001c88:	f000 fc2c 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800

08001c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <NMI_Handler+0x4>

08001c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <HardFault_Handler+0x4>

08001ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <MemManage_Handler+0x4>

08001caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <BusFault_Handler+0x4>

08001cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <UsageFault_Handler+0x4>

08001cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce4:	f000 faea 	bl	80022bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  f_lcd_SendFrameCallback();
 8001ce8:	f007 fa7a 	bl	80091e0 <f_lcd_SendFrameCallback>
  f_CheckButtonsCallback();
 8001cec:	f7ff fe5e 	bl	80019ac <f_CheckButtonsCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_NEXT_Pin);
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f001 f9bd 	bl	8003078 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_PREV_Pin);
 8001d06:	2004      	movs	r0, #4
 8001d08:	f001 f9b6 	bl	8003078 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <DMA1_Stream4_IRQHandler+0x10>)
 8001d16:	f000 fd4f 	bl	80027b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000300 	.word	0x20000300

08001d24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d2a:	f005 fdb7 	bl	800789c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200003f4 	.word	0x200003f4

08001d38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <TIM3_IRQHandler+0x10>)
 8001d3e:	f005 fdad 	bl	800789c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000364 	.word	0x20000364

08001d4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <I2C1_EV_IRQHandler+0x10>)
 8001d52:	f001 fe11 	bl	8003978 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200001fc 	.word	0x200001fc

08001d60 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <I2C1_ER_IRQHandler+0x10>)
 8001d66:	f001 ff78 	bl	8003c5a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200001fc 	.word	0x200001fc

08001d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_kill>:

int _kill(int pid, int sig)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d8e:	f008 f8f3 	bl	8009f78 <__errno>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2216      	movs	r2, #22
 8001d96:	601a      	str	r2, [r3, #0]
	return -1;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_exit>:

void _exit (int status)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ffe7 	bl	8001d84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001db6:	e7fe      	b.n	8001db6 <_exit+0x12>

08001db8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e00a      	b.n	8001de0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dca:	f3af 8000 	nop.w
 8001dce:	4601      	mov	r1, r0
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	60ba      	str	r2, [r7, #8]
 8001dd6:	b2ca      	uxtb	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbf0      	blt.n	8001dca <_read+0x12>
	}

return len;
 8001de8:	687b      	ldr	r3, [r7, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e009      	b.n	8001e18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	60ba      	str	r2, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3301      	adds	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	dbf1      	blt.n	8001e04 <_write+0x12>
	}
	return len;
 8001e20:	687b      	ldr	r3, [r7, #4]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_close>:

int _close(int file)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
	return -1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e52:	605a      	str	r2, [r3, #4]
	return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_isatty>:

int _isatty(int file)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
	return 1;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
	return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <_sbrk+0x5c>)
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <_sbrk+0x60>)
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <_sbrk+0x64>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	; (8001efc <_sbrk+0x68>)
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d207      	bcs.n	8001ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec4:	f008 f858 	bl	8009f78 <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	220c      	movs	r2, #12
 8001ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	e009      	b.n	8001ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <_sbrk+0x64>)
 8001ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20020000 	.word	0x20020000
 8001ef4:	00000400 	.word	0x00000400
 8001ef8:	20000360 	.word	0x20000360
 8001efc:	200008f8 	.word	0x200008f8

08001f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <SystemInit+0x20>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <SystemInit+0x20>)
 8001f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <MX_TIM3_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f008 f858 	bl	8009fe8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f40:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f42:	4a21      	ldr	r2, [pc, #132]	; (8001fc8 <MX_TIM3_Init+0xa4>)
 8001f44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f92:	f005 fbdd 	bl	8007750 <HAL_TIM_Encoder_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f9c:	f7ff fdb4 	bl	8001b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001fae:	f006 faeb 	bl	8008588 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001fb8:	f7ff fda6 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3730      	adds	r7, #48	; 0x30
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000364 	.word	0x20000364
 8001fc8:	40000400 	.word	0x40000400

08001fcc <HAL_TIM_Encoder_MspInit>:
  /* USER CODE END TIM10_Init 2 */

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_TIM_Encoder_MspInit+0x94>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d133      	bne.n	8002056 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_TIM_Encoder_MspInit+0x98>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_TIM_Encoder_MspInit+0x98>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a14      	ldr	r2, [pc, #80]	; (8002064 <HAL_TIM_Encoder_MspInit+0x98>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_TIM_Encoder_MspInit+0x98>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_P_Pin|ENC_M_Pin;
 8002026:	23c0      	movs	r3, #192	; 0xc0
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002036:	2302      	movs	r3, #2
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002042:	f000 fe31 	bl	8002ca8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201d      	movs	r0, #29
 800204c:	f000 fa55 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002050:	201d      	movs	r0, #29
 8002052:	f000 fa6e 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002056:	bf00      	nop
 8002058:	3728      	adds	r7, #40	; 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40000400 	.word	0x40000400
 8002064:	40023800 	.word	0x40023800
 8002068:	40020800 	.word	0x40020800

0800206c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d10d      	bne.n	800209a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_TIM_PWM_MspInit+0x40>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_TIM_PWM_MspInit+0x40>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <HAL_TIM_PWM_MspInit+0x40>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40014000 	.word	0x40014000
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM10)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_TIM_Base_MspInit+0x94>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d134      	bne.n	800213c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_TIM_Base_MspInit+0x98>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <HAL_TIM_Base_MspInit+0x98>)
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_TIM_Base_MspInit+0x98>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_TIM_Base_MspInit+0x98>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_TIM_Base_MspInit+0x98>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_TIM_Base_MspInit+0x98>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800210a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800210e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800211c:	2303      	movs	r3, #3
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <HAL_TIM_Base_MspInit+0x9c>)
 8002128:	f000 fdbe 	bl	8002ca8 <HAL_GPIO_Init>

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2100      	movs	r1, #0
 8002130:	2019      	movs	r0, #25
 8002132:	f000 f9e2 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002136:	2019      	movs	r0, #25
 8002138:	f000 f9fb 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800213c:	bf00      	nop
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40014400 	.word	0x40014400
 8002148:	40023800 	.word	0x40023800
 800214c:	40020400 	.word	0x40020400

08002150 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <HAL_TIM_MspPostInit+0x68>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d11d      	bne.n	80021ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_TIM_MspPostInit+0x6c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a10      	ldr	r2, [pc, #64]	; (80021bc <HAL_TIM_MspPostInit+0x6c>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_TIM_MspPostInit+0x6c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800218e:	2320      	movs	r3, #32
 8002190:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800219e:	2303      	movs	r3, #3
 80021a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	; (80021c0 <HAL_TIM_MspPostInit+0x70>)
 80021aa:	f000 fd7d 	bl	8002ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40014000 	.word	0x40014000
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40021000 	.word	0x40021000

080021c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ca:	490e      	ldr	r1, [pc, #56]	; (8002204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021cc:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e0:	4c0b      	ldr	r4, [pc, #44]	; (8002210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021ee:	f7ff fe87 	bl	8001f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f2:	f007 fec7 	bl	8009f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f6:	f7ff f885 	bl	8001304 <main>
  bx  lr    
 80021fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002208:	0800e0ac 	.word	0x0800e0ac
  ldr r2, =_sbss
 800220c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002210:	200008f4 	.word	0x200008f4

08002214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <HAL_Init+0x40>)
 8002222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <HAL_Init+0x40>)
 800222e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_Init+0x40>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002240:	2003      	movs	r0, #3
 8002242:	f000 f94f 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002246:	2000      	movs	r0, #0
 8002248:	f000 f808 	bl	800225c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800224c:	f7ff fcfc 	bl	8001c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023c00 	.word	0x40023c00

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_InitTick+0x54>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_InitTick+0x58>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002272:	fbb3 f3f1 	udiv	r3, r3, r1
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f967 	bl	800254e <HAL_SYSTICK_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e00e      	b.n	80022a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b0f      	cmp	r3, #15
 800228e:	d80a      	bhi.n	80022a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002290:	2200      	movs	r2, #0
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f000 f92f 	bl	80024fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800229c:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <HAL_InitTick+0x5c>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000004 	.word	0x20000004
 80022b4:	2000000c 	.word	0x2000000c
 80022b8:	20000008 	.word	0x20000008

080022bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_IncTick+0x20>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x24>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_IncTick+0x24>)
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	2000000c 	.word	0x2000000c
 80022e0:	2000043c 	.word	0x2000043c

080022e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_GetTick+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2000043c 	.word	0x2000043c

080022fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff ffee 	bl	80022e4 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d005      	beq.n	8002322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_Delay+0x44>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002322:	bf00      	nop
 8002324:	f7ff ffde 	bl	80022e4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d8f7      	bhi.n	8002324 <HAL_Delay+0x28>
  {
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000000c 	.word	0x2000000c

08002344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800236c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002376:	4a04      	ldr	r2, [pc, #16]	; (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	60d3      	str	r3, [r2, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0307 	and.w	r3, r3, #7
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0b      	blt.n	80023d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4907      	ldr	r1, [pc, #28]	; (80023e0 <__NVIC_EnableIRQ+0x38>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	; (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	; (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff29 	bl	8002344 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff3e 	bl	800238c <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff8e 	bl	8002438 <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5d 	bl	80023e4 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff31 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffa2 	bl	80024a0 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff feb6 	bl	80022e4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e099      	b.n	80026b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a4:	e00f      	b.n	80025c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a6:	f7ff fe9d 	bl	80022e4 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b05      	cmp	r3, #5
 80025b2:	d908      	bls.n	80025c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2203      	movs	r2, #3
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e078      	b.n	80026b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e8      	bne.n	80025a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	4b38      	ldr	r3, [pc, #224]	; (80026c0 <HAL_DMA_Init+0x158>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	2b04      	cmp	r3, #4
 800261e:	d107      	bne.n	8002630 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	4313      	orrs	r3, r2
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f023 0307 	bic.w	r3, r3, #7
 8002646:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	2b04      	cmp	r3, #4
 8002658:	d117      	bne.n	800268a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00e      	beq.n	800268a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fa9f 	bl	8002bb0 <DMA_CheckFifoParam>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2240      	movs	r2, #64	; 0x40
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002686:	2301      	movs	r3, #1
 8002688:	e016      	b.n	80026b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa56 	bl	8002b44 <DMA_CalcBaseAndBitshift>
 8002698:	4603      	mov	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	223f      	movs	r2, #63	; 0x3f
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	f010803f 	.word	0xf010803f

080026c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_DMA_Start_IT+0x26>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e040      	b.n	800276c <HAL_DMA_Start_IT+0xa8>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d12f      	bne.n	800275e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f9e8 	bl	8002ae8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	223f      	movs	r2, #63	; 0x3f
 800271e:	409a      	lsls	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0216 	orr.w	r2, r2, #22
 8002732:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0208 	orr.w	r2, r2, #8
 800274a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e005      	b.n	800276a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002766:	2302      	movs	r3, #2
 8002768:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800276a:	7dfb      	ldrb	r3, [r7, #23]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d004      	beq.n	8002792 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e00c      	b.n	80027ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2205      	movs	r2, #5
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027c4:	4b8e      	ldr	r3, [pc, #568]	; (8002a00 <HAL_DMA_IRQHandler+0x248>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a8e      	ldr	r2, [pc, #568]	; (8002a04 <HAL_DMA_IRQHandler+0x24c>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0a9b      	lsrs	r3, r3, #10
 80027d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	2208      	movs	r2, #8
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01a      	beq.n	8002824 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0204 	bic.w	r2, r2, #4
 800280a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	2208      	movs	r2, #8
 8002812:	409a      	lsls	r2, r3
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	2201      	movs	r2, #1
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d012      	beq.n	800285a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2201      	movs	r2, #1
 8002848:	409a      	lsls	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f043 0202 	orr.w	r2, r3, #2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	2204      	movs	r2, #4
 8002860:	409a      	lsls	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d012      	beq.n	8002890 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2204      	movs	r2, #4
 800287e:	409a      	lsls	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f043 0204 	orr.w	r2, r3, #4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	2210      	movs	r2, #16
 8002896:	409a      	lsls	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d043      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d03c      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	2210      	movs	r2, #16
 80028b4:	409a      	lsls	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d018      	beq.n	80028fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d108      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d024      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
 80028e6:	e01f      	b.n	8002928 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01b      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
 80028f8:	e016      	b.n	8002928 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0208 	bic.w	r2, r2, #8
 8002916:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	2220      	movs	r2, #32
 800292e:	409a      	lsls	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 808f 	beq.w	8002a58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8087 	beq.w	8002a58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2220      	movs	r2, #32
 8002950:	409a      	lsls	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b05      	cmp	r3, #5
 8002960:	d136      	bne.n	80029d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0216 	bic.w	r2, r2, #22
 8002970:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002980:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d103      	bne.n	8002992 <HAL_DMA_IRQHandler+0x1da>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0208 	bic.w	r2, r2, #8
 80029a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	223f      	movs	r2, #63	; 0x3f
 80029a8:	409a      	lsls	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d07e      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
        }
        return;
 80029ce:	e079      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01d      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10d      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d031      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
 80029fc:	e02c      	b.n	8002a58 <HAL_DMA_IRQHandler+0x2a0>
 80029fe:	bf00      	nop
 8002a00:	20000004 	.word	0x20000004
 8002a04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d023      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
 8002a18:	e01e      	b.n	8002a58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10f      	bne.n	8002a48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0210 	bic.w	r2, r2, #16
 8002a36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d032      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d022      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2205      	movs	r2, #5
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	3301      	adds	r3, #1
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d307      	bcc.n	8002aa0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f2      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x2cc>
 8002a9e:	e000      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002aa0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
 8002ac2:	e000      	b.n	8002ac6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ac4:	bf00      	nop
    }
  }
}
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ada:	b2db      	uxtb	r3, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d108      	bne.n	8002b28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b26:	e007      	b.n	8002b38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	60da      	str	r2, [r3, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	3b10      	subs	r3, #16
 8002b54:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <DMA_CalcBaseAndBitshift+0x68>)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d909      	bls.n	8002b86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	1d1a      	adds	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	659a      	str	r2, [r3, #88]	; 0x58
 8002b84:	e007      	b.n	8002b96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b8e:	f023 0303 	bic.w	r3, r3, #3
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	aaaaaaab 	.word	0xaaaaaaab
 8002bac:	0800cf60 	.word	0x0800cf60

08002bb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d11f      	bne.n	8002c0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d856      	bhi.n	8002c7e <DMA_CheckFifoParam+0xce>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <DMA_CheckFifoParam+0x28>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002bfb 	.word	0x08002bfb
 8002be0:	08002be9 	.word	0x08002be9
 8002be4:	08002c7f 	.word	0x08002c7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d046      	beq.n	8002c82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf8:	e043      	b.n	8002c82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c02:	d140      	bne.n	8002c86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c08:	e03d      	b.n	8002c86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c12:	d121      	bne.n	8002c58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d837      	bhi.n	8002c8a <DMA_CheckFifoParam+0xda>
 8002c1a:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <DMA_CheckFifoParam+0x70>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c37 	.word	0x08002c37
 8002c28:	08002c31 	.word	0x08002c31
 8002c2c:	08002c49 	.word	0x08002c49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	e030      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d025      	beq.n	8002c8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c46:	e022      	b.n	8002c8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c50:	d11f      	bne.n	8002c92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c56:	e01c      	b.n	8002c92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d903      	bls.n	8002c66 <DMA_CheckFifoParam+0xb6>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d003      	beq.n	8002c6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c64:	e018      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6a:	e015      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00e      	beq.n	8002c96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7c:	e00b      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e00a      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;
 8002c82:	bf00      	nop
 8002c84:	e008      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;
 8002c86:	bf00      	nop
 8002c88:	e006      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e004      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e002      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;
 8002c96:	bf00      	nop
    }
  } 
  
  return status; 
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	e16b      	b.n	8002f9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	f040 815a 	bne.w	8002f96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d005      	beq.n	8002cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d130      	bne.n	8002d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	2203      	movs	r2, #3
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d30:	2201      	movs	r2, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 0201 	and.w	r2, r3, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d017      	beq.n	8002d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d123      	bne.n	8002dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0203 	and.w	r2, r3, #3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80b4 	beq.w	8002f96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b60      	ldr	r3, [pc, #384]	; (8002fb4 <HAL_GPIO_Init+0x30c>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	4a5f      	ldr	r2, [pc, #380]	; (8002fb4 <HAL_GPIO_Init+0x30c>)
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3e:	4b5d      	ldr	r3, [pc, #372]	; (8002fb4 <HAL_GPIO_Init+0x30c>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4a:	4a5b      	ldr	r2, [pc, #364]	; (8002fb8 <HAL_GPIO_Init+0x310>)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	220f      	movs	r2, #15
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_GPIO_Init+0x314>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d02b      	beq.n	8002ece <HAL_GPIO_Init+0x226>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a51      	ldr	r2, [pc, #324]	; (8002fc0 <HAL_GPIO_Init+0x318>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d025      	beq.n	8002eca <HAL_GPIO_Init+0x222>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a50      	ldr	r2, [pc, #320]	; (8002fc4 <HAL_GPIO_Init+0x31c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d01f      	beq.n	8002ec6 <HAL_GPIO_Init+0x21e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4f      	ldr	r2, [pc, #316]	; (8002fc8 <HAL_GPIO_Init+0x320>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d019      	beq.n	8002ec2 <HAL_GPIO_Init+0x21a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4e      	ldr	r2, [pc, #312]	; (8002fcc <HAL_GPIO_Init+0x324>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_GPIO_Init+0x216>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a4d      	ldr	r2, [pc, #308]	; (8002fd0 <HAL_GPIO_Init+0x328>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00d      	beq.n	8002eba <HAL_GPIO_Init+0x212>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a4c      	ldr	r2, [pc, #304]	; (8002fd4 <HAL_GPIO_Init+0x32c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d007      	beq.n	8002eb6 <HAL_GPIO_Init+0x20e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a4b      	ldr	r2, [pc, #300]	; (8002fd8 <HAL_GPIO_Init+0x330>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d101      	bne.n	8002eb2 <HAL_GPIO_Init+0x20a>
 8002eae:	2307      	movs	r3, #7
 8002eb0:	e00e      	b.n	8002ed0 <HAL_GPIO_Init+0x228>
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	e00c      	b.n	8002ed0 <HAL_GPIO_Init+0x228>
 8002eb6:	2306      	movs	r3, #6
 8002eb8:	e00a      	b.n	8002ed0 <HAL_GPIO_Init+0x228>
 8002eba:	2305      	movs	r3, #5
 8002ebc:	e008      	b.n	8002ed0 <HAL_GPIO_Init+0x228>
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x228>
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e004      	b.n	8002ed0 <HAL_GPIO_Init+0x228>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e002      	b.n	8002ed0 <HAL_GPIO_Init+0x228>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <HAL_GPIO_Init+0x228>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	f002 0203 	and.w	r2, r2, #3
 8002ed6:	0092      	lsls	r2, r2, #2
 8002ed8:	4093      	lsls	r3, r2
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee0:	4935      	ldr	r1, [pc, #212]	; (8002fb8 <HAL_GPIO_Init+0x310>)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eee:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <HAL_GPIO_Init+0x334>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f12:	4a32      	ldr	r2, [pc, #200]	; (8002fdc <HAL_GPIO_Init+0x334>)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f18:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <HAL_GPIO_Init+0x334>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f3c:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <HAL_GPIO_Init+0x334>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f42:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <HAL_GPIO_Init+0x334>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f66:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_GPIO_Init+0x334>)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_GPIO_Init+0x334>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f90:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <HAL_GPIO_Init+0x334>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b0f      	cmp	r3, #15
 8002fa0:	f67f ae90 	bls.w	8002cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	40020000 	.word	0x40020000
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	40020800 	.word	0x40020800
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40021400 	.word	0x40021400
 8002fd4:	40021800 	.word	0x40021800
 8002fd8:	40021c00 	.word	0x40021c00
 8002fdc:	40013c00 	.word	0x40013c00

08002fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	e001      	b.n	8003002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
 800301c:	4613      	mov	r3, r2
 800301e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003020:	787b      	ldrb	r3, [r7, #1]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003026:	887a      	ldrh	r2, [r7, #2]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800302c:	e003      	b.n	8003036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	041a      	lsls	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	619a      	str	r2, [r3, #24]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	460b      	mov	r3, r1
 800304c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003054:	887a      	ldrh	r2, [r7, #2]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4013      	ands	r3, r2
 800305a:	041a      	lsls	r2, r3, #16
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43d9      	mvns	r1, r3
 8003060:	887b      	ldrh	r3, [r7, #2]
 8003062:	400b      	ands	r3, r1
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	619a      	str	r2, [r3, #24]
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003082:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d006      	beq.n	800309c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800308e:	4a05      	ldr	r2, [pc, #20]	; (80030a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fcd6 	bl	8001a48 <HAL_GPIO_EXTI_Callback>
  }
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40013c00 	.word	0x40013c00

080030a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e12b      	b.n	8003312 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fe f894 	bl	80011fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	; 0x24
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800310a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800310c:	f003 f8fe 	bl	800630c <HAL_RCC_GetPCLK1Freq>
 8003110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4a81      	ldr	r2, [pc, #516]	; (800331c <HAL_I2C_Init+0x274>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d807      	bhi.n	800312c <HAL_I2C_Init+0x84>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a80      	ldr	r2, [pc, #512]	; (8003320 <HAL_I2C_Init+0x278>)
 8003120:	4293      	cmp	r3, r2
 8003122:	bf94      	ite	ls
 8003124:	2301      	movls	r3, #1
 8003126:	2300      	movhi	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e006      	b.n	800313a <HAL_I2C_Init+0x92>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a7d      	ldr	r2, [pc, #500]	; (8003324 <HAL_I2C_Init+0x27c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	bf94      	ite	ls
 8003134:	2301      	movls	r3, #1
 8003136:	2300      	movhi	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0e7      	b.n	8003312 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a78      	ldr	r2, [pc, #480]	; (8003328 <HAL_I2C_Init+0x280>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	0c9b      	lsrs	r3, r3, #18
 800314c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4a6a      	ldr	r2, [pc, #424]	; (800331c <HAL_I2C_Init+0x274>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d802      	bhi.n	800317c <HAL_I2C_Init+0xd4>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3301      	adds	r3, #1
 800317a:	e009      	b.n	8003190 <HAL_I2C_Init+0xe8>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	4a69      	ldr	r2, [pc, #420]	; (800332c <HAL_I2C_Init+0x284>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	099b      	lsrs	r3, r3, #6
 800318e:	3301      	adds	r3, #1
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	430b      	orrs	r3, r1
 8003196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	495c      	ldr	r1, [pc, #368]	; (800331c <HAL_I2C_Init+0x274>)
 80031ac:	428b      	cmp	r3, r1
 80031ae:	d819      	bhi.n	80031e4 <HAL_I2C_Init+0x13c>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1e59      	subs	r1, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80031be:	1c59      	adds	r1, r3, #1
 80031c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031c4:	400b      	ands	r3, r1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_I2C_Init+0x138>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1e59      	subs	r1, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d8:	3301      	adds	r3, #1
 80031da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031de:	e051      	b.n	8003284 <HAL_I2C_Init+0x1dc>
 80031e0:	2304      	movs	r3, #4
 80031e2:	e04f      	b.n	8003284 <HAL_I2C_Init+0x1dc>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d111      	bne.n	8003210 <HAL_I2C_Init+0x168>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e58      	subs	r0, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	440b      	add	r3, r1
 80031fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e012      	b.n	8003236 <HAL_I2C_Init+0x18e>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1e58      	subs	r0, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	0099      	lsls	r1, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	fbb0 f3f3 	udiv	r3, r0, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Init+0x196>
 800323a:	2301      	movs	r3, #1
 800323c:	e022      	b.n	8003284 <HAL_I2C_Init+0x1dc>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10e      	bne.n	8003264 <HAL_I2C_Init+0x1bc>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1e58      	subs	r0, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6859      	ldr	r1, [r3, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	440b      	add	r3, r1
 8003254:	fbb0 f3f3 	udiv	r3, r0, r3
 8003258:	3301      	adds	r3, #1
 800325a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003262:	e00f      	b.n	8003284 <HAL_I2C_Init+0x1dc>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1e58      	subs	r0, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	0099      	lsls	r1, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	fbb0 f3f3 	udiv	r3, r0, r3
 800327a:	3301      	adds	r3, #1
 800327c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003280:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	6809      	ldr	r1, [r1, #0]
 8003288:	4313      	orrs	r3, r2
 800328a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6911      	ldr	r1, [r2, #16]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68d2      	ldr	r2, [r2, #12]
 80032be:	4311      	orrs	r1, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	430b      	orrs	r3, r1
 80032c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	000186a0 	.word	0x000186a0
 8003320:	001e847f 	.word	0x001e847f
 8003324:	003d08ff 	.word	0x003d08ff
 8003328:	431bde83 	.word	0x431bde83
 800332c:	10624dd3 	.word	0x10624dd3

08003330 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	461a      	mov	r2, r3
 800333c:	460b      	mov	r3, r1
 800333e:	817b      	strh	r3, [r7, #10]
 8003340:	4613      	mov	r3, r2
 8003342:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003344:	f7fe ffce 	bl	80022e4 <HAL_GetTick>
 8003348:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b20      	cmp	r3, #32
 8003354:	f040 80e0 	bne.w	8003518 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2319      	movs	r3, #25
 800335e:	2201      	movs	r2, #1
 8003360:	4970      	ldr	r1, [pc, #448]	; (8003524 <HAL_I2C_Master_Transmit+0x1f4>)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f002 f8e6 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
 8003370:	e0d3      	b.n	800351a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_I2C_Master_Transmit+0x50>
 800337c:	2302      	movs	r3, #2
 800337e:	e0cc      	b.n	800351a <HAL_I2C_Master_Transmit+0x1ea>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b01      	cmp	r3, #1
 8003394:	d007      	beq.n	80033a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2221      	movs	r2, #33	; 0x21
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2210      	movs	r2, #16
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	893a      	ldrh	r2, [r7, #8]
 80033d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4a50      	ldr	r2, [pc, #320]	; (8003528 <HAL_I2C_Master_Transmit+0x1f8>)
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033e8:	8979      	ldrh	r1, [r7, #10]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f001 fea8 	bl	8005144 <I2C_MasterRequestWrite>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e08d      	b.n	800351a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003414:	e066      	b.n	80034e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	6a39      	ldr	r1, [r7, #32]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f002 f960 	bl	80056e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b04      	cmp	r3, #4
 800342c:	d107      	bne.n	800343e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e06b      	b.n	800351a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b04      	cmp	r3, #4
 800347e:	d11b      	bne.n	80034b8 <HAL_I2C_Master_Transmit+0x188>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	2b00      	cmp	r3, #0
 8003486:	d017      	beq.n	80034b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	6a39      	ldr	r1, [r7, #32]
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f002 f950 	bl	8005762 <I2C_WaitOnBTFFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00d      	beq.n	80034e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d107      	bne.n	80034e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e01a      	b.n	800351a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d194      	bne.n	8003416 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	00100002 	.word	0x00100002
 8003528:	ffff0000 	.word	0xffff0000

0800352c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08c      	sub	sp, #48	; 0x30
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	461a      	mov	r2, r3
 8003538:	460b      	mov	r3, r1
 800353a:	817b      	strh	r3, [r7, #10]
 800353c:	4613      	mov	r3, r2
 800353e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003540:	f7fe fed0 	bl	80022e4 <HAL_GetTick>
 8003544:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	f040 820b 	bne.w	800396a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2319      	movs	r3, #25
 800355a:	2201      	movs	r2, #1
 800355c:	497c      	ldr	r1, [pc, #496]	; (8003750 <HAL_I2C_Master_Receive+0x224>)
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f001 ffe8 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800356a:	2302      	movs	r3, #2
 800356c:	e1fe      	b.n	800396c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_I2C_Master_Receive+0x50>
 8003578:	2302      	movs	r3, #2
 800357a:	e1f7      	b.n	800396c <HAL_I2C_Master_Receive+0x440>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d007      	beq.n	80035a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2222      	movs	r2, #34	; 0x22
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2210      	movs	r2, #16
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	893a      	ldrh	r2, [r7, #8]
 80035d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a5c      	ldr	r2, [pc, #368]	; (8003754 <HAL_I2C_Master_Receive+0x228>)
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035e4:	8979      	ldrh	r1, [r7, #10]
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f001 fe2c 	bl	8005248 <I2C_MasterRequestRead>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e1b8      	b.n	800396c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d113      	bne.n	800362a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003602:	2300      	movs	r3, #0
 8003604:	623b      	str	r3, [r7, #32]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	623b      	str	r3, [r7, #32]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	623b      	str	r3, [r7, #32]
 8003616:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e18c      	b.n	8003944 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362e:	2b01      	cmp	r3, #1
 8003630:	d11b      	bne.n	800366a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003640:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e16c      	b.n	8003944 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	2b02      	cmp	r3, #2
 8003670:	d11b      	bne.n	80036aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003680:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003690:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	e14c      	b.n	8003944 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036d0:	e138      	b.n	8003944 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	f200 80f1 	bhi.w	80038be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d123      	bne.n	800372c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f002 f8ad 	bl	8005848 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e139      	b.n	800396c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a
 800372a:	e10b      	b.n	8003944 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	2b02      	cmp	r3, #2
 8003732:	d14e      	bne.n	80037d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	2200      	movs	r2, #0
 800373c:	4906      	ldr	r1, [pc, #24]	; (8003758 <HAL_I2C_Master_Receive+0x22c>)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f001 fef8 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e10e      	b.n	800396c <HAL_I2C_Master_Receive+0x440>
 800374e:	bf00      	nop
 8003750:	00100002 	.word	0x00100002
 8003754:	ffff0000 	.word	0xffff0000
 8003758:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d0:	e0b8      	b.n	8003944 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	2200      	movs	r2, #0
 80037da:	4966      	ldr	r1, [pc, #408]	; (8003974 <HAL_I2C_Master_Receive+0x448>)
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f001 fea9 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0bf      	b.n	800396c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	2200      	movs	r2, #0
 8003836:	494f      	ldr	r1, [pc, #316]	; (8003974 <HAL_I2C_Master_Receive+0x448>)
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f001 fe7b 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e091      	b.n	800396c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038bc:	e042      	b.n	8003944 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f001 ffc0 	bl	8005848 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e04c      	b.n	800396c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d118      	bne.n	8003944 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	2b00      	cmp	r3, #0
 800394a:	f47f aec2 	bne.w	80036d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	e000      	b.n	800396c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800396a:	2302      	movs	r3, #2
  }
}
 800396c:	4618      	mov	r0, r3
 800396e:	3728      	adds	r7, #40	; 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	00010004 	.word	0x00010004

08003978 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003998:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d003      	beq.n	80039b0 <HAL_I2C_EV_IRQHandler+0x38>
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	f040 80c1 	bne.w	8003b32 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10d      	bne.n	80039e6 <HAL_I2C_EV_IRQHandler+0x6e>
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80039d0:	d003      	beq.n	80039da <HAL_I2C_EV_IRQHandler+0x62>
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80039d8:	d101      	bne.n	80039de <HAL_I2C_EV_IRQHandler+0x66>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_I2C_EV_IRQHandler+0x68>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	f000 8132 	beq.w	8003c4a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00c      	beq.n	8003a0a <HAL_I2C_EV_IRQHandler+0x92>
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	0a5b      	lsrs	r3, r3, #9
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d006      	beq.n	8003a0a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f001 ffa8 	bl	8005952 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fd83 	bl	800450e <I2C_Master_SB>
 8003a08:	e092      	b.n	8003b30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	08db      	lsrs	r3, r3, #3
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_I2C_EV_IRQHandler+0xb2>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	0a5b      	lsrs	r3, r3, #9
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fdf9 	bl	800461a <I2C_Master_ADD10>
 8003a28:	e082      	b.n	8003b30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0xd2>
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	0a5b      	lsrs	r3, r3, #9
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fe13 	bl	800466e <I2C_Master_ADDR>
 8003a48:	e072      	b.n	8003b30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d03b      	beq.n	8003ace <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a64:	f000 80f3 	beq.w	8003c4e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	09db      	lsrs	r3, r3, #7
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00f      	beq.n	8003a94 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	0a9b      	lsrs	r3, r3, #10
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d103      	bne.n	8003a94 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f9f3 	bl	8003e78 <I2C_MasterTransmit_TXE>
 8003a92:	e04d      	b.n	8003b30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	089b      	lsrs	r3, r3, #2
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80d6 	beq.w	8003c4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	0a5b      	lsrs	r3, r3, #9
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80cf 	beq.w	8003c4e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	2b21      	cmp	r3, #33	; 0x21
 8003ab4:	d103      	bne.n	8003abe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fa7a 	bl	8003fb0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003abc:	e0c7      	b.n	8003c4e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	f040 80c4 	bne.w	8003c4e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fae8 	bl	800409c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003acc:	e0bf      	b.n	8003c4e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003adc:	f000 80b7 	beq.w	8003c4e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00f      	beq.n	8003b0c <HAL_I2C_EV_IRQHandler+0x194>
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	0a9b      	lsrs	r3, r3, #10
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d009      	beq.n	8003b0c <HAL_I2C_EV_IRQHandler+0x194>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fb5d 	bl	80041c4 <I2C_MasterReceive_RXNE>
 8003b0a:	e011      	b.n	8003b30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 809a 	beq.w	8003c4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	0a5b      	lsrs	r3, r3, #9
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8093 	beq.w	8003c4e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fc06 	bl	800433a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b2e:	e08e      	b.n	8003c4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b30:	e08d      	b.n	8003c4e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	e007      	b.n	8003b54 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d012      	beq.n	8003b86 <HAL_I2C_EV_IRQHandler+0x20e>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b7c:	69b9      	ldr	r1, [r7, #24]
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 ffc4 	bl	8004b0c <I2C_Slave_ADDR>
 8003b84:	e066      	b.n	8003c54 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_I2C_EV_IRQHandler+0x22e>
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	0a5b      	lsrs	r3, r3, #9
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fffe 	bl	8004ba0 <I2C_Slave_STOPF>
 8003ba4:	e056      	b.n	8003c54 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ba6:	7bbb      	ldrb	r3, [r7, #14]
 8003ba8:	2b21      	cmp	r3, #33	; 0x21
 8003baa:	d002      	beq.n	8003bb2 <HAL_I2C_EV_IRQHandler+0x23a>
 8003bac:	7bbb      	ldrb	r3, [r7, #14]
 8003bae:	2b29      	cmp	r3, #41	; 0x29
 8003bb0:	d125      	bne.n	8003bfe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	09db      	lsrs	r3, r3, #7
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00f      	beq.n	8003bde <HAL_I2C_EV_IRQHandler+0x266>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	0a9b      	lsrs	r3, r3, #10
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_I2C_EV_IRQHandler+0x266>
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d103      	bne.n	8003bde <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 feda 	bl	8004990 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bdc:	e039      	b.n	8003c52 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d033      	beq.n	8003c52 <HAL_I2C_EV_IRQHandler+0x2da>
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	0a5b      	lsrs	r3, r3, #9
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d02d      	beq.n	8003c52 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 ff07 	bl	8004a0a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bfc:	e029      	b.n	8003c52 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00f      	beq.n	8003c2a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	0a9b      	lsrs	r3, r3, #10
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	089b      	lsrs	r3, r3, #2
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 ff12 	bl	8004a4c <I2C_SlaveReceive_RXNE>
 8003c28:	e014      	b.n	8003c54 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00e      	beq.n	8003c54 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	0a5b      	lsrs	r3, r3, #9
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 ff40 	bl	8004ac8 <I2C_SlaveReceive_BTF>
 8003c48:	e004      	b.n	8003c54 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003c4a:	bf00      	nop
 8003c4c:	e002      	b.n	8003c54 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c52:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b08a      	sub	sp, #40	; 0x28
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003c72:	2300      	movs	r3, #0
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c7c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00e      	beq.n	8003ca8 <HAL_I2C_ER_IRQHandler+0x4e>
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ca6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	0a5b      	lsrs	r3, r3, #9
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_I2C_ER_IRQHandler+0x78>
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	f043 0302 	orr.w	r3, r3, #2
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003cd0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	0a9b      	lsrs	r3, r3, #10
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d03f      	beq.n	8003d5e <HAL_I2C_ER_IRQHandler+0x104>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d039      	beq.n	8003d5e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003cea:	7efb      	ldrb	r3, [r7, #27]
 8003cec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d04:	7ebb      	ldrb	r3, [r7, #26]
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d112      	bne.n	8003d30 <HAL_I2C_ER_IRQHandler+0xd6>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10f      	bne.n	8003d30 <HAL_I2C_ER_IRQHandler+0xd6>
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	2b21      	cmp	r3, #33	; 0x21
 8003d14:	d008      	beq.n	8003d28 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d16:	7cfb      	ldrb	r3, [r7, #19]
 8003d18:	2b29      	cmp	r3, #41	; 0x29
 8003d1a:	d005      	beq.n	8003d28 <HAL_I2C_ER_IRQHandler+0xce>
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	2b28      	cmp	r3, #40	; 0x28
 8003d20:	d106      	bne.n	8003d30 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b21      	cmp	r3, #33	; 0x21
 8003d26:	d103      	bne.n	8003d30 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f001 f869 	bl	8004e00 <I2C_Slave_AF>
 8003d2e:	e016      	b.n	8003d5e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d38:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	f043 0304 	orr.w	r3, r3, #4
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d42:	7efb      	ldrb	r3, [r7, #27]
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d002      	beq.n	8003d4e <HAL_I2C_ER_IRQHandler+0xf4>
 8003d48:	7efb      	ldrb	r3, [r7, #27]
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d107      	bne.n	8003d5e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	0adb      	lsrs	r3, r3, #11
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00e      	beq.n	8003d88 <HAL_I2C_ER_IRQHandler+0x12e>
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	f043 0308 	orr.w	r3, r3, #8
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003d86:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f001 f8a0 	bl	8004ee0 <I2C_ITError>
  }
}
 8003da0:	bf00      	nop
 8003da2:	3728      	adds	r7, #40	; 0x28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	70fb      	strb	r3, [r7, #3]
 8003e04:	4613      	mov	r3, r2
 8003e06:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d150      	bne.n	8003f40 <I2C_MasterTransmit_TXE+0xc8>
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b21      	cmp	r3, #33	; 0x21
 8003ea2:	d14d      	bne.n	8003f40 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d01d      	beq.n	8003ee6 <I2C_MasterTransmit_TXE+0x6e>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d01a      	beq.n	8003ee6 <I2C_MasterTransmit_TXE+0x6e>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eb6:	d016      	beq.n	8003ee6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ec6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2211      	movs	r2, #17
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ff62 	bl	8003da8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ee4:	e060      	b.n	8003fa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ef4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f04:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d107      	bne.n	8003f30 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff7d 	bl	8003e28 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f2e:	e03b      	b.n	8003fa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff35 	bl	8003da8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f3e:	e033      	b.n	8003fa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b21      	cmp	r3, #33	; 0x21
 8003f44:	d005      	beq.n	8003f52 <I2C_MasterTransmit_TXE+0xda>
 8003f46:	7bbb      	ldrb	r3, [r7, #14]
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d12d      	bne.n	8003fa8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b22      	cmp	r3, #34	; 0x22
 8003f50:	d12a      	bne.n	8003fa8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d108      	bne.n	8003f6e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f6c:	e01c      	b.n	8003fa8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b40      	cmp	r3, #64	; 0x40
 8003f78:	d103      	bne.n	8003f82 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f88e 	bl	800409c <I2C_MemoryTransmit_TXE_BTF>
}
 8003f80:	e012      	b.n	8003fa8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	781a      	ldrb	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fa6:	e7ff      	b.n	8003fa8 <I2C_MasterTransmit_TXE+0x130>
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b21      	cmp	r3, #33	; 0x21
 8003fc8:	d164      	bne.n	8004094 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d012      	beq.n	8003ffa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	781a      	ldrb	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ff8:	e04c      	b.n	8004094 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d01d      	beq.n	800403c <I2C_MasterTransmit_BTF+0x8c>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b20      	cmp	r3, #32
 8004004:	d01a      	beq.n	800403c <I2C_MasterTransmit_BTF+0x8c>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800400c:	d016      	beq.n	800403c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800401c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2211      	movs	r2, #17
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff feb7 	bl	8003da8 <HAL_I2C_MasterTxCpltCallback>
}
 800403a:	e02b      	b.n	8004094 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800404a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d107      	bne.n	8004086 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff fed2 	bl	8003e28 <HAL_I2C_MemTxCpltCallback>
}
 8004084:	e006      	b.n	8004094 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff fe8a 	bl	8003da8 <HAL_I2C_MasterTxCpltCallback>
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d11d      	bne.n	80040f0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d10b      	bne.n	80040d4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040cc:	1c9a      	adds	r2, r3, #2
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80040d2:	e073      	b.n	80041bc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d8:	b29b      	uxth	r3, r3
 80040da:	121b      	asrs	r3, r3, #8
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040ee:	e065      	b.n	80041bc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d10b      	bne.n	8004110 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800410e:	e055      	b.n	80041bc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004114:	2b02      	cmp	r3, #2
 8004116:	d151      	bne.n	80041bc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b22      	cmp	r3, #34	; 0x22
 800411c:	d10d      	bne.n	800413a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800412c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004138:	e040      	b.n	80041bc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d015      	beq.n	8004170 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b21      	cmp	r3, #33	; 0x21
 8004148:	d112      	bne.n	8004170 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800416e:	e025      	b.n	80041bc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d120      	bne.n	80041bc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2b21      	cmp	r3, #33	; 0x21
 800417e:	d11d      	bne.n	80041bc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800418e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fe36 	bl	8003e28 <HAL_I2C_MemTxCpltCallback>
}
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b22      	cmp	r3, #34	; 0x22
 80041d6:	f040 80ac 	bne.w	8004332 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041de:	b29b      	uxth	r3, r3
 80041e0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d921      	bls.n	800422c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b03      	cmp	r3, #3
 8004216:	f040 808c 	bne.w	8004332 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004228:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800422a:	e082      	b.n	8004332 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	2b02      	cmp	r3, #2
 8004232:	d075      	beq.n	8004320 <I2C_MasterReceive_RXNE+0x15c>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d002      	beq.n	8004240 <I2C_MasterReceive_RXNE+0x7c>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d16f      	bne.n	8004320 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f001 facf 	bl	80057e4 <I2C_WaitOnSTOPRequestThroughIT>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d142      	bne.n	80042d2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800426a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b40      	cmp	r3, #64	; 0x40
 80042a4:	d10a      	bne.n	80042bc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff fdc1 	bl	8003e3c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042ba:	e03a      	b.n	8004332 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2212      	movs	r2, #18
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff fd76 	bl	8003dbc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042d0:	e02f      	b.n	8004332 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042e0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff fd99 	bl	8003e50 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800431e:	e008      	b.n	8004332 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432e:	605a      	str	r2, [r3, #4]
}
 8004330:	e7ff      	b.n	8004332 <I2C_MasterReceive_RXNE+0x16e>
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b04      	cmp	r3, #4
 8004350:	d11b      	bne.n	800438a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004360:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004388:	e0bd      	b.n	8004506 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b03      	cmp	r3, #3
 8004392:	d129      	bne.n	80043e8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d00a      	beq.n	80043c0 <I2C_MasterReceive_BTF+0x86>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d007      	beq.n	80043c0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043e6:	e08e      	b.n	8004506 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d176      	bne.n	80044e0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d002      	beq.n	80043fe <I2C_MasterReceive_BTF+0xc4>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d108      	bne.n	8004410 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e019      	b.n	8004444 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b04      	cmp	r3, #4
 8004414:	d002      	beq.n	800441c <I2C_MasterReceive_BTF+0xe2>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d108      	bne.n	800442e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e00a      	b.n	8004444 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b10      	cmp	r3, #16
 8004432:	d007      	beq.n	8004444 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004442:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800449e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d10a      	bne.n	80044ca <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fcba 	bl	8003e3c <HAL_I2C_MemRxCpltCallback>
}
 80044c8:	e01d      	b.n	8004506 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2212      	movs	r2, #18
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fc6f 	bl	8003dbc <HAL_I2C_MasterRxCpltCallback>
}
 80044de:	e012      	b.n	8004506 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d117      	bne.n	8004552 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800453a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800453c:	e067      	b.n	800460e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	b2da      	uxtb	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	611a      	str	r2, [r3, #16]
}
 8004550:	e05d      	b.n	800460e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800455a:	d133      	bne.n	80045c4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b21      	cmp	r3, #33	; 0x21
 8004566:	d109      	bne.n	800457c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004578:	611a      	str	r2, [r3, #16]
 800457a:	e008      	b.n	800458e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	b2da      	uxtb	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	2b00      	cmp	r3, #0
 8004594:	d004      	beq.n	80045a0 <I2C_Master_SB+0x92>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d108      	bne.n	80045b2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d032      	beq.n	800460e <I2C_Master_SB+0x100>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d02d      	beq.n	800460e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c0:	605a      	str	r2, [r3, #4]
}
 80045c2:	e024      	b.n	800460e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10e      	bne.n	80045ea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	11db      	asrs	r3, r3, #7
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f003 0306 	and.w	r3, r3, #6
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f063 030f 	orn	r3, r3, #15
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]
}
 80045e8:	e011      	b.n	800460e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d10d      	bne.n	800460e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	11db      	asrs	r3, r3, #7
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f003 0306 	and.w	r3, r3, #6
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f063 030e 	orn	r3, r3, #14
 8004606:	b2da      	uxtb	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	611a      	str	r2, [r3, #16]
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	b2da      	uxtb	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <I2C_Master_ADD10+0x26>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d108      	bne.n	8004652 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <I2C_Master_ADD10+0x48>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004660:	605a      	str	r2, [r3, #4]
  }
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800466e:	b480      	push	{r7}
 8004670:	b091      	sub	sp, #68	; 0x44
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800467c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b22      	cmp	r3, #34	; 0x22
 8004696:	f040 8169 	bne.w	800496c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <I2C_Master_ADDR+0x54>
 80046a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d10b      	bne.n	80046c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046aa:	2300      	movs	r3, #0
 80046ac:	633b      	str	r3, [r7, #48]	; 0x30
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	633b      	str	r3, [r7, #48]	; 0x30
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	633b      	str	r3, [r7, #48]	; 0x30
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	e160      	b.n	8004984 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d11d      	bne.n	8004706 <I2C_Master_ADDR+0x98>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046d2:	d118      	bne.n	8004706 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d4:	2300      	movs	r3, #0
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	651a      	str	r2, [r3, #80]	; 0x50
 8004704:	e13e      	b.n	8004984 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d113      	bne.n	8004738 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004710:	2300      	movs	r3, #0
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e115      	b.n	8004964 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	f040 808a 	bne.w	8004858 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800474a:	d137      	bne.n	80047bc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476a:	d113      	bne.n	8004794 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477c:	2300      	movs	r3, #0
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	e0e7      	b.n	8004964 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004794:	2300      	movs	r3, #0
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	623b      	str	r3, [r7, #32]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e0d3      	b.n	8004964 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d02e      	beq.n	8004820 <I2C_Master_ADDR+0x1b2>
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d02b      	beq.n	8004820 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80047c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ca:	2b12      	cmp	r3, #18
 80047cc:	d102      	bne.n	80047d4 <I2C_Master_ADDR+0x166>
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d125      	bne.n	8004820 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d00e      	beq.n	80047f8 <I2C_Master_ADDR+0x18a>
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d00b      	beq.n	80047f8 <I2C_Master_ADDR+0x18a>
 80047e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e2:	2b10      	cmp	r3, #16
 80047e4:	d008      	beq.n	80047f8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e007      	b.n	8004808 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004806:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004808:	2300      	movs	r3, #0
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	e0a1      	b.n	8004964 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004830:	2300      	movs	r3, #0
 8004832:	61bb      	str	r3, [r7, #24]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e085      	b.n	8004964 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d14d      	bne.n	80048fe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	2b04      	cmp	r3, #4
 8004866:	d016      	beq.n	8004896 <I2C_Master_ADDR+0x228>
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	2b02      	cmp	r3, #2
 800486c:	d013      	beq.n	8004896 <I2C_Master_ADDR+0x228>
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004870:	2b10      	cmp	r3, #16
 8004872:	d010      	beq.n	8004896 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004882:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e007      	b.n	80048a6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048a4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b4:	d117      	bne.n	80048e6 <I2C_Master_ADDR+0x278>
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048bc:	d00b      	beq.n	80048d6 <I2C_Master_ADDR+0x268>
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d008      	beq.n	80048d6 <I2C_Master_ADDR+0x268>
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d005      	beq.n	80048d6 <I2C_Master_ADDR+0x268>
 80048ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d002      	beq.n	80048d6 <I2C_Master_ADDR+0x268>
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d107      	bne.n	80048e6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	e032      	b.n	8004964 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800490c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491c:	d117      	bne.n	800494e <I2C_Master_ADDR+0x2e0>
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004924:	d00b      	beq.n	800493e <I2C_Master_ADDR+0x2d0>
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	2b01      	cmp	r3, #1
 800492a:	d008      	beq.n	800493e <I2C_Master_ADDR+0x2d0>
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	2b08      	cmp	r3, #8
 8004930:	d005      	beq.n	800493e <I2C_Master_ADDR+0x2d0>
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	2b10      	cmp	r3, #16
 8004936:	d002      	beq.n	800493e <I2C_Master_ADDR+0x2d0>
 8004938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493a:	2b20      	cmp	r3, #32
 800493c:	d107      	bne.n	800494e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800494c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800496a:	e00b      	b.n	8004984 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
}
 8004982:	e7ff      	b.n	8004984 <I2C_Master_ADDR+0x316>
 8004984:	bf00      	nop
 8004986:	3744      	adds	r7, #68	; 0x44
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d02b      	beq.n	8004a02 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	781a      	ldrb	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d114      	bne.n	8004a02 <I2C_SlaveTransmit_TXE+0x72>
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b29      	cmp	r3, #41	; 0x29
 80049dc:	d111      	bne.n	8004a02 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2221      	movs	r2, #33	; 0x21
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2228      	movs	r2, #40	; 0x28
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff f9e7 	bl	8003dd0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a02:	bf00      	nop
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d011      	beq.n	8004a40 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	781a      	ldrb	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d02c      	beq.n	8004ac0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d114      	bne.n	8004ac0 <I2C_SlaveReceive_RXNE+0x74>
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b2a      	cmp	r3, #42	; 0x2a
 8004a9a:	d111      	bne.n	8004ac0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aaa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2222      	movs	r2, #34	; 0x22
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2228      	movs	r2, #40	; 0x28
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff f992 	bl	8003de4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d012      	beq.n	8004b00 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b26:	2b28      	cmp	r3, #40	; 0x28
 8004b28:	d127      	bne.n	8004b7a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b38:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	089b      	lsrs	r3, r3, #2
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	09db      	lsrs	r3, r3, #7
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	81bb      	strh	r3, [r7, #12]
 8004b5c:	e002      	b.n	8004b64 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004b6c:	89ba      	ldrh	r2, [r7, #12]
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	4619      	mov	r1, r3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff f940 	bl	8003df8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b78:	e00e      	b.n	8004b98 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bbe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	60bb      	str	r3, [r7, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfc:	d172      	bne.n	8004ce4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	2b22      	cmp	r3, #34	; 0x22
 8004c02:	d002      	beq.n	8004c0a <I2C_Slave_STOPF+0x6a>
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	2b2a      	cmp	r3, #42	; 0x2a
 8004c08:	d135      	bne.n	8004c76 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f043 0204 	orr.w	r2, r3, #4
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fd ff42 	bl	8002acc <HAL_DMA_GetState>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d049      	beq.n	8004ce2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	4a69      	ldr	r2, [pc, #420]	; (8004df8 <I2C_Slave_STOPF+0x258>)
 8004c54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd fd8a 	bl	8002774 <HAL_DMA_Abort_IT>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d03d      	beq.n	8004ce2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c70:	4610      	mov	r0, r2
 8004c72:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c74:	e035      	b.n	8004ce2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f043 0204 	orr.w	r2, r3, #4
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fd ff0c 	bl	8002acc <HAL_DMA_GetState>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d014      	beq.n	8004ce4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	4a4e      	ldr	r2, [pc, #312]	; (8004df8 <I2C_Slave_STOPF+0x258>)
 8004cc0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fd fd54 	bl	8002774 <HAL_DMA_Abort_IT>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4798      	blx	r3
 8004ce0:	e000      	b.n	8004ce4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ce2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d03e      	beq.n	8004d6c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d112      	bne.n	8004d22 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d112      	bne.n	8004d56 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	f043 0204 	orr.w	r2, r3, #4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f8b3 	bl	8004ee0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d7a:	e039      	b.n	8004df0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d80:	d109      	bne.n	8004d96 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2228      	movs	r2, #40	; 0x28
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff f827 	bl	8003de4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b28      	cmp	r3, #40	; 0x28
 8004da0:	d111      	bne.n	8004dc6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <I2C_Slave_STOPF+0x25c>)
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff f828 	bl	8003e14 <HAL_I2C_ListenCpltCallback>
}
 8004dc4:	e014      	b.n	8004df0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	2b22      	cmp	r3, #34	; 0x22
 8004dcc:	d002      	beq.n	8004dd4 <I2C_Slave_STOPF+0x234>
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b22      	cmp	r3, #34	; 0x22
 8004dd2:	d10d      	bne.n	8004df0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fe fffa 	bl	8003de4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	080053e5 	.word	0x080053e5
 8004dfc:	ffff0000 	.word	0xffff0000

08004e00 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d002      	beq.n	8004e22 <I2C_Slave_AF+0x22>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d129      	bne.n	8004e76 <I2C_Slave_AF+0x76>
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b28      	cmp	r3, #40	; 0x28
 8004e26:	d126      	bne.n	8004e76 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a2c      	ldr	r2, [pc, #176]	; (8004edc <I2C_Slave_AF+0xdc>)
 8004e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e3c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e46:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e56:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fe ffd0 	bl	8003e14 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004e74:	e02e      	b.n	8004ed4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b21      	cmp	r3, #33	; 0x21
 8004e7a:	d126      	bne.n	8004eca <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a17      	ldr	r2, [pc, #92]	; (8004edc <I2C_Slave_AF+0xdc>)
 8004e80:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2221      	movs	r2, #33	; 0x21
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ea6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eb0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fe ff84 	bl	8003dd0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004ec8:	e004      	b.n	8004ed4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ed2:	615a      	str	r2, [r3, #20]
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	ffff0000 	.word	0xffff0000

08004ee0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ef8:	7bbb      	ldrb	r3, [r7, #14]
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d002      	beq.n	8004f04 <I2C_ITError+0x24>
 8004efe:	7bbb      	ldrb	r3, [r7, #14]
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d10a      	bne.n	8004f1a <I2C_ITError+0x3a>
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b22      	cmp	r3, #34	; 0x22
 8004f08:	d107      	bne.n	8004f1a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f18:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f20:	2b28      	cmp	r3, #40	; 0x28
 8004f22:	d107      	bne.n	8004f34 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2228      	movs	r2, #40	; 0x28
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f32:	e015      	b.n	8004f60 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f42:	d00a      	beq.n	8004f5a <I2C_ITError+0x7a>
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b60      	cmp	r3, #96	; 0x60
 8004f48:	d007      	beq.n	8004f5a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f6e:	d162      	bne.n	8005036 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f7e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d020      	beq.n	8004fd0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f92:	4a6a      	ldr	r2, [pc, #424]	; (800513c <I2C_ITError+0x25c>)
 8004f94:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fd fbea 	bl	8002774 <HAL_DMA_Abort_IT>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8089 	beq.w	80050ba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0201 	bic.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fca:	4610      	mov	r0, r2
 8004fcc:	4798      	blx	r3
 8004fce:	e074      	b.n	80050ba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	4a59      	ldr	r2, [pc, #356]	; (800513c <I2C_ITError+0x25c>)
 8004fd6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fd fbc9 	bl	8002774 <HAL_DMA_Abort_IT>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d068      	beq.n	80050ba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d10b      	bne.n	800500e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005030:	4610      	mov	r0, r2
 8005032:	4798      	blx	r3
 8005034:	e041      	b.n	80050ba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b60      	cmp	r3, #96	; 0x60
 8005040:	d125      	bne.n	800508e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d10b      	bne.n	8005076 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fe feec 	bl	8003e64 <HAL_I2C_AbortCpltCallback>
 800508c:	e015      	b.n	80050ba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d10b      	bne.n	80050b4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7fe fecb 	bl	8003e50 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10e      	bne.n	80050e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050f6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b04      	cmp	r3, #4
 800510a:	d113      	bne.n	8005134 <I2C_ITError+0x254>
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b28      	cmp	r3, #40	; 0x28
 8005110:	d110      	bne.n	8005134 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <I2C_ITError+0x260>)
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fe fe70 	bl	8003e14 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	080053e5 	.word	0x080053e5
 8005140:	ffff0000 	.word	0xffff0000

08005144 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	607a      	str	r2, [r7, #4]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	460b      	mov	r3, r1
 8005152:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b08      	cmp	r3, #8
 800515e:	d006      	beq.n	800516e <I2C_MasterRequestWrite+0x2a>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d003      	beq.n	800516e <I2C_MasterRequestWrite+0x2a>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800516c:	d108      	bne.n	8005180 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e00b      	b.n	8005198 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	2b12      	cmp	r3, #18
 8005186:	d107      	bne.n	8005198 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005196:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 f9c5 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00d      	beq.n	80051cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051be:	d103      	bne.n	80051c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e035      	b.n	8005238 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051d4:	d108      	bne.n	80051e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051d6:	897b      	ldrh	r3, [r7, #10]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051e4:	611a      	str	r2, [r3, #16]
 80051e6:	e01b      	b.n	8005220 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051e8:	897b      	ldrh	r3, [r7, #10]
 80051ea:	11db      	asrs	r3, r3, #7
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f003 0306 	and.w	r3, r3, #6
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	f063 030f 	orn	r3, r3, #15
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	490e      	ldr	r1, [pc, #56]	; (8005240 <I2C_MasterRequestWrite+0xfc>)
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f9eb 	bl	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e010      	b.n	8005238 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005216:	897b      	ldrh	r3, [r7, #10]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4907      	ldr	r1, [pc, #28]	; (8005244 <I2C_MasterRequestWrite+0x100>)
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f9db 	bl	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	00010008 	.word	0x00010008
 8005244:	00010002 	.word	0x00010002

08005248 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af02      	add	r7, sp, #8
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	460b      	mov	r3, r1
 8005256:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800526c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b08      	cmp	r3, #8
 8005272:	d006      	beq.n	8005282 <I2C_MasterRequestRead+0x3a>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d003      	beq.n	8005282 <I2C_MasterRequestRead+0x3a>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005280:	d108      	bne.n	8005294 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e00b      	b.n	80052ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	2b11      	cmp	r3, #17
 800529a:	d107      	bne.n	80052ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f93b 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00d      	beq.n	80052e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052d2:	d103      	bne.n	80052dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e079      	b.n	80053d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052e8:	d108      	bne.n	80052fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052ea:	897b      	ldrh	r3, [r7, #10]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	611a      	str	r2, [r3, #16]
 80052fa:	e05f      	b.n	80053bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052fc:	897b      	ldrh	r3, [r7, #10]
 80052fe:	11db      	asrs	r3, r3, #7
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 0306 	and.w	r3, r3, #6
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f063 030f 	orn	r3, r3, #15
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4930      	ldr	r1, [pc, #192]	; (80053dc <I2C_MasterRequestRead+0x194>)
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f961 	bl	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e054      	b.n	80053d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800532a:	897b      	ldrh	r3, [r7, #10]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4929      	ldr	r1, [pc, #164]	; (80053e0 <I2C_MasterRequestRead+0x198>)
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f951 	bl	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e044      	b.n	80053d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534a:	2300      	movs	r3, #0
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800536e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f8d9 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005396:	d103      	bne.n	80053a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e017      	b.n	80053d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80053a4:	897b      	ldrh	r3, [r7, #10]
 80053a6:	11db      	asrs	r3, r3, #7
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f003 0306 	and.w	r3, r3, #6
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	f063 030e 	orn	r3, r3, #14
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4907      	ldr	r1, [pc, #28]	; (80053e0 <I2C_MasterRequestRead+0x198>)
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f90d 	bl	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	00010008 	.word	0x00010008
 80053e0:	00010002 	.word	0x00010002

080053e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80053fe:	4b4b      	ldr	r3, [pc, #300]	; (800552c <I2C_DMAAbort+0x148>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	08db      	lsrs	r3, r3, #3
 8005404:	4a4a      	ldr	r2, [pc, #296]	; (8005530 <I2C_DMAAbort+0x14c>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	0a1a      	lsrs	r2, r3, #8
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	00da      	lsls	r2, r3, #3
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800542a:	e00a      	b.n	8005442 <I2C_DMAAbort+0x5e>
    }
    count--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3b01      	subs	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800543c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005440:	d0ea      	beq.n	8005418 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	2200      	movs	r2, #0
 8005450:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	2200      	movs	r2, #0
 8005460:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005470:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2200      	movs	r2, #0
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005484:	2200      	movs	r2, #0
 8005486:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	2200      	movs	r2, #0
 8005496:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b60      	cmp	r3, #96	; 0x60
 80054b2:	d10e      	bne.n	80054d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2200      	movs	r2, #0
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054ca:	6978      	ldr	r0, [r7, #20]
 80054cc:	f7fe fcca 	bl	8003e64 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054d0:	e027      	b.n	8005522 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054d2:	7cfb      	ldrb	r3, [r7, #19]
 80054d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054d8:	2b28      	cmp	r3, #40	; 0x28
 80054da:	d117      	bne.n	800550c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2228      	movs	r2, #40	; 0x28
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800550a:	e007      	b.n	800551c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800551c:	6978      	ldr	r0, [r7, #20]
 800551e:	f7fe fc97 	bl	8003e50 <HAL_I2C_ErrorCallback>
}
 8005522:	bf00      	nop
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000004 	.word	0x20000004
 8005530:	14f8b589 	.word	0x14f8b589

08005534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005544:	e025      	b.n	8005592 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d021      	beq.n	8005592 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554e:	f7fc fec9 	bl	80022e4 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d116      	bne.n	8005592 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f043 0220 	orr.w	r2, r3, #32
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e023      	b.n	80055da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	0c1b      	lsrs	r3, r3, #16
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d10d      	bne.n	80055b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	43da      	mvns	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4013      	ands	r3, r2
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	e00c      	b.n	80055d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	43da      	mvns	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4013      	ands	r3, r2
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bf0c      	ite	eq
 80055ca:	2301      	moveq	r3, #1
 80055cc:	2300      	movne	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d0b6      	beq.n	8005546 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
 80055ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055f0:	e051      	b.n	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005600:	d123      	bne.n	800564a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005610:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800561a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f043 0204 	orr.w	r2, r3, #4
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e046      	b.n	80056d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d021      	beq.n	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005652:	f7fc fe47 	bl	80022e4 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	429a      	cmp	r2, r3
 8005660:	d302      	bcc.n	8005668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d116      	bne.n	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e020      	b.n	80056d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	d10c      	bne.n	80056ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	43da      	mvns	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bf14      	ite	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	2300      	moveq	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	e00b      	b.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	43da      	mvns	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4013      	ands	r3, r2
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bf14      	ite	ne
 80056cc:	2301      	movne	r3, #1
 80056ce:	2300      	moveq	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d18d      	bne.n	80055f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ec:	e02d      	b.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f900 	bl	80058f4 <I2C_IsAcknowledgeFailed>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e02d      	b.n	800575a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d021      	beq.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005706:	f7fc fded 	bl	80022e4 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	429a      	cmp	r2, r3
 8005714:	d302      	bcc.n	800571c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d116      	bne.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e007      	b.n	800575a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005754:	2b80      	cmp	r3, #128	; 0x80
 8005756:	d1ca      	bne.n	80056ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800576e:	e02d      	b.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f8bf 	bl	80058f4 <I2C_IsAcknowledgeFailed>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e02d      	b.n	80057dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d021      	beq.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005788:	f7fc fdac 	bl	80022e4 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	429a      	cmp	r2, r3
 8005796:	d302      	bcc.n	800579e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d116      	bne.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e007      	b.n	80057dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d1ca      	bne.n	8005770 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80057f0:	4b13      	ldr	r3, [pc, #76]	; (8005840 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	08db      	lsrs	r3, r3, #3
 80057f6:	4a13      	ldr	r2, [pc, #76]	; (8005844 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	0a1a      	lsrs	r2, r3, #8
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3b01      	subs	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d107      	bne.n	8005822 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	f043 0220 	orr.w	r2, r3, #32
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e008      	b.n	8005834 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800582c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005830:	d0e9      	beq.n	8005806 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	20000004 	.word	0x20000004
 8005844:	14f8b589 	.word	0x14f8b589

08005848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005854:	e042      	b.n	80058dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b10      	cmp	r3, #16
 8005862:	d119      	bne.n	8005898 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0210 	mvn.w	r2, #16
 800586c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e029      	b.n	80058ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005898:	f7fc fd24 	bl	80022e4 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d302      	bcc.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d116      	bne.n	80058dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	f043 0220 	orr.w	r2, r3, #32
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e007      	b.n	80058ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d1b5      	bne.n	8005856 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590a:	d11b      	bne.n	8005944 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005914:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	f043 0204 	orr.w	r2, r3, #4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005962:	d103      	bne.n	800596c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800596a:	e007      	b.n	800597c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005974:	d102      	bne.n	800597c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2208      	movs	r2, #8
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e034      	b.n	8005a04 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80059a2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f245 5255 	movw	r2, #21845	; 0x5555
 80059ac:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6852      	ldr	r2, [r2, #4]
 80059b6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6892      	ldr	r2, [r2, #8]
 80059c0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80059c2:	f7fc fc8f 	bl	80022e4 <HAL_GetTick>
 80059c6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80059c8:	e00f      	b.n	80059ea <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80059ca:	f7fc fc8b 	bl	80022e4 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b31      	cmp	r3, #49	; 0x31
 80059d6:	d908      	bls.n	80059ea <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e00c      	b.n	8005a04 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e8      	bne.n	80059ca <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005a00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e267      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d075      	beq.n	8005b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a4a:	4b88      	ldr	r3, [pc, #544]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d00c      	beq.n	8005a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a56:	4b85      	ldr	r3, [pc, #532]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d112      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a62:	4b82      	ldr	r3, [pc, #520]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6e:	d10b      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a70:	4b7e      	ldr	r3, [pc, #504]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d05b      	beq.n	8005b34 <HAL_RCC_OscConfig+0x108>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d157      	bne.n	8005b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e242      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a90:	d106      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x74>
 8005a92:	4b76      	ldr	r3, [pc, #472]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a75      	ldr	r2, [pc, #468]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e01d      	b.n	8005adc <HAL_RCC_OscConfig+0xb0>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x98>
 8005aaa:	4b70      	ldr	r3, [pc, #448]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a6f      	ldr	r2, [pc, #444]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b6d      	ldr	r3, [pc, #436]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a6c      	ldr	r2, [pc, #432]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e00b      	b.n	8005adc <HAL_RCC_OscConfig+0xb0>
 8005ac4:	4b69      	ldr	r3, [pc, #420]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a68      	ldr	r2, [pc, #416]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	4b66      	ldr	r3, [pc, #408]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a65      	ldr	r2, [pc, #404]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d013      	beq.n	8005b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fc fbfe 	bl	80022e4 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fc fbfa 	bl	80022e4 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	; 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e207      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afe:	4b5b      	ldr	r3, [pc, #364]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0xc0>
 8005b0a:	e014      	b.n	8005b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fc fbea 	bl	80022e4 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fc fbe6 	bl	80022e4 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	; 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e1f3      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b26:	4b51      	ldr	r3, [pc, #324]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0xe8>
 8005b32:	e000      	b.n	8005b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d063      	beq.n	8005c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b42:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 030c 	and.w	r3, r3, #12
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4e:	4b47      	ldr	r3, [pc, #284]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d11c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b5a:	4b44      	ldr	r3, [pc, #272]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d116      	bne.n	8005b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b66:	4b41      	ldr	r3, [pc, #260]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_RCC_OscConfig+0x152>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d001      	beq.n	8005b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e1c7      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7e:	4b3b      	ldr	r3, [pc, #236]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4937      	ldr	r1, [pc, #220]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b92:	e03a      	b.n	8005c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d020      	beq.n	8005bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b9c:	4b34      	ldr	r3, [pc, #208]	; (8005c70 <HAL_RCC_OscConfig+0x244>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba2:	f7fc fb9f 	bl	80022e4 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005baa:	f7fc fb9b 	bl	80022e4 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e1a8      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbc:	4b2b      	ldr	r3, [pc, #172]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc8:	4b28      	ldr	r3, [pc, #160]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4925      	ldr	r1, [pc, #148]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]
 8005bdc:	e015      	b.n	8005c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bde:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <HAL_RCC_OscConfig+0x244>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fc fb7e 	bl	80022e4 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bec:	f7fc fb7a 	bl	80022e4 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e187      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d036      	beq.n	8005c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d016      	beq.n	8005c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1e:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <HAL_RCC_OscConfig+0x248>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fc fb5e 	bl	80022e4 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c2c:	f7fc fb5a 	bl	80022e4 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e167      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <HAL_RCC_OscConfig+0x240>)
 8005c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCC_OscConfig+0x200>
 8005c4a:	e01b      	b.n	8005c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4c:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <HAL_RCC_OscConfig+0x248>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c52:	f7fc fb47 	bl	80022e4 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c58:	e00e      	b.n	8005c78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c5a:	f7fc fb43 	bl	80022e4 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d907      	bls.n	8005c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e150      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	42470000 	.word	0x42470000
 8005c74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c78:	4b88      	ldr	r3, [pc, #544]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ea      	bne.n	8005c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8097 	beq.w	8005dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c96:	4b81      	ldr	r3, [pc, #516]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10f      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60bb      	str	r3, [r7, #8]
 8005ca6:	4b7d      	ldr	r3, [pc, #500]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	4a7c      	ldr	r2, [pc, #496]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb2:	4b7a      	ldr	r3, [pc, #488]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc2:	4b77      	ldr	r3, [pc, #476]	; (8005ea0 <HAL_RCC_OscConfig+0x474>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d118      	bne.n	8005d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cce:	4b74      	ldr	r3, [pc, #464]	; (8005ea0 <HAL_RCC_OscConfig+0x474>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a73      	ldr	r2, [pc, #460]	; (8005ea0 <HAL_RCC_OscConfig+0x474>)
 8005cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cda:	f7fc fb03 	bl	80022e4 <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce2:	f7fc faff 	bl	80022e4 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e10c      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf4:	4b6a      	ldr	r3, [pc, #424]	; (8005ea0 <HAL_RCC_OscConfig+0x474>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d106      	bne.n	8005d16 <HAL_RCC_OscConfig+0x2ea>
 8005d08:	4b64      	ldr	r3, [pc, #400]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0c:	4a63      	ldr	r2, [pc, #396]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	6713      	str	r3, [r2, #112]	; 0x70
 8005d14:	e01c      	b.n	8005d50 <HAL_RCC_OscConfig+0x324>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b05      	cmp	r3, #5
 8005d1c:	d10c      	bne.n	8005d38 <HAL_RCC_OscConfig+0x30c>
 8005d1e:	4b5f      	ldr	r3, [pc, #380]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	4a5e      	ldr	r2, [pc, #376]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d24:	f043 0304 	orr.w	r3, r3, #4
 8005d28:	6713      	str	r3, [r2, #112]	; 0x70
 8005d2a:	4b5c      	ldr	r3, [pc, #368]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	4a5b      	ldr	r2, [pc, #364]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	6713      	str	r3, [r2, #112]	; 0x70
 8005d36:	e00b      	b.n	8005d50 <HAL_RCC_OscConfig+0x324>
 8005d38:	4b58      	ldr	r3, [pc, #352]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3c:	4a57      	ldr	r2, [pc, #348]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	6713      	str	r3, [r2, #112]	; 0x70
 8005d44:	4b55      	ldr	r3, [pc, #340]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d48:	4a54      	ldr	r2, [pc, #336]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d4a:	f023 0304 	bic.w	r3, r3, #4
 8005d4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d015      	beq.n	8005d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d58:	f7fc fac4 	bl	80022e4 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d60:	f7fc fac0 	bl	80022e4 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e0cb      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d76:	4b49      	ldr	r3, [pc, #292]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0ee      	beq.n	8005d60 <HAL_RCC_OscConfig+0x334>
 8005d82:	e014      	b.n	8005dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d84:	f7fc faae 	bl	80022e4 <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d8a:	e00a      	b.n	8005da2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d8c:	f7fc faaa 	bl	80022e4 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e0b5      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da2:	4b3e      	ldr	r3, [pc, #248]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1ee      	bne.n	8005d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d105      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005db4:	4b39      	ldr	r3, [pc, #228]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	4a38      	ldr	r2, [pc, #224]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80a1 	beq.w	8005f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dca:	4b34      	ldr	r3, [pc, #208]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d05c      	beq.n	8005e90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d141      	bne.n	8005e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dde:	4b31      	ldr	r3, [pc, #196]	; (8005ea4 <HAL_RCC_OscConfig+0x478>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de4:	f7fc fa7e 	bl	80022e4 <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dec:	f7fc fa7a 	bl	80022e4 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e087      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfe:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f0      	bne.n	8005dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69da      	ldr	r2, [r3, #28]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	019b      	lsls	r3, r3, #6
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	3b01      	subs	r3, #1
 8005e24:	041b      	lsls	r3, r3, #16
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	061b      	lsls	r3, r3, #24
 8005e2e:	491b      	ldr	r1, [pc, #108]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e34:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <HAL_RCC_OscConfig+0x478>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3a:	f7fc fa53 	bl	80022e4 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e42:	f7fc fa4f 	bl	80022e4 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e05c      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e54:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCC_OscConfig+0x416>
 8005e60:	e054      	b.n	8005f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e62:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <HAL_RCC_OscConfig+0x478>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e68:	f7fc fa3c 	bl	80022e4 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e70:	f7fc fa38 	bl	80022e4 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e045      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e82:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <HAL_RCC_OscConfig+0x470>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f0      	bne.n	8005e70 <HAL_RCC_OscConfig+0x444>
 8005e8e:	e03d      	b.n	8005f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d107      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e038      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	40007000 	.word	0x40007000
 8005ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <HAL_RCC_OscConfig+0x4ec>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d028      	beq.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d121      	bne.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d11a      	bne.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ed8:	4013      	ands	r3, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d111      	bne.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d107      	bne.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d001      	beq.n	8005f0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40023800 	.word	0x40023800

08005f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e0cc      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f30:	4b68      	ldr	r3, [pc, #416]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d90c      	bls.n	8005f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3e:	4b65      	ldr	r3, [pc, #404]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f46:	4b63      	ldr	r3, [pc, #396]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d001      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0b8      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d020      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f70:	4b59      	ldr	r3, [pc, #356]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	4a58      	ldr	r2, [pc, #352]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f88:	4b53      	ldr	r3, [pc, #332]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	4a52      	ldr	r2, [pc, #328]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f94:	4b50      	ldr	r3, [pc, #320]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	494d      	ldr	r1, [pc, #308]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d044      	beq.n	800603c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d107      	bne.n	8005fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fba:	4b47      	ldr	r3, [pc, #284]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d119      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e07f      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d003      	beq.n	8005fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d107      	bne.n	8005fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fda:	4b3f      	ldr	r3, [pc, #252]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e06f      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fea:	4b3b      	ldr	r3, [pc, #236]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e067      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ffa:	4b37      	ldr	r3, [pc, #220]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f023 0203 	bic.w	r2, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4934      	ldr	r1, [pc, #208]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	4313      	orrs	r3, r2
 800600a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800600c:	f7fc f96a 	bl	80022e4 <HAL_GetTick>
 8006010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006012:	e00a      	b.n	800602a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006014:	f7fc f966 	bl	80022e4 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006022:	4293      	cmp	r3, r2
 8006024:	d901      	bls.n	800602a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e04f      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602a:	4b2b      	ldr	r3, [pc, #172]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 020c 	and.w	r2, r3, #12
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	429a      	cmp	r2, r3
 800603a:	d1eb      	bne.n	8006014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800603c:	4b25      	ldr	r3, [pc, #148]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d20c      	bcs.n	8006064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604a:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006052:	4b20      	ldr	r3, [pc, #128]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d001      	beq.n	8006064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e032      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006070:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	4916      	ldr	r1, [pc, #88]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 800607e:	4313      	orrs	r3, r2
 8006080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	490e      	ldr	r1, [pc, #56]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060a2:	f000 f821 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 80060a6:	4602      	mov	r2, r0
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	490a      	ldr	r1, [pc, #40]	; (80060dc <HAL_RCC_ClockConfig+0x1c0>)
 80060b4:	5ccb      	ldrb	r3, [r1, r3]
 80060b6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ba:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 80060bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <HAL_RCC_ClockConfig+0x1c8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fc f8ca 	bl	800225c <HAL_InitTick>

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40023c00 	.word	0x40023c00
 80060d8:	40023800 	.word	0x40023800
 80060dc:	0800cf48 	.word	0x0800cf48
 80060e0:	20000004 	.word	0x20000004
 80060e4:	20000008 	.word	0x20000008

080060e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ec:	b094      	sub	sp, #80	; 0x50
 80060ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	647b      	str	r3, [r7, #68]	; 0x44
 80060f4:	2300      	movs	r3, #0
 80060f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f8:	2300      	movs	r3, #0
 80060fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006100:	4b79      	ldr	r3, [pc, #484]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 030c 	and.w	r3, r3, #12
 8006108:	2b08      	cmp	r3, #8
 800610a:	d00d      	beq.n	8006128 <HAL_RCC_GetSysClockFreq+0x40>
 800610c:	2b08      	cmp	r3, #8
 800610e:	f200 80e1 	bhi.w	80062d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_RCC_GetSysClockFreq+0x34>
 8006116:	2b04      	cmp	r3, #4
 8006118:	d003      	beq.n	8006122 <HAL_RCC_GetSysClockFreq+0x3a>
 800611a:	e0db      	b.n	80062d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800611c:	4b73      	ldr	r3, [pc, #460]	; (80062ec <HAL_RCC_GetSysClockFreq+0x204>)
 800611e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006120:	e0db      	b.n	80062da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006122:	4b73      	ldr	r3, [pc, #460]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006126:	e0d8      	b.n	80062da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006128:	4b6f      	ldr	r3, [pc, #444]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006130:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006132:	4b6d      	ldr	r3, [pc, #436]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d063      	beq.n	8006206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613e:	4b6a      	ldr	r3, [pc, #424]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	099b      	lsrs	r3, r3, #6
 8006144:	2200      	movs	r2, #0
 8006146:	63bb      	str	r3, [r7, #56]	; 0x38
 8006148:	63fa      	str	r2, [r7, #60]	; 0x3c
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006150:	633b      	str	r3, [r7, #48]	; 0x30
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
 8006156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800615a:	4622      	mov	r2, r4
 800615c:	462b      	mov	r3, r5
 800615e:	f04f 0000 	mov.w	r0, #0
 8006162:	f04f 0100 	mov.w	r1, #0
 8006166:	0159      	lsls	r1, r3, #5
 8006168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800616c:	0150      	lsls	r0, r2, #5
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4621      	mov	r1, r4
 8006174:	1a51      	subs	r1, r2, r1
 8006176:	6139      	str	r1, [r7, #16]
 8006178:	4629      	mov	r1, r5
 800617a:	eb63 0301 	sbc.w	r3, r3, r1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800618c:	4659      	mov	r1, fp
 800618e:	018b      	lsls	r3, r1, #6
 8006190:	4651      	mov	r1, sl
 8006192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006196:	4651      	mov	r1, sl
 8006198:	018a      	lsls	r2, r1, #6
 800619a:	4651      	mov	r1, sl
 800619c:	ebb2 0801 	subs.w	r8, r2, r1
 80061a0:	4659      	mov	r1, fp
 80061a2:	eb63 0901 	sbc.w	r9, r3, r1
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ba:	4690      	mov	r8, r2
 80061bc:	4699      	mov	r9, r3
 80061be:	4623      	mov	r3, r4
 80061c0:	eb18 0303 	adds.w	r3, r8, r3
 80061c4:	60bb      	str	r3, [r7, #8]
 80061c6:	462b      	mov	r3, r5
 80061c8:	eb49 0303 	adc.w	r3, r9, r3
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061da:	4629      	mov	r1, r5
 80061dc:	024b      	lsls	r3, r1, #9
 80061de:	4621      	mov	r1, r4
 80061e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061e4:	4621      	mov	r1, r4
 80061e6:	024a      	lsls	r2, r1, #9
 80061e8:	4610      	mov	r0, r2
 80061ea:	4619      	mov	r1, r3
 80061ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ee:	2200      	movs	r2, #0
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061f8:	f7fa fd46 	bl	8000c88 <__aeabi_uldivmod>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4613      	mov	r3, r2
 8006202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006204:	e058      	b.n	80062b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006206:	4b38      	ldr	r3, [pc, #224]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	099b      	lsrs	r3, r3, #6
 800620c:	2200      	movs	r2, #0
 800620e:	4618      	mov	r0, r3
 8006210:	4611      	mov	r1, r2
 8006212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006216:	623b      	str	r3, [r7, #32]
 8006218:	2300      	movs	r3, #0
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
 800621c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006220:	4642      	mov	r2, r8
 8006222:	464b      	mov	r3, r9
 8006224:	f04f 0000 	mov.w	r0, #0
 8006228:	f04f 0100 	mov.w	r1, #0
 800622c:	0159      	lsls	r1, r3, #5
 800622e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006232:	0150      	lsls	r0, r2, #5
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4641      	mov	r1, r8
 800623a:	ebb2 0a01 	subs.w	sl, r2, r1
 800623e:	4649      	mov	r1, r9
 8006240:	eb63 0b01 	sbc.w	fp, r3, r1
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006258:	ebb2 040a 	subs.w	r4, r2, sl
 800625c:	eb63 050b 	sbc.w	r5, r3, fp
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	00eb      	lsls	r3, r5, #3
 800626a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800626e:	00e2      	lsls	r2, r4, #3
 8006270:	4614      	mov	r4, r2
 8006272:	461d      	mov	r5, r3
 8006274:	4643      	mov	r3, r8
 8006276:	18e3      	adds	r3, r4, r3
 8006278:	603b      	str	r3, [r7, #0]
 800627a:	464b      	mov	r3, r9
 800627c:	eb45 0303 	adc.w	r3, r5, r3
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800628e:	4629      	mov	r1, r5
 8006290:	028b      	lsls	r3, r1, #10
 8006292:	4621      	mov	r1, r4
 8006294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006298:	4621      	mov	r1, r4
 800629a:	028a      	lsls	r2, r1, #10
 800629c:	4610      	mov	r0, r2
 800629e:	4619      	mov	r1, r3
 80062a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a2:	2200      	movs	r2, #0
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	61fa      	str	r2, [r7, #28]
 80062a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062ac:	f7fa fcec 	bl	8000c88 <__aeabi_uldivmod>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4613      	mov	r3, r2
 80062b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062b8:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	0c1b      	lsrs	r3, r3, #16
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	3301      	adds	r3, #1
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80062c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062d2:	e002      	b.n	80062da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_RCC_GetSysClockFreq+0x204>)
 80062d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3750      	adds	r7, #80	; 0x50
 80062e0:	46bd      	mov	sp, r7
 80062e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062e6:	bf00      	nop
 80062e8:	40023800 	.word	0x40023800
 80062ec:	00f42400 	.word	0x00f42400
 80062f0:	007a1200 	.word	0x007a1200

080062f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062f8:	4b03      	ldr	r3, [pc, #12]	; (8006308 <HAL_RCC_GetHCLKFreq+0x14>)
 80062fa:	681b      	ldr	r3, [r3, #0]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	20000004 	.word	0x20000004

0800630c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006310:	f7ff fff0 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 8006314:	4602      	mov	r2, r0
 8006316:	4b05      	ldr	r3, [pc, #20]	; (800632c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	0a9b      	lsrs	r3, r3, #10
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	4903      	ldr	r1, [pc, #12]	; (8006330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006322:	5ccb      	ldrb	r3, [r1, r3]
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006328:	4618      	mov	r0, r3
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40023800 	.word	0x40023800
 8006330:	0800cf58 	.word	0x0800cf58

08006334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e07b      	b.n	800643e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d108      	bne.n	8006360 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006356:	d009      	beq.n	800636c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	61da      	str	r2, [r3, #28]
 800635e:	e005      	b.n	800636c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7fb fbc4 	bl	8001b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f0:	ea42 0103 	orr.w	r1, r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	0c1b      	lsrs	r3, r3, #16
 800640a:	f003 0104 	and.w	r1, r3, #4
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	f003 0210 	and.w	r2, r3, #16
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800642c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b088      	sub	sp, #32
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_SPI_Transmit+0x22>
 8006464:	2302      	movs	r3, #2
 8006466:	e126      	b.n	80066b6 <HAL_SPI_Transmit+0x270>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006470:	f7fb ff38 	bl	80022e4 <HAL_GetTick>
 8006474:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b01      	cmp	r3, #1
 8006484:	d002      	beq.n	800648c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006486:	2302      	movs	r3, #2
 8006488:	77fb      	strb	r3, [r7, #31]
    goto error;
 800648a:	e10b      	b.n	80066a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <HAL_SPI_Transmit+0x52>
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d102      	bne.n	800649e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800649c:	e102      	b.n	80066a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2203      	movs	r2, #3
 80064a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	88fa      	ldrh	r2, [r7, #6]
 80064b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	88fa      	ldrh	r2, [r7, #6]
 80064bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e4:	d10f      	bne.n	8006506 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006504:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d007      	beq.n	8006524 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800652c:	d14b      	bne.n	80065c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_SPI_Transmit+0xf6>
 8006536:	8afb      	ldrh	r3, [r7, #22]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d13e      	bne.n	80065ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	881a      	ldrh	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006560:	e02b      	b.n	80065ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b02      	cmp	r3, #2
 800656e:	d112      	bne.n	8006596 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	881a      	ldrh	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	1c9a      	adds	r2, r3, #2
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	86da      	strh	r2, [r3, #54]	; 0x36
 8006594:	e011      	b.n	80065ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006596:	f7fb fea5 	bl	80022e4 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d803      	bhi.n	80065ae <HAL_SPI_Transmit+0x168>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d102      	bne.n	80065b4 <HAL_SPI_Transmit+0x16e>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d102      	bne.n	80065ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065b8:	e074      	b.n	80066a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1ce      	bne.n	8006562 <HAL_SPI_Transmit+0x11c>
 80065c4:	e04c      	b.n	8006660 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_SPI_Transmit+0x18e>
 80065ce:	8afb      	ldrh	r3, [r7, #22]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d140      	bne.n	8006656 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	7812      	ldrb	r2, [r2, #0]
 80065e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065fa:	e02c      	b.n	8006656 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b02      	cmp	r3, #2
 8006608:	d113      	bne.n	8006632 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	330c      	adds	r3, #12
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006630:	e011      	b.n	8006656 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006632:	f7fb fe57 	bl	80022e4 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d803      	bhi.n	800664a <HAL_SPI_Transmit+0x204>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d102      	bne.n	8006650 <HAL_SPI_Transmit+0x20a>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006654:	e026      	b.n	80066a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1cd      	bne.n	80065fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f9ff 	bl	8006a68 <SPI_EndRxTxTransaction>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800667e:	2300      	movs	r3, #0
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e000      	b.n	80066a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80066a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_SPI_Transmit_DMA+0x20>
 80066dc:	2302      	movs	r3, #2
 80066de:	e09b      	b.n	8006818 <HAL_SPI_Transmit_DMA+0x158>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d002      	beq.n	80066fa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80066f4:	2302      	movs	r3, #2
 80066f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066f8:	e089      	b.n	800680e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <HAL_SPI_Transmit_DMA+0x46>
 8006700:	88fb      	ldrh	r3, [r7, #6]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d102      	bne.n	800670c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	75fb      	strb	r3, [r7, #23]
    goto error;
 800670a:	e080      	b.n	800680e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2203      	movs	r2, #3
 8006710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	88fa      	ldrh	r2, [r7, #6]
 8006724:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	88fa      	ldrh	r2, [r7, #6]
 800672a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006752:	d10f      	bne.n	8006774 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006762:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006772:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006778:	4a29      	ldr	r2, [pc, #164]	; (8006820 <HAL_SPI_Transmit_DMA+0x160>)
 800677a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006780:	4a28      	ldr	r2, [pc, #160]	; (8006824 <HAL_SPI_Transmit_DMA+0x164>)
 8006782:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006788:	4a27      	ldr	r2, [pc, #156]	; (8006828 <HAL_SPI_Transmit_DMA+0x168>)
 800678a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006790:	2200      	movs	r2, #0
 8006792:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	4619      	mov	r1, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80067ac:	f7fb ff8a 	bl	80026c4 <HAL_DMA_Start_IT>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00c      	beq.n	80067d0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	f043 0210 	orr.w	r2, r3, #16
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80067ce:	e01e      	b.n	800680e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d007      	beq.n	80067ee <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0220 	orr.w	r2, r2, #32
 80067fc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0202 	orr.w	r2, r2, #2
 800680c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	080068fd 	.word	0x080068fd
 8006824:	08006855 	.word	0x08006855
 8006828:	08006919 	.word	0x08006919

0800682c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006862:	f7fb fd3f 	bl	80022e4 <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006876:	d03b      	beq.n	80068f0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0220 	bic.w	r2, r2, #32
 8006886:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0202 	bic.w	r2, r2, #2
 8006896:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	2164      	movs	r1, #100	; 0x64
 800689c:	6978      	ldr	r0, [r7, #20]
 800689e:	f000 f8e3 	bl	8006a68 <SPI_EndRxTxTransaction>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2200      	movs	r2, #0
 80068d6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80068e8:	6978      	ldr	r0, [r7, #20]
 80068ea:	f7ff ffa9 	bl	8006840 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068ee:	e002      	b.n	80068f6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80068f0:	6978      	ldr	r0, [r7, #20]
 80068f2:	f003 fb2b 	bl	8009f4c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7ff ff8e 	bl	800682c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0203 	bic.w	r2, r2, #3
 8006934:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	f043 0210 	orr.w	r2, r3, #16
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff ff78 	bl	8006840 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006950:	bf00      	nop
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	603b      	str	r3, [r7, #0]
 8006964:	4613      	mov	r3, r2
 8006966:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006968:	f7fb fcbc 	bl	80022e4 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	4413      	add	r3, r2
 8006976:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006978:	f7fb fcb4 	bl	80022e4 <HAL_GetTick>
 800697c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800697e:	4b39      	ldr	r3, [pc, #228]	; (8006a64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	015b      	lsls	r3, r3, #5
 8006984:	0d1b      	lsrs	r3, r3, #20
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	fb02 f303 	mul.w	r3, r2, r3
 800698c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800698e:	e054      	b.n	8006a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	d050      	beq.n	8006a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006998:	f7fb fca4 	bl	80022e4 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d902      	bls.n	80069ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d13d      	bne.n	8006a2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c6:	d111      	bne.n	80069ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d0:	d004      	beq.n	80069dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069da:	d107      	bne.n	80069ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f4:	d10f      	bne.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e017      	b.n	8006a5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4013      	ands	r3, r2
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	bf0c      	ite	eq
 8006a4a:	2301      	moveq	r3, #1
 8006a4c:	2300      	movne	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d19b      	bne.n	8006990 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3720      	adds	r7, #32
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000004 	.word	0x20000004

08006a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a74:	4b1b      	ldr	r3, [pc, #108]	; (8006ae4 <SPI_EndRxTxTransaction+0x7c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1b      	ldr	r2, [pc, #108]	; (8006ae8 <SPI_EndRxTxTransaction+0x80>)
 8006a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7e:	0d5b      	lsrs	r3, r3, #21
 8006a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a84:	fb02 f303 	mul.w	r3, r2, r3
 8006a88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a92:	d112      	bne.n	8006aba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2180      	movs	r1, #128	; 0x80
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7ff ff5a 	bl	8006958 <SPI_WaitFlagStateUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d016      	beq.n	8006ad8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aae:	f043 0220 	orr.w	r2, r3, #32
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e00f      	b.n	8006ada <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad0:	2b80      	cmp	r3, #128	; 0x80
 8006ad2:	d0f2      	beq.n	8006aba <SPI_EndRxTxTransaction+0x52>
 8006ad4:	e000      	b.n	8006ad8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ad6:	bf00      	nop
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000004 	.word	0x20000004
 8006ae8:	165e9f81 	.word	0x165e9f81

08006aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e041      	b.n	8006b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fb facc 	bl	80020b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f001 f98c 	bl	8007e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e041      	b.n	8006c20 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f88d 	bl	8006cd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f001 f93d 	bl	8007e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6a1a      	ldr	r2, [r3, #32]
 8006c3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10f      	bne.n	8006c68 <HAL_TIM_OC_DeInit+0x40>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6a1a      	ldr	r2, [r3, #32]
 8006c4e:	f240 4344 	movw	r3, #1092	; 0x444
 8006c52:	4013      	ands	r3, r2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d107      	bne.n	8006c68 <HAL_TIM_OC_DeInit+0x40>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0201 	bic.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f83b 	bl	8006ce4 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <HAL_TIM_OC_Start_IT+0x28>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	bf14      	ite	ne
 8006d18:	2301      	movne	r3, #1
 8006d1a:	2300      	moveq	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	e022      	b.n	8006d66 <HAL_TIM_OC_Start_IT+0x6e>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d109      	bne.n	8006d3a <HAL_TIM_OC_Start_IT+0x42>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	bf14      	ite	ne
 8006d32:	2301      	movne	r3, #1
 8006d34:	2300      	moveq	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	e015      	b.n	8006d66 <HAL_TIM_OC_Start_IT+0x6e>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d109      	bne.n	8006d54 <HAL_TIM_OC_Start_IT+0x5c>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	bf14      	ite	ne
 8006d4c:	2301      	movne	r3, #1
 8006d4e:	2300      	moveq	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	e008      	b.n	8006d66 <HAL_TIM_OC_Start_IT+0x6e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	bf14      	ite	ne
 8006d60:	2301      	movne	r3, #1
 8006d62:	2300      	moveq	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e0c7      	b.n	8006efe <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <HAL_TIM_OC_Start_IT+0x86>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d7c:	e013      	b.n	8006da6 <HAL_TIM_OC_Start_IT+0xae>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d104      	bne.n	8006d8e <HAL_TIM_OC_Start_IT+0x96>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d8c:	e00b      	b.n	8006da6 <HAL_TIM_OC_Start_IT+0xae>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d104      	bne.n	8006d9e <HAL_TIM_OC_Start_IT+0xa6>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d9c:	e003      	b.n	8006da6 <HAL_TIM_OC_Start_IT+0xae>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d841      	bhi.n	8006e30 <HAL_TIM_OC_Start_IT+0x138>
 8006dac:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <HAL_TIM_OC_Start_IT+0xbc>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006de9 	.word	0x08006de9
 8006db8:	08006e31 	.word	0x08006e31
 8006dbc:	08006e31 	.word	0x08006e31
 8006dc0:	08006e31 	.word	0x08006e31
 8006dc4:	08006dfb 	.word	0x08006dfb
 8006dc8:	08006e31 	.word	0x08006e31
 8006dcc:	08006e31 	.word	0x08006e31
 8006dd0:	08006e31 	.word	0x08006e31
 8006dd4:	08006e0d 	.word	0x08006e0d
 8006dd8:	08006e31 	.word	0x08006e31
 8006ddc:	08006e31 	.word	0x08006e31
 8006de0:	08006e31 	.word	0x08006e31
 8006de4:	08006e1f 	.word	0x08006e1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0202 	orr.w	r2, r2, #2
 8006df6:	60da      	str	r2, [r3, #12]
      break;
 8006df8:	e01d      	b.n	8006e36 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0204 	orr.w	r2, r2, #4
 8006e08:	60da      	str	r2, [r3, #12]
      break;
 8006e0a:	e014      	b.n	8006e36 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0208 	orr.w	r2, r2, #8
 8006e1a:	60da      	str	r2, [r3, #12]
      break;
 8006e1c:	e00b      	b.n	8006e36 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0210 	orr.w	r2, r2, #16
 8006e2c:	60da      	str	r2, [r3, #12]
      break;
 8006e2e:	e002      	b.n	8006e36 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	73fb      	strb	r3, [r7, #15]
      break;
 8006e34:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d15f      	bne.n	8006efc <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2201      	movs	r2, #1
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 fb79 	bl	800853c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a2e      	ldr	r2, [pc, #184]	; (8006f08 <HAL_TIM_OC_Start_IT+0x210>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d004      	beq.n	8006e5e <HAL_TIM_OC_Start_IT+0x166>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a2c      	ldr	r2, [pc, #176]	; (8006f0c <HAL_TIM_OC_Start_IT+0x214>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d101      	bne.n	8006e62 <HAL_TIM_OC_Start_IT+0x16a>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e000      	b.n	8006e64 <HAL_TIM_OC_Start_IT+0x16c>
 8006e62:	2300      	movs	r3, #0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e76:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <HAL_TIM_OC_Start_IT+0x210>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d022      	beq.n	8006ec8 <HAL_TIM_OC_Start_IT+0x1d0>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8a:	d01d      	beq.n	8006ec8 <HAL_TIM_OC_Start_IT+0x1d0>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1f      	ldr	r2, [pc, #124]	; (8006f10 <HAL_TIM_OC_Start_IT+0x218>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d018      	beq.n	8006ec8 <HAL_TIM_OC_Start_IT+0x1d0>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <HAL_TIM_OC_Start_IT+0x21c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d013      	beq.n	8006ec8 <HAL_TIM_OC_Start_IT+0x1d0>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <HAL_TIM_OC_Start_IT+0x220>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00e      	beq.n	8006ec8 <HAL_TIM_OC_Start_IT+0x1d0>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a17      	ldr	r2, [pc, #92]	; (8006f0c <HAL_TIM_OC_Start_IT+0x214>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d009      	beq.n	8006ec8 <HAL_TIM_OC_Start_IT+0x1d0>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <HAL_TIM_OC_Start_IT+0x224>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d004      	beq.n	8006ec8 <HAL_TIM_OC_Start_IT+0x1d0>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <HAL_TIM_OC_Start_IT+0x228>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d111      	bne.n	8006eec <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0307 	and.w	r3, r3, #7
 8006ed2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b06      	cmp	r3, #6
 8006ed8:	d010      	beq.n	8006efc <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0201 	orr.w	r2, r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eea:	e007      	b.n	8006efc <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	40010400 	.word	0x40010400
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800
 8006f18:	40000c00 	.word	0x40000c00
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40001800 	.word	0x40001800

08006f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e041      	b.n	8006fba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fb f88e 	bl	800206c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4610      	mov	r0, r2
 8006f64:	f000 ff70 	bl	8007e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <HAL_TIM_PWM_Start+0x24>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	e022      	b.n	800702e <HAL_TIM_PWM_Start+0x6a>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d109      	bne.n	8007002 <HAL_TIM_PWM_Start+0x3e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	bf14      	ite	ne
 8006ffa:	2301      	movne	r3, #1
 8006ffc:	2300      	moveq	r3, #0
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	e015      	b.n	800702e <HAL_TIM_PWM_Start+0x6a>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b08      	cmp	r3, #8
 8007006:	d109      	bne.n	800701c <HAL_TIM_PWM_Start+0x58>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	bf14      	ite	ne
 8007014:	2301      	movne	r3, #1
 8007016:	2300      	moveq	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	e008      	b.n	800702e <HAL_TIM_PWM_Start+0x6a>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	bf14      	ite	ne
 8007028:	2301      	movne	r3, #1
 800702a:	2300      	moveq	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e07c      	b.n	8007130 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d104      	bne.n	8007046 <HAL_TIM_PWM_Start+0x82>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007044:	e013      	b.n	800706e <HAL_TIM_PWM_Start+0xaa>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b04      	cmp	r3, #4
 800704a:	d104      	bne.n	8007056 <HAL_TIM_PWM_Start+0x92>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007054:	e00b      	b.n	800706e <HAL_TIM_PWM_Start+0xaa>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b08      	cmp	r3, #8
 800705a:	d104      	bne.n	8007066 <HAL_TIM_PWM_Start+0xa2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007064:	e003      	b.n	800706e <HAL_TIM_PWM_Start+0xaa>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2201      	movs	r2, #1
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f001 fa60 	bl	800853c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a2d      	ldr	r2, [pc, #180]	; (8007138 <HAL_TIM_PWM_Start+0x174>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_TIM_PWM_Start+0xcc>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a2c      	ldr	r2, [pc, #176]	; (800713c <HAL_TIM_PWM_Start+0x178>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d101      	bne.n	8007094 <HAL_TIM_PWM_Start+0xd0>
 8007090:	2301      	movs	r3, #1
 8007092:	e000      	b.n	8007096 <HAL_TIM_PWM_Start+0xd2>
 8007094:	2300      	movs	r3, #0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a22      	ldr	r2, [pc, #136]	; (8007138 <HAL_TIM_PWM_Start+0x174>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d022      	beq.n	80070fa <HAL_TIM_PWM_Start+0x136>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070bc:	d01d      	beq.n	80070fa <HAL_TIM_PWM_Start+0x136>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <HAL_TIM_PWM_Start+0x17c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d018      	beq.n	80070fa <HAL_TIM_PWM_Start+0x136>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <HAL_TIM_PWM_Start+0x180>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d013      	beq.n	80070fa <HAL_TIM_PWM_Start+0x136>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1c      	ldr	r2, [pc, #112]	; (8007148 <HAL_TIM_PWM_Start+0x184>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00e      	beq.n	80070fa <HAL_TIM_PWM_Start+0x136>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a16      	ldr	r2, [pc, #88]	; (800713c <HAL_TIM_PWM_Start+0x178>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d009      	beq.n	80070fa <HAL_TIM_PWM_Start+0x136>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a18      	ldr	r2, [pc, #96]	; (800714c <HAL_TIM_PWM_Start+0x188>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d004      	beq.n	80070fa <HAL_TIM_PWM_Start+0x136>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a16      	ldr	r2, [pc, #88]	; (8007150 <HAL_TIM_PWM_Start+0x18c>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d111      	bne.n	800711e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b06      	cmp	r3, #6
 800710a:	d010      	beq.n	800712e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0201 	orr.w	r2, r2, #1
 800711a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711c:	e007      	b.n	800712e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 0201 	orr.w	r2, r2, #1
 800712c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40010000 	.word	0x40010000
 800713c:	40010400 	.word	0x40010400
 8007140:	40000400 	.word	0x40000400
 8007144:	40000800 	.word	0x40000800
 8007148:	40000c00 	.word	0x40000c00
 800714c:	40014000 	.word	0x40014000
 8007150:	40001800 	.word	0x40001800

08007154 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2200      	movs	r2, #0
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f001 f9e8 	bl	800853c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a2e      	ldr	r2, [pc, #184]	; (800722c <HAL_TIM_PWM_Stop+0xd8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <HAL_TIM_PWM_Stop+0x2c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a2d      	ldr	r2, [pc, #180]	; (8007230 <HAL_TIM_PWM_Stop+0xdc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d101      	bne.n	8007184 <HAL_TIM_PWM_Stop+0x30>
 8007180:	2301      	movs	r3, #1
 8007182:	e000      	b.n	8007186 <HAL_TIM_PWM_Stop+0x32>
 8007184:	2300      	movs	r3, #0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d017      	beq.n	80071ba <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6a1a      	ldr	r2, [r3, #32]
 8007190:	f241 1311 	movw	r3, #4369	; 0x1111
 8007194:	4013      	ands	r3, r2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10f      	bne.n	80071ba <HAL_TIM_PWM_Stop+0x66>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6a1a      	ldr	r2, [r3, #32]
 80071a0:	f240 4344 	movw	r3, #1092	; 0x444
 80071a4:	4013      	ands	r3, r2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d107      	bne.n	80071ba <HAL_TIM_PWM_Stop+0x66>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80071c4:	4013      	ands	r3, r2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10f      	bne.n	80071ea <HAL_TIM_PWM_Stop+0x96>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6a1a      	ldr	r2, [r3, #32]
 80071d0:	f240 4344 	movw	r3, #1092	; 0x444
 80071d4:	4013      	ands	r3, r2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d107      	bne.n	80071ea <HAL_TIM_PWM_Stop+0x96>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0201 	bic.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <HAL_TIM_PWM_Stop+0xa6>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f8:	e013      	b.n	8007222 <HAL_TIM_PWM_Stop+0xce>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d104      	bne.n	800720a <HAL_TIM_PWM_Stop+0xb6>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007208:	e00b      	b.n	8007222 <HAL_TIM_PWM_Stop+0xce>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b08      	cmp	r3, #8
 800720e:	d104      	bne.n	800721a <HAL_TIM_PWM_Stop+0xc6>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007218:	e003      	b.n	8007222 <HAL_TIM_PWM_Stop+0xce>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	40010000 	.word	0x40010000
 8007230:	40010400 	.word	0x40010400

08007234 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e041      	b.n	80072ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f88d 	bl	800737a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3304      	adds	r3, #4
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f000 fde8 	bl	8007e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2202      	movs	r2, #2
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80072ec:	4013      	ands	r3, r2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10f      	bne.n	8007312 <HAL_TIM_IC_DeInit+0x40>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6a1a      	ldr	r2, [r3, #32]
 80072f8:	f240 4344 	movw	r3, #1092	; 0x444
 80072fc:	4013      	ands	r3, r2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d107      	bne.n	8007312 <HAL_TIM_IC_DeInit+0x40>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0201 	bic.w	r2, r2, #1
 8007310:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f83b 	bl	800738e <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007382:	bf00      	nop
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
	...

080073a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d104      	bne.n	80073c2 <HAL_TIM_IC_Start_IT+0x1e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	e013      	b.n	80073ea <HAL_TIM_IC_Start_IT+0x46>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d104      	bne.n	80073d2 <HAL_TIM_IC_Start_IT+0x2e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	e00b      	b.n	80073ea <HAL_TIM_IC_Start_IT+0x46>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d104      	bne.n	80073e2 <HAL_TIM_IC_Start_IT+0x3e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	e003      	b.n	80073ea <HAL_TIM_IC_Start_IT+0x46>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d104      	bne.n	80073fc <HAL_TIM_IC_Start_IT+0x58>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	e013      	b.n	8007424 <HAL_TIM_IC_Start_IT+0x80>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d104      	bne.n	800740c <HAL_TIM_IC_Start_IT+0x68>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007408:	b2db      	uxtb	r3, r3
 800740a:	e00b      	b.n	8007424 <HAL_TIM_IC_Start_IT+0x80>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2b08      	cmp	r3, #8
 8007410:	d104      	bne.n	800741c <HAL_TIM_IC_Start_IT+0x78>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007418:	b2db      	uxtb	r3, r3
 800741a:	e003      	b.n	8007424 <HAL_TIM_IC_Start_IT+0x80>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007422:	b2db      	uxtb	r3, r3
 8007424:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d102      	bne.n	8007432 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800742c:	7b7b      	ldrb	r3, [r7, #13]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d001      	beq.n	8007436 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e0cc      	b.n	80075d0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <HAL_TIM_IC_Start_IT+0xa2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007444:	e013      	b.n	800746e <HAL_TIM_IC_Start_IT+0xca>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b04      	cmp	r3, #4
 800744a:	d104      	bne.n	8007456 <HAL_TIM_IC_Start_IT+0xb2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007454:	e00b      	b.n	800746e <HAL_TIM_IC_Start_IT+0xca>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b08      	cmp	r3, #8
 800745a:	d104      	bne.n	8007466 <HAL_TIM_IC_Start_IT+0xc2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007464:	e003      	b.n	800746e <HAL_TIM_IC_Start_IT+0xca>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2202      	movs	r2, #2
 800746a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d104      	bne.n	800747e <HAL_TIM_IC_Start_IT+0xda>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800747c:	e013      	b.n	80074a6 <HAL_TIM_IC_Start_IT+0x102>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b04      	cmp	r3, #4
 8007482:	d104      	bne.n	800748e <HAL_TIM_IC_Start_IT+0xea>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800748c:	e00b      	b.n	80074a6 <HAL_TIM_IC_Start_IT+0x102>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b08      	cmp	r3, #8
 8007492:	d104      	bne.n	800749e <HAL_TIM_IC_Start_IT+0xfa>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800749c:	e003      	b.n	80074a6 <HAL_TIM_IC_Start_IT+0x102>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2202      	movs	r2, #2
 80074a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b0c      	cmp	r3, #12
 80074aa:	d841      	bhi.n	8007530 <HAL_TIM_IC_Start_IT+0x18c>
 80074ac:	a201      	add	r2, pc, #4	; (adr r2, 80074b4 <HAL_TIM_IC_Start_IT+0x110>)
 80074ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b2:	bf00      	nop
 80074b4:	080074e9 	.word	0x080074e9
 80074b8:	08007531 	.word	0x08007531
 80074bc:	08007531 	.word	0x08007531
 80074c0:	08007531 	.word	0x08007531
 80074c4:	080074fb 	.word	0x080074fb
 80074c8:	08007531 	.word	0x08007531
 80074cc:	08007531 	.word	0x08007531
 80074d0:	08007531 	.word	0x08007531
 80074d4:	0800750d 	.word	0x0800750d
 80074d8:	08007531 	.word	0x08007531
 80074dc:	08007531 	.word	0x08007531
 80074e0:	08007531 	.word	0x08007531
 80074e4:	0800751f 	.word	0x0800751f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0202 	orr.w	r2, r2, #2
 80074f6:	60da      	str	r2, [r3, #12]
      break;
 80074f8:	e01d      	b.n	8007536 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f042 0204 	orr.w	r2, r2, #4
 8007508:	60da      	str	r2, [r3, #12]
      break;
 800750a:	e014      	b.n	8007536 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0208 	orr.w	r2, r2, #8
 800751a:	60da      	str	r2, [r3, #12]
      break;
 800751c:	e00b      	b.n	8007536 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0210 	orr.w	r2, r2, #16
 800752c:	60da      	str	r2, [r3, #12]
      break;
 800752e:	e002      	b.n	8007536 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	73fb      	strb	r3, [r7, #15]
      break;
 8007534:	bf00      	nop
  }

  if (status == HAL_OK)
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d148      	bne.n	80075ce <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2201      	movs	r2, #1
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fff9 	bl	800853c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a22      	ldr	r2, [pc, #136]	; (80075d8 <HAL_TIM_IC_Start_IT+0x234>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d022      	beq.n	800759a <HAL_TIM_IC_Start_IT+0x1f6>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755c:	d01d      	beq.n	800759a <HAL_TIM_IC_Start_IT+0x1f6>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <HAL_TIM_IC_Start_IT+0x238>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d018      	beq.n	800759a <HAL_TIM_IC_Start_IT+0x1f6>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1c      	ldr	r2, [pc, #112]	; (80075e0 <HAL_TIM_IC_Start_IT+0x23c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <HAL_TIM_IC_Start_IT+0x1f6>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a1b      	ldr	r2, [pc, #108]	; (80075e4 <HAL_TIM_IC_Start_IT+0x240>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00e      	beq.n	800759a <HAL_TIM_IC_Start_IT+0x1f6>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a19      	ldr	r2, [pc, #100]	; (80075e8 <HAL_TIM_IC_Start_IT+0x244>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_TIM_IC_Start_IT+0x1f6>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a18      	ldr	r2, [pc, #96]	; (80075ec <HAL_TIM_IC_Start_IT+0x248>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_TIM_IC_Start_IT+0x1f6>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a16      	ldr	r2, [pc, #88]	; (80075f0 <HAL_TIM_IC_Start_IT+0x24c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d111      	bne.n	80075be <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 0307 	and.w	r3, r3, #7
 80075a4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b06      	cmp	r3, #6
 80075aa:	d010      	beq.n	80075ce <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0201 	orr.w	r2, r2, #1
 80075ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075bc:	e007      	b.n	80075ce <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0201 	orr.w	r2, r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	40010000 	.word	0x40010000
 80075dc:	40000400 	.word	0x40000400
 80075e0:	40000800 	.word	0x40000800
 80075e4:	40000c00 	.word	0x40000c00
 80075e8:	40010400 	.word	0x40010400
 80075ec:	40014000 	.word	0x40014000
 80075f0:	40001800 	.word	0x40001800

080075f4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b0c      	cmp	r3, #12
 8007606:	d841      	bhi.n	800768c <HAL_TIM_IC_Stop_IT+0x98>
 8007608:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <HAL_TIM_IC_Stop_IT+0x1c>)
 800760a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760e:	bf00      	nop
 8007610:	08007645 	.word	0x08007645
 8007614:	0800768d 	.word	0x0800768d
 8007618:	0800768d 	.word	0x0800768d
 800761c:	0800768d 	.word	0x0800768d
 8007620:	08007657 	.word	0x08007657
 8007624:	0800768d 	.word	0x0800768d
 8007628:	0800768d 	.word	0x0800768d
 800762c:	0800768d 	.word	0x0800768d
 8007630:	08007669 	.word	0x08007669
 8007634:	0800768d 	.word	0x0800768d
 8007638:	0800768d 	.word	0x0800768d
 800763c:	0800768d 	.word	0x0800768d
 8007640:	0800767b 	.word	0x0800767b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0202 	bic.w	r2, r2, #2
 8007652:	60da      	str	r2, [r3, #12]
      break;
 8007654:	e01d      	b.n	8007692 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0204 	bic.w	r2, r2, #4
 8007664:	60da      	str	r2, [r3, #12]
      break;
 8007666:	e014      	b.n	8007692 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0208 	bic.w	r2, r2, #8
 8007676:	60da      	str	r2, [r3, #12]
      break;
 8007678:	e00b      	b.n	8007692 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0210 	bic.w	r2, r2, #16
 8007688:	60da      	str	r2, [r3, #12]
      break;
 800768a:	e002      	b.n	8007692 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	73fb      	strb	r3, [r7, #15]
      break;
 8007690:	bf00      	nop
  }

  if (status == HAL_OK)
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d156      	bne.n	8007746 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2200      	movs	r2, #0
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 ff4b 	bl	800853c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6a1a      	ldr	r2, [r3, #32]
 80076ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10f      	bne.n	80076d6 <HAL_TIM_IC_Stop_IT+0xe2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6a1a      	ldr	r2, [r3, #32]
 80076bc:	f240 4344 	movw	r3, #1092	; 0x444
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d107      	bne.n	80076d6 <HAL_TIM_IC_Stop_IT+0xe2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0201 	bic.w	r2, r2, #1
 80076d4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d104      	bne.n	80076e6 <HAL_TIM_IC_Stop_IT+0xf2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076e4:	e013      	b.n	800770e <HAL_TIM_IC_Stop_IT+0x11a>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d104      	bne.n	80076f6 <HAL_TIM_IC_Stop_IT+0x102>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076f4:	e00b      	b.n	800770e <HAL_TIM_IC_Stop_IT+0x11a>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b08      	cmp	r3, #8
 80076fa:	d104      	bne.n	8007706 <HAL_TIM_IC_Stop_IT+0x112>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007704:	e003      	b.n	800770e <HAL_TIM_IC_Stop_IT+0x11a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d104      	bne.n	800771e <HAL_TIM_IC_Stop_IT+0x12a>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800771c:	e013      	b.n	8007746 <HAL_TIM_IC_Stop_IT+0x152>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b04      	cmp	r3, #4
 8007722:	d104      	bne.n	800772e <HAL_TIM_IC_Stop_IT+0x13a>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800772c:	e00b      	b.n	8007746 <HAL_TIM_IC_Stop_IT+0x152>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b08      	cmp	r3, #8
 8007732:	d104      	bne.n	800773e <HAL_TIM_IC_Stop_IT+0x14a>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800773c:	e003      	b.n	8007746 <HAL_TIM_IC_Stop_IT+0x152>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e097      	b.n	8007894 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d106      	bne.n	800777e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7fa fc27 	bl	8001fcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2202      	movs	r2, #2
 8007782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007794:	f023 0307 	bic.w	r3, r3, #7
 8007798:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f000 fb4f 	bl	8007e48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	4313      	orrs	r3, r2
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80077f0:	f023 030c 	bic.w	r3, r3, #12
 80077f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007800:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	4313      	orrs	r3, r2
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	011a      	lsls	r2, r3, #4
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	031b      	lsls	r3, r3, #12
 8007820:	4313      	orrs	r3, r2
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800782e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007836:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	011b      	lsls	r3, r3, #4
 8007842:	4313      	orrs	r3, r2
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d122      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d11b      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0202 	mvn.w	r2, #2
 80078c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fa f8fa 	bl	8001ad8 <HAL_TIM_IC_CaptureCallback>
 80078e4:	e005      	b.n	80078f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fa f8e0 	bl	8001aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fa97 	bl	8007e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b04      	cmp	r3, #4
 8007904:	d122      	bne.n	800794c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b04      	cmp	r3, #4
 8007912:	d11b      	bne.n	800794c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0204 	mvn.w	r2, #4
 800791c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2202      	movs	r2, #2
 8007922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fa f8d0 	bl	8001ad8 <HAL_TIM_IC_CaptureCallback>
 8007938:	e005      	b.n	8007946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fa f8b6 	bl	8001aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fa6d 	bl	8007e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0308 	and.w	r3, r3, #8
 8007956:	2b08      	cmp	r3, #8
 8007958:	d122      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0308 	and.w	r3, r3, #8
 8007964:	2b08      	cmp	r3, #8
 8007966:	d11b      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0208 	mvn.w	r2, #8
 8007970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2204      	movs	r2, #4
 8007976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7fa f8a6 	bl	8001ad8 <HAL_TIM_IC_CaptureCallback>
 800798c:	e005      	b.n	800799a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fa f88c 	bl	8001aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fa43 	bl	8007e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0310 	and.w	r3, r3, #16
 80079aa:	2b10      	cmp	r3, #16
 80079ac:	d122      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b10      	cmp	r3, #16
 80079ba:	d11b      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0210 	mvn.w	r2, #16
 80079c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2208      	movs	r2, #8
 80079ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7fa f87c 	bl	8001ad8 <HAL_TIM_IC_CaptureCallback>
 80079e0:	e005      	b.n	80079ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fa f862 	bl	8001aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa19 	bl	8007e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d10e      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d107      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0201 	mvn.w	r2, #1
 8007a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7fa f851 	bl	8001ac2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2a:	2b80      	cmp	r3, #128	; 0x80
 8007a2c:	d10e      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a38:	2b80      	cmp	r3, #128	; 0x80
 8007a3a:	d107      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fe24 	bl	8008694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a56:	2b40      	cmp	r3, #64	; 0x40
 8007a58:	d10e      	bne.n	8007a78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a64:	2b40      	cmp	r3, #64	; 0x40
 8007a66:	d107      	bne.n	8007a78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f9de 	bl	8007e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d10e      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	d107      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f06f 0220 	mvn.w	r2, #32
 8007a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fdee 	bl	8008680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_TIM_OC_ConfigChannel+0x1e>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e048      	b.n	8007b5c <HAL_TIM_OC_ConfigChannel+0xb0>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b0c      	cmp	r3, #12
 8007ad6:	d839      	bhi.n	8007b4c <HAL_TIM_OC_ConfigChannel+0xa0>
 8007ad8:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007b15 	.word	0x08007b15
 8007ae4:	08007b4d 	.word	0x08007b4d
 8007ae8:	08007b4d 	.word	0x08007b4d
 8007aec:	08007b4d 	.word	0x08007b4d
 8007af0:	08007b23 	.word	0x08007b23
 8007af4:	08007b4d 	.word	0x08007b4d
 8007af8:	08007b4d 	.word	0x08007b4d
 8007afc:	08007b4d 	.word	0x08007b4d
 8007b00:	08007b31 	.word	0x08007b31
 8007b04:	08007b4d 	.word	0x08007b4d
 8007b08:	08007b4d 	.word	0x08007b4d
 8007b0c:	08007b4d 	.word	0x08007b4d
 8007b10:	08007b3f 	.word	0x08007b3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68b9      	ldr	r1, [r7, #8]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fa34 	bl	8007f88 <TIM_OC1_SetConfig>
      break;
 8007b20:	e017      	b.n	8007b52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fa9d 	bl	8008068 <TIM_OC2_SetConfig>
      break;
 8007b2e:	e010      	b.n	8007b52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fb0c 	bl	8008154 <TIM_OC3_SetConfig>
      break;
 8007b3c:	e009      	b.n	8007b52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fb79 	bl	800823c <TIM_OC4_SetConfig>
      break;
 8007b4a:	e002      	b.n	8007b52 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e088      	b.n	8007c94 <HAL_TIM_IC_ConfigChannel+0x130>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11b      	bne.n	8007bc8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6818      	ldr	r0, [r3, #0]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	6819      	ldr	r1, [r3, #0]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f000 fba2 	bl	80082e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699a      	ldr	r2, [r3, #24]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 020c 	bic.w	r2, r2, #12
 8007bb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6999      	ldr	r1, [r3, #24]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	689a      	ldr	r2, [r3, #8]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	619a      	str	r2, [r3, #24]
 8007bc6:	e060      	b.n	8007c8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d11c      	bne.n	8007c08 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	6819      	ldr	r1, [r3, #0]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f000 fbf7 	bl	80083d0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699a      	ldr	r2, [r3, #24]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007bf0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6999      	ldr	r1, [r3, #24]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	021a      	lsls	r2, r3, #8
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	619a      	str	r2, [r3, #24]
 8007c06:	e040      	b.n	8007c8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b08      	cmp	r3, #8
 8007c0c:	d11b      	bne.n	8007c46 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	6819      	ldr	r1, [r3, #0]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f000 fc14 	bl	800844a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	69da      	ldr	r2, [r3, #28]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 020c 	bic.w	r2, r2, #12
 8007c30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	69d9      	ldr	r1, [r3, #28]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	61da      	str	r2, [r3, #28]
 8007c44:	e021      	b.n	8007c8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b0c      	cmp	r3, #12
 8007c4a:	d11c      	bne.n	8007c86 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	6819      	ldr	r1, [r3, #0]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f000 fc31 	bl	80084c2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69da      	ldr	r2, [r3, #28]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	69d9      	ldr	r1, [r3, #28]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	021a      	lsls	r2, r3, #8
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	61da      	str	r2, [r3, #28]
 8007c84:	e001      	b.n	8007c8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d101      	bne.n	8007cba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	e0ae      	b.n	8007e18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b0c      	cmp	r3, #12
 8007cc6:	f200 809f 	bhi.w	8007e08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007cca:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007d05 	.word	0x08007d05
 8007cd4:	08007e09 	.word	0x08007e09
 8007cd8:	08007e09 	.word	0x08007e09
 8007cdc:	08007e09 	.word	0x08007e09
 8007ce0:	08007d45 	.word	0x08007d45
 8007ce4:	08007e09 	.word	0x08007e09
 8007ce8:	08007e09 	.word	0x08007e09
 8007cec:	08007e09 	.word	0x08007e09
 8007cf0:	08007d87 	.word	0x08007d87
 8007cf4:	08007e09 	.word	0x08007e09
 8007cf8:	08007e09 	.word	0x08007e09
 8007cfc:	08007e09 	.word	0x08007e09
 8007d00:	08007dc7 	.word	0x08007dc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 f93c 	bl	8007f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699a      	ldr	r2, [r3, #24]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0208 	orr.w	r2, r2, #8
 8007d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	699a      	ldr	r2, [r3, #24]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0204 	bic.w	r2, r2, #4
 8007d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6999      	ldr	r1, [r3, #24]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	619a      	str	r2, [r3, #24]
      break;
 8007d42:	e064      	b.n	8007e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 f98c 	bl	8008068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6999      	ldr	r1, [r3, #24]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	021a      	lsls	r2, r3, #8
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	619a      	str	r2, [r3, #24]
      break;
 8007d84:	e043      	b.n	8007e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f9e1 	bl	8008154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69da      	ldr	r2, [r3, #28]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f042 0208 	orr.w	r2, r2, #8
 8007da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	69da      	ldr	r2, [r3, #28]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0204 	bic.w	r2, r2, #4
 8007db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69d9      	ldr	r1, [r3, #28]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	691a      	ldr	r2, [r3, #16]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	61da      	str	r2, [r3, #28]
      break;
 8007dc4:	e023      	b.n	8007e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68b9      	ldr	r1, [r7, #8]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fa35 	bl	800823c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69da      	ldr	r2, [r3, #28]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69da      	ldr	r2, [r3, #28]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69d9      	ldr	r1, [r3, #28]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	021a      	lsls	r2, r3, #8
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	61da      	str	r2, [r3, #28]
      break;
 8007e06:	e002      	b.n	8007e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a40      	ldr	r2, [pc, #256]	; (8007f5c <TIM_Base_SetConfig+0x114>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d013      	beq.n	8007e88 <TIM_Base_SetConfig+0x40>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e66:	d00f      	beq.n	8007e88 <TIM_Base_SetConfig+0x40>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a3d      	ldr	r2, [pc, #244]	; (8007f60 <TIM_Base_SetConfig+0x118>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d00b      	beq.n	8007e88 <TIM_Base_SetConfig+0x40>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a3c      	ldr	r2, [pc, #240]	; (8007f64 <TIM_Base_SetConfig+0x11c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d007      	beq.n	8007e88 <TIM_Base_SetConfig+0x40>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a3b      	ldr	r2, [pc, #236]	; (8007f68 <TIM_Base_SetConfig+0x120>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_Base_SetConfig+0x40>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a3a      	ldr	r2, [pc, #232]	; (8007f6c <TIM_Base_SetConfig+0x124>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d108      	bne.n	8007e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a2f      	ldr	r2, [pc, #188]	; (8007f5c <TIM_Base_SetConfig+0x114>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d02b      	beq.n	8007efa <TIM_Base_SetConfig+0xb2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea8:	d027      	beq.n	8007efa <TIM_Base_SetConfig+0xb2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a2c      	ldr	r2, [pc, #176]	; (8007f60 <TIM_Base_SetConfig+0x118>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d023      	beq.n	8007efa <TIM_Base_SetConfig+0xb2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a2b      	ldr	r2, [pc, #172]	; (8007f64 <TIM_Base_SetConfig+0x11c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d01f      	beq.n	8007efa <TIM_Base_SetConfig+0xb2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a2a      	ldr	r2, [pc, #168]	; (8007f68 <TIM_Base_SetConfig+0x120>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d01b      	beq.n	8007efa <TIM_Base_SetConfig+0xb2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a29      	ldr	r2, [pc, #164]	; (8007f6c <TIM_Base_SetConfig+0x124>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d017      	beq.n	8007efa <TIM_Base_SetConfig+0xb2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a28      	ldr	r2, [pc, #160]	; (8007f70 <TIM_Base_SetConfig+0x128>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d013      	beq.n	8007efa <TIM_Base_SetConfig+0xb2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a27      	ldr	r2, [pc, #156]	; (8007f74 <TIM_Base_SetConfig+0x12c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00f      	beq.n	8007efa <TIM_Base_SetConfig+0xb2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a26      	ldr	r2, [pc, #152]	; (8007f78 <TIM_Base_SetConfig+0x130>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00b      	beq.n	8007efa <TIM_Base_SetConfig+0xb2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a25      	ldr	r2, [pc, #148]	; (8007f7c <TIM_Base_SetConfig+0x134>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d007      	beq.n	8007efa <TIM_Base_SetConfig+0xb2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a24      	ldr	r2, [pc, #144]	; (8007f80 <TIM_Base_SetConfig+0x138>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d003      	beq.n	8007efa <TIM_Base_SetConfig+0xb2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a23      	ldr	r2, [pc, #140]	; (8007f84 <TIM_Base_SetConfig+0x13c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d108      	bne.n	8007f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a0a      	ldr	r2, [pc, #40]	; (8007f5c <TIM_Base_SetConfig+0x114>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <TIM_Base_SetConfig+0xf8>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a0c      	ldr	r2, [pc, #48]	; (8007f6c <TIM_Base_SetConfig+0x124>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d103      	bne.n	8007f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	615a      	str	r2, [r3, #20]
}
 8007f4e:	bf00      	nop
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	40010000 	.word	0x40010000
 8007f60:	40000400 	.word	0x40000400
 8007f64:	40000800 	.word	0x40000800
 8007f68:	40000c00 	.word	0x40000c00
 8007f6c:	40010400 	.word	0x40010400
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800
 8007f7c:	40001800 	.word	0x40001800
 8007f80:	40001c00 	.word	0x40001c00
 8007f84:	40002000 	.word	0x40002000

08007f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	f023 0201 	bic.w	r2, r3, #1
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0303 	bic.w	r3, r3, #3
 8007fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f023 0302 	bic.w	r3, r3, #2
 8007fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a20      	ldr	r2, [pc, #128]	; (8008060 <TIM_OC1_SetConfig+0xd8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d003      	beq.n	8007fec <TIM_OC1_SetConfig+0x64>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a1f      	ldr	r2, [pc, #124]	; (8008064 <TIM_OC1_SetConfig+0xdc>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d10c      	bne.n	8008006 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	f023 0308 	bic.w	r3, r3, #8
 8007ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f023 0304 	bic.w	r3, r3, #4
 8008004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a15      	ldr	r2, [pc, #84]	; (8008060 <TIM_OC1_SetConfig+0xd8>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d003      	beq.n	8008016 <TIM_OC1_SetConfig+0x8e>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a14      	ldr	r2, [pc, #80]	; (8008064 <TIM_OC1_SetConfig+0xdc>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d111      	bne.n	800803a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800801c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	4313      	orrs	r3, r2
 800802e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4313      	orrs	r3, r2
 8008038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	621a      	str	r2, [r3, #32]
}
 8008054:	bf00      	nop
 8008056:	371c      	adds	r7, #28
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	40010000 	.word	0x40010000
 8008064:	40010400 	.word	0x40010400

08008068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	f023 0210 	bic.w	r2, r3, #16
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800809e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 0320 	bic.w	r3, r3, #32
 80080b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a22      	ldr	r2, [pc, #136]	; (800814c <TIM_OC2_SetConfig+0xe4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d003      	beq.n	80080d0 <TIM_OC2_SetConfig+0x68>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a21      	ldr	r2, [pc, #132]	; (8008150 <TIM_OC2_SetConfig+0xe8>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d10d      	bne.n	80080ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a17      	ldr	r2, [pc, #92]	; (800814c <TIM_OC2_SetConfig+0xe4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d003      	beq.n	80080fc <TIM_OC2_SetConfig+0x94>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a16      	ldr	r2, [pc, #88]	; (8008150 <TIM_OC2_SetConfig+0xe8>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d113      	bne.n	8008124 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800810a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	4313      	orrs	r3, r2
 8008116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	4313      	orrs	r3, r2
 8008122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40010000 	.word	0x40010000
 8008150:	40010400 	.word	0x40010400

08008154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 0303 	bic.w	r3, r3, #3
 800818a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800819c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	021b      	lsls	r3, r3, #8
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a21      	ldr	r2, [pc, #132]	; (8008234 <TIM_OC3_SetConfig+0xe0>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d003      	beq.n	80081ba <TIM_OC3_SetConfig+0x66>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a20      	ldr	r2, [pc, #128]	; (8008238 <TIM_OC3_SetConfig+0xe4>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d10d      	bne.n	80081d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	021b      	lsls	r3, r3, #8
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a16      	ldr	r2, [pc, #88]	; (8008234 <TIM_OC3_SetConfig+0xe0>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d003      	beq.n	80081e6 <TIM_OC3_SetConfig+0x92>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a15      	ldr	r2, [pc, #84]	; (8008238 <TIM_OC3_SetConfig+0xe4>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d113      	bne.n	800820e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	4313      	orrs	r3, r2
 8008200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	011b      	lsls	r3, r3, #4
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	621a      	str	r2, [r3, #32]
}
 8008228:	bf00      	nop
 800822a:	371c      	adds	r7, #28
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	40010000 	.word	0x40010000
 8008238:	40010400 	.word	0x40010400

0800823c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800826a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4313      	orrs	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	031b      	lsls	r3, r3, #12
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4313      	orrs	r3, r2
 8008292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a12      	ldr	r2, [pc, #72]	; (80082e0 <TIM_OC4_SetConfig+0xa4>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d003      	beq.n	80082a4 <TIM_OC4_SetConfig+0x68>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a11      	ldr	r2, [pc, #68]	; (80082e4 <TIM_OC4_SetConfig+0xa8>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d109      	bne.n	80082b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	019b      	lsls	r3, r3, #6
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	621a      	str	r2, [r3, #32]
}
 80082d2:	bf00      	nop
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40010400 	.word	0x40010400

080082e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	f023 0201 	bic.w	r2, r3, #1
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4a28      	ldr	r2, [pc, #160]	; (80083b4 <TIM_TI1_SetConfig+0xcc>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d01b      	beq.n	800834e <TIM_TI1_SetConfig+0x66>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831c:	d017      	beq.n	800834e <TIM_TI1_SetConfig+0x66>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4a25      	ldr	r2, [pc, #148]	; (80083b8 <TIM_TI1_SetConfig+0xd0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d013      	beq.n	800834e <TIM_TI1_SetConfig+0x66>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4a24      	ldr	r2, [pc, #144]	; (80083bc <TIM_TI1_SetConfig+0xd4>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d00f      	beq.n	800834e <TIM_TI1_SetConfig+0x66>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4a23      	ldr	r2, [pc, #140]	; (80083c0 <TIM_TI1_SetConfig+0xd8>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d00b      	beq.n	800834e <TIM_TI1_SetConfig+0x66>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4a22      	ldr	r2, [pc, #136]	; (80083c4 <TIM_TI1_SetConfig+0xdc>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d007      	beq.n	800834e <TIM_TI1_SetConfig+0x66>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4a21      	ldr	r2, [pc, #132]	; (80083c8 <TIM_TI1_SetConfig+0xe0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d003      	beq.n	800834e <TIM_TI1_SetConfig+0x66>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4a20      	ldr	r2, [pc, #128]	; (80083cc <TIM_TI1_SetConfig+0xe4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d101      	bne.n	8008352 <TIM_TI1_SetConfig+0x6a>
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <TIM_TI1_SetConfig+0x6c>
 8008352:	2300      	movs	r3, #0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d008      	beq.n	800836a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4313      	orrs	r3, r2
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	e003      	b.n	8008372 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f043 0301 	orr.w	r3, r3, #1
 8008370:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	011b      	lsls	r3, r3, #4
 800837e:	b2db      	uxtb	r3, r3
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	4313      	orrs	r3, r2
 8008384:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f023 030a 	bic.w	r3, r3, #10
 800838c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f003 030a 	and.w	r3, r3, #10
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	4313      	orrs	r3, r2
 8008398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	621a      	str	r2, [r3, #32]
}
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	40010000 	.word	0x40010000
 80083b8:	40000400 	.word	0x40000400
 80083bc:	40000800 	.word	0x40000800
 80083c0:	40000c00 	.word	0x40000c00
 80083c4:	40010400 	.word	0x40010400
 80083c8:	40014000 	.word	0x40014000
 80083cc:	40001800 	.word	0x40001800

080083d0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	f023 0210 	bic.w	r2, r3, #16
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6a1b      	ldr	r3, [r3, #32]
 80083f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	4313      	orrs	r3, r2
 8008406:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800840e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	031b      	lsls	r3, r3, #12
 8008414:	b29b      	uxth	r3, r3
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008422:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	011b      	lsls	r3, r3, #4
 8008428:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	4313      	orrs	r3, r2
 8008430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	621a      	str	r2, [r3, #32]
}
 800843e:	bf00      	nop
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800844a:	b480      	push	{r7}
 800844c:	b087      	sub	sp, #28
 800844e:	af00      	add	r7, sp, #0
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	607a      	str	r2, [r7, #4]
 8008456:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	69db      	ldr	r3, [r3, #28]
 8008468:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f023 0303 	bic.w	r3, r3, #3
 8008476:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4313      	orrs	r3, r2
 800847e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008486:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	b2db      	uxtb	r3, r3
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	4313      	orrs	r3, r2
 8008492:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800849a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	621a      	str	r2, [r3, #32]
}
 80084b6:	bf00      	nop
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b087      	sub	sp, #28
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	607a      	str	r2, [r7, #4]
 80084ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008500:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	031b      	lsls	r3, r3, #12
 8008506:	b29b      	uxth	r3, r3
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008514:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	031b      	lsls	r3, r3, #12
 800851a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	621a      	str	r2, [r3, #32]
}
 8008530:	bf00      	nop
 8008532:	371c      	adds	r7, #28
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f003 031f 	and.w	r3, r3, #31
 800854e:	2201      	movs	r2, #1
 8008550:	fa02 f303 	lsl.w	r3, r2, r3
 8008554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1a      	ldr	r2, [r3, #32]
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	43db      	mvns	r3, r3
 800855e:	401a      	ands	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a1a      	ldr	r2, [r3, #32]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f003 031f 	and.w	r3, r3, #31
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	fa01 f303 	lsl.w	r3, r1, r3
 8008574:	431a      	orrs	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	621a      	str	r2, [r3, #32]
}
 800857a:	bf00      	nop
 800857c:	371c      	adds	r7, #28
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
	...

08008588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800859c:	2302      	movs	r3, #2
 800859e:	e05a      	b.n	8008656 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a21      	ldr	r2, [pc, #132]	; (8008664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d022      	beq.n	800862a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ec:	d01d      	beq.n	800862a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a1d      	ldr	r2, [pc, #116]	; (8008668 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d018      	beq.n	800862a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a1b      	ldr	r2, [pc, #108]	; (800866c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d013      	beq.n	800862a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a1a      	ldr	r2, [pc, #104]	; (8008670 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d00e      	beq.n	800862a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a18      	ldr	r2, [pc, #96]	; (8008674 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d009      	beq.n	800862a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a17      	ldr	r2, [pc, #92]	; (8008678 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d004      	beq.n	800862a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a15      	ldr	r2, [pc, #84]	; (800867c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d10c      	bne.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	4313      	orrs	r3, r2
 800863a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	40010000 	.word	0x40010000
 8008668:	40000400 	.word	0x40000400
 800866c:	40000800 	.word	0x40000800
 8008670:	40000c00 	.word	0x40000c00
 8008674:	40010400 	.word	0x40010400
 8008678:	40014000 	.word	0x40014000
 800867c:	40001800 	.word	0x40001800

08008680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <f_gui_ClearLowerLcdPart>:
	"---"
};


static inline void f_gui_ClearLowerLcdPart()
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
	for(uint8_t i = 2; i < 8; i++) f_lcd_Clear(0, 128, i);
 80086ae:	2302      	movs	r3, #2
 80086b0:	71fb      	strb	r3, [r7, #7]
 80086b2:	e008      	b.n	80086c6 <f_gui_ClearLowerLcdPart+0x1e>
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	461a      	mov	r2, r3
 80086b8:	2180      	movs	r1, #128	; 0x80
 80086ba:	2000      	movs	r0, #0
 80086bc:	f000 fb1a 	bl	8008cf4 <f_lcd_Clear>
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	3301      	adds	r3, #1
 80086c4:	71fb      	strb	r3, [r7, #7]
 80086c6:	79fb      	ldrb	r3, [r7, #7]
 80086c8:	2b07      	cmp	r3, #7
 80086ca:	d9f3      	bls.n	80086b4 <f_gui_ClearLowerLcdPart+0xc>
}
 80086cc:	bf00      	nop
 80086ce:	bf00      	nop
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <f_gui_DrawChartPage>:


//=============== PUBLIC FUNCTIONS ==========================

void f_gui_DrawChartPage(uint8_t *pData, uint8_t length, uint8_t shift)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	70fb      	strb	r3, [r7, #3]
 80086e2:	4613      	mov	r3, r2
 80086e4:	70bb      	strb	r3, [r7, #2]
	//max length: 120 px
	//max value: 44 px
	if(length > 120) return;
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	2b78      	cmp	r3, #120	; 0x78
 80086ea:	d833      	bhi.n	8008754 <f_gui_DrawChartPage+0x7e>

	for(uint8_t i = 0; i < length; i++)
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
 80086f0:	e01f      	b.n	8008732 <f_gui_DrawChartPage+0x5c>
	{
		uint8_t chartValue = 62 - pData[(i + shift) % length]; //offset 2px and reversed upside down
 80086f2:	7bfa      	ldrb	r2, [r7, #15]
 80086f4:	78bb      	ldrb	r3, [r7, #2]
 80086f6:	4413      	add	r3, r2
 80086f8:	78fa      	ldrb	r2, [r7, #3]
 80086fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80086fe:	fb01 f202 	mul.w	r2, r1, r2
 8008702:	1a9b      	subs	r3, r3, r2
 8008704:	461a      	mov	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4413      	add	r3, r2
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8008710:	73bb      	strb	r3, [r7, #14]
		if(chartValue < 18) chartValue = 18;
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b11      	cmp	r3, #17
 8008716:	d801      	bhi.n	800871c <f_gui_DrawChartPage+0x46>
 8008718:	2312      	movs	r3, #18
 800871a:	73bb      	strb	r3, [r7, #14]
		f_lcd_SetPixel(i + 3, chartValue, true);
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	3303      	adds	r3, #3
 8008720:	b2db      	uxtb	r3, r3
 8008722:	7bb9      	ldrb	r1, [r7, #14]
 8008724:	2201      	movs	r2, #1
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fc3e 	bl	8008fa8 <f_lcd_SetPixel>
	for(uint8_t i = 0; i < length; i++)
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	3301      	adds	r3, #1
 8008730:	73fb      	strb	r3, [r7, #15]
 8008732:	7bfa      	ldrb	r2, [r7, #15]
 8008734:	78fb      	ldrb	r3, [r7, #3]
 8008736:	429a      	cmp	r2, r3
 8008738:	d3db      	bcc.n	80086f2 <f_gui_DrawChartPage+0x1c>
	}

	f_lcd_DrawLine(0, 16, 0, 64);
 800873a:	2340      	movs	r3, #64	; 0x40
 800873c:	2200      	movs	r2, #0
 800873e:	2110      	movs	r1, #16
 8008740:	2000      	movs	r0, #0
 8008742:	f000 fc83 	bl	800904c <f_lcd_DrawLine>
	f_lcd_DrawLine(0, 63, 127, 63);
 8008746:	233f      	movs	r3, #63	; 0x3f
 8008748:	227f      	movs	r2, #127	; 0x7f
 800874a:	213f      	movs	r1, #63	; 0x3f
 800874c:	2000      	movs	r0, #0
 800874e:	f000 fc7d 	bl	800904c <f_lcd_DrawLine>
 8008752:	e000      	b.n	8008756 <f_gui_DrawChartPage+0x80>
	if(length > 120) return;
 8008754:	bf00      	nop
}
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <f_gui_DrawParamPage>:

void f_gui_DrawParamPage(t_pid_Parameter *Param, t_pid_Control *Ctrl)
{
 800875c:	b5b0      	push	{r4, r5, r7, lr}
 800875e:	b08c      	sub	sp, #48	; 0x30
 8008760:	af02      	add	r7, sp, #8
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
	char txt[32];

	//Parameter: (set) get
	sprintf(txt, "P:\t(%.1f)\t%.1f", Param->Kp, Ctrl->pValue);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4618      	mov	r0, r3
 800876c:	f7f7 feec 	bl	8000548 <__aeabi_f2d>
 8008770:	4604      	mov	r4, r0
 8008772:	460d      	mov	r5, r1
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	4618      	mov	r0, r3
 800877a:	f7f7 fee5 	bl	8000548 <__aeabi_f2d>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	f107 0008 	add.w	r0, r7, #8
 8008786:	e9cd 2300 	strd	r2, r3, [sp]
 800878a:	4622      	mov	r2, r4
 800878c:	462b      	mov	r3, r5
 800878e:	4925      	ldr	r1, [pc, #148]	; (8008824 <f_gui_DrawParamPage+0xc8>)
 8008790:	f002 f89c 	bl	800a8cc <siprintf>
	f_lcd_WriteTxt(0, 16, txt, &font_msSansSerif_14);
 8008794:	f107 0208 	add.w	r2, r7, #8
 8008798:	4b23      	ldr	r3, [pc, #140]	; (8008828 <f_gui_DrawParamPage+0xcc>)
 800879a:	2110      	movs	r1, #16
 800879c:	2000      	movs	r0, #0
 800879e:	f000 faf4 	bl	8008d8a <f_lcd_WriteTxt>
	sprintf(txt, "I:\t(%.1f)\t%.1f", Param->Ki, Ctrl->iValue);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7f7 fece 	bl	8000548 <__aeabi_f2d>
 80087ac:	4604      	mov	r4, r0
 80087ae:	460d      	mov	r5, r1
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7f7 fec7 	bl	8000548 <__aeabi_f2d>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	f107 0008 	add.w	r0, r7, #8
 80087c2:	e9cd 2300 	strd	r2, r3, [sp]
 80087c6:	4622      	mov	r2, r4
 80087c8:	462b      	mov	r3, r5
 80087ca:	4918      	ldr	r1, [pc, #96]	; (800882c <f_gui_DrawParamPage+0xd0>)
 80087cc:	f002 f87e 	bl	800a8cc <siprintf>
	f_lcd_WriteTxt(0, 32, txt, &font_msSansSerif_14);
 80087d0:	f107 0208 	add.w	r2, r7, #8
 80087d4:	4b14      	ldr	r3, [pc, #80]	; (8008828 <f_gui_DrawParamPage+0xcc>)
 80087d6:	2120      	movs	r1, #32
 80087d8:	2000      	movs	r0, #0
 80087da:	f000 fad6 	bl	8008d8a <f_lcd_WriteTxt>
	sprintf(txt, "D:\t(%.1f)\t%.1f", Param->Kd, Ctrl->dValue);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7f7 feb0 	bl	8000548 <__aeabi_f2d>
 80087e8:	4604      	mov	r4, r0
 80087ea:	460d      	mov	r5, r1
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7f7 fea9 	bl	8000548 <__aeabi_f2d>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	f107 0008 	add.w	r0, r7, #8
 80087fe:	e9cd 2300 	strd	r2, r3, [sp]
 8008802:	4622      	mov	r2, r4
 8008804:	462b      	mov	r3, r5
 8008806:	490a      	ldr	r1, [pc, #40]	; (8008830 <f_gui_DrawParamPage+0xd4>)
 8008808:	f002 f860 	bl	800a8cc <siprintf>
	f_lcd_WriteTxt(0, 48, txt, &font_msSansSerif_14);
 800880c:	f107 0208 	add.w	r2, r7, #8
 8008810:	4b05      	ldr	r3, [pc, #20]	; (8008828 <f_gui_DrawParamPage+0xcc>)
 8008812:	2130      	movs	r1, #48	; 0x30
 8008814:	2000      	movs	r0, #0
 8008816:	f000 fab8 	bl	8008d8a <f_lcd_WriteTxt>
}
 800881a:	bf00      	nop
 800881c:	3728      	adds	r7, #40	; 0x28
 800881e:	46bd      	mov	sp, r7
 8008820:	bdb0      	pop	{r4, r5, r7, pc}
 8008822:	bf00      	nop
 8008824:	0800ce9c 	.word	0x0800ce9c
 8008828:	0800dc84 	.word	0x0800dc84
 800882c:	0800ceac 	.word	0x0800ceac
 8008830:	0800cebc 	.word	0x0800cebc

08008834 <f_gui_DrawCtrlPage>:

void f_gui_DrawCtrlPage(float set, float input, float output)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08c      	sub	sp, #48	; 0x30
 8008838:	af00      	add	r7, sp, #0
 800883a:	ed87 0a03 	vstr	s0, [r7, #12]
 800883e:	edc7 0a02 	vstr	s1, [r7, #8]
 8008842:	ed87 1a01 	vstr	s2, [r7, #4]
	char txt[32];

	sprintf(txt, "Set:\t%.1f cm", set);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7f7 fe7e 	bl	8000548 <__aeabi_f2d>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	f107 0010 	add.w	r0, r7, #16
 8008854:	4917      	ldr	r1, [pc, #92]	; (80088b4 <f_gui_DrawCtrlPage+0x80>)
 8008856:	f002 f839 	bl	800a8cc <siprintf>
	f_lcd_WriteTxt(0, 16, txt, &font_msSansSerif_14);
 800885a:	f107 0210 	add.w	r2, r7, #16
 800885e:	4b16      	ldr	r3, [pc, #88]	; (80088b8 <f_gui_DrawCtrlPage+0x84>)
 8008860:	2110      	movs	r1, #16
 8008862:	2000      	movs	r0, #0
 8008864:	f000 fa91 	bl	8008d8a <f_lcd_WriteTxt>
	sprintf(txt, "In:\t\t%.1f cm", input);
 8008868:	68b8      	ldr	r0, [r7, #8]
 800886a:	f7f7 fe6d 	bl	8000548 <__aeabi_f2d>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	f107 0010 	add.w	r0, r7, #16
 8008876:	4911      	ldr	r1, [pc, #68]	; (80088bc <f_gui_DrawCtrlPage+0x88>)
 8008878:	f002 f828 	bl	800a8cc <siprintf>
	f_lcd_WriteTxt(0, 32, txt, &font_msSansSerif_14);
 800887c:	f107 0210 	add.w	r2, r7, #16
 8008880:	4b0d      	ldr	r3, [pc, #52]	; (80088b8 <f_gui_DrawCtrlPage+0x84>)
 8008882:	2120      	movs	r1, #32
 8008884:	2000      	movs	r0, #0
 8008886:	f000 fa80 	bl	8008d8a <f_lcd_WriteTxt>
	sprintf(txt, "Out:\t%.1f", output);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7f7 fe5c 	bl	8000548 <__aeabi_f2d>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	f107 0010 	add.w	r0, r7, #16
 8008898:	4909      	ldr	r1, [pc, #36]	; (80088c0 <f_gui_DrawCtrlPage+0x8c>)
 800889a:	f002 f817 	bl	800a8cc <siprintf>
	f_lcd_WriteTxt(0, 48, txt, &font_msSansSerif_14);
 800889e:	f107 0210 	add.w	r2, r7, #16
 80088a2:	4b05      	ldr	r3, [pc, #20]	; (80088b8 <f_gui_DrawCtrlPage+0x84>)
 80088a4:	2130      	movs	r1, #48	; 0x30
 80088a6:	2000      	movs	r0, #0
 80088a8:	f000 fa6f 	bl	8008d8a <f_lcd_WriteTxt>
}
 80088ac:	bf00      	nop
 80088ae:	3730      	adds	r7, #48	; 0x30
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	0800cecc 	.word	0x0800cecc
 80088b8:	0800dc84 	.word	0x0800dc84
 80088bc:	0800cedc 	.word	0x0800cedc
 80088c0:	0800ceec 	.word	0x0800ceec

080088c4 <f_gui_DrawHeading>:

void f_gui_DrawHeading(e_sm_State state, e_gui_lcdPage Page)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	4603      	mov	r3, r0
 80088cc:	460a      	mov	r2, r1
 80088ce:	71fb      	strb	r3, [r7, #7]
 80088d0:	4613      	mov	r3, r2
 80088d2:	71bb      	strb	r3, [r7, #6]
	f_lcd_Clear(0, 128, 0);
 80088d4:	2200      	movs	r2, #0
 80088d6:	2180      	movs	r1, #128	; 0x80
 80088d8:	2000      	movs	r0, #0
 80088da:	f000 fa0b 	bl	8008cf4 <f_lcd_Clear>
	f_lcd_Clear(0, 128, 1);
 80088de:	2201      	movs	r2, #1
 80088e0:	2180      	movs	r1, #128	; 0x80
 80088e2:	2000      	movs	r0, #0
 80088e4:	f000 fa06 	bl	8008cf4 <f_lcd_Clear>
	
	f_lcd_WriteTxt(0, 0, "St:", &font_msSansSerif_14);
 80088e8:	4b10      	ldr	r3, [pc, #64]	; (800892c <f_gui_DrawHeading+0x68>)
 80088ea:	4a11      	ldr	r2, [pc, #68]	; (8008930 <f_gui_DrawHeading+0x6c>)
 80088ec:	2100      	movs	r1, #0
 80088ee:	2000      	movs	r0, #0
 80088f0:	f000 fa4b 	bl	8008d8a <f_lcd_WriteTxt>
	f_lcd_WriteTxt(24, 0, StateTitle[state], &font_msSansSerif_14);
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	4a0f      	ldr	r2, [pc, #60]	; (8008934 <f_gui_DrawHeading+0x70>)
 80088f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088fc:	4b0b      	ldr	r3, [pc, #44]	; (800892c <f_gui_DrawHeading+0x68>)
 80088fe:	2100      	movs	r1, #0
 8008900:	2018      	movs	r0, #24
 8008902:	f000 fa42 	bl	8008d8a <f_lcd_WriteTxt>
	f_lcd_WriteTxt(64, 0, "Lcd:", &font_msSansSerif_14);
 8008906:	4b09      	ldr	r3, [pc, #36]	; (800892c <f_gui_DrawHeading+0x68>)
 8008908:	4a0b      	ldr	r2, [pc, #44]	; (8008938 <f_gui_DrawHeading+0x74>)
 800890a:	2100      	movs	r1, #0
 800890c:	2040      	movs	r0, #64	; 0x40
 800890e:	f000 fa3c 	bl	8008d8a <f_lcd_WriteTxt>
	f_lcd_WriteTxt(96, 0, PageTitle[Page], &font_msSansSerif_14);
 8008912:	79bb      	ldrb	r3, [r7, #6]
 8008914:	4a09      	ldr	r2, [pc, #36]	; (800893c <f_gui_DrawHeading+0x78>)
 8008916:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800891a:	4b04      	ldr	r3, [pc, #16]	; (800892c <f_gui_DrawHeading+0x68>)
 800891c:	2100      	movs	r1, #0
 800891e:	2060      	movs	r0, #96	; 0x60
 8008920:	f000 fa33 	bl	8008d8a <f_lcd_WriteTxt>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	0800dc84 	.word	0x0800dc84
 8008930:	0800cef8 	.word	0x0800cef8
 8008934:	0800dc8c 	.word	0x0800dc8c
 8008938:	0800cefc 	.word	0x0800cefc
 800893c:	0800dca4 	.word	0x0800dca4

08008940 <f_gui_DrawPage>:

void f_gui_DrawPage(e_gui_lcdPage page, t_pid_Parameter *Param, t_pid_Control *Ctrl, uint16_t pwmOutput, uint16_t distanceSet, uint16_t distanceGet)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60b9      	str	r1, [r7, #8]
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	461a      	mov	r2, r3
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]
 8008950:	4613      	mov	r3, r2
 8008952:	81bb      	strh	r3, [r7, #12]
	static uint8_t chartData[120];
	static uint8_t chartIterator, chartLength;

	f_gui_ClearLowerLcdPart();
 8008954:	f7ff fea8 	bl	80086a8 <f_gui_ClearLowerLcdPart>

	switch (page)
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	2b05      	cmp	r3, #5
 800895c:	d02f      	beq.n	80089be <f_gui_DrawPage+0x7e>
 800895e:	2b05      	cmp	r3, #5
 8008960:	dc65      	bgt.n	8008a2e <f_gui_DrawPage+0xee>
 8008962:	2b03      	cmp	r3, #3
 8008964:	d002      	beq.n	800896c <f_gui_DrawPage+0x2c>
 8008966:	2b04      	cmp	r3, #4
 8008968:	d005      	beq.n	8008976 <f_gui_DrawPage+0x36>
 800896a:	e060      	b.n	8008a2e <f_gui_DrawPage+0xee>
	{
		case LCD_PARAM:
			f_gui_DrawParamPage(Param, Ctrl);
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	68b8      	ldr	r0, [r7, #8]
 8008970:	f7ff fef4 	bl	800875c <f_gui_DrawParamPage>
			break;
 8008974:	e05e      	b.n	8008a34 <f_gui_DrawPage+0xf4>

		case LCD_CTRL:
			f_gui_DrawCtrlPage((float)distanceSet/10, (float)distanceGet/10, (float)pwmOutput/41);
 8008976:	8b3b      	ldrh	r3, [r7, #24]
 8008978:	ee07 3a90 	vmov	s15, r3
 800897c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008980:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008984:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008988:	8bbb      	ldrh	r3, [r7, #28]
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008992:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8008996:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800899a:	89bb      	ldrh	r3, [r7, #12]
 800899c:	ee07 3a90 	vmov	s15, r3
 80089a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a4:	eddf 5a25 	vldr	s11, [pc, #148]	; 8008a3c <f_gui_DrawPage+0xfc>
 80089a8:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80089ac:	eeb0 1a46 	vmov.f32	s2, s12
 80089b0:	eef0 0a66 	vmov.f32	s1, s13
 80089b4:	eeb0 0a47 	vmov.f32	s0, s14
 80089b8:	f7ff ff3c 	bl	8008834 <f_gui_DrawCtrlPage>
			break;
 80089bc:	e03a      	b.n	8008a34 <f_gui_DrawPage+0xf4>

		case LCD_CHART:
			chartData[chartIterator] = (uint32_t)(pwmOutput*44)/4096; //max value is 44px
 80089be:	89bb      	ldrh	r3, [r7, #12]
 80089c0:	222c      	movs	r2, #44	; 0x2c
 80089c2:	fb02 f303 	mul.w	r3, r2, r3
 80089c6:	0b19      	lsrs	r1, r3, #12
 80089c8:	4b1d      	ldr	r3, [pc, #116]	; (8008a40 <f_gui_DrawPage+0x100>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	461a      	mov	r2, r3
 80089ce:	b2c9      	uxtb	r1, r1
 80089d0:	4b1c      	ldr	r3, [pc, #112]	; (8008a44 <f_gui_DrawPage+0x104>)
 80089d2:	5499      	strb	r1, [r3, r2]
			chartIterator = (chartIterator + 1) % 120; // it should be here, so the newest sample is not at the beginning
 80089d4:	4b1a      	ldr	r3, [pc, #104]	; (8008a40 <f_gui_DrawPage+0x100>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	1c5a      	adds	r2, r3, #1
 80089da:	4b1b      	ldr	r3, [pc, #108]	; (8008a48 <f_gui_DrawPage+0x108>)
 80089dc:	fb83 1302 	smull	r1, r3, r3, r2
 80089e0:	4413      	add	r3, r2
 80089e2:	1199      	asrs	r1, r3, #6
 80089e4:	17d3      	asrs	r3, r2, #31
 80089e6:	1ac9      	subs	r1, r1, r3
 80089e8:	460b      	mov	r3, r1
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	1a5b      	subs	r3, r3, r1
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	1ad1      	subs	r1, r2, r3
 80089f2:	b2ca      	uxtb	r2, r1
 80089f4:	4b12      	ldr	r3, [pc, #72]	; (8008a40 <f_gui_DrawPage+0x100>)
 80089f6:	701a      	strb	r2, [r3, #0]

			if(chartLength < 120)
 80089f8:	4b14      	ldr	r3, [pc, #80]	; (8008a4c <f_gui_DrawPage+0x10c>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	2b77      	cmp	r3, #119	; 0x77
 80089fe:	d80d      	bhi.n	8008a1c <f_gui_DrawPage+0xdc>
			{
				f_gui_DrawChartPage(chartData, chartLength, 0);
 8008a00:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <f_gui_DrawPage+0x10c>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2200      	movs	r2, #0
 8008a06:	4619      	mov	r1, r3
 8008a08:	480e      	ldr	r0, [pc, #56]	; (8008a44 <f_gui_DrawPage+0x104>)
 8008a0a:	f7ff fe64 	bl	80086d6 <f_gui_DrawChartPage>
				chartLength++;
 8008a0e:	4b0f      	ldr	r3, [pc, #60]	; (8008a4c <f_gui_DrawPage+0x10c>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	3301      	adds	r3, #1
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	4b0d      	ldr	r3, [pc, #52]	; (8008a4c <f_gui_DrawPage+0x10c>)
 8008a18:	701a      	strb	r2, [r3, #0]
			else
			{
				f_gui_DrawChartPage(chartData, chartLength, chartIterator);
			}

			break;
 8008a1a:	e00b      	b.n	8008a34 <f_gui_DrawPage+0xf4>
				f_gui_DrawChartPage(chartData, chartLength, chartIterator);
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <f_gui_DrawPage+0x10c>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	4a07      	ldr	r2, [pc, #28]	; (8008a40 <f_gui_DrawPage+0x100>)
 8008a22:	7812      	ldrb	r2, [r2, #0]
 8008a24:	4619      	mov	r1, r3
 8008a26:	4807      	ldr	r0, [pc, #28]	; (8008a44 <f_gui_DrawPage+0x104>)
 8008a28:	f7ff fe55 	bl	80086d6 <f_gui_DrawChartPage>
			break;
 8008a2c:	e002      	b.n	8008a34 <f_gui_DrawPage+0xf4>

		default:
			f_lcd_ClearAll();
 8008a2e:	f000 f995 	bl	8008d5c <f_lcd_ClearAll>
			break;
 8008a32:	bf00      	nop
	}
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	42240000 	.word	0x42240000
 8008a40:	20000440 	.word	0x20000440
 8008a44:	20000444 	.word	0x20000444
 8008a48:	88888889 	.word	0x88888889
 8008a4c:	200004bc 	.word	0x200004bc

08008a50 <f_receiveWord>:
uint16_t curr_lsc = INA219_CURRENT_LSB * 1000000;

I2C_HandleTypeDef *pI2Chandler; //local i2c handler

static uint16_t f_receiveWord(uint8_t address)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	4603      	mov	r3, r0
 8008a58:	71fb      	strb	r3, [r7, #7]
	uint8_t receive[2];

	HAL_I2C_Master_Transmit(pI2Chandler, INA219_I2C_ADDRESS, &address, 1, 50);
 8008a5a:	4b0f      	ldr	r3, [pc, #60]	; (8008a98 <f_receiveWord+0x48>)
 8008a5c:	6818      	ldr	r0, [r3, #0]
 8008a5e:	1dfa      	adds	r2, r7, #7
 8008a60:	2332      	movs	r3, #50	; 0x32
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	2301      	movs	r3, #1
 8008a66:	2180      	movs	r1, #128	; 0x80
 8008a68:	f7fa fc62 	bl	8003330 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(pI2Chandler, INA219_I2C_ADDRESS, (uint8_t*)&receive, 2, 50);
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <f_receiveWord+0x48>)
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	f107 020c 	add.w	r2, r7, #12
 8008a74:	2332      	movs	r3, #50	; 0x32
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	2302      	movs	r3, #2
 8008a7a:	2180      	movs	r1, #128	; 0x80
 8008a7c:	f7fa fd56 	bl	800352c <HAL_I2C_Master_Receive>

	return (receive[0] << 8) | receive[1];
 8008a80:	7b3b      	ldrb	r3, [r7, #12]
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	b21a      	sxth	r2, r3
 8008a86:	7b7b      	ldrb	r3, [r7, #13]
 8008a88:	b21b      	sxth	r3, r3
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	b21b      	sxth	r3, r3
 8008a8e:	b29b      	uxth	r3, r3
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	200004c0 	.word	0x200004c0

08008a9c <f_sendWord>:

static void f_sendWord(uint8_t address, uint16_t word)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af02      	add	r7, sp, #8
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	460a      	mov	r2, r1
 8008aa6:	71fb      	strb	r3, [r7, #7]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	80bb      	strh	r3, [r7, #4]
	uint8_t transmit[3] = {address, word >> 8, word & 0xFF};
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	733b      	strb	r3, [r7, #12]
 8008ab0:	88bb      	ldrh	r3, [r7, #4]
 8008ab2:	0a1b      	lsrs	r3, r3, #8
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	737b      	strb	r3, [r7, #13]
 8008aba:	88bb      	ldrh	r3, [r7, #4]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(pI2Chandler, INA219_I2C_ADDRESS, (uint8_t*)&transmit, 3, 50);
 8008ac0:	4b06      	ldr	r3, [pc, #24]	; (8008adc <f_sendWord+0x40>)
 8008ac2:	6818      	ldr	r0, [r3, #0]
 8008ac4:	f107 020c 	add.w	r2, r7, #12
 8008ac8:	2332      	movs	r3, #50	; 0x32
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	2303      	movs	r3, #3
 8008ace:	2180      	movs	r1, #128	; 0x80
 8008ad0:	f7fa fc2e 	bl	8003330 <HAL_I2C_Master_Transmit>
}
 8008ad4:	bf00      	nop
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	200004c0 	.word	0x200004c0

08008ae0 <f_ina219_HwInit>:

static inline void f_ina219_HwInit(I2C_HandleTypeDef *pHandler, I2C_TypeDef *pI2Caddress)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
	pI2Chandler = pHandler; //assign local i2c handler
 8008aea:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <f_ina219_HwInit+0x60>)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6013      	str	r3, [r2, #0]

	pHandler->Instance = pI2Caddress;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	601a      	str	r2, [r3, #0]
	pHandler->Init.ClockSpeed = 100000;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a12      	ldr	r2, [pc, #72]	; (8008b44 <f_ina219_HwInit+0x64>)
 8008afa:	605a      	str	r2, [r3, #4]
	pHandler->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	609a      	str	r2, [r3, #8]
	pHandler->Init.OwnAddress1 = 0;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	60da      	str	r2, [r3, #12]
	pHandler->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b0e:	611a      	str	r2, [r3, #16]
	pHandler->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	615a      	str	r2, [r3, #20]
	pHandler->Init.OwnAddress2 = 0;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	619a      	str	r2, [r3, #24]
	pHandler->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	61da      	str	r2, [r3, #28]
	pHandler->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(pHandler) != HAL_OK)
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7fa fabd 	bl	80030a8 <HAL_I2C_Init>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <f_ina219_HwInit+0x58>
	{
	   Error_Handler();
 8008b34:	f7f8 ffe8 	bl	8001b08 <Error_Handler>
	}
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	200004c0 	.word	0x200004c0
 8008b44:	000186a0 	.word	0x000186a0

08008b48 <f_ina219_calibrate>:

static inline void f_ina219_calibrate()
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
	uint16_t calib = (uint16_t)INA219_CALIB_VALUE;
 8008b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b52:	80fb      	strh	r3, [r7, #6]

	f_sendWord(INA219_CALIBRATION, calib);
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	4619      	mov	r1, r3
 8008b58:	2005      	movs	r0, #5
 8008b5a:	f7ff ff9f 	bl	8008a9c <f_sendWord>
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <f_ina219_Init>:

//============== public functions ==================

bool f_ina219_Init(I2C_HandleTypeDef *pHandler, I2C_TypeDef *pI2Caddress)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
	bool isOk = false;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]

	if(pHandler == NULL) return false;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <f_ina219_Init+0x18>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e01e      	b.n	8008bbc <f_ina219_Init+0x56>
	f_ina219_HwInit(pHandler, pI2Caddress);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff ffad 	bl	8008ae0 <f_ina219_HwInit>
	// bus voltage range = 32v
	// gain divide = 2
	// bus mode/average = 12bit/
	// shunt mode/average = 12bit/ 128
	//mode = bus and shunt, continuous
	uint16_t config = (1 << 13) | (1 << 11) | (15 << 7) | (15 << 3) | (7 << 0);
 8008b86:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8008b8a:	81bb      	strh	r3, [r7, #12]

	f_ina219_Reset();
 8008b8c:	f000 f81a 	bl	8008bc4 <f_ina219_Reset>
	HAL_Delay(1);
 8008b90:	2001      	movs	r0, #1
 8008b92:	f7f9 fbb3 	bl	80022fc <HAL_Delay>
	f_sendWord(INA219_CONFIG, config);
 8008b96:	89bb      	ldrh	r3, [r7, #12]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	f7ff ff7e 	bl	8008a9c <f_sendWord>

	//check if sensor is connected
	uint16_t checkConfig = f_receiveWord(INA219_CONFIG);
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	f7ff ff55 	bl	8008a50 <f_receiveWord>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	817b      	strh	r3, [r7, #10]
	if(checkConfig == config) isOk = true;
 8008baa:	897a      	ldrh	r2, [r7, #10]
 8008bac:	89bb      	ldrh	r3, [r7, #12]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d101      	bne.n	8008bb6 <f_ina219_Init+0x50>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	73fb      	strb	r3, [r7, #15]

	f_ina219_calibrate();
 8008bb6:	f7ff ffc7 	bl	8008b48 <f_ina219_calibrate>

	return isOk;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <f_ina219_Reset>:

void f_ina219_Reset()
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
	uint16_t tempConfig = (1 << 15);
 8008bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bce:	80fb      	strh	r3, [r7, #6]

	f_sendWord(INA219_CONFIG, tempConfig);
 8008bd0:	88fb      	ldrh	r3, [r7, #6]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	f7ff ff61 	bl	8008a9c <f_sendWord>
}
 8008bda:	bf00      	nop
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	0000      	movs	r0, r0
 8008be4:	0000      	movs	r0, r0
	...

08008be8 <f_ina219_GetPowerInMilis>:

	return 1000*current*INA219_CURRENT_LSB;
}

uint16_t f_ina219_GetPowerInMilis()
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
	uint16_t power = f_receiveWord(INA219_POWER);
 8008bee:	2003      	movs	r0, #3
 8008bf0:	f7ff ff2e 	bl	8008a50 <f_receiveWord>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	80fb      	strh	r3, [r7, #6]

	return 1000*20*power*INA219_CURRENT_LSB;
 8008bf8:	88fb      	ldrh	r3, [r7, #6]
 8008bfa:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008bfe:	fb02 f303 	mul.w	r3, r2, r3
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7f7 fc8e 	bl	8000524 <__aeabi_i2d>
 8008c08:	a309      	add	r3, pc, #36	; (adr r3, 8008c30 <f_ina219_GetPowerInMilis+0x48>)
 8008c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0e:	f7f7 fcf3 	bl	80005f8 <__aeabi_dmul>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4610      	mov	r0, r2
 8008c18:	4619      	mov	r1, r3
 8008c1a:	f7f7 ffc5 	bl	8000ba8 <__aeabi_d2uiz>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	b29b      	uxth	r3, r3
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	f3af 8000 	nop.w
 8008c30:	d2f1a9fc 	.word	0xd2f1a9fc
 8008c34:	3f20624d 	.word	0x3f20624d

08008c38 <f_ina219_GetBusVoltageInMilis>:

int16_t f_ina219_GetBusVoltageInMilis()
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
	int16_t voltage = f_receiveWord(INA219_BUS_VOLTAGE);
 8008c3e:	2002      	movs	r0, #2
 8008c40:	f7ff ff06 	bl	8008a50 <f_receiveWord>
 8008c44:	4603      	mov	r3, r0
 8008c46:	80fb      	strh	r3, [r7, #6]
	voltage = 4*(voltage >> 3);
 8008c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c4c:	10db      	asrs	r3, r3, #3
 8008c4e:	b21b      	sxth	r3, r3
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	80fb      	strh	r3, [r7, #6]

	return voltage;
 8008c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <f_SendFrameBufferPage>:
uint8_t sh1106_FrameBuffer[SH1106_HEIGHT/8][SH1106_WIDTH];
uint8_t sh1106_pageDirtyMask; //mask to tell which page has to be refreshed


static inline void f_SendFrameBufferPage(uint8_t page)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	71fb      	strb	r3, [r7, #7]
	f_sh1106_cmd_SetColumnAddress(0);
 8008c6e:	2000      	movs	r0, #0
 8008c70:	f001 f880 	bl	8009d74 <f_sh1106_cmd_SetColumnAddress>
	f_sh1106_cmd_SetPageAddress(page);
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 f8e0 	bl	8009e3c <f_sh1106_cmd_SetPageAddress>
	f_sh1106_SendDataDMA(&sh1106_FrameBuffer[page][0], SH1106_WIDTH);
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	01db      	lsls	r3, r3, #7
 8008c80:	4a04      	ldr	r2, [pc, #16]	; (8008c94 <f_SendFrameBufferPage+0x30>)
 8008c82:	4413      	add	r3, r2
 8008c84:	2180      	movs	r1, #128	; 0x80
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 f926 	bl	8009ed8 <f_sh1106_SendDataDMA>
}
 8008c8c:	bf00      	nop
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	200004c4 	.word	0x200004c4

08008c98 <f_lcd_Init>:

//=========== public functions =================

bool f_lcd_Init()
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
	bool isOk;

	isOk = f_sh1106_Init(&hspi2, SPI2);
 8008c9e:	4913      	ldr	r1, [pc, #76]	; (8008cec <f_lcd_Init+0x54>)
 8008ca0:	4813      	ldr	r0, [pc, #76]	; (8008cf0 <f_lcd_Init+0x58>)
 8008ca2:	f001 f845 	bl	8009d30 <f_sh1106_Init>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	71bb      	strb	r3, [r7, #6]

	f_sh1106_cmd_SetScanDirection(1);
 8008caa:	2001      	movs	r0, #1
 8008cac:	f001 f8e8 	bl	8009e80 <f_sh1106_cmd_SetScanDirection>
	f_sh1106_cmd_SetSegmentDirection(1);
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	f001 f889 	bl	8009dc8 <f_sh1106_cmd_SetSegmentDirection>
	f_lcd_ClearAll();
 8008cb6:	f000 f851 	bl	8008d5c <f_lcd_ClearAll>

	for(uint8_t page = 0; page < 8; page++)
 8008cba:	2300      	movs	r3, #0
 8008cbc:	71fb      	strb	r3, [r7, #7]
 8008cbe:	e009      	b.n	8008cd4 <f_lcd_Init+0x3c>
	{
		f_SendFrameBufferPage(page);
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff ffce 	bl	8008c64 <f_SendFrameBufferPage>
		HAL_Delay(4);
 8008cc8:	2004      	movs	r0, #4
 8008cca:	f7f9 fb17 	bl	80022fc <HAL_Delay>
	for(uint8_t page = 0; page < 8; page++)
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	71fb      	strb	r3, [r7, #7]
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	2b07      	cmp	r3, #7
 8008cd8:	d9f2      	bls.n	8008cc0 <f_lcd_Init+0x28>
	}

	f_sh1106_cmd_TogglePower(1);
 8008cda:	2001      	movs	r0, #1
 8008cdc:	f001 f891 	bl	8009e02 <f_sh1106_cmd_TogglePower>

	return isOk;
 8008ce0:	79bb      	ldrb	r3, [r7, #6]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	40003800 	.word	0x40003800
 8008cf0:	200002a8 	.word	0x200002a8

08008cf4 <f_lcd_Clear>:

void f_lcd_Clear(uint8_t col_start, uint8_t col_end, uint8_t page)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	71fb      	strb	r3, [r7, #7]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	71bb      	strb	r3, [r7, #6]
 8008d02:	4613      	mov	r3, r2
 8008d04:	717b      	strb	r3, [r7, #5]
	uint8_t blank = 0x00;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i = col_start; i < col_end; i++)
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	73fb      	strb	r3, [r7, #15]
 8008d0e:	e00a      	b.n	8008d26 <f_lcd_Clear+0x32>
	{
		sh1106_FrameBuffer[page][i] = blank;
 8008d10:	797a      	ldrb	r2, [r7, #5]
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
 8008d14:	490f      	ldr	r1, [pc, #60]	; (8008d54 <f_lcd_Clear+0x60>)
 8008d16:	01d2      	lsls	r2, r2, #7
 8008d18:	440a      	add	r2, r1
 8008d1a:	4413      	add	r3, r2
 8008d1c:	7bba      	ldrb	r2, [r7, #14]
 8008d1e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = col_start; i < col_end; i++)
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	3301      	adds	r3, #1
 8008d24:	73fb      	strb	r3, [r7, #15]
 8008d26:	7bfa      	ldrb	r2, [r7, #15]
 8008d28:	79bb      	ldrb	r3, [r7, #6]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d3f0      	bcc.n	8008d10 <f_lcd_Clear+0x1c>
	}

	sh1106_pageDirtyMask |= (1 << page);
 8008d2e:	797b      	ldrb	r3, [r7, #5]
 8008d30:	2201      	movs	r2, #1
 8008d32:	fa02 f303 	lsl.w	r3, r2, r3
 8008d36:	b25a      	sxtb	r2, r3
 8008d38:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <f_lcd_Clear+0x64>)
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	b25b      	sxtb	r3, r3
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	b25b      	sxtb	r3, r3
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <f_lcd_Clear+0x64>)
 8008d46:	701a      	strb	r2, [r3, #0]
}
 8008d48:	bf00      	nop
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	200004c4 	.word	0x200004c4
 8008d58:	200008c4 	.word	0x200008c4

08008d5c <f_lcd_ClearAll>:

void f_lcd_ClearAll()
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++) f_lcd_Clear(0, SH1106_WIDTH, page);
 8008d62:	2300      	movs	r3, #0
 8008d64:	71fb      	strb	r3, [r7, #7]
 8008d66:	e008      	b.n	8008d7a <f_lcd_ClearAll+0x1e>
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	2180      	movs	r1, #128	; 0x80
 8008d6e:	2000      	movs	r0, #0
 8008d70:	f7ff ffc0 	bl	8008cf4 <f_lcd_Clear>
 8008d74:	79fb      	ldrb	r3, [r7, #7]
 8008d76:	3301      	adds	r3, #1
 8008d78:	71fb      	strb	r3, [r7, #7]
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2b07      	cmp	r3, #7
 8008d7e:	d9f3      	bls.n	8008d68 <f_lcd_ClearAll+0xc>
}
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <f_lcd_WriteTxt>:

void f_lcd_WriteTxt(uint8_t x, uint8_t y, const char* txt, const tFont *pFont)
{
 8008d8a:	b590      	push	{r4, r7, lr}
 8008d8c:	b089      	sub	sp, #36	; 0x24
 8008d8e:	af02      	add	r7, sp, #8
 8008d90:	60ba      	str	r2, [r7, #8]
 8008d92:	607b      	str	r3, [r7, #4]
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	73bb      	strb	r3, [r7, #14]
	uint8_t fontHeight = pFont->chars->image->height;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	88db      	ldrh	r3, [r3, #6]
 8008da4:	75fb      	strb	r3, [r7, #23]
	uint8_t ch;

	while((ch = *txt++)) //take next character, assign to 'ch' and check if is not NULL
 8008da6:	e034      	b.n	8008e12 <f_lcd_WriteTxt+0x88>
	{
		if(ch >= 0x20)
 8008da8:	7dbb      	ldrb	r3, [r7, #22]
 8008daa:	2b1f      	cmp	r3, #31
 8008dac:	d927      	bls.n	8008dfe <f_lcd_WriteTxt+0x74>
		{
			uint8_t fontWidth = pFont->chars[ch - 0x20].image->width;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	7dbb      	ldrb	r3, [r7, #22]
 8008db4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008db8:	3b20      	subs	r3, #32
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	889b      	ldrh	r3, [r3, #4]
 8008dc2:	757b      	strb	r3, [r7, #21]
			if((SH1106_WIDTH - x) < fontWidth) break; //no line wrapping
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
 8008dc6:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 8008dca:	7d7b      	ldrb	r3, [r7, #21]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	db29      	blt.n	8008e24 <f_lcd_WriteTxt+0x9a>
			f_lcd_DrawRaw(x, y, pFont->chars[ch - 0x20].image->data, fontWidth, fontHeight);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	7dbb      	ldrb	r3, [r7, #22]
 8008dd6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008dda:	3b20      	subs	r3, #32
 8008ddc:	00db      	lsls	r3, r3, #3
 8008dde:	4413      	add	r3, r2
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	7d7c      	ldrb	r4, [r7, #21]
 8008de6:	7bb9      	ldrb	r1, [r7, #14]
 8008de8:	7bf8      	ldrb	r0, [r7, #15]
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	4623      	mov	r3, r4
 8008df0:	f000 f81e 	bl	8008e30 <f_lcd_DrawRaw>
	
			x += fontWidth;
 8008df4:	7bfa      	ldrb	r2, [r7, #15]
 8008df6:	7d7b      	ldrb	r3, [r7, #21]
 8008df8:	4413      	add	r3, r2
 8008dfa:	73fb      	strb	r3, [r7, #15]
 8008dfc:	e009      	b.n	8008e12 <f_lcd_WriteTxt+0x88>
		}
		else if(ch == '\t')
 8008dfe:	7dbb      	ldrb	r3, [r7, #22]
 8008e00:	2b09      	cmp	r3, #9
 8008e02:	d106      	bne.n	8008e12 <f_lcd_WriteTxt+0x88>
		{
			// go to next segment
			x = ((x/16) + 1) * 16;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	091b      	lsrs	r3, r3, #4
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	011b      	lsls	r3, r3, #4
 8008e10:	73fb      	strb	r3, [r7, #15]
	while((ch = *txt++)) //take next character, assign to 'ch' and check if is not NULL
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	1c5a      	adds	r2, r3, #1
 8008e16:	60ba      	str	r2, [r7, #8]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	75bb      	strb	r3, [r7, #22]
 8008e1c:	7dbb      	ldrb	r3, [r7, #22]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1c2      	bne.n	8008da8 <f_lcd_WriteTxt+0x1e>
		}
	}
}
 8008e22:	e000      	b.n	8008e26 <f_lcd_WriteTxt+0x9c>
			if((SH1106_WIDTH - x) < fontWidth) break; //no line wrapping
 8008e24:	bf00      	nop
}
 8008e26:	bf00      	nop
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd90      	pop	{r4, r7, pc}
	...

08008e30 <f_lcd_DrawRaw>:

void f_lcd_DrawRaw(uint8_t x, uint8_t y, const uint8_t* pImage, uint8_t xSize, uint8_t ySize)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	603a      	str	r2, [r7, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	71fb      	strb	r3, [r7, #7]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	71bb      	strb	r3, [r7, #6]
 8008e42:	4613      	mov	r3, r2
 8008e44:	717b      	strb	r3, [r7, #5]
	uint8_t bufferPage;
	uint8_t imagePage = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	75fb      	strb	r3, [r7, #23]

	uint8_t bitsLeftInBuffer; //FrameBuffer Page
	uint8_t bitsLeftInImage = 8; //first row of image is always full byte
 8008e4a:	2308      	movs	r3, #8
 8008e4c:	75bb      	strb	r3, [r7, #22]
	 * 	MSB		MSB
	 */
	bool writtenUpperHalf; //if false then lower half will be written (most significant bits)


	while(ySize)
 8008e4e:	e09b      	b.n	8008f88 <f_lcd_DrawRaw+0x158>
	{
		bufferPage = y/8; //which lcd page will be written
 8008e50:	79bb      	ldrb	r3, [r7, #6]
 8008e52:	08db      	lsrs	r3, r3, #3
 8008e54:	743b      	strb	r3, [r7, #16]
		bitsLeftInBuffer = 8 - (y & 0x07); //take only 3 lower bit which describes bits of page
 8008e56:	79bb      	ldrb	r3, [r7, #6]
 8008e58:	f003 0307 	and.w	r3, r3, #7
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	f1c3 0308 	rsb	r3, r3, #8
 8008e62:	73fb      	strb	r3, [r7, #15]

		if(bitsLeftInImage > bitsLeftInBuffer) //probably you write on lower half (most significant bits)
 8008e64:	7dba      	ldrb	r2, [r7, #22]
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d904      	bls.n	8008e76 <f_lcd_DrawRaw+0x46>
			{
				bitsToWrite = bitsLeftInBuffer;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	757b      	strb	r3, [r7, #21]
				writtenUpperHalf = false;
 8008e70:	2300      	movs	r3, #0
 8008e72:	753b      	strb	r3, [r7, #20]
 8008e74:	e003      	b.n	8008e7e <f_lcd_DrawRaw+0x4e>
			}
		else
			{
				bitsToWrite = bitsLeftInImage;
 8008e76:	7dbb      	ldrb	r3, [r7, #22]
 8008e78:	757b      	strb	r3, [r7, #21]
				writtenUpperHalf = true;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	753b      	strb	r3, [r7, #20]
			}

		for(uint8_t columns = 0; columns < xSize; columns++)
 8008e7e:	2300      	movs	r3, #0
 8008e80:	74fb      	strb	r3, [r7, #19]
 8008e82:	e05a      	b.n	8008f3a <f_lcd_DrawRaw+0x10a>
		{
			uint8_t dataToPreserve;
			uint8_t dataToWrite;

			if(writtenUpperHalf) //preserve MSB bits
 8008e84:	7d3b      	ldrb	r3, [r7, #20]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d023      	beq.n	8008ed2 <f_lcd_DrawRaw+0xa2>
			{
				dataToPreserve = sh1106_FrameBuffer[bufferPage][x + columns] & (0xFF << bitsToWrite);
 8008e8a:	7c3a      	ldrb	r2, [r7, #16]
 8008e8c:	79f9      	ldrb	r1, [r7, #7]
 8008e8e:	7cfb      	ldrb	r3, [r7, #19]
 8008e90:	440b      	add	r3, r1
 8008e92:	4943      	ldr	r1, [pc, #268]	; (8008fa0 <f_lcd_DrawRaw+0x170>)
 8008e94:	01d2      	lsls	r2, r2, #7
 8008e96:	440a      	add	r2, r1
 8008e98:	4413      	add	r3, r2
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	b25a      	sxtb	r2, r3
 8008e9e:	7d7b      	ldrb	r3, [r7, #21]
 8008ea0:	21ff      	movs	r1, #255	; 0xff
 8008ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea6:	b25b      	sxtb	r3, r3
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	b25b      	sxtb	r3, r3
 8008eac:	74bb      	strb	r3, [r7, #18]
				dataToWrite = pImage[imagePage*xSize + columns] >> (8 - bitsToWrite);
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	797a      	ldrb	r2, [r7, #5]
 8008eb2:	fb03 f202 	mul.w	r2, r3, r2
 8008eb6:	7cfb      	ldrb	r3, [r7, #19]
 8008eb8:	4413      	add	r3, r2
 8008eba:	461a      	mov	r2, r3
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	7d7b      	ldrb	r3, [r7, #21]
 8008ec6:	f1c3 0308 	rsb	r3, r3, #8
 8008eca:	fa42 f303 	asr.w	r3, r2, r3
 8008ece:	747b      	strb	r3, [r7, #17]
 8008ed0:	e022      	b.n	8008f18 <f_lcd_DrawRaw+0xe8>
			}
			else //preserve LSB bits
			{
				dataToPreserve = sh1106_FrameBuffer[bufferPage][x + columns] & (0xFF >> bitsToWrite);
 8008ed2:	7c3a      	ldrb	r2, [r7, #16]
 8008ed4:	79f9      	ldrb	r1, [r7, #7]
 8008ed6:	7cfb      	ldrb	r3, [r7, #19]
 8008ed8:	440b      	add	r3, r1
 8008eda:	4931      	ldr	r1, [pc, #196]	; (8008fa0 <f_lcd_DrawRaw+0x170>)
 8008edc:	01d2      	lsls	r2, r2, #7
 8008ede:	440a      	add	r2, r1
 8008ee0:	4413      	add	r3, r2
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	b25a      	sxtb	r2, r3
 8008ee6:	7d7b      	ldrb	r3, [r7, #21]
 8008ee8:	21ff      	movs	r1, #255	; 0xff
 8008eea:	fa41 f303 	asr.w	r3, r1, r3
 8008eee:	b25b      	sxtb	r3, r3
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	b25b      	sxtb	r3, r3
 8008ef4:	74bb      	strb	r3, [r7, #18]
				dataToWrite = pImage[imagePage*xSize + columns] << (8 - bitsToWrite);
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	797a      	ldrb	r2, [r7, #5]
 8008efa:	fb03 f202 	mul.w	r2, r3, r2
 8008efe:	7cfb      	ldrb	r3, [r7, #19]
 8008f00:	4413      	add	r3, r2
 8008f02:	461a      	mov	r2, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	4413      	add	r3, r2
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	7d7b      	ldrb	r3, [r7, #21]
 8008f0e:	f1c3 0308 	rsb	r3, r3, #8
 8008f12:	fa02 f303 	lsl.w	r3, r2, r3
 8008f16:	747b      	strb	r3, [r7, #17]
			}

			sh1106_FrameBuffer[bufferPage][x + columns] = dataToPreserve | dataToWrite;//write pImage to page
 8008f18:	7c3a      	ldrb	r2, [r7, #16]
 8008f1a:	79f9      	ldrb	r1, [r7, #7]
 8008f1c:	7cfb      	ldrb	r3, [r7, #19]
 8008f1e:	440b      	add	r3, r1
 8008f20:	7cb8      	ldrb	r0, [r7, #18]
 8008f22:	7c79      	ldrb	r1, [r7, #17]
 8008f24:	4301      	orrs	r1, r0
 8008f26:	b2c8      	uxtb	r0, r1
 8008f28:	491d      	ldr	r1, [pc, #116]	; (8008fa0 <f_lcd_DrawRaw+0x170>)
 8008f2a:	01d2      	lsls	r2, r2, #7
 8008f2c:	440a      	add	r2, r1
 8008f2e:	4413      	add	r3, r2
 8008f30:	4602      	mov	r2, r0
 8008f32:	701a      	strb	r2, [r3, #0]
		for(uint8_t columns = 0; columns < xSize; columns++)
 8008f34:	7cfb      	ldrb	r3, [r7, #19]
 8008f36:	3301      	adds	r3, #1
 8008f38:	74fb      	strb	r3, [r7, #19]
 8008f3a:	7cfa      	ldrb	r2, [r7, #19]
 8008f3c:	797b      	ldrb	r3, [r7, #5]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d3a0      	bcc.n	8008e84 <f_lcd_DrawRaw+0x54>
		}

		bitsLeftInImage -= bitsToWrite;
 8008f42:	7dba      	ldrb	r2, [r7, #22]
 8008f44:	7d7b      	ldrb	r3, [r7, #21]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	75bb      	strb	r3, [r7, #22]
		if(bitsLeftInImage == 0) //jump to next page from pImage
 8008f4a:	7dbb      	ldrb	r3, [r7, #22]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d104      	bne.n	8008f5a <f_lcd_DrawRaw+0x12a>
		{
			imagePage++;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	3301      	adds	r3, #1
 8008f54:	75fb      	strb	r3, [r7, #23]
			bitsLeftInImage = 8;
 8008f56:	2308      	movs	r3, #8
 8008f58:	75bb      	strb	r3, [r7, #22]
		}

		ySize -= bitsToWrite;
 8008f5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008f5e:	7d7b      	ldrb	r3, [r7, #21]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	f887 3020 	strb.w	r3, [r7, #32]
		y += bitsToWrite;
 8008f66:	79ba      	ldrb	r2, [r7, #6]
 8008f68:	7d7b      	ldrb	r3, [r7, #21]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	71bb      	strb	r3, [r7, #6]

		sh1106_pageDirtyMask |= (1 << bufferPage);
 8008f6e:	7c3b      	ldrb	r3, [r7, #16]
 8008f70:	2201      	movs	r2, #1
 8008f72:	fa02 f303 	lsl.w	r3, r2, r3
 8008f76:	b25a      	sxtb	r2, r3
 8008f78:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <f_lcd_DrawRaw+0x174>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	b25b      	sxtb	r3, r3
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	b25b      	sxtb	r3, r3
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <f_lcd_DrawRaw+0x174>)
 8008f86:	701a      	strb	r2, [r3, #0]
	while(ySize)
 8008f88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f47f af5f 	bne.w	8008e50 <f_lcd_DrawRaw+0x20>
	}
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	371c      	adds	r7, #28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	200004c4 	.word	0x200004c4
 8008fa4:	200008c4 	.word	0x200008c4

08008fa8 <f_lcd_SetPixel>:
{
	f_lcd_DrawRaw(x, y, image->data, image->width, image->height);
}

void f_lcd_SetPixel(uint8_t x, uint8_t y, bool set)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	71fb      	strb	r3, [r7, #7]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	71bb      	strb	r3, [r7, #6]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	717b      	strb	r3, [r7, #5]
	if(set) sh1106_FrameBuffer[y/8][x] |= (1 << (y&0x07));
 8008fba:	797b      	ldrb	r3, [r7, #5]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01d      	beq.n	8008ffc <f_lcd_SetPixel+0x54>
 8008fc0:	79bb      	ldrb	r3, [r7, #6]
 8008fc2:	08db      	lsrs	r3, r3, #3
 8008fc4:	b2d8      	uxtb	r0, r3
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	491f      	ldr	r1, [pc, #124]	; (8009048 <f_lcd_SetPixel+0xa0>)
 8008fcc:	01d2      	lsls	r2, r2, #7
 8008fce:	440a      	add	r2, r1
 8008fd0:	4413      	add	r3, r2
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	b25a      	sxtb	r2, r3
 8008fd6:	79bb      	ldrb	r3, [r7, #6]
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	2101      	movs	r1, #1
 8008fde:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe2:	b25b      	sxtb	r3, r3
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	b259      	sxtb	r1, r3
 8008fe8:	4602      	mov	r2, r0
 8008fea:	79fb      	ldrb	r3, [r7, #7]
 8008fec:	b2c8      	uxtb	r0, r1
 8008fee:	4916      	ldr	r1, [pc, #88]	; (8009048 <f_lcd_SetPixel+0xa0>)
 8008ff0:	01d2      	lsls	r2, r2, #7
 8008ff2:	440a      	add	r2, r1
 8008ff4:	4413      	add	r3, r2
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	701a      	strb	r2, [r3, #0]
	else sh1106_FrameBuffer[y/8][x] &= ~(1 << (y&0x07));
}
 8008ffa:	e01e      	b.n	800903a <f_lcd_SetPixel+0x92>
	else sh1106_FrameBuffer[y/8][x] &= ~(1 << (y&0x07));
 8008ffc:	79bb      	ldrb	r3, [r7, #6]
 8008ffe:	08db      	lsrs	r3, r3, #3
 8009000:	b2d8      	uxtb	r0, r3
 8009002:	4602      	mov	r2, r0
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	4910      	ldr	r1, [pc, #64]	; (8009048 <f_lcd_SetPixel+0xa0>)
 8009008:	01d2      	lsls	r2, r2, #7
 800900a:	440a      	add	r2, r1
 800900c:	4413      	add	r3, r2
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	b25a      	sxtb	r2, r3
 8009012:	79bb      	ldrb	r3, [r7, #6]
 8009014:	f003 0307 	and.w	r3, r3, #7
 8009018:	2101      	movs	r1, #1
 800901a:	fa01 f303 	lsl.w	r3, r1, r3
 800901e:	b25b      	sxtb	r3, r3
 8009020:	43db      	mvns	r3, r3
 8009022:	b25b      	sxtb	r3, r3
 8009024:	4013      	ands	r3, r2
 8009026:	b259      	sxtb	r1, r3
 8009028:	4602      	mov	r2, r0
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	b2c8      	uxtb	r0, r1
 800902e:	4906      	ldr	r1, [pc, #24]	; (8009048 <f_lcd_SetPixel+0xa0>)
 8009030:	01d2      	lsls	r2, r2, #7
 8009032:	440a      	add	r2, r1
 8009034:	4413      	add	r3, r2
 8009036:	4602      	mov	r2, r0
 8009038:	701a      	strb	r2, [r3, #0]
}
 800903a:	bf00      	nop
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	200004c4 	.word	0x200004c4

0800904c <f_lcd_DrawLine>:

void f_lcd_DrawLine(uint8_t xStart, uint8_t yStart, uint8_t xEnd, uint8_t yEnd)
{
 800904c:	b590      	push	{r4, r7, lr}
 800904e:	b089      	sub	sp, #36	; 0x24
 8009050:	af00      	add	r7, sp, #0
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	4611      	mov	r1, r2
 8009058:	461a      	mov	r2, r3
 800905a:	4623      	mov	r3, r4
 800905c:	71fb      	strb	r3, [r7, #7]
 800905e:	4603      	mov	r3, r0
 8009060:	71bb      	strb	r3, [r7, #6]
 8009062:	460b      	mov	r3, r1
 8009064:	717b      	strb	r3, [r7, #5]
 8009066:	4613      	mov	r3, r2
 8009068:	713b      	strb	r3, [r7, #4]
	//check out for bresenham algorithm to optimize for bigger screens

	float delx, dely, length;
	float x, y;

	delx = abs(xEnd - xStart);
 800906a:	797a      	ldrb	r2, [r7, #5]
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	bfb8      	it	lt
 8009074:	425b      	neglt	r3, r3
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800907e:	edc7 7a03 	vstr	s15, [r7, #12]
	dely = abs(yEnd - yStart);
 8009082:	793a      	ldrb	r2, [r7, #4]
 8009084:	79bb      	ldrb	r3, [r7, #6]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	bfb8      	it	lt
 800908c:	425b      	neglt	r3, r3
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009096:	edc7 7a02 	vstr	s15, [r7, #8]

	if(delx < dely) length = dely;
 800909a:	ed97 7a03 	vldr	s14, [r7, #12]
 800909e:	edd7 7a02 	vldr	s15, [r7, #8]
 80090a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090aa:	d502      	bpl.n	80090b2 <f_lcd_DrawLine+0x66>
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	61fb      	str	r3, [r7, #28]
 80090b0:	e001      	b.n	80090b6 <f_lcd_DrawLine+0x6a>
	else length = delx;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	61fb      	str	r3, [r7, #28]

	delx = (xEnd - xStart) / length;
 80090b6:	797a      	ldrb	r2, [r7, #5]
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	ee07 3a90 	vmov	s15, r3
 80090c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80090c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80090c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090cc:	edc7 7a03 	vstr	s15, [r7, #12]
	dely = (yEnd - yStart) / length;
 80090d0:	793a      	ldrb	r2, [r7, #4]
 80090d2:	79bb      	ldrb	r3, [r7, #6]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	ee07 3a90 	vmov	s15, r3
 80090da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80090de:	ed97 7a07 	vldr	s14, [r7, #28]
 80090e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090e6:	edc7 7a02 	vstr	s15, [r7, #8]

	x = xStart + 0.5;
 80090ea:	79fb      	ldrb	r3, [r7, #7]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7f7 fa19 	bl	8000524 <__aeabi_i2d>
 80090f2:	f04f 0200 	mov.w	r2, #0
 80090f6:	4b38      	ldr	r3, [pc, #224]	; (80091d8 <f_lcd_DrawLine+0x18c>)
 80090f8:	f7f7 f8c8 	bl	800028c <__adddf3>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4610      	mov	r0, r2
 8009102:	4619      	mov	r1, r3
 8009104:	f7f7 fd70 	bl	8000be8 <__aeabi_d2f>
 8009108:	4603      	mov	r3, r0
 800910a:	61bb      	str	r3, [r7, #24]
	y = yStart + 0.5;
 800910c:	79bb      	ldrb	r3, [r7, #6]
 800910e:	4618      	mov	r0, r3
 8009110:	f7f7 fa08 	bl	8000524 <__aeabi_i2d>
 8009114:	f04f 0200 	mov.w	r2, #0
 8009118:	4b2f      	ldr	r3, [pc, #188]	; (80091d8 <f_lcd_DrawLine+0x18c>)
 800911a:	f7f7 f8b7 	bl	800028c <__adddf3>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4610      	mov	r0, r2
 8009124:	4619      	mov	r1, r3
 8009126:	f7f7 fd5f 	bl	8000be8 <__aeabi_d2f>
 800912a:	4603      	mov	r3, r0
 800912c:	617b      	str	r3, [r7, #20]

	for(uint8_t i = 0; i <= length; i ++)
 800912e:	2300      	movs	r3, #0
 8009130:	74fb      	strb	r3, [r7, #19]
 8009132:	e026      	b.n	8009182 <f_lcd_DrawLine+0x136>
	{
		f_lcd_SetPixel((uint8_t)x, (uint8_t)y, 1);
 8009134:	edd7 7a06 	vldr	s15, [r7, #24]
 8009138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800913c:	edc7 7a00 	vstr	s15, [r7]
 8009140:	783b      	ldrb	r3, [r7, #0]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	edd7 7a05 	vldr	s15, [r7, #20]
 8009148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800914c:	edc7 7a00 	vstr	s15, [r7]
 8009150:	783a      	ldrb	r2, [r7, #0]
 8009152:	b2d1      	uxtb	r1, r2
 8009154:	2201      	movs	r2, #1
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff ff26 	bl	8008fa8 <f_lcd_SetPixel>

		x += delx;
 800915c:	ed97 7a06 	vldr	s14, [r7, #24]
 8009160:	edd7 7a03 	vldr	s15, [r7, #12]
 8009164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009168:	edc7 7a06 	vstr	s15, [r7, #24]
		y += dely;
 800916c:	ed97 7a05 	vldr	s14, [r7, #20]
 8009170:	edd7 7a02 	vldr	s15, [r7, #8]
 8009174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009178:	edc7 7a05 	vstr	s15, [r7, #20]
	for(uint8_t i = 0; i <= length; i ++)
 800917c:	7cfb      	ldrb	r3, [r7, #19]
 800917e:	3301      	adds	r3, #1
 8009180:	74fb      	strb	r3, [r7, #19]
 8009182:	7cfb      	ldrb	r3, [r7, #19]
 8009184:	ee07 3a90 	vmov	s15, r3
 8009188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800918c:	ed97 7a07 	vldr	s14, [r7, #28]
 8009190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009198:	dacc      	bge.n	8009134 <f_lcd_DrawLine+0xe8>
	}

	for(uint8_t i = yStart/8; i <= yEnd/8; i++) sh1106_pageDirtyMask |= (1 << i);
 800919a:	79bb      	ldrb	r3, [r7, #6]
 800919c:	08db      	lsrs	r3, r3, #3
 800919e:	74bb      	strb	r3, [r7, #18]
 80091a0:	e00f      	b.n	80091c2 <f_lcd_DrawLine+0x176>
 80091a2:	7cbb      	ldrb	r3, [r7, #18]
 80091a4:	2201      	movs	r2, #1
 80091a6:	fa02 f303 	lsl.w	r3, r2, r3
 80091aa:	b25a      	sxtb	r2, r3
 80091ac:	4b0b      	ldr	r3, [pc, #44]	; (80091dc <f_lcd_DrawLine+0x190>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	b25b      	sxtb	r3, r3
 80091b2:	4313      	orrs	r3, r2
 80091b4:	b25b      	sxtb	r3, r3
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	4b08      	ldr	r3, [pc, #32]	; (80091dc <f_lcd_DrawLine+0x190>)
 80091ba:	701a      	strb	r2, [r3, #0]
 80091bc:	7cbb      	ldrb	r3, [r7, #18]
 80091be:	3301      	adds	r3, #1
 80091c0:	74bb      	strb	r3, [r7, #18]
 80091c2:	793b      	ldrb	r3, [r7, #4]
 80091c4:	08db      	lsrs	r3, r3, #3
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	7cba      	ldrb	r2, [r7, #18]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d9e9      	bls.n	80091a2 <f_lcd_DrawLine+0x156>
}
 80091ce:	bf00      	nop
 80091d0:	bf00      	nop
 80091d2:	3724      	adds	r7, #36	; 0x24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd90      	pop	{r4, r7, pc}
 80091d8:	3fe00000 	.word	0x3fe00000
 80091dc:	200008c4 	.word	0x200008c4

080091e0 <f_lcd_SendFrameCallback>:


void f_lcd_SendFrameCallback()
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	af00      	add	r7, sp, #0
	static uint8_t timer;
	static uint8_t activePage;

	if((HAL_GetTick() - timer) > 5) //software timer
 80091e4:	f7f9 f87e 	bl	80022e4 <HAL_GetTick>
 80091e8:	4603      	mov	r3, r0
 80091ea:	4a1d      	ldr	r2, [pc, #116]	; (8009260 <f_lcd_SendFrameCallback+0x80>)
 80091ec:	7812      	ldrb	r2, [r2, #0]
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	2b05      	cmp	r3, #5
 80091f2:	d932      	bls.n	800925a <f_lcd_SendFrameCallback+0x7a>
	{
		if(sh1106_pageDirtyMask & (1 << activePage))
 80091f4:	4b1b      	ldr	r3, [pc, #108]	; (8009264 <f_lcd_SendFrameCallback+0x84>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <f_lcd_SendFrameCallback+0x88>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	fa42 f303 	asr.w	r3, r2, r3
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d014      	beq.n	8009234 <f_lcd_SendFrameCallback+0x54>
		{
			f_SendFrameBufferPage(activePage);
 800920a:	4b17      	ldr	r3, [pc, #92]	; (8009268 <f_lcd_SendFrameCallback+0x88>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	4618      	mov	r0, r3
 8009210:	f7ff fd28 	bl	8008c64 <f_SendFrameBufferPage>
			sh1106_pageDirtyMask &= ~(1 << activePage);
 8009214:	4b14      	ldr	r3, [pc, #80]	; (8009268 <f_lcd_SendFrameCallback+0x88>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	461a      	mov	r2, r3
 800921a:	2301      	movs	r3, #1
 800921c:	4093      	lsls	r3, r2
 800921e:	b25b      	sxtb	r3, r3
 8009220:	43db      	mvns	r3, r3
 8009222:	b25a      	sxtb	r2, r3
 8009224:	4b0f      	ldr	r3, [pc, #60]	; (8009264 <f_lcd_SendFrameCallback+0x84>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	b25b      	sxtb	r3, r3
 800922a:	4013      	ands	r3, r2
 800922c:	b25b      	sxtb	r3, r3
 800922e:	b2da      	uxtb	r2, r3
 8009230:	4b0c      	ldr	r3, [pc, #48]	; (8009264 <f_lcd_SendFrameCallback+0x84>)
 8009232:	701a      	strb	r2, [r3, #0]
		}

		activePage = (activePage + 1) % 8;
 8009234:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <f_lcd_SendFrameCallback+0x88>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	3301      	adds	r3, #1
 800923a:	425a      	negs	r2, r3
 800923c:	f003 0307 	and.w	r3, r3, #7
 8009240:	f002 0207 	and.w	r2, r2, #7
 8009244:	bf58      	it	pl
 8009246:	4253      	negpl	r3, r2
 8009248:	b2da      	uxtb	r2, r3
 800924a:	4b07      	ldr	r3, [pc, #28]	; (8009268 <f_lcd_SendFrameCallback+0x88>)
 800924c:	701a      	strb	r2, [r3, #0]
		timer = HAL_GetTick();
 800924e:	f7f9 f849 	bl	80022e4 <HAL_GetTick>
 8009252:	4603      	mov	r3, r0
 8009254:	b2da      	uxtb	r2, r3
 8009256:	4b02      	ldr	r3, [pc, #8]	; (8009260 <f_lcd_SendFrameCallback+0x80>)
 8009258:	701a      	strb	r2, [r3, #0]
	}
}
 800925a:	bf00      	nop
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	200008c5 	.word	0x200008c5
 8009264:	200008c4 	.word	0x200008c4
 8009268:	200008c6 	.word	0x200008c6

0800926c <f_machine_MotorInitTimer>:


// ====================== motor section ====================

void f_machine_MotorInitTimer(TIM_HandleTypeDef *pTIMHandler, TIM_TypeDef *pTIMaddress)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	; 0x28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8009276:	f107 030c 	add.w	r3, r7, #12
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	605a      	str	r2, [r3, #4]
 8009280:	609a      	str	r2, [r3, #8]
 8009282:	60da      	str	r2, [r3, #12]
 8009284:	611a      	str	r2, [r3, #16]
 8009286:	615a      	str	r2, [r3, #20]
 8009288:	619a      	str	r2, [r3, #24]
	pMotorTIMHandler = pTIMHandler; //assign to a local pointer
 800928a:	4a1c      	ldr	r2, [pc, #112]	; (80092fc <f_machine_MotorInitTimer+0x90>)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6013      	str	r3, [r2, #0]

	pTIMHandler->Instance = pTIMaddress;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	601a      	str	r2, [r3, #0]
	pTIMHandler->Init.Prescaler = 4;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2204      	movs	r2, #4
 800929a:	605a      	str	r2, [r3, #4]
	pTIMHandler->Init.CounterMode = TIM_COUNTERMODE_UP;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	609a      	str	r2, [r3, #8]
	pTIMHandler->Init.Period = MAX_MOTOR_PWM;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80092a8:	60da      	str	r2, [r3, #12]
	pTIMHandler->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	611a      	str	r2, [r3, #16]
	pTIMHandler->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(pTIMHandler) != HAL_OK)
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7fd fe34 	bl	8006f24 <HAL_TIM_PWM_Init>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <f_machine_MotorInitTimer+0x5a>
	{
		Error_Handler();
 80092c2:	f7f8 fc21 	bl	8001b08 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80092c6:	2360      	movs	r3, #96	; 0x60
 80092c8:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80092ce:	2300      	movs	r3, #0
 80092d0:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80092d2:	2300      	movs	r3, #0
 80092d4:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(pTIMHandler, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80092d6:	f107 030c 	add.w	r3, r7, #12
 80092da:	2200      	movs	r2, #0
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7fe fcdc 	bl	8007c9c <HAL_TIM_PWM_ConfigChannel>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <f_machine_MotorInitTimer+0x82>
	{
		Error_Handler();
 80092ea:	f7f8 fc0d 	bl	8001b08 <Error_Handler>
	}

	HAL_TIM_MspPostInit(pTIMHandler);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7f8 ff2e 	bl	8002150 <HAL_TIM_MspPostInit>
}
 80092f4:	bf00      	nop
 80092f6:	3728      	adds	r7, #40	; 0x28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	200008d8 	.word	0x200008d8

08009300 <f_machine_MotorSet>:

void f_machine_MotorSet(bool onOff)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	71fb      	strb	r3, [r7, #7]
	if(onOff) HAL_TIM_PWM_Start(pMotorTIMHandler, TIM_CHANNEL_1);
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d006      	beq.n	800931e <f_machine_MotorSet+0x1e>
 8009310:	4b09      	ldr	r3, [pc, #36]	; (8009338 <f_machine_MotorSet+0x38>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2100      	movs	r1, #0
 8009316:	4618      	mov	r0, r3
 8009318:	f7fd fe54 	bl	8006fc4 <HAL_TIM_PWM_Start>
 800931c:	e005      	b.n	800932a <f_machine_MotorSet+0x2a>
	else HAL_TIM_PWM_Stop(pMotorTIMHandler, TIM_CHANNEL_1);
 800931e:	4b06      	ldr	r3, [pc, #24]	; (8009338 <f_machine_MotorSet+0x38>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2100      	movs	r1, #0
 8009324:	4618      	mov	r0, r3
 8009326:	f7fd ff15 	bl	8007154 <HAL_TIM_PWM_Stop>

	isMotorWorking = onOff;
 800932a:	4a04      	ldr	r2, [pc, #16]	; (800933c <f_machine_MotorSet+0x3c>)
 800932c:	79fb      	ldrb	r3, [r7, #7]
 800932e:	7013      	strb	r3, [r2, #0]
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	200008d8 	.word	0x200008d8
 800933c:	200008cf 	.word	0x200008cf

08009340 <f_machine_MotorSetVelocity>:

void f_machine_MotorSetVelocity(uint16_t velocity)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	80fb      	strh	r3, [r7, #6]
	if(velocity >= MAX_MOTOR_PWM) velocity = MAX_MOTOR_PWM;
 800934a:	88fb      	ldrh	r3, [r7, #6]
 800934c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009350:	4293      	cmp	r3, r2
 8009352:	d902      	bls.n	800935a <f_machine_MotorSetVelocity+0x1a>
 8009354:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009358:	80fb      	strh	r3, [r7, #6]
	motorVelocityOCR = velocity;
 800935a:	4a07      	ldr	r2, [pc, #28]	; (8009378 <f_machine_MotorSetVelocity+0x38>)
 800935c:	88fb      	ldrh	r3, [r7, #6]
 800935e:	8013      	strh	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(pMotorTIMHandler, TIM_CHANNEL_1, velocity);
 8009360:	4b06      	ldr	r3, [pc, #24]	; (800937c <f_machine_MotorSetVelocity+0x3c>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	88fa      	ldrh	r2, [r7, #6]
 8009368:	635a      	str	r2, [r3, #52]	; 0x34
}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	200008ca 	.word	0x200008ca
 800937c:	200008d8 	.word	0x200008d8

08009380 <f_machine_MotorTestIfOk>:

bool f_machine_MotorTestIfOk()
{
 8009380:	b5b0      	push	{r4, r5, r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
	bool isBusOk = false;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
	bool isPowerOk = false;
 800938a:	2300      	movs	r3, #0
 800938c:	75bb      	strb	r3, [r7, #22]

	uint16_t busVoltageLow = 1000*(MOTOR_BUS_VOLTAGE - MOTOR_BUS_VOLTAGE_DEV);
 800938e:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8009392:	823b      	strh	r3, [r7, #16]
	uint16_t busVoltageHigh = 1000*(MOTOR_BUS_VOLTAGE + MOTOR_BUS_VOLTAGE_DEV);
 8009394:	f244 2368 	movw	r3, #17000	; 0x4268
 8009398:	81fb      	strh	r3, [r7, #14]
	uint16_t busVoltage = f_ina219_GetBusVoltageInMilis();
 800939a:	f7ff fc4d 	bl	8008c38 <f_ina219_GetBusVoltageInMilis>
 800939e:	4603      	mov	r3, r0
 80093a0:	81bb      	strh	r3, [r7, #12]

	// is there bus voltage?
	if((busVoltage >= busVoltageLow) && (busVoltage <= busVoltageHigh)) isBusOk = true;
 80093a2:	89ba      	ldrh	r2, [r7, #12]
 80093a4:	8a3b      	ldrh	r3, [r7, #16]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d305      	bcc.n	80093b6 <f_machine_MotorTestIfOk+0x36>
 80093aa:	89ba      	ldrh	r2, [r7, #12]
 80093ac:	89fb      	ldrh	r3, [r7, #14]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d801      	bhi.n	80093b6 <f_machine_MotorTestIfOk+0x36>
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]

	// power draw is within the limit? Units: miliWatts
	int16_t powerUpperLimit;
	int16_t powerLowerLimit;

	if(isMotorWorking)
 80093b6:	4b3c      	ldr	r3, [pc, #240]	; (80094a8 <f_machine_MotorTestIfOk+0x128>)
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d047      	beq.n	800944e <f_machine_MotorTestIfOk+0xce>
	{
		uint32_t motorVoltage = busVoltage * motorVelocityOCR / MAX_MOTOR_PWM;
 80093be:	89bb      	ldrh	r3, [r7, #12]
 80093c0:	4a3a      	ldr	r2, [pc, #232]	; (80094ac <f_machine_MotorTestIfOk+0x12c>)
 80093c2:	8812      	ldrh	r2, [r2, #0]
 80093c4:	fb02 f303 	mul.w	r3, r2, r3
 80093c8:	4a39      	ldr	r2, [pc, #228]	; (80094b0 <f_machine_MotorTestIfOk+0x130>)
 80093ca:	fb82 1203 	smull	r1, r2, r2, r3
 80093ce:	441a      	add	r2, r3
 80093d0:	12d2      	asrs	r2, r2, #11
 80093d2:	17db      	asrs	r3, r3, #31
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	60bb      	str	r3, [r7, #8]
		uint32_t expectedPower = MOTOR_EXP_POWER_K * motorVoltage * motorVoltage / 1000;
 80093d8:	68b8      	ldr	r0, [r7, #8]
 80093da:	f7f7 f893 	bl	8000504 <__aeabi_ui2d>
 80093de:	a330      	add	r3, pc, #192	; (adr r3, 80094a0 <f_machine_MotorTestIfOk+0x120>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	f7f7 f908 	bl	80005f8 <__aeabi_dmul>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4614      	mov	r4, r2
 80093ee:	461d      	mov	r5, r3
 80093f0:	68b8      	ldr	r0, [r7, #8]
 80093f2:	f7f7 f887 	bl	8000504 <__aeabi_ui2d>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	4620      	mov	r0, r4
 80093fc:	4629      	mov	r1, r5
 80093fe:	f7f7 f8fb 	bl	80005f8 <__aeabi_dmul>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4610      	mov	r0, r2
 8009408:	4619      	mov	r1, r3
 800940a:	f04f 0200 	mov.w	r2, #0
 800940e:	4b29      	ldr	r3, [pc, #164]	; (80094b4 <f_machine_MotorTestIfOk+0x134>)
 8009410:	f7f7 fa1c 	bl	800084c <__aeabi_ddiv>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4610      	mov	r0, r2
 800941a:	4619      	mov	r1, r3
 800941c:	f7f7 fbc4 	bl	8000ba8 <__aeabi_d2uiz>
 8009420:	4603      	mov	r3, r0
 8009422:	607b      	str	r3, [r7, #4]
		powerUpperLimit = expectedPower + 1000 * MOTOR_POWER_DEV - motorIdlePower;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	b29a      	uxth	r2, r3
 8009428:	4b23      	ldr	r3, [pc, #140]	; (80094b8 <f_machine_MotorTestIfOk+0x138>)
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	b29b      	uxth	r3, r3
 8009430:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8009434:	b29b      	uxth	r3, r3
 8009436:	82bb      	strh	r3, [r7, #20]
		powerLowerLimit = expectedPower - 1000 * MOTOR_POWER_DEV - motorIdlePower;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	b29a      	uxth	r2, r3
 800943c:	4b1e      	ldr	r3, [pc, #120]	; (80094b8 <f_machine_MotorTestIfOk+0x138>)
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	b29b      	uxth	r3, r3
 8009444:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8009448:	b29b      	uxth	r3, r3
 800944a:	827b      	strh	r3, [r7, #18]
 800944c:	e005      	b.n	800945a <f_machine_MotorTestIfOk+0xda>
	}
	else
	{
		powerUpperLimit = MOTOR_MAX_IDLE_POWER * 1000;
 800944e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009452:	82bb      	strh	r3, [r7, #20]
		powerLowerLimit = -MOTOR_MAX_IDLE_POWER * 1000;
 8009454:	f24f 4348 	movw	r3, #62536	; 0xf448
 8009458:	827b      	strh	r3, [r7, #18]
	}

	uint16_t power = f_ina219_GetPowerInMilis();
 800945a:	f7ff fbc5 	bl	8008be8 <f_ina219_GetPowerInMilis>
 800945e:	4603      	mov	r3, r0
 8009460:	807b      	strh	r3, [r7, #2]
	if((power >= powerLowerLimit) && (power <= powerUpperLimit)) isPowerOk = true;
 8009462:	887a      	ldrh	r2, [r7, #2]
 8009464:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009468:	429a      	cmp	r2, r3
 800946a:	db06      	blt.n	800947a <f_machine_MotorTestIfOk+0xfa>
 800946c:	887a      	ldrh	r2, [r7, #2]
 800946e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009472:	429a      	cmp	r2, r3
 8009474:	dc01      	bgt.n	800947a <f_machine_MotorTestIfOk+0xfa>
 8009476:	2301      	movs	r3, #1
 8009478:	75bb      	strb	r3, [r7, #22]


	return isBusOk && isPowerOk;
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d004      	beq.n	800948a <f_machine_MotorTestIfOk+0x10a>
 8009480:	7dbb      	ldrb	r3, [r7, #22]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <f_machine_MotorTestIfOk+0x10a>
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <f_machine_MotorTestIfOk+0x10c>
 800948a:	2300      	movs	r3, #0
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	b2db      	uxtb	r3, r3
}
 8009492:	4618      	mov	r0, r3
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bdb0      	pop	{r4, r5, r7, pc}
 800949a:	bf00      	nop
 800949c:	f3af 8000 	nop.w
 80094a0:	70a3d70a 	.word	0x70a3d70a
 80094a4:	3fb70a3d 	.word	0x3fb70a3d
 80094a8:	200008cf 	.word	0x200008cf
 80094ac:	200008ca 	.word	0x200008ca
 80094b0:	80080081 	.word	0x80080081
 80094b4:	408f4000 	.word	0x408f4000
 80094b8:	200008c8 	.word	0x200008c8

080094bc <f_work_sensorTimerModeIC>:
 * change Timer to IC mode
 * count sensorTimeElapsed until second inteerupt request
 */

static void f_work_sensorTimerModeIC()
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
	TIM_IC_InitTypeDef sConfigIC = {0};
 80094c2:	463b      	mov	r3, r7
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	605a      	str	r2, [r3, #4]
 80094ca:	609a      	str	r2, [r3, #8]
 80094cc:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_DeInit(pSensorTIMHandler);
 80094ce:	4b16      	ldr	r3, [pc, #88]	; (8009528 <f_work_sensorTimerModeIC+0x6c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fd fba8 	bl	8006c28 <HAL_TIM_OC_DeInit>

	if (HAL_TIM_IC_Init(pSensorTIMHandler) != HAL_OK)
 80094d8:	4b13      	ldr	r3, [pc, #76]	; (8009528 <f_work_sensorTimerModeIC+0x6c>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fd fea9 	bl	8007234 <HAL_TIM_IC_Init>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d001      	beq.n	80094ec <f_work_sensorTimerModeIC+0x30>
	{
		Error_Handler();
 80094e8:	f7f8 fb0e 	bl	8001b08 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80094ec:	230a      	movs	r3, #10
 80094ee:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80094f0:	2301      	movs	r3, #1
 80094f2:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80094f4:	2300      	movs	r3, #0
 80094f6:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(pSensorTIMHandler, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80094fc:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <f_work_sensorTimerModeIC+0x6c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4639      	mov	r1, r7
 8009502:	2200      	movs	r2, #0
 8009504:	4618      	mov	r0, r3
 8009506:	f7fe fb2d 	bl	8007b64 <HAL_TIM_IC_ConfigChannel>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <f_work_sensorTimerModeIC+0x58>
	{
		Error_Handler();
 8009510:	f7f8 fafa 	bl	8001b08 <Error_Handler>
	}
	__HAL_TIM_CLEAR_IT(pSensorTIMHandler, TIM_IT_UPDATE);
 8009514:	4b04      	ldr	r3, [pc, #16]	; (8009528 <f_work_sensorTimerModeIC+0x6c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f06f 0201 	mvn.w	r2, #1
 800951e:	611a      	str	r2, [r3, #16]
}
 8009520:	bf00      	nop
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	200008d4 	.word	0x200008d4

0800952c <f_work_sensorTimerModeOC>:

static void f_work_sensorTimerModeOC()
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 8009532:	1d3b      	adds	r3, r7, #4
 8009534:	2200      	movs	r2, #0
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	605a      	str	r2, [r3, #4]
 800953a:	609a      	str	r2, [r3, #8]
 800953c:	60da      	str	r2, [r3, #12]
 800953e:	611a      	str	r2, [r3, #16]
 8009540:	615a      	str	r2, [r3, #20]
 8009542:	619a      	str	r2, [r3, #24]
	HAL_TIM_IC_DeInit(pSensorTIMHandler);
 8009544:	4b16      	ldr	r3, [pc, #88]	; (80095a0 <f_work_sensorTimerModeOC+0x74>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4618      	mov	r0, r3
 800954a:	f7fd fec2 	bl	80072d2 <HAL_TIM_IC_DeInit>

	if (HAL_TIM_OC_Init(pSensorTIMHandler) != HAL_OK)
 800954e:	4b14      	ldr	r3, [pc, #80]	; (80095a0 <f_work_sensorTimerModeOC+0x74>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4618      	mov	r0, r3
 8009554:	f7fd fb19 	bl	8006b8a <HAL_TIM_OC_Init>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <f_work_sensorTimerModeOC+0x36>
	{
		Error_Handler();
 800955e:	f7f8 fad3 	bl	8001b08 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8009562:	2300      	movs	r3, #0
 8009564:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 10;
 8009566:	230a      	movs	r3, #10
 8009568:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800956a:	2300      	movs	r3, #0
 800956c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(pSensorTIMHandler, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009572:	4b0b      	ldr	r3, [pc, #44]	; (80095a0 <f_work_sensorTimerModeOC+0x74>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	1d39      	adds	r1, r7, #4
 8009578:	2200      	movs	r2, #0
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe fa96 	bl	8007aac <HAL_TIM_OC_ConfigChannel>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <f_work_sensorTimerModeOC+0x5e>
	{
		Error_Handler();
 8009586:	f7f8 fabf 	bl	8001b08 <Error_Handler>
	}
	__HAL_TIM_CLEAR_IT(pSensorTIMHandler, TIM_IT_UPDATE);
 800958a:	4b05      	ldr	r3, [pc, #20]	; (80095a0 <f_work_sensorTimerModeOC+0x74>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f06f 0201 	mvn.w	r2, #1
 8009594:	611a      	str	r2, [r3, #16]
}
 8009596:	bf00      	nop
 8009598:	3720      	adds	r7, #32
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	200008d4 	.word	0x200008d4

080095a4 <f_machine_SensorInitTimer>:

// ================= PUBLIC FUNCTIONS ================

void f_machine_SensorInitTimer(TIM_HandleTypeDef *pTIMHandler, TIM_TypeDef *pTIMaddress)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
	pSensorTIMHandler = pTIMHandler; //assign to local handler
 80095ae:	4a1a      	ldr	r2, [pc, #104]	; (8009618 <f_machine_SensorInitTimer+0x74>)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6013      	str	r3, [r2, #0]

	pSensorTIMHandler->Instance = pTIMaddress;
 80095b4:	4b18      	ldr	r3, [pc, #96]	; (8009618 <f_machine_SensorInitTimer+0x74>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	601a      	str	r2, [r3, #0]
	pSensorTIMHandler->Init.Prescaler = 167;
 80095bc:	4b16      	ldr	r3, [pc, #88]	; (8009618 <f_machine_SensorInitTimer+0x74>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	22a7      	movs	r2, #167	; 0xa7
 80095c2:	605a      	str	r2, [r3, #4]
	pSensorTIMHandler->Init.CounterMode = TIM_COUNTERMODE_UP;
 80095c4:	4b14      	ldr	r3, [pc, #80]	; (8009618 <f_machine_SensorInitTimer+0x74>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2200      	movs	r2, #0
 80095ca:	609a      	str	r2, [r3, #8]
	pSensorTIMHandler->Init.Period = 30000;
 80095cc:	4b12      	ldr	r3, [pc, #72]	; (8009618 <f_machine_SensorInitTimer+0x74>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f247 5230 	movw	r2, #30000	; 0x7530
 80095d4:	60da      	str	r2, [r3, #12]
	pSensorTIMHandler->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095d6:	4b10      	ldr	r3, [pc, #64]	; (8009618 <f_machine_SensorInitTimer+0x74>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2200      	movs	r2, #0
 80095dc:	611a      	str	r2, [r3, #16]
	pSensorTIMHandler->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095de:	4b0e      	ldr	r3, [pc, #56]	; (8009618 <f_machine_SensorInitTimer+0x74>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2200      	movs	r2, #0
 80095e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(pSensorTIMHandler) != HAL_OK)
 80095e6:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <f_machine_SensorInitTimer+0x74>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fd fa7e 	bl	8006aec <HAL_TIM_Base_Init>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <f_machine_SensorInitTimer+0x56>
	{
		Error_Handler();
 80095f6:	f7f8 fa87 	bl	8001b08 <Error_Handler>
	}
	__HAL_TIM_URS_ENABLE(pSensorTIMHandler); //only counter overflow will generate interrupt and not changing 'Update Generation' bit too
 80095fa:	4b07      	ldr	r3, [pc, #28]	; (8009618 <f_machine_SensorInitTimer+0x74>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	4b05      	ldr	r3, [pc, #20]	; (8009618 <f_machine_SensorInitTimer+0x74>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f042 0204 	orr.w	r2, r2, #4
 800960c:	601a      	str	r2, [r3, #0]
}
 800960e:	bf00      	nop
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	200008d4 	.word	0x200008d4

0800961c <f_machine_SensorTriggerMeasure>:

void f_machine_SensorTriggerMeasure()
{
 800961c:	b580      	push	{r7, lr}
 800961e:	af00      	add	r7, sp, #0
	if(sensorStatus == SENSOR_OFF)
 8009620:	4b11      	ldr	r3, [pc, #68]	; (8009668 <f_machine_SensorTriggerMeasure+0x4c>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d11d      	bne.n	8009664 <f_machine_SensorTriggerMeasure+0x48>
	{
		f_work_sensorTimerModeOC();
 8009628:	f7ff ff80 	bl	800952c <f_work_sensorTimerModeOC>

		HAL_GPIO_WritePin(SENSOR_TRIG_GPIO_Port, SENSOR_TRIG_Pin, GPIO_PIN_SET);
 800962c:	2201      	movs	r2, #1
 800962e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009632:	480e      	ldr	r0, [pc, #56]	; (800966c <f_machine_SensorTriggerMeasure+0x50>)
 8009634:	f7f9 fcec 	bl	8003010 <HAL_GPIO_WritePin>
		HAL_TIM_OC_Start_IT(pSensorTIMHandler, TIM_CHANNEL_1);
 8009638:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <f_machine_SensorTriggerMeasure+0x54>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2100      	movs	r1, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f7fd fb5a 	bl	8006cf8 <HAL_TIM_OC_Start_IT>

		__HAL_TIM_ENABLE_IT(pSensorTIMHandler, TIM_IT_UPDATE);
 8009644:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <f_machine_SensorTriggerMeasure+0x54>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	4b08      	ldr	r3, [pc, #32]	; (8009670 <f_machine_SensorTriggerMeasure+0x54>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f042 0201 	orr.w	r2, r2, #1
 8009656:	60da      	str	r2, [r3, #12]

		sensorStatus = SENSOR_TRIGGER;
 8009658:	4b03      	ldr	r3, [pc, #12]	; (8009668 <f_machine_SensorTriggerMeasure+0x4c>)
 800965a:	2201      	movs	r2, #1
 800965c:	701a      	strb	r2, [r3, #0]
		work_sensorMeasureDone = false;
 800965e:	4b05      	ldr	r3, [pc, #20]	; (8009674 <f_machine_SensorTriggerMeasure+0x58>)
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
	}
}
 8009664:	bf00      	nop
 8009666:	bd80      	pop	{r7, pc}
 8009668:	200008d0 	.word	0x200008d0
 800966c:	40020400 	.word	0x40020400
 8009670:	200008d4 	.word	0x200008d4
 8009674:	200008ce 	.word	0x200008ce

08009678 <f_machine_SensorGetLastMeasure>:

uint16_t f_machine_SensorGetLastMeasure() //return value in mm
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
	bool isMeasureOk = false;
 800967e:	2300      	movs	r3, #0
 8009680:	71fb      	strb	r3, [r7, #7]
	uint16_t distance;

	if(work_sensorMeasureDone)
 8009682:	4b12      	ldr	r3, [pc, #72]	; (80096cc <f_machine_SensorGetLastMeasure+0x54>)
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d013      	beq.n	80096b2 <f_machine_SensorGetLastMeasure+0x3a>
	{
		distance = (uint32_t)((sensorTimeElapsed + SENSOR_CORRECTION) * SOUND_VELOCITY)/2000;
 800968a:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <f_machine_SensorGetLastMeasure+0x58>)
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	3305      	adds	r3, #5
 8009690:	f240 1257 	movw	r2, #343	; 0x157
 8009694:	fb02 f303 	mul.w	r3, r2, r3
 8009698:	461a      	mov	r2, r3
 800969a:	4b0e      	ldr	r3, [pc, #56]	; (80096d4 <f_machine_SensorGetLastMeasure+0x5c>)
 800969c:	fba3 2302 	umull	r2, r3, r3, r2
 80096a0:	09db      	lsrs	r3, r3, #7
 80096a2:	80bb      	strh	r3, [r7, #4]
		if(distance <= SENSOR_MAX_DISTANCE) isMeasureOk = true;
 80096a4:	88bb      	ldrh	r3, [r7, #4]
 80096a6:	f640 0298 	movw	r2, #2200	; 0x898
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d801      	bhi.n	80096b2 <f_machine_SensorGetLastMeasure+0x3a>
 80096ae:	2301      	movs	r3, #1
 80096b0:	71fb      	strb	r3, [r7, #7]
	}

	return isMeasureOk ? distance : 0;
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <f_machine_SensorGetLastMeasure+0x44>
 80096b8:	88bb      	ldrh	r3, [r7, #4]
 80096ba:	e000      	b.n	80096be <f_machine_SensorGetLastMeasure+0x46>
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	200008ce 	.word	0x200008ce
 80096d0:	200008cc 	.word	0x200008cc
 80096d4:	10624dd3 	.word	0x10624dd3

080096d8 <f_machine_SensorOutputCompareCallback>:

void f_machine_SensorOutputCompareCallback(TIM_HandleTypeDef *htim)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == pSensorTIMHandler->Instance)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	4b0e      	ldr	r3, [pc, #56]	; (8009720 <f_machine_SensorOutputCompareCallback+0x48>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d114      	bne.n	8009718 <f_machine_SensorOutputCompareCallback+0x40>
	{
		if(sensorStatus == SENSOR_TRIGGER)
 80096ee:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <f_machine_SensorOutputCompareCallback+0x4c>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d110      	bne.n	8009718 <f_machine_SensorOutputCompareCallback+0x40>
		{
			f_work_sensorTimerModeIC();
 80096f6:	f7ff fee1 	bl	80094bc <f_work_sensorTimerModeIC>

			HAL_GPIO_WritePin(SENSOR_TRIG_GPIO_Port, SENSOR_TRIG_Pin, GPIO_PIN_RESET);
 80096fa:	2200      	movs	r2, #0
 80096fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009700:	4809      	ldr	r0, [pc, #36]	; (8009728 <f_machine_SensorOutputCompareCallback+0x50>)
 8009702:	f7f9 fc85 	bl	8003010 <HAL_GPIO_WritePin>
			HAL_TIM_IC_Start_IT(pSensorTIMHandler, TIM_CHANNEL_1);
 8009706:	4b06      	ldr	r3, [pc, #24]	; (8009720 <f_machine_SensorOutputCompareCallback+0x48>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f7fd fe49 	bl	80073a4 <HAL_TIM_IC_Start_IT>

			sensorStatus = SENSOR_MEASURE;
 8009712:	4b04      	ldr	r3, [pc, #16]	; (8009724 <f_machine_SensorOutputCompareCallback+0x4c>)
 8009714:	2202      	movs	r2, #2
 8009716:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	200008d4 	.word	0x200008d4
 8009724:	200008d0 	.word	0x200008d0
 8009728:	40020400 	.word	0x40020400

0800972c <f_machine_SensorCaptureCallback>:

void f_machine_SensorCaptureCallback(TIM_HandleTypeDef *htim)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	if(htim->Instance == pSensorTIMHandler->Instance)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	4b16      	ldr	r3, [pc, #88]	; (8009794 <f_machine_SensorCaptureCallback+0x68>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	429a      	cmp	r2, r3
 8009740:	d123      	bne.n	800978a <f_machine_SensorCaptureCallback+0x5e>
	{
		if(sensorStatus == SENSOR_MEASURE) //rising edge
 8009742:	4b15      	ldr	r3, [pc, #84]	; (8009798 <f_machine_SensorCaptureCallback+0x6c>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b02      	cmp	r3, #2
 8009748:	d108      	bne.n	800975c <f_machine_SensorCaptureCallback+0x30>
		{
			__HAL_TIM_SET_COUNTER(pSensorTIMHandler, 0);
 800974a:	4b12      	ldr	r3, [pc, #72]	; (8009794 <f_machine_SensorCaptureCallback+0x68>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2200      	movs	r2, #0
 8009752:	625a      	str	r2, [r3, #36]	; 0x24

			sensorStatus = SENSOR_READ;
 8009754:	4b10      	ldr	r3, [pc, #64]	; (8009798 <f_machine_SensorCaptureCallback+0x6c>)
 8009756:	2203      	movs	r2, #3
 8009758:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(pSensorTIMHandler, TIM_CHANNEL_1);
			sensorStatus = SENSOR_OFF;
		}

	}
}
 800975a:	e016      	b.n	800978a <f_machine_SensorCaptureCallback+0x5e>
		else if(sensorStatus == SENSOR_READ) //falling edge
 800975c:	4b0e      	ldr	r3, [pc, #56]	; (8009798 <f_machine_SensorCaptureCallback+0x6c>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b03      	cmp	r3, #3
 8009762:	d112      	bne.n	800978a <f_machine_SensorCaptureCallback+0x5e>
			sensorTimeElapsed = __HAL_TIM_GET_COMPARE(pSensorTIMHandler, TIM_CHANNEL_1);
 8009764:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <f_machine_SensorCaptureCallback+0x68>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800976c:	b29a      	uxth	r2, r3
 800976e:	4b0b      	ldr	r3, [pc, #44]	; (800979c <f_machine_SensorCaptureCallback+0x70>)
 8009770:	801a      	strh	r2, [r3, #0]
			work_sensorMeasureDone = true;
 8009772:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <f_machine_SensorCaptureCallback+0x74>)
 8009774:	2201      	movs	r2, #1
 8009776:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(pSensorTIMHandler, TIM_CHANNEL_1);
 8009778:	4b06      	ldr	r3, [pc, #24]	; (8009794 <f_machine_SensorCaptureCallback+0x68>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2100      	movs	r1, #0
 800977e:	4618      	mov	r0, r3
 8009780:	f7fd ff38 	bl	80075f4 <HAL_TIM_IC_Stop_IT>
			sensorStatus = SENSOR_OFF;
 8009784:	4b04      	ldr	r3, [pc, #16]	; (8009798 <f_machine_SensorCaptureCallback+0x6c>)
 8009786:	2200      	movs	r2, #0
 8009788:	701a      	strb	r2, [r3, #0]
}
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	200008d4 	.word	0x200008d4
 8009798:	200008d0 	.word	0x200008d0
 800979c:	200008cc 	.word	0x200008cc
 80097a0:	200008ce 	.word	0x200008ce

080097a4 <f_machine_SensorPeriodElapsedCallback>:

void f_machine_SensorPeriodElapsedCallback(TIM_HandleTypeDef *htim) //timeout for distance sensor
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == pSensorTIMHandler->Instance)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <f_machine_SensorPeriodElapsedCallback+0x38>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d10b      	bne.n	80097d2 <f_machine_SensorPeriodElapsedCallback+0x2e>
	{
		HAL_TIM_IC_Stop_IT(pSensorTIMHandler, TIM_CHANNEL_1);
 80097ba:	4b08      	ldr	r3, [pc, #32]	; (80097dc <f_machine_SensorPeriodElapsedCallback+0x38>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2100      	movs	r1, #0
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fd ff17 	bl	80075f4 <HAL_TIM_IC_Stop_IT>
		sensorStatus = SENSOR_OFF;
 80097c6:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <f_machine_SensorPeriodElapsedCallback+0x3c>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	701a      	strb	r2, [r3, #0]
		work_sensorMeasureDone = false;
 80097cc:	4b05      	ldr	r3, [pc, #20]	; (80097e4 <f_machine_SensorPeriodElapsedCallback+0x40>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	701a      	strb	r2, [r3, #0]
	}
}
 80097d2:	bf00      	nop
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	200008d4 	.word	0x200008d4
 80097e0:	200008d0 	.word	0x200008d0
 80097e4:	200008ce 	.word	0x200008ce

080097e8 <f_pid_calculateThrottle>:


#include "pid.h"

t_pid_Control* f_pid_calculateThrottle(float setPoint, float input, t_pid_Control* Ctrl, t_pid_Parameter* Param)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b087      	sub	sp, #28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80097f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
	float error = setPoint - input;
 80097fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80097fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8009802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009806:	edc7 7a05 	vstr	s15, [r7, #20]

	//get p value
	Ctrl->pValue = error * Param->Kp;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	ed93 7a00 	vldr	s14, [r3]
 8009810:	edd7 7a05 	vldr	s15, [r7, #20]
 8009814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	edc3 7a04 	vstr	s15, [r3, #16]

	//get i value (with little lowPass filter)
	Ctrl->integral += (error + Ctrl->lastError)/2 * Param->Ki;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	ed93 7a00 	vldr	s14, [r3]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	edd3 6a01 	vldr	s13, [r3, #4]
 800982a:	edd7 7a05 	vldr	s15, [r7, #20]
 800982e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009832:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009836:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	edc3 7a00 	vstr	s15, [r3]

	Ctrl->iValue = Ctrl->integral;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	615a      	str	r2, [r3, #20]
	if(Ctrl->integral < Param->I_minRange) Ctrl->integral = Param->I_minRange;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	ed93 7a00 	vldr	s14, [r3]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986a:	d504      	bpl.n	8009876 <f_pid_calculateThrottle+0x8e>
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	68da      	ldr	r2, [r3, #12]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	e00e      	b.n	8009894 <f_pid_calculateThrottle+0xac>
	else if(Ctrl->integral > Param->I_maxRange) Ctrl->integral = Param->I_maxRange;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	ed93 7a00 	vldr	s14, [r3]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988a:	dd03      	ble.n	8009894 <f_pid_calculateThrottle+0xac>
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	691a      	ldr	r2, [r3, #16]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	601a      	str	r2, [r3, #0]


	//get d value but from input instead of error
	Ctrl->dValue = Param->Kd*(input - Ctrl->lastInput);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	ed93 7a02 	vldr	s14, [r3, #8]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	edd3 7a02 	vldr	s15, [r3, #8]
 80098a0:	edd7 6a02 	vldr	s13, [r7, #8]
 80098a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80098a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	edc3 7a06 	vstr	s15, [r3, #24]

	Ctrl->output = Ctrl->pValue + Ctrl->iValue + Ctrl->dValue;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80098be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80098c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	edc3 7a03 	vstr	s15, [r3, #12]
	Ctrl->lastInput = input;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	609a      	str	r2, [r3, #8]
	Ctrl->lastError = error;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	605a      	str	r2, [r3, #4]

	if(Ctrl->output > Param->maxRange) Ctrl->output = Param->maxRange;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80098ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f2:	dd04      	ble.n	80098fe <f_pid_calculateThrottle+0x116>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	699a      	ldr	r2, [r3, #24]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	60da      	str	r2, [r3, #12]
 80098fc:	e00e      	b.n	800991c <f_pid_calculateThrottle+0x134>
	else if(Ctrl->output < Param->minRange) Ctrl->output = Param->minRange;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	ed93 7a03 	vldr	s14, [r3, #12]
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	edd3 7a05 	vldr	s15, [r3, #20]
 800990a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800990e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009912:	d503      	bpl.n	800991c <f_pid_calculateThrottle+0x134>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	695a      	ldr	r2, [r3, #20]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	60da      	str	r2, [r3, #12]

	return Ctrl;
 800991c:	687b      	ldr	r3, [r7, #4]
}
 800991e:	4618      	mov	r0, r3
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
	...

0800992c <f_runtime_FirstInit>:
#include <stdio.h>
#include <stm32f4xx_hal.h>


bool f_runtime_FirstInit()
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
	uint8_t isOkCounter = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	71fb      	strb	r3, [r7, #7]

	//enable all basic peripherals
	isOkCounter += f_lcd_Init();
 8009936:	f7ff f9af 	bl	8008c98 <f_lcd_Init>
 800993a:	4603      	mov	r3, r0
 800993c:	461a      	mov	r2, r3
 800993e:	79fb      	ldrb	r3, [r7, #7]
 8009940:	4413      	add	r3, r2
 8009942:	71fb      	strb	r3, [r7, #7]
	f_machine_MotorInitTimer(&htim9, TIM9);
 8009944:	4913      	ldr	r1, [pc, #76]	; (8009994 <f_runtime_FirstInit+0x68>)
 8009946:	4814      	ldr	r0, [pc, #80]	; (8009998 <f_runtime_FirstInit+0x6c>)
 8009948:	f7ff fc90 	bl	800926c <f_machine_MotorInitTimer>
	f_machine_SensorInitTimer(&htim10, TIM10);
 800994c:	4913      	ldr	r1, [pc, #76]	; (800999c <f_runtime_FirstInit+0x70>)
 800994e:	4814      	ldr	r0, [pc, #80]	; (80099a0 <f_runtime_FirstInit+0x74>)
 8009950:	f7ff fe28 	bl	80095a4 <f_machine_SensorInitTimer>
	isOkCounter += f_ina219_Init(&hi2c1, I2C1);
 8009954:	4913      	ldr	r1, [pc, #76]	; (80099a4 <f_runtime_FirstInit+0x78>)
 8009956:	4814      	ldr	r0, [pc, #80]	; (80099a8 <f_runtime_FirstInit+0x7c>)
 8009958:	f7ff f905 	bl	8008b66 <f_ina219_Init>
 800995c:	4603      	mov	r3, r0
 800995e:	461a      	mov	r2, r3
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	4413      	add	r3, r2
 8009964:	71fb      	strb	r3, [r7, #7]
	//enable encoder timer
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8009966:	4b11      	ldr	r3, [pc, #68]	; (80099ac <f_runtime_FirstInit+0x80>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2200      	movs	r2, #0
 800996c:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800996e:	2100      	movs	r1, #0
 8009970:	480e      	ldr	r0, [pc, #56]	; (80099ac <f_runtime_FirstInit+0x80>)
 8009972:	f7fd fd17 	bl	80073a4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8009976:	2104      	movs	r1, #4
 8009978:	480c      	ldr	r0, [pc, #48]	; (80099ac <f_runtime_FirstInit+0x80>)
 800997a:	f7fd fd13 	bl	80073a4 <HAL_TIM_IC_Start_IT>

	return (isOkCounter == 2) ? true : false;
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	2b02      	cmp	r3, #2
 8009982:	bf0c      	ite	eq
 8009984:	2301      	moveq	r3, #1
 8009986:	2300      	movne	r3, #0
 8009988:	b2db      	uxtb	r3, r3
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	40014000 	.word	0x40014000
 8009998:	200003ac 	.word	0x200003ac
 800999c:	40014400 	.word	0x40014400
 80099a0:	200003f4 	.word	0x200003f4
 80099a4:	40005400 	.word	0x40005400
 80099a8:	200001fc 	.word	0x200001fc
 80099ac:	20000364 	.word	0x20000364

080099b0 <f_runtime_FirstTest>:

bool f_runtime_FirstTest()
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
	uint8_t isOkCounter = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	71fb      	strb	r3, [r7, #7]

	//check motor on idle
	f_machine_MotorSet(0);
 80099ba:	2000      	movs	r0, #0
 80099bc:	f7ff fca0 	bl	8009300 <f_machine_MotorSet>
	isOkCounter += f_machine_MotorTestIfOk();
 80099c0:	f7ff fcde 	bl	8009380 <f_machine_MotorTestIfOk>
 80099c4:	4603      	mov	r3, r0
 80099c6:	461a      	mov	r2, r3
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	4413      	add	r3, r2
 80099cc:	71fb      	strb	r3, [r7, #7]
	//check motor on 50%
	f_machine_MotorSetVelocity(MAX_MOTOR_PWM/2);
 80099ce:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80099d2:	f7ff fcb5 	bl	8009340 <f_machine_MotorSetVelocity>
	f_machine_MotorSet(1);
 80099d6:	2001      	movs	r0, #1
 80099d8:	f7ff fc92 	bl	8009300 <f_machine_MotorSet>
	HAL_Delay(2000);
 80099dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80099e0:	f7f8 fc8c 	bl	80022fc <HAL_Delay>
	isOkCounter += f_machine_MotorTestIfOk();
 80099e4:	f7ff fccc 	bl	8009380 <f_machine_MotorTestIfOk>
 80099e8:	4603      	mov	r3, r0
 80099ea:	461a      	mov	r2, r3
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	4413      	add	r3, r2
 80099f0:	71fb      	strb	r3, [r7, #7]
	f_machine_MotorSet(0);
 80099f2:	2000      	movs	r0, #0
 80099f4:	f7ff fc84 	bl	8009300 <f_machine_MotorSet>

	//check if distance is not 0
	f_machine_SensorTriggerMeasure();
 80099f8:	f7ff fe10 	bl	800961c <f_machine_SensorTriggerMeasure>
	while(!work_sensorMeasureDone)
 80099fc:	bf00      	nop
 80099fe:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <f_runtime_FirstTest+0x84>)
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	f083 0301 	eor.w	r3, r3, #1
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1f8      	bne.n	80099fe <f_runtime_FirstTest+0x4e>
		;
	uint16_t distance = f_machine_SensorGetLastMeasure();
 8009a0c:	f7ff fe34 	bl	8009678 <f_machine_SensorGetLastMeasure>
 8009a10:	4603      	mov	r3, r0
 8009a12:	80bb      	strh	r3, [r7, #4]
	if(distance > 0) isOkCounter++;
 8009a14:	88bb      	ldrh	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <f_runtime_FirstTest+0x70>
 8009a1a:	79fb      	ldrb	r3, [r7, #7]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	71fb      	strb	r3, [r7, #7]

	return (isOkCounter == 3) ? true : false;
 8009a20:	79fb      	ldrb	r3, [r7, #7]
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	bf0c      	ite	eq
 8009a26:	2301      	moveq	r3, #1
 8009a28:	2300      	movne	r3, #0
 8009a2a:	b2db      	uxtb	r3, r3
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	200008ce 	.word	0x200008ce

08009a38 <f_runtime_GetParamInput>:

float f_runtime_GetParamInput(uint8_t multiplier) //default resolution is 0.01
{
 8009a38:	b590      	push	{r4, r7, lr}
 8009a3a:	b08b      	sub	sp, #44	; 0x2c
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	71fb      	strb	r3, [r7, #7]
	char txt[20];
	uint16_t *timerCounter = (uint16_t*)&htim3.Instance->CNT;
 8009a42:	4b34      	ldr	r3, [pc, #208]	; (8009b14 <f_runtime_GetParamInput+0xdc>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3324      	adds	r3, #36	; 0x24
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24
	*timerCounter = 0;
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	801a      	strh	r2, [r3, #0]
	encoderInputChanged = true; //write to lcd the first time, then wait for change
 8009a50:	4b31      	ldr	r3, [pc, #196]	; (8009b18 <f_runtime_GetParamInput+0xe0>)
 8009a52:	2201      	movs	r2, #1
 8009a54:	701a      	strb	r2, [r3, #0]

	while(!eventFlag)
 8009a56:	e03d      	b.n	8009ad4 <f_runtime_GetParamInput+0x9c>
	{
		if(encoderInputChanged)
 8009a58:	4b2f      	ldr	r3, [pc, #188]	; (8009b18 <f_runtime_GetParamInput+0xe0>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d036      	beq.n	8009ace <f_runtime_GetParamInput+0x96>
		{
			uint16_t tmpVal = *timerCounter/2;
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	085b      	lsrs	r3, r3, #1
 8009a66:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(txt, "%2d.%02d", multiplier*tmpVal/100, multiplier*tmpVal%100);
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009a6c:	fb02 f303 	mul.w	r3, r2, r3
 8009a70:	4a2a      	ldr	r2, [pc, #168]	; (8009b1c <f_runtime_GetParamInput+0xe4>)
 8009a72:	fb82 1203 	smull	r1, r2, r2, r3
 8009a76:	1152      	asrs	r2, r2, #5
 8009a78:	17db      	asrs	r3, r3, #31
 8009a7a:	1ad4      	subs	r4, r2, r3
 8009a7c:	79fb      	ldrb	r3, [r7, #7]
 8009a7e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009a80:	fb02 f303 	mul.w	r3, r2, r3
 8009a84:	4a25      	ldr	r2, [pc, #148]	; (8009b1c <f_runtime_GetParamInput+0xe4>)
 8009a86:	fb82 1203 	smull	r1, r2, r2, r3
 8009a8a:	1151      	asrs	r1, r2, #5
 8009a8c:	17da      	asrs	r2, r3, #31
 8009a8e:	1a8a      	subs	r2, r1, r2
 8009a90:	2164      	movs	r1, #100	; 0x64
 8009a92:	fb01 f202 	mul.w	r2, r1, r2
 8009a96:	1a9a      	subs	r2, r3, r2
 8009a98:	f107 000c 	add.w	r0, r7, #12
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	4622      	mov	r2, r4
 8009aa0:	491f      	ldr	r1, [pc, #124]	; (8009b20 <f_runtime_GetParamInput+0xe8>)
 8009aa2:	f000 ff13 	bl	800a8cc <siprintf>
			f_lcd_Clear(0, 128, 6);
 8009aa6:	2206      	movs	r2, #6
 8009aa8:	2180      	movs	r1, #128	; 0x80
 8009aaa:	2000      	movs	r0, #0
 8009aac:	f7ff f922 	bl	8008cf4 <f_lcd_Clear>
			f_lcd_Clear(0, 128, 7);
 8009ab0:	2207      	movs	r2, #7
 8009ab2:	2180      	movs	r1, #128	; 0x80
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	f7ff f91d 	bl	8008cf4 <f_lcd_Clear>
			f_lcd_WriteTxt(0, 48, txt, &font_msSansSerif_14);
 8009aba:	f107 020c 	add.w	r2, r7, #12
 8009abe:	4b19      	ldr	r3, [pc, #100]	; (8009b24 <f_runtime_GetParamInput+0xec>)
 8009ac0:	2130      	movs	r1, #48	; 0x30
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	f7ff f961 	bl	8008d8a <f_lcd_WriteTxt>
			encoderInputChanged = false;
 8009ac8:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <f_runtime_GetParamInput+0xe0>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]
		}
		HAL_IWDG_Refresh(&hiwdg); //it stays in this loop quite long, so it is necessary to refresh the watchdog
 8009ace:	4816      	ldr	r0, [pc, #88]	; (8009b28 <f_runtime_GetParamInput+0xf0>)
 8009ad0:	f7fb ff9c 	bl	8005a0c <HAL_IWDG_Refresh>
	while(!eventFlag)
 8009ad4:	4b15      	ldr	r3, [pc, #84]	; (8009b2c <f_runtime_GetParamInput+0xf4>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	f083 0301 	eor.w	r3, r3, #1
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1ba      	bne.n	8009a58 <f_runtime_GetParamInput+0x20>
	}
	return (float)multiplier*(*timerCounter)/200;
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	ee07 3a90 	vmov	s15, r3
 8009ae8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	ee07 3a90 	vmov	s15, r3
 8009af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009afc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009b30 <f_runtime_GetParamInput+0xf8>
 8009b00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009b04:	eef0 7a66 	vmov.f32	s15, s13
}
 8009b08:	eeb0 0a67 	vmov.f32	s0, s15
 8009b0c:	372c      	adds	r7, #44	; 0x2c
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd90      	pop	{r4, r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000364 	.word	0x20000364
 8009b18:	2000025d 	.word	0x2000025d
 8009b1c:	51eb851f 	.word	0x51eb851f
 8009b20:	0800cf04 	.word	0x0800cf04
 8009b24:	0800dc84 	.word	0x0800dc84
 8009b28:	20000250 	.word	0x20000250
 8009b2c:	2000025c 	.word	0x2000025c
 8009b30:	43480000 	.word	0x43480000

08009b34 <f_runtime_WorkMotorHandler>:

uint16_t f_runtime_WorkMotorHandler(uint16_t *distanceGet, uint16_t *distanceSet, uint16_t *motorPwm, t_pid_Parameter *Param, t_pid_Control *Ctrl)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	603b      	str	r3, [r7, #0]
	uint16_t timeout = 20;
 8009b42:	2314      	movs	r3, #20
 8009b44:	82fb      	strh	r3, [r7, #22]

	while(!work_sensorMeasureDone && timeout)
 8009b46:	e005      	b.n	8009b54 <f_runtime_WorkMotorHandler+0x20>
	{
		HAL_Delay(1);
 8009b48:	2001      	movs	r0, #1
 8009b4a:	f7f8 fbd7 	bl	80022fc <HAL_Delay>
		timeout--;
 8009b4e:	8afb      	ldrh	r3, [r7, #22]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	82fb      	strh	r3, [r7, #22]
	while(!work_sensorMeasureDone && timeout)
 8009b54:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <f_runtime_WorkMotorHandler+0xb4>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f083 0301 	eor.w	r3, r3, #1
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d002      	beq.n	8009b68 <f_runtime_WorkMotorHandler+0x34>
 8009b62:	8afb      	ldrh	r3, [r7, #22]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1ef      	bne.n	8009b48 <f_runtime_WorkMotorHandler+0x14>
	}
	*distanceGet = f_machine_SensorGetLastMeasure(); //in mm
 8009b68:	f7ff fd86 	bl	8009678 <f_machine_SensorGetLastMeasure>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	461a      	mov	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	801a      	strh	r2, [r3, #0]

	f_pid_calculateThrottle(*distanceSet, (float)*distanceGet, Ctrl, Param);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	ee07 3a90 	vmov	s15, r3
 8009b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	ee07 3a10 	vmov	s14, r3
 8009b88:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6a38      	ldr	r0, [r7, #32]
 8009b90:	eef0 0a47 	vmov.f32	s1, s14
 8009b94:	eeb0 0a67 	vmov.f32	s0, s15
 8009b98:	f7ff fe26 	bl	80097e8 <f_pid_calculateThrottle>

	*motorPwm = MAX_MOTOR_PWM/2 - (int16_t)Ctrl->output; //error is reversed
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ba6:	ee17 3a90 	vmov	r3, s15
 8009baa:	b21b      	sxth	r3, r3
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8009bb2:	3307      	adds	r3, #7
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	801a      	strh	r2, [r3, #0]
	if(*motorPwm > MAX_MOTOR_PWM) *motorPwm = MAX_MOTOR_PWM;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc2:	d303      	bcc.n	8009bcc <f_runtime_WorkMotorHandler+0x98>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009bca:	801a      	strh	r2, [r3, #0]
	else if(*motorPwm < 0) *motorPwm = 0;

	f_machine_MotorSetVelocity(*motorPwm);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff fbb5 	bl	8009340 <f_machine_MotorSetVelocity>

	f_machine_SensorTriggerMeasure();
 8009bd6:	f7ff fd21 	bl	800961c <f_machine_SensorTriggerMeasure>

	return *motorPwm;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	881b      	ldrh	r3, [r3, #0]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	200008ce 	.word	0x200008ce

08009bec <f_sh1106_HwInit>:

bool sh1106_TransmitBusy;
SPI_HandleTypeDef *pSPIhandler; //local handler

static bool f_sh1106_HwInit(SPI_HandleTypeDef *pHandler, SPI_TypeDef *pSPIaddress)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
	pSPIhandler = pHandler; //assign to a local handler
 8009bf6:	4a23      	ldr	r2, [pc, #140]	; (8009c84 <f_sh1106_HwInit+0x98>)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6013      	str	r3, [r2, #0]

	pHandler->Instance = pSPIaddress;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	601a      	str	r2, [r3, #0]
	pHandler->Init.Mode = SPI_MODE_MASTER;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009c08:	605a      	str	r2, [r3, #4]
	pHandler->Init.Direction = SPI_DIRECTION_2LINES;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	609a      	str	r2, [r3, #8]
	pHandler->Init.DataSize = SPI_DATASIZE_8BIT;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	60da      	str	r2, [r3, #12]
	pHandler->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2202      	movs	r2, #2
 8009c1a:	611a      	str	r2, [r3, #16]
	pHandler->Init.CLKPhase = SPI_PHASE_2EDGE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	615a      	str	r2, [r3, #20]
	pHandler->Init.NSS = SPI_NSS_SOFT;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c28:	619a      	str	r2, [r3, #24]
	pHandler->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	61da      	str	r2, [r3, #28]
	pHandler->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	621a      	str	r2, [r3, #32]
	pHandler->Init.TIMode = SPI_TIMODE_DISABLE;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	625a      	str	r2, [r3, #36]	; 0x24
	pHandler->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	629a      	str	r2, [r3, #40]	; 0x28
	pHandler->Init.CRCPolynomial = 10;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	220a      	movs	r2, #10
 8009c46:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(pHandler) != HAL_OK)
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fc fb73 	bl	8006334 <HAL_SPI_Init>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <f_sh1106_HwInit+0x70>
	{
		Error_Handler();
 8009c54:	f7f7 ff58 	bl	8001b08 <Error_Handler>
		return false;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	e00e      	b.n	8009c7a <f_sh1106_HwInit+0x8e>
	}

	__HAL_SPI_ENABLE(pSPIhandler);
 8009c5c:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <f_sh1106_HwInit+0x98>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	4b07      	ldr	r3, [pc, #28]	; (8009c84 <f_sh1106_HwInit+0x98>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c6e:	601a      	str	r2, [r3, #0]
	CS_HIGH();
 8009c70:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <f_sh1106_HwInit+0x9c>)
 8009c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c76:	619a      	str	r2, [r3, #24]

	return true;
 8009c78:	2301      	movs	r3, #1
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200008e0 	.word	0x200008e0
 8009c88:	40020400 	.word	0x40020400

08009c8c <f_sh1106_TrySendData>:

static bool f_sh1106_TrySendData(uint8_t *pData, uint16_t length, bool cmd)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	807b      	strh	r3, [r7, #2]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	707b      	strb	r3, [r7, #1]
	bool isOk = false;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]
	uint8_t tries;

	for(tries = 0; tries < 3; tries++)
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73bb      	strb	r3, [r7, #14]
 8009ca4:	e033      	b.n	8009d0e <f_sh1106_TrySendData+0x82>
	{
		if(sh1106_TransmitBusy)
 8009ca6:	4b1f      	ldr	r3, [pc, #124]	; (8009d24 <f_sh1106_TrySendData+0x98>)
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d003      	beq.n	8009cb6 <f_sh1106_TrySendData+0x2a>
		{
			HAL_Delay(10);
 8009cae:	200a      	movs	r0, #10
 8009cb0:	f7f8 fb24 	bl	80022fc <HAL_Delay>
 8009cb4:	e028      	b.n	8009d08 <f_sh1106_TrySendData+0x7c>
		}
		else
		{
			if(cmd) CMD_LOW();
 8009cb6:	787b      	ldrb	r3, [r7, #1]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d004      	beq.n	8009cc6 <f_sh1106_TrySendData+0x3a>
 8009cbc:	4b1a      	ldr	r3, [pc, #104]	; (8009d28 <f_sh1106_TrySendData+0x9c>)
 8009cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cc2:	619a      	str	r2, [r3, #24]
 8009cc4:	e003      	b.n	8009cce <f_sh1106_TrySendData+0x42>
			else CMD_HIGH();
 8009cc6:	4b18      	ldr	r3, [pc, #96]	; (8009d28 <f_sh1106_TrySendData+0x9c>)
 8009cc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ccc:	619a      	str	r2, [r3, #24]

			sh1106_TransmitBusy = true;
 8009cce:	4b15      	ldr	r3, [pc, #84]	; (8009d24 <f_sh1106_TrySendData+0x98>)
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	701a      	strb	r2, [r3, #0]
			CS_LOW();
 8009cd4:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <f_sh1106_TrySendData+0x9c>)
 8009cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009cda:	619a      	str	r2, [r3, #24]
			HAL_StatusTypeDef status = HAL_SPI_Transmit(pSPIhandler, pData, length, 10);
 8009cdc:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <f_sh1106_TrySendData+0xa0>)
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	887a      	ldrh	r2, [r7, #2]
 8009ce2:	230a      	movs	r3, #10
 8009ce4:	6879      	ldr	r1, [r7, #4]
 8009ce6:	f7fc fbae 	bl	8006446 <HAL_SPI_Transmit>
 8009cea:	4603      	mov	r3, r0
 8009cec:	737b      	strb	r3, [r7, #13]
			CS_HIGH();
 8009cee:	4b0e      	ldr	r3, [pc, #56]	; (8009d28 <f_sh1106_TrySendData+0x9c>)
 8009cf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009cf4:	619a      	str	r2, [r3, #24]
			sh1106_TransmitBusy = false;
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <f_sh1106_TrySendData+0x98>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	701a      	strb	r2, [r3, #0]

			if(status == HAL_OK) isOk = true;
 8009cfc:	7b7b      	ldrb	r3, [r7, #13]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d109      	bne.n	8009d16 <f_sh1106_TrySendData+0x8a>
 8009d02:	2301      	movs	r3, #1
 8009d04:	73fb      	strb	r3, [r7, #15]

			break;
 8009d06:	e006      	b.n	8009d16 <f_sh1106_TrySendData+0x8a>
	for(tries = 0; tries < 3; tries++)
 8009d08:	7bbb      	ldrb	r3, [r7, #14]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	73bb      	strb	r3, [r7, #14]
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d9c8      	bls.n	8009ca6 <f_sh1106_TrySendData+0x1a>
 8009d14:	e000      	b.n	8009d18 <f_sh1106_TrySendData+0x8c>
			break;
 8009d16:	bf00      	nop
		}
	}

	return isOk;
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	200008dc 	.word	0x200008dc
 8009d28:	40020400 	.word	0x40020400
 8009d2c:	200008e0 	.word	0x200008e0

08009d30 <f_sh1106_Init>:

//============ public functions ========================

bool f_sh1106_Init(SPI_HandleTypeDef *pHandler, SPI_TypeDef *pSPIaddress)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
	bool isOk;

	if(pHandler == NULL) return false;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <f_sh1106_Init+0x14>
 8009d40:	2300      	movs	r3, #0
 8009d42:	e011      	b.n	8009d68 <f_sh1106_Init+0x38>

	isOk = f_sh1106_HwInit(pHandler, pSPIaddress);
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff ff50 	bl	8009bec <f_sh1106_HwInit>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	73fb      	strb	r3, [r7, #15]

	RES_LOW();
 8009d50:	4b07      	ldr	r3, [pc, #28]	; (8009d70 <f_sh1106_Init+0x40>)
 8009d52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009d56:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 8009d58:	2001      	movs	r0, #1
 8009d5a:	f7f8 facf 	bl	80022fc <HAL_Delay>
	RES_HIGH();
 8009d5e:	4b04      	ldr	r3, [pc, #16]	; (8009d70 <f_sh1106_Init+0x40>)
 8009d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d64:	619a      	str	r2, [r3, #24]

	return isOk;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	40020400 	.word	0x40020400

08009d74 <f_sh1106_cmd_SetColumnAddress>:

// ========================== COMMAND SEND FUNCTIONS ====================

bool f_sh1106_cmd_SetColumnAddress(uint8_t address)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	71fb      	strb	r3, [r7, #7]
	if(address >= SH1106_WIDTH) return false;
 8009d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	da01      	bge.n	8009d8a <f_sh1106_cmd_SetColumnAddress+0x16>
 8009d86:	2300      	movs	r3, #0
 8009d88:	e01a      	b.n	8009dc0 <f_sh1106_cmd_SetColumnAddress+0x4c>

	address += 2; //2 first and last pixels are not visible
 8009d8a:	79fb      	ldrb	r3, [r7, #7]
 8009d8c:	3302      	adds	r3, #2
 8009d8e:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[2];

	cmd[0] = 0x10 | ((address >> 4) & 0x0F);
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	091b      	lsrs	r3, r3, #4
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	b25b      	sxtb	r3, r3
 8009d98:	f043 0310 	orr.w	r3, r3, #16
 8009d9c:	b25b      	sxtb	r3, r3
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	733b      	strb	r3, [r7, #12]
	cmd[1] = address & 0x0F;
 8009da2:	79fb      	ldrb	r3, [r7, #7]
 8009da4:	f003 030f 	and.w	r3, r3, #15
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	737b      	strb	r3, [r7, #13]

	bool isOk = f_sh1106_TrySendData((uint8_t*)&cmd, 2, true);
 8009dac:	f107 030c 	add.w	r3, r7, #12
 8009db0:	2201      	movs	r2, #1
 8009db2:	2102      	movs	r1, #2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7ff ff69 	bl	8009c8c <f_sh1106_TrySendData>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <f_sh1106_cmd_SetSegmentDirection>:

	return isOk;
}

bool f_sh1106_cmd_SetSegmentDirection(bool reverse)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xA0 | (reverse & 0x01);
 8009dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	b25b      	sxtb	r3, r3
 8009ddc:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8009de0:	b25b      	sxtb	r3, r3
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_TrySendData(&cmd, 1, true);
 8009de6:	f107 030e 	add.w	r3, r7, #14
 8009dea:	2201      	movs	r2, #1
 8009dec:	2101      	movs	r1, #1
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7ff ff4c 	bl	8009c8c <f_sh1106_TrySendData>
 8009df4:	4603      	mov	r3, r0
 8009df6:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <f_sh1106_cmd_TogglePower>:

	return isOk;
}

bool f_sh1106_cmd_TogglePower(bool sleep)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	4603      	mov	r3, r0
 8009e0a:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xAE | (sleep & 0x01);
 8009e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e10:	f003 0301 	and.w	r3, r3, #1
 8009e14:	b25b      	sxtb	r3, r3
 8009e16:	f063 0351 	orn	r3, r3, #81	; 0x51
 8009e1a:	b25b      	sxtb	r3, r3
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_TrySendData(&cmd, 1, true);
 8009e20:	f107 030e 	add.w	r3, r7, #14
 8009e24:	2201      	movs	r2, #1
 8009e26:	2101      	movs	r1, #1
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7ff ff2f 	bl	8009c8c <f_sh1106_TrySendData>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8009e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <f_sh1106_cmd_SetPageAddress>:

bool f_sh1106_cmd_SetPageAddress(uint8_t page)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	71fb      	strb	r3, [r7, #7]
	if(page >= SH1106_HEIGHT/8) return false;
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	2b07      	cmp	r3, #7
 8009e4a:	d901      	bls.n	8009e50 <f_sh1106_cmd_SetPageAddress+0x14>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e013      	b.n	8009e78 <f_sh1106_cmd_SetPageAddress+0x3c>

	uint8_t cmd = 0xB0 | (page & 0x0F);
 8009e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e54:	f003 030f 	and.w	r3, r3, #15
 8009e58:	b25b      	sxtb	r3, r3
 8009e5a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8009e5e:	b25b      	sxtb	r3, r3
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_TrySendData(&cmd, 1, true);
 8009e64:	f107 030e 	add.w	r3, r7, #14
 8009e68:	2201      	movs	r2, #1
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff ff0d 	bl	8009c8c <f_sh1106_TrySendData>
 8009e72:	4603      	mov	r3, r0
 8009e74:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <f_sh1106_cmd_SetScanDirection>:

bool f_sh1106_cmd_SetScanDirection(bool reverse)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	4603      	mov	r3, r0
 8009e88:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xC0 | ((reverse << 3) & 0x0F);
 8009e8a:	79fb      	ldrb	r3, [r7, #7]
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	b25b      	sxtb	r3, r3
 8009e90:	f003 030f 	and.w	r3, r3, #15
 8009e94:	b25b      	sxtb	r3, r3
 8009e96:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8009e9a:	b25b      	sxtb	r3, r3
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_TrySendData(&cmd, 1, true);
 8009ea0:	f107 030e 	add.w	r3, r7, #14
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff feef 	bl	8009c8c <f_sh1106_TrySendData>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <f_sh1106_CS_HIGH>:
	return isOk;
}
// =============================

void f_sh1106_CS_HIGH()
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	af00      	add	r7, sp, #0
	CS_HIGH();
 8009ec0:	4b04      	ldr	r3, [pc, #16]	; (8009ed4 <f_sh1106_CS_HIGH+0x18>)
 8009ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009ec6:	619a      	str	r2, [r3, #24]
}
 8009ec8:	bf00      	nop
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	40020400 	.word	0x40020400

08009ed8 <f_sh1106_SendDataDMA>:

bool f_sh1106_SendDataDMA(uint8_t *pData, uint8_t length)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	70fb      	strb	r3, [r7, #3]
	uint8_t tries = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]

	HAL_StatusTypeDef status;
	do
	{
		CS_LOW();
 8009ee8:	4b15      	ldr	r3, [pc, #84]	; (8009f40 <f_sh1106_SendDataDMA+0x68>)
 8009eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009eee:	619a      	str	r2, [r3, #24]
		CMD_HIGH(); //only data is send, no need to make it a variable;;
 8009ef0:	4b13      	ldr	r3, [pc, #76]	; (8009f40 <f_sh1106_SendDataDMA+0x68>)
 8009ef2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ef6:	619a      	str	r2, [r3, #24]
		status = HAL_SPI_Transmit_DMA(pSPIhandler, pData, length);
 8009ef8:	4b12      	ldr	r3, [pc, #72]	; (8009f44 <f_sh1106_SendDataDMA+0x6c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	78fa      	ldrb	r2, [r7, #3]
 8009efe:	b292      	uxth	r2, r2
 8009f00:	6879      	ldr	r1, [r7, #4]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fc fbdc 	bl	80066c0 <HAL_SPI_Transmit_DMA>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73bb      	strb	r3, [r7, #14]
		tries++;
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	73fb      	strb	r3, [r7, #15]
	}while((status != HAL_OK) && tries < 5);
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d002      	beq.n	8009f1e <f_sh1106_SendDataDMA+0x46>
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	2b04      	cmp	r3, #4
 8009f1c:	d9e4      	bls.n	8009ee8 <f_sh1106_SendDataDMA+0x10>

	if(tries == 5)
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	2b05      	cmp	r3, #5
 8009f22:	d105      	bne.n	8009f30 <f_sh1106_SendDataDMA+0x58>
	{
		CS_HIGH();
 8009f24:	4b06      	ldr	r3, [pc, #24]	; (8009f40 <f_sh1106_SendDataDMA+0x68>)
 8009f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009f2a:	619a      	str	r2, [r3, #24]
		return false;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	e003      	b.n	8009f38 <f_sh1106_SendDataDMA+0x60>
	}

	sh1106_TransmitBusy = true;
 8009f30:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <f_sh1106_SendDataDMA+0x70>)
 8009f32:	2201      	movs	r2, #1
 8009f34:	701a      	strb	r2, [r3, #0]
	return true;
 8009f36:	2301      	movs	r3, #1
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	40020400 	.word	0x40020400
 8009f44:	200008e0 	.word	0x200008e0
 8009f48:	200008dc 	.word	0x200008dc

08009f4c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
	if(hspi == pSPIhandler)
 8009f54:	4b06      	ldr	r3, [pc, #24]	; (8009f70 <HAL_SPI_TxCpltCallback+0x24>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d104      	bne.n	8009f68 <HAL_SPI_TxCpltCallback+0x1c>
	{
		f_sh1106_CS_HIGH();
 8009f5e:	f7ff ffad 	bl	8009ebc <f_sh1106_CS_HIGH>
		sh1106_TransmitBusy = false;
 8009f62:	4b04      	ldr	r3, [pc, #16]	; (8009f74 <HAL_SPI_TxCpltCallback+0x28>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	701a      	strb	r2, [r3, #0]
	}
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	200008e0 	.word	0x200008e0
 8009f74:	200008dc 	.word	0x200008dc

08009f78 <__errno>:
 8009f78:	4b01      	ldr	r3, [pc, #4]	; (8009f80 <__errno+0x8>)
 8009f7a:	6818      	ldr	r0, [r3, #0]
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	20000010 	.word	0x20000010

08009f84 <__libc_init_array>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	4d0d      	ldr	r5, [pc, #52]	; (8009fbc <__libc_init_array+0x38>)
 8009f88:	4c0d      	ldr	r4, [pc, #52]	; (8009fc0 <__libc_init_array+0x3c>)
 8009f8a:	1b64      	subs	r4, r4, r5
 8009f8c:	10a4      	asrs	r4, r4, #2
 8009f8e:	2600      	movs	r6, #0
 8009f90:	42a6      	cmp	r6, r4
 8009f92:	d109      	bne.n	8009fa8 <__libc_init_array+0x24>
 8009f94:	4d0b      	ldr	r5, [pc, #44]	; (8009fc4 <__libc_init_array+0x40>)
 8009f96:	4c0c      	ldr	r4, [pc, #48]	; (8009fc8 <__libc_init_array+0x44>)
 8009f98:	f002 ff04 	bl	800cda4 <_init>
 8009f9c:	1b64      	subs	r4, r4, r5
 8009f9e:	10a4      	asrs	r4, r4, #2
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	42a6      	cmp	r6, r4
 8009fa4:	d105      	bne.n	8009fb2 <__libc_init_array+0x2e>
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
 8009fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fac:	4798      	blx	r3
 8009fae:	3601      	adds	r6, #1
 8009fb0:	e7ee      	b.n	8009f90 <__libc_init_array+0xc>
 8009fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fb6:	4798      	blx	r3
 8009fb8:	3601      	adds	r6, #1
 8009fba:	e7f2      	b.n	8009fa2 <__libc_init_array+0x1e>
 8009fbc:	0800e0a4 	.word	0x0800e0a4
 8009fc0:	0800e0a4 	.word	0x0800e0a4
 8009fc4:	0800e0a4 	.word	0x0800e0a4
 8009fc8:	0800e0a8 	.word	0x0800e0a8

08009fcc <memcpy>:
 8009fcc:	440a      	add	r2, r1
 8009fce:	4291      	cmp	r1, r2
 8009fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fd4:	d100      	bne.n	8009fd8 <memcpy+0xc>
 8009fd6:	4770      	bx	lr
 8009fd8:	b510      	push	{r4, lr}
 8009fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fe2:	4291      	cmp	r1, r2
 8009fe4:	d1f9      	bne.n	8009fda <memcpy+0xe>
 8009fe6:	bd10      	pop	{r4, pc}

08009fe8 <memset>:
 8009fe8:	4402      	add	r2, r0
 8009fea:	4603      	mov	r3, r0
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d100      	bne.n	8009ff2 <memset+0xa>
 8009ff0:	4770      	bx	lr
 8009ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ff6:	e7f9      	b.n	8009fec <memset+0x4>

08009ff8 <__cvt>:
 8009ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ffc:	ec55 4b10 	vmov	r4, r5, d0
 800a000:	2d00      	cmp	r5, #0
 800a002:	460e      	mov	r6, r1
 800a004:	4619      	mov	r1, r3
 800a006:	462b      	mov	r3, r5
 800a008:	bfbb      	ittet	lt
 800a00a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a00e:	461d      	movlt	r5, r3
 800a010:	2300      	movge	r3, #0
 800a012:	232d      	movlt	r3, #45	; 0x2d
 800a014:	700b      	strb	r3, [r1, #0]
 800a016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a01c:	4691      	mov	r9, r2
 800a01e:	f023 0820 	bic.w	r8, r3, #32
 800a022:	bfbc      	itt	lt
 800a024:	4622      	movlt	r2, r4
 800a026:	4614      	movlt	r4, r2
 800a028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a02c:	d005      	beq.n	800a03a <__cvt+0x42>
 800a02e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a032:	d100      	bne.n	800a036 <__cvt+0x3e>
 800a034:	3601      	adds	r6, #1
 800a036:	2102      	movs	r1, #2
 800a038:	e000      	b.n	800a03c <__cvt+0x44>
 800a03a:	2103      	movs	r1, #3
 800a03c:	ab03      	add	r3, sp, #12
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	ab02      	add	r3, sp, #8
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	ec45 4b10 	vmov	d0, r4, r5
 800a048:	4653      	mov	r3, sl
 800a04a:	4632      	mov	r2, r6
 800a04c:	f000 fcec 	bl	800aa28 <_dtoa_r>
 800a050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a054:	4607      	mov	r7, r0
 800a056:	d102      	bne.n	800a05e <__cvt+0x66>
 800a058:	f019 0f01 	tst.w	r9, #1
 800a05c:	d022      	beq.n	800a0a4 <__cvt+0xac>
 800a05e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a062:	eb07 0906 	add.w	r9, r7, r6
 800a066:	d110      	bne.n	800a08a <__cvt+0x92>
 800a068:	783b      	ldrb	r3, [r7, #0]
 800a06a:	2b30      	cmp	r3, #48	; 0x30
 800a06c:	d10a      	bne.n	800a084 <__cvt+0x8c>
 800a06e:	2200      	movs	r2, #0
 800a070:	2300      	movs	r3, #0
 800a072:	4620      	mov	r0, r4
 800a074:	4629      	mov	r1, r5
 800a076:	f7f6 fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800a07a:	b918      	cbnz	r0, 800a084 <__cvt+0x8c>
 800a07c:	f1c6 0601 	rsb	r6, r6, #1
 800a080:	f8ca 6000 	str.w	r6, [sl]
 800a084:	f8da 3000 	ldr.w	r3, [sl]
 800a088:	4499      	add	r9, r3
 800a08a:	2200      	movs	r2, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	4620      	mov	r0, r4
 800a090:	4629      	mov	r1, r5
 800a092:	f7f6 fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 800a096:	b108      	cbz	r0, 800a09c <__cvt+0xa4>
 800a098:	f8cd 900c 	str.w	r9, [sp, #12]
 800a09c:	2230      	movs	r2, #48	; 0x30
 800a09e:	9b03      	ldr	r3, [sp, #12]
 800a0a0:	454b      	cmp	r3, r9
 800a0a2:	d307      	bcc.n	800a0b4 <__cvt+0xbc>
 800a0a4:	9b03      	ldr	r3, [sp, #12]
 800a0a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0a8:	1bdb      	subs	r3, r3, r7
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	6013      	str	r3, [r2, #0]
 800a0ae:	b004      	add	sp, #16
 800a0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b4:	1c59      	adds	r1, r3, #1
 800a0b6:	9103      	str	r1, [sp, #12]
 800a0b8:	701a      	strb	r2, [r3, #0]
 800a0ba:	e7f0      	b.n	800a09e <__cvt+0xa6>

0800a0bc <__exponent>:
 800a0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2900      	cmp	r1, #0
 800a0c2:	bfb8      	it	lt
 800a0c4:	4249      	neglt	r1, r1
 800a0c6:	f803 2b02 	strb.w	r2, [r3], #2
 800a0ca:	bfb4      	ite	lt
 800a0cc:	222d      	movlt	r2, #45	; 0x2d
 800a0ce:	222b      	movge	r2, #43	; 0x2b
 800a0d0:	2909      	cmp	r1, #9
 800a0d2:	7042      	strb	r2, [r0, #1]
 800a0d4:	dd2a      	ble.n	800a12c <__exponent+0x70>
 800a0d6:	f10d 0407 	add.w	r4, sp, #7
 800a0da:	46a4      	mov	ip, r4
 800a0dc:	270a      	movs	r7, #10
 800a0de:	46a6      	mov	lr, r4
 800a0e0:	460a      	mov	r2, r1
 800a0e2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a0e6:	fb07 1516 	mls	r5, r7, r6, r1
 800a0ea:	3530      	adds	r5, #48	; 0x30
 800a0ec:	2a63      	cmp	r2, #99	; 0x63
 800a0ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800a0f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a0f6:	4631      	mov	r1, r6
 800a0f8:	dcf1      	bgt.n	800a0de <__exponent+0x22>
 800a0fa:	3130      	adds	r1, #48	; 0x30
 800a0fc:	f1ae 0502 	sub.w	r5, lr, #2
 800a100:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a104:	1c44      	adds	r4, r0, #1
 800a106:	4629      	mov	r1, r5
 800a108:	4561      	cmp	r1, ip
 800a10a:	d30a      	bcc.n	800a122 <__exponent+0x66>
 800a10c:	f10d 0209 	add.w	r2, sp, #9
 800a110:	eba2 020e 	sub.w	r2, r2, lr
 800a114:	4565      	cmp	r5, ip
 800a116:	bf88      	it	hi
 800a118:	2200      	movhi	r2, #0
 800a11a:	4413      	add	r3, r2
 800a11c:	1a18      	subs	r0, r3, r0
 800a11e:	b003      	add	sp, #12
 800a120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a122:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a126:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a12a:	e7ed      	b.n	800a108 <__exponent+0x4c>
 800a12c:	2330      	movs	r3, #48	; 0x30
 800a12e:	3130      	adds	r1, #48	; 0x30
 800a130:	7083      	strb	r3, [r0, #2]
 800a132:	70c1      	strb	r1, [r0, #3]
 800a134:	1d03      	adds	r3, r0, #4
 800a136:	e7f1      	b.n	800a11c <__exponent+0x60>

0800a138 <_printf_float>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	ed2d 8b02 	vpush	{d8}
 800a140:	b08d      	sub	sp, #52	; 0x34
 800a142:	460c      	mov	r4, r1
 800a144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a148:	4616      	mov	r6, r2
 800a14a:	461f      	mov	r7, r3
 800a14c:	4605      	mov	r5, r0
 800a14e:	f001 fa59 	bl	800b604 <_localeconv_r>
 800a152:	f8d0 a000 	ldr.w	sl, [r0]
 800a156:	4650      	mov	r0, sl
 800a158:	f7f6 f83a 	bl	80001d0 <strlen>
 800a15c:	2300      	movs	r3, #0
 800a15e:	930a      	str	r3, [sp, #40]	; 0x28
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	9305      	str	r3, [sp, #20]
 800a164:	f8d8 3000 	ldr.w	r3, [r8]
 800a168:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a16c:	3307      	adds	r3, #7
 800a16e:	f023 0307 	bic.w	r3, r3, #7
 800a172:	f103 0208 	add.w	r2, r3, #8
 800a176:	f8c8 2000 	str.w	r2, [r8]
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a182:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a18a:	9307      	str	r3, [sp, #28]
 800a18c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a190:	ee08 0a10 	vmov	s16, r0
 800a194:	4b9f      	ldr	r3, [pc, #636]	; (800a414 <_printf_float+0x2dc>)
 800a196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a19a:	f04f 32ff 	mov.w	r2, #4294967295
 800a19e:	f7f6 fcc5 	bl	8000b2c <__aeabi_dcmpun>
 800a1a2:	bb88      	cbnz	r0, 800a208 <_printf_float+0xd0>
 800a1a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1a8:	4b9a      	ldr	r3, [pc, #616]	; (800a414 <_printf_float+0x2dc>)
 800a1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ae:	f7f6 fc9f 	bl	8000af0 <__aeabi_dcmple>
 800a1b2:	bb48      	cbnz	r0, 800a208 <_printf_float+0xd0>
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	f7f6 fc8e 	bl	8000adc <__aeabi_dcmplt>
 800a1c0:	b110      	cbz	r0, 800a1c8 <_printf_float+0x90>
 800a1c2:	232d      	movs	r3, #45	; 0x2d
 800a1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c8:	4b93      	ldr	r3, [pc, #588]	; (800a418 <_printf_float+0x2e0>)
 800a1ca:	4894      	ldr	r0, [pc, #592]	; (800a41c <_printf_float+0x2e4>)
 800a1cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a1d0:	bf94      	ite	ls
 800a1d2:	4698      	movls	r8, r3
 800a1d4:	4680      	movhi	r8, r0
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	6123      	str	r3, [r4, #16]
 800a1da:	9b05      	ldr	r3, [sp, #20]
 800a1dc:	f023 0204 	bic.w	r2, r3, #4
 800a1e0:	6022      	str	r2, [r4, #0]
 800a1e2:	f04f 0900 	mov.w	r9, #0
 800a1e6:	9700      	str	r7, [sp, #0]
 800a1e8:	4633      	mov	r3, r6
 800a1ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f000 f9d8 	bl	800a5a4 <_printf_common>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	f040 8090 	bne.w	800a31a <_printf_float+0x1e2>
 800a1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fe:	b00d      	add	sp, #52	; 0x34
 800a200:	ecbd 8b02 	vpop	{d8}
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	4642      	mov	r2, r8
 800a20a:	464b      	mov	r3, r9
 800a20c:	4640      	mov	r0, r8
 800a20e:	4649      	mov	r1, r9
 800a210:	f7f6 fc8c 	bl	8000b2c <__aeabi_dcmpun>
 800a214:	b140      	cbz	r0, 800a228 <_printf_float+0xf0>
 800a216:	464b      	mov	r3, r9
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bfbc      	itt	lt
 800a21c:	232d      	movlt	r3, #45	; 0x2d
 800a21e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a222:	487f      	ldr	r0, [pc, #508]	; (800a420 <_printf_float+0x2e8>)
 800a224:	4b7f      	ldr	r3, [pc, #508]	; (800a424 <_printf_float+0x2ec>)
 800a226:	e7d1      	b.n	800a1cc <_printf_float+0x94>
 800a228:	6863      	ldr	r3, [r4, #4]
 800a22a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a22e:	9206      	str	r2, [sp, #24]
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	d13f      	bne.n	800a2b4 <_printf_float+0x17c>
 800a234:	2306      	movs	r3, #6
 800a236:	6063      	str	r3, [r4, #4]
 800a238:	9b05      	ldr	r3, [sp, #20]
 800a23a:	6861      	ldr	r1, [r4, #4]
 800a23c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a240:	2300      	movs	r3, #0
 800a242:	9303      	str	r3, [sp, #12]
 800a244:	ab0a      	add	r3, sp, #40	; 0x28
 800a246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a24a:	ab09      	add	r3, sp, #36	; 0x24
 800a24c:	ec49 8b10 	vmov	d0, r8, r9
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	6022      	str	r2, [r4, #0]
 800a254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a258:	4628      	mov	r0, r5
 800a25a:	f7ff fecd 	bl	8009ff8 <__cvt>
 800a25e:	9b06      	ldr	r3, [sp, #24]
 800a260:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a262:	2b47      	cmp	r3, #71	; 0x47
 800a264:	4680      	mov	r8, r0
 800a266:	d108      	bne.n	800a27a <_printf_float+0x142>
 800a268:	1cc8      	adds	r0, r1, #3
 800a26a:	db02      	blt.n	800a272 <_printf_float+0x13a>
 800a26c:	6863      	ldr	r3, [r4, #4]
 800a26e:	4299      	cmp	r1, r3
 800a270:	dd41      	ble.n	800a2f6 <_printf_float+0x1be>
 800a272:	f1ab 0b02 	sub.w	fp, fp, #2
 800a276:	fa5f fb8b 	uxtb.w	fp, fp
 800a27a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a27e:	d820      	bhi.n	800a2c2 <_printf_float+0x18a>
 800a280:	3901      	subs	r1, #1
 800a282:	465a      	mov	r2, fp
 800a284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a288:	9109      	str	r1, [sp, #36]	; 0x24
 800a28a:	f7ff ff17 	bl	800a0bc <__exponent>
 800a28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a290:	1813      	adds	r3, r2, r0
 800a292:	2a01      	cmp	r2, #1
 800a294:	4681      	mov	r9, r0
 800a296:	6123      	str	r3, [r4, #16]
 800a298:	dc02      	bgt.n	800a2a0 <_printf_float+0x168>
 800a29a:	6822      	ldr	r2, [r4, #0]
 800a29c:	07d2      	lsls	r2, r2, #31
 800a29e:	d501      	bpl.n	800a2a4 <_printf_float+0x16c>
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	6123      	str	r3, [r4, #16]
 800a2a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d09c      	beq.n	800a1e6 <_printf_float+0xae>
 800a2ac:	232d      	movs	r3, #45	; 0x2d
 800a2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b2:	e798      	b.n	800a1e6 <_printf_float+0xae>
 800a2b4:	9a06      	ldr	r2, [sp, #24]
 800a2b6:	2a47      	cmp	r2, #71	; 0x47
 800a2b8:	d1be      	bne.n	800a238 <_printf_float+0x100>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1bc      	bne.n	800a238 <_printf_float+0x100>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e7b9      	b.n	800a236 <_printf_float+0xfe>
 800a2c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a2c6:	d118      	bne.n	800a2fa <_printf_float+0x1c2>
 800a2c8:	2900      	cmp	r1, #0
 800a2ca:	6863      	ldr	r3, [r4, #4]
 800a2cc:	dd0b      	ble.n	800a2e6 <_printf_float+0x1ae>
 800a2ce:	6121      	str	r1, [r4, #16]
 800a2d0:	b913      	cbnz	r3, 800a2d8 <_printf_float+0x1a0>
 800a2d2:	6822      	ldr	r2, [r4, #0]
 800a2d4:	07d0      	lsls	r0, r2, #31
 800a2d6:	d502      	bpl.n	800a2de <_printf_float+0x1a6>
 800a2d8:	3301      	adds	r3, #1
 800a2da:	440b      	add	r3, r1
 800a2dc:	6123      	str	r3, [r4, #16]
 800a2de:	65a1      	str	r1, [r4, #88]	; 0x58
 800a2e0:	f04f 0900 	mov.w	r9, #0
 800a2e4:	e7de      	b.n	800a2a4 <_printf_float+0x16c>
 800a2e6:	b913      	cbnz	r3, 800a2ee <_printf_float+0x1b6>
 800a2e8:	6822      	ldr	r2, [r4, #0]
 800a2ea:	07d2      	lsls	r2, r2, #31
 800a2ec:	d501      	bpl.n	800a2f2 <_printf_float+0x1ba>
 800a2ee:	3302      	adds	r3, #2
 800a2f0:	e7f4      	b.n	800a2dc <_printf_float+0x1a4>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e7f2      	b.n	800a2dc <_printf_float+0x1a4>
 800a2f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2fc:	4299      	cmp	r1, r3
 800a2fe:	db05      	blt.n	800a30c <_printf_float+0x1d4>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	6121      	str	r1, [r4, #16]
 800a304:	07d8      	lsls	r0, r3, #31
 800a306:	d5ea      	bpl.n	800a2de <_printf_float+0x1a6>
 800a308:	1c4b      	adds	r3, r1, #1
 800a30a:	e7e7      	b.n	800a2dc <_printf_float+0x1a4>
 800a30c:	2900      	cmp	r1, #0
 800a30e:	bfd4      	ite	le
 800a310:	f1c1 0202 	rsble	r2, r1, #2
 800a314:	2201      	movgt	r2, #1
 800a316:	4413      	add	r3, r2
 800a318:	e7e0      	b.n	800a2dc <_printf_float+0x1a4>
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	055a      	lsls	r2, r3, #21
 800a31e:	d407      	bmi.n	800a330 <_printf_float+0x1f8>
 800a320:	6923      	ldr	r3, [r4, #16]
 800a322:	4642      	mov	r2, r8
 800a324:	4631      	mov	r1, r6
 800a326:	4628      	mov	r0, r5
 800a328:	47b8      	blx	r7
 800a32a:	3001      	adds	r0, #1
 800a32c:	d12c      	bne.n	800a388 <_printf_float+0x250>
 800a32e:	e764      	b.n	800a1fa <_printf_float+0xc2>
 800a330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a334:	f240 80e0 	bls.w	800a4f8 <_printf_float+0x3c0>
 800a338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a33c:	2200      	movs	r2, #0
 800a33e:	2300      	movs	r3, #0
 800a340:	f7f6 fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a344:	2800      	cmp	r0, #0
 800a346:	d034      	beq.n	800a3b2 <_printf_float+0x27a>
 800a348:	4a37      	ldr	r2, [pc, #220]	; (800a428 <_printf_float+0x2f0>)
 800a34a:	2301      	movs	r3, #1
 800a34c:	4631      	mov	r1, r6
 800a34e:	4628      	mov	r0, r5
 800a350:	47b8      	blx	r7
 800a352:	3001      	adds	r0, #1
 800a354:	f43f af51 	beq.w	800a1fa <_printf_float+0xc2>
 800a358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a35c:	429a      	cmp	r2, r3
 800a35e:	db02      	blt.n	800a366 <_printf_float+0x22e>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	07d8      	lsls	r0, r3, #31
 800a364:	d510      	bpl.n	800a388 <_printf_float+0x250>
 800a366:	ee18 3a10 	vmov	r3, s16
 800a36a:	4652      	mov	r2, sl
 800a36c:	4631      	mov	r1, r6
 800a36e:	4628      	mov	r0, r5
 800a370:	47b8      	blx	r7
 800a372:	3001      	adds	r0, #1
 800a374:	f43f af41 	beq.w	800a1fa <_printf_float+0xc2>
 800a378:	f04f 0800 	mov.w	r8, #0
 800a37c:	f104 091a 	add.w	r9, r4, #26
 800a380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a382:	3b01      	subs	r3, #1
 800a384:	4543      	cmp	r3, r8
 800a386:	dc09      	bgt.n	800a39c <_printf_float+0x264>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	079b      	lsls	r3, r3, #30
 800a38c:	f100 8105 	bmi.w	800a59a <_printf_float+0x462>
 800a390:	68e0      	ldr	r0, [r4, #12]
 800a392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a394:	4298      	cmp	r0, r3
 800a396:	bfb8      	it	lt
 800a398:	4618      	movlt	r0, r3
 800a39a:	e730      	b.n	800a1fe <_printf_float+0xc6>
 800a39c:	2301      	movs	r3, #1
 800a39e:	464a      	mov	r2, r9
 800a3a0:	4631      	mov	r1, r6
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	47b8      	blx	r7
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	f43f af27 	beq.w	800a1fa <_printf_float+0xc2>
 800a3ac:	f108 0801 	add.w	r8, r8, #1
 800a3b0:	e7e6      	b.n	800a380 <_printf_float+0x248>
 800a3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dc39      	bgt.n	800a42c <_printf_float+0x2f4>
 800a3b8:	4a1b      	ldr	r2, [pc, #108]	; (800a428 <_printf_float+0x2f0>)
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4628      	mov	r0, r5
 800a3c0:	47b8      	blx	r7
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f43f af19 	beq.w	800a1fa <_printf_float+0xc2>
 800a3c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	d102      	bne.n	800a3d6 <_printf_float+0x29e>
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	07d9      	lsls	r1, r3, #31
 800a3d4:	d5d8      	bpl.n	800a388 <_printf_float+0x250>
 800a3d6:	ee18 3a10 	vmov	r3, s16
 800a3da:	4652      	mov	r2, sl
 800a3dc:	4631      	mov	r1, r6
 800a3de:	4628      	mov	r0, r5
 800a3e0:	47b8      	blx	r7
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	f43f af09 	beq.w	800a1fa <_printf_float+0xc2>
 800a3e8:	f04f 0900 	mov.w	r9, #0
 800a3ec:	f104 0a1a 	add.w	sl, r4, #26
 800a3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f2:	425b      	negs	r3, r3
 800a3f4:	454b      	cmp	r3, r9
 800a3f6:	dc01      	bgt.n	800a3fc <_printf_float+0x2c4>
 800a3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3fa:	e792      	b.n	800a322 <_printf_float+0x1ea>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	4652      	mov	r2, sl
 800a400:	4631      	mov	r1, r6
 800a402:	4628      	mov	r0, r5
 800a404:	47b8      	blx	r7
 800a406:	3001      	adds	r0, #1
 800a408:	f43f aef7 	beq.w	800a1fa <_printf_float+0xc2>
 800a40c:	f109 0901 	add.w	r9, r9, #1
 800a410:	e7ee      	b.n	800a3f0 <_printf_float+0x2b8>
 800a412:	bf00      	nop
 800a414:	7fefffff 	.word	0x7fefffff
 800a418:	0800dcc4 	.word	0x0800dcc4
 800a41c:	0800dcc8 	.word	0x0800dcc8
 800a420:	0800dcd0 	.word	0x0800dcd0
 800a424:	0800dccc 	.word	0x0800dccc
 800a428:	0800dcd4 	.word	0x0800dcd4
 800a42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a42e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a430:	429a      	cmp	r2, r3
 800a432:	bfa8      	it	ge
 800a434:	461a      	movge	r2, r3
 800a436:	2a00      	cmp	r2, #0
 800a438:	4691      	mov	r9, r2
 800a43a:	dc37      	bgt.n	800a4ac <_printf_float+0x374>
 800a43c:	f04f 0b00 	mov.w	fp, #0
 800a440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a444:	f104 021a 	add.w	r2, r4, #26
 800a448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a44a:	9305      	str	r3, [sp, #20]
 800a44c:	eba3 0309 	sub.w	r3, r3, r9
 800a450:	455b      	cmp	r3, fp
 800a452:	dc33      	bgt.n	800a4bc <_printf_float+0x384>
 800a454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a458:	429a      	cmp	r2, r3
 800a45a:	db3b      	blt.n	800a4d4 <_printf_float+0x39c>
 800a45c:	6823      	ldr	r3, [r4, #0]
 800a45e:	07da      	lsls	r2, r3, #31
 800a460:	d438      	bmi.n	800a4d4 <_printf_float+0x39c>
 800a462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a464:	9a05      	ldr	r2, [sp, #20]
 800a466:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a468:	1a9a      	subs	r2, r3, r2
 800a46a:	eba3 0901 	sub.w	r9, r3, r1
 800a46e:	4591      	cmp	r9, r2
 800a470:	bfa8      	it	ge
 800a472:	4691      	movge	r9, r2
 800a474:	f1b9 0f00 	cmp.w	r9, #0
 800a478:	dc35      	bgt.n	800a4e6 <_printf_float+0x3ae>
 800a47a:	f04f 0800 	mov.w	r8, #0
 800a47e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a482:	f104 0a1a 	add.w	sl, r4, #26
 800a486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a48a:	1a9b      	subs	r3, r3, r2
 800a48c:	eba3 0309 	sub.w	r3, r3, r9
 800a490:	4543      	cmp	r3, r8
 800a492:	f77f af79 	ble.w	800a388 <_printf_float+0x250>
 800a496:	2301      	movs	r3, #1
 800a498:	4652      	mov	r2, sl
 800a49a:	4631      	mov	r1, r6
 800a49c:	4628      	mov	r0, r5
 800a49e:	47b8      	blx	r7
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	f43f aeaa 	beq.w	800a1fa <_printf_float+0xc2>
 800a4a6:	f108 0801 	add.w	r8, r8, #1
 800a4aa:	e7ec      	b.n	800a486 <_printf_float+0x34e>
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	4642      	mov	r2, r8
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	47b8      	blx	r7
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	d1c0      	bne.n	800a43c <_printf_float+0x304>
 800a4ba:	e69e      	b.n	800a1fa <_printf_float+0xc2>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	4631      	mov	r1, r6
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	9205      	str	r2, [sp, #20]
 800a4c4:	47b8      	blx	r7
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	f43f ae97 	beq.w	800a1fa <_printf_float+0xc2>
 800a4cc:	9a05      	ldr	r2, [sp, #20]
 800a4ce:	f10b 0b01 	add.w	fp, fp, #1
 800a4d2:	e7b9      	b.n	800a448 <_printf_float+0x310>
 800a4d4:	ee18 3a10 	vmov	r3, s16
 800a4d8:	4652      	mov	r2, sl
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4628      	mov	r0, r5
 800a4de:	47b8      	blx	r7
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	d1be      	bne.n	800a462 <_printf_float+0x32a>
 800a4e4:	e689      	b.n	800a1fa <_printf_float+0xc2>
 800a4e6:	9a05      	ldr	r2, [sp, #20]
 800a4e8:	464b      	mov	r3, r9
 800a4ea:	4442      	add	r2, r8
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b8      	blx	r7
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	d1c1      	bne.n	800a47a <_printf_float+0x342>
 800a4f6:	e680      	b.n	800a1fa <_printf_float+0xc2>
 800a4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4fa:	2a01      	cmp	r2, #1
 800a4fc:	dc01      	bgt.n	800a502 <_printf_float+0x3ca>
 800a4fe:	07db      	lsls	r3, r3, #31
 800a500:	d538      	bpl.n	800a574 <_printf_float+0x43c>
 800a502:	2301      	movs	r3, #1
 800a504:	4642      	mov	r2, r8
 800a506:	4631      	mov	r1, r6
 800a508:	4628      	mov	r0, r5
 800a50a:	47b8      	blx	r7
 800a50c:	3001      	adds	r0, #1
 800a50e:	f43f ae74 	beq.w	800a1fa <_printf_float+0xc2>
 800a512:	ee18 3a10 	vmov	r3, s16
 800a516:	4652      	mov	r2, sl
 800a518:	4631      	mov	r1, r6
 800a51a:	4628      	mov	r0, r5
 800a51c:	47b8      	blx	r7
 800a51e:	3001      	adds	r0, #1
 800a520:	f43f ae6b 	beq.w	800a1fa <_printf_float+0xc2>
 800a524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a528:	2200      	movs	r2, #0
 800a52a:	2300      	movs	r3, #0
 800a52c:	f7f6 facc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a530:	b9d8      	cbnz	r0, 800a56a <_printf_float+0x432>
 800a532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a534:	f108 0201 	add.w	r2, r8, #1
 800a538:	3b01      	subs	r3, #1
 800a53a:	4631      	mov	r1, r6
 800a53c:	4628      	mov	r0, r5
 800a53e:	47b8      	blx	r7
 800a540:	3001      	adds	r0, #1
 800a542:	d10e      	bne.n	800a562 <_printf_float+0x42a>
 800a544:	e659      	b.n	800a1fa <_printf_float+0xc2>
 800a546:	2301      	movs	r3, #1
 800a548:	4652      	mov	r2, sl
 800a54a:	4631      	mov	r1, r6
 800a54c:	4628      	mov	r0, r5
 800a54e:	47b8      	blx	r7
 800a550:	3001      	adds	r0, #1
 800a552:	f43f ae52 	beq.w	800a1fa <_printf_float+0xc2>
 800a556:	f108 0801 	add.w	r8, r8, #1
 800a55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55c:	3b01      	subs	r3, #1
 800a55e:	4543      	cmp	r3, r8
 800a560:	dcf1      	bgt.n	800a546 <_printf_float+0x40e>
 800a562:	464b      	mov	r3, r9
 800a564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a568:	e6dc      	b.n	800a324 <_printf_float+0x1ec>
 800a56a:	f04f 0800 	mov.w	r8, #0
 800a56e:	f104 0a1a 	add.w	sl, r4, #26
 800a572:	e7f2      	b.n	800a55a <_printf_float+0x422>
 800a574:	2301      	movs	r3, #1
 800a576:	4642      	mov	r2, r8
 800a578:	e7df      	b.n	800a53a <_printf_float+0x402>
 800a57a:	2301      	movs	r3, #1
 800a57c:	464a      	mov	r2, r9
 800a57e:	4631      	mov	r1, r6
 800a580:	4628      	mov	r0, r5
 800a582:	47b8      	blx	r7
 800a584:	3001      	adds	r0, #1
 800a586:	f43f ae38 	beq.w	800a1fa <_printf_float+0xc2>
 800a58a:	f108 0801 	add.w	r8, r8, #1
 800a58e:	68e3      	ldr	r3, [r4, #12]
 800a590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a592:	1a5b      	subs	r3, r3, r1
 800a594:	4543      	cmp	r3, r8
 800a596:	dcf0      	bgt.n	800a57a <_printf_float+0x442>
 800a598:	e6fa      	b.n	800a390 <_printf_float+0x258>
 800a59a:	f04f 0800 	mov.w	r8, #0
 800a59e:	f104 0919 	add.w	r9, r4, #25
 800a5a2:	e7f4      	b.n	800a58e <_printf_float+0x456>

0800a5a4 <_printf_common>:
 800a5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	4699      	mov	r9, r3
 800a5ac:	688a      	ldr	r2, [r1, #8]
 800a5ae:	690b      	ldr	r3, [r1, #16]
 800a5b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	bfb8      	it	lt
 800a5b8:	4613      	movlt	r3, r2
 800a5ba:	6033      	str	r3, [r6, #0]
 800a5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5c0:	4607      	mov	r7, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	b10a      	cbz	r2, 800a5ca <_printf_common+0x26>
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	6033      	str	r3, [r6, #0]
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	0699      	lsls	r1, r3, #26
 800a5ce:	bf42      	ittt	mi
 800a5d0:	6833      	ldrmi	r3, [r6, #0]
 800a5d2:	3302      	addmi	r3, #2
 800a5d4:	6033      	strmi	r3, [r6, #0]
 800a5d6:	6825      	ldr	r5, [r4, #0]
 800a5d8:	f015 0506 	ands.w	r5, r5, #6
 800a5dc:	d106      	bne.n	800a5ec <_printf_common+0x48>
 800a5de:	f104 0a19 	add.w	sl, r4, #25
 800a5e2:	68e3      	ldr	r3, [r4, #12]
 800a5e4:	6832      	ldr	r2, [r6, #0]
 800a5e6:	1a9b      	subs	r3, r3, r2
 800a5e8:	42ab      	cmp	r3, r5
 800a5ea:	dc26      	bgt.n	800a63a <_printf_common+0x96>
 800a5ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5f0:	1e13      	subs	r3, r2, #0
 800a5f2:	6822      	ldr	r2, [r4, #0]
 800a5f4:	bf18      	it	ne
 800a5f6:	2301      	movne	r3, #1
 800a5f8:	0692      	lsls	r2, r2, #26
 800a5fa:	d42b      	bmi.n	800a654 <_printf_common+0xb0>
 800a5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a600:	4649      	mov	r1, r9
 800a602:	4638      	mov	r0, r7
 800a604:	47c0      	blx	r8
 800a606:	3001      	adds	r0, #1
 800a608:	d01e      	beq.n	800a648 <_printf_common+0xa4>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	68e5      	ldr	r5, [r4, #12]
 800a60e:	6832      	ldr	r2, [r6, #0]
 800a610:	f003 0306 	and.w	r3, r3, #6
 800a614:	2b04      	cmp	r3, #4
 800a616:	bf08      	it	eq
 800a618:	1aad      	subeq	r5, r5, r2
 800a61a:	68a3      	ldr	r3, [r4, #8]
 800a61c:	6922      	ldr	r2, [r4, #16]
 800a61e:	bf0c      	ite	eq
 800a620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a624:	2500      	movne	r5, #0
 800a626:	4293      	cmp	r3, r2
 800a628:	bfc4      	itt	gt
 800a62a:	1a9b      	subgt	r3, r3, r2
 800a62c:	18ed      	addgt	r5, r5, r3
 800a62e:	2600      	movs	r6, #0
 800a630:	341a      	adds	r4, #26
 800a632:	42b5      	cmp	r5, r6
 800a634:	d11a      	bne.n	800a66c <_printf_common+0xc8>
 800a636:	2000      	movs	r0, #0
 800a638:	e008      	b.n	800a64c <_printf_common+0xa8>
 800a63a:	2301      	movs	r3, #1
 800a63c:	4652      	mov	r2, sl
 800a63e:	4649      	mov	r1, r9
 800a640:	4638      	mov	r0, r7
 800a642:	47c0      	blx	r8
 800a644:	3001      	adds	r0, #1
 800a646:	d103      	bne.n	800a650 <_printf_common+0xac>
 800a648:	f04f 30ff 	mov.w	r0, #4294967295
 800a64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a650:	3501      	adds	r5, #1
 800a652:	e7c6      	b.n	800a5e2 <_printf_common+0x3e>
 800a654:	18e1      	adds	r1, r4, r3
 800a656:	1c5a      	adds	r2, r3, #1
 800a658:	2030      	movs	r0, #48	; 0x30
 800a65a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a65e:	4422      	add	r2, r4
 800a660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a668:	3302      	adds	r3, #2
 800a66a:	e7c7      	b.n	800a5fc <_printf_common+0x58>
 800a66c:	2301      	movs	r3, #1
 800a66e:	4622      	mov	r2, r4
 800a670:	4649      	mov	r1, r9
 800a672:	4638      	mov	r0, r7
 800a674:	47c0      	blx	r8
 800a676:	3001      	adds	r0, #1
 800a678:	d0e6      	beq.n	800a648 <_printf_common+0xa4>
 800a67a:	3601      	adds	r6, #1
 800a67c:	e7d9      	b.n	800a632 <_printf_common+0x8e>
	...

0800a680 <_printf_i>:
 800a680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a684:	7e0f      	ldrb	r7, [r1, #24]
 800a686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a688:	2f78      	cmp	r7, #120	; 0x78
 800a68a:	4691      	mov	r9, r2
 800a68c:	4680      	mov	r8, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	469a      	mov	sl, r3
 800a692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a696:	d807      	bhi.n	800a6a8 <_printf_i+0x28>
 800a698:	2f62      	cmp	r7, #98	; 0x62
 800a69a:	d80a      	bhi.n	800a6b2 <_printf_i+0x32>
 800a69c:	2f00      	cmp	r7, #0
 800a69e:	f000 80d8 	beq.w	800a852 <_printf_i+0x1d2>
 800a6a2:	2f58      	cmp	r7, #88	; 0x58
 800a6a4:	f000 80a3 	beq.w	800a7ee <_printf_i+0x16e>
 800a6a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6b0:	e03a      	b.n	800a728 <_printf_i+0xa8>
 800a6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6b6:	2b15      	cmp	r3, #21
 800a6b8:	d8f6      	bhi.n	800a6a8 <_printf_i+0x28>
 800a6ba:	a101      	add	r1, pc, #4	; (adr r1, 800a6c0 <_printf_i+0x40>)
 800a6bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6c0:	0800a719 	.word	0x0800a719
 800a6c4:	0800a72d 	.word	0x0800a72d
 800a6c8:	0800a6a9 	.word	0x0800a6a9
 800a6cc:	0800a6a9 	.word	0x0800a6a9
 800a6d0:	0800a6a9 	.word	0x0800a6a9
 800a6d4:	0800a6a9 	.word	0x0800a6a9
 800a6d8:	0800a72d 	.word	0x0800a72d
 800a6dc:	0800a6a9 	.word	0x0800a6a9
 800a6e0:	0800a6a9 	.word	0x0800a6a9
 800a6e4:	0800a6a9 	.word	0x0800a6a9
 800a6e8:	0800a6a9 	.word	0x0800a6a9
 800a6ec:	0800a839 	.word	0x0800a839
 800a6f0:	0800a75d 	.word	0x0800a75d
 800a6f4:	0800a81b 	.word	0x0800a81b
 800a6f8:	0800a6a9 	.word	0x0800a6a9
 800a6fc:	0800a6a9 	.word	0x0800a6a9
 800a700:	0800a85b 	.word	0x0800a85b
 800a704:	0800a6a9 	.word	0x0800a6a9
 800a708:	0800a75d 	.word	0x0800a75d
 800a70c:	0800a6a9 	.word	0x0800a6a9
 800a710:	0800a6a9 	.word	0x0800a6a9
 800a714:	0800a823 	.word	0x0800a823
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	1d1a      	adds	r2, r3, #4
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	602a      	str	r2, [r5, #0]
 800a720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a728:	2301      	movs	r3, #1
 800a72a:	e0a3      	b.n	800a874 <_printf_i+0x1f4>
 800a72c:	6820      	ldr	r0, [r4, #0]
 800a72e:	6829      	ldr	r1, [r5, #0]
 800a730:	0606      	lsls	r6, r0, #24
 800a732:	f101 0304 	add.w	r3, r1, #4
 800a736:	d50a      	bpl.n	800a74e <_printf_i+0xce>
 800a738:	680e      	ldr	r6, [r1, #0]
 800a73a:	602b      	str	r3, [r5, #0]
 800a73c:	2e00      	cmp	r6, #0
 800a73e:	da03      	bge.n	800a748 <_printf_i+0xc8>
 800a740:	232d      	movs	r3, #45	; 0x2d
 800a742:	4276      	negs	r6, r6
 800a744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a748:	485e      	ldr	r0, [pc, #376]	; (800a8c4 <_printf_i+0x244>)
 800a74a:	230a      	movs	r3, #10
 800a74c:	e019      	b.n	800a782 <_printf_i+0x102>
 800a74e:	680e      	ldr	r6, [r1, #0]
 800a750:	602b      	str	r3, [r5, #0]
 800a752:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a756:	bf18      	it	ne
 800a758:	b236      	sxthne	r6, r6
 800a75a:	e7ef      	b.n	800a73c <_printf_i+0xbc>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	6820      	ldr	r0, [r4, #0]
 800a760:	1d19      	adds	r1, r3, #4
 800a762:	6029      	str	r1, [r5, #0]
 800a764:	0601      	lsls	r1, r0, #24
 800a766:	d501      	bpl.n	800a76c <_printf_i+0xec>
 800a768:	681e      	ldr	r6, [r3, #0]
 800a76a:	e002      	b.n	800a772 <_printf_i+0xf2>
 800a76c:	0646      	lsls	r6, r0, #25
 800a76e:	d5fb      	bpl.n	800a768 <_printf_i+0xe8>
 800a770:	881e      	ldrh	r6, [r3, #0]
 800a772:	4854      	ldr	r0, [pc, #336]	; (800a8c4 <_printf_i+0x244>)
 800a774:	2f6f      	cmp	r7, #111	; 0x6f
 800a776:	bf0c      	ite	eq
 800a778:	2308      	moveq	r3, #8
 800a77a:	230a      	movne	r3, #10
 800a77c:	2100      	movs	r1, #0
 800a77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a782:	6865      	ldr	r5, [r4, #4]
 800a784:	60a5      	str	r5, [r4, #8]
 800a786:	2d00      	cmp	r5, #0
 800a788:	bfa2      	ittt	ge
 800a78a:	6821      	ldrge	r1, [r4, #0]
 800a78c:	f021 0104 	bicge.w	r1, r1, #4
 800a790:	6021      	strge	r1, [r4, #0]
 800a792:	b90e      	cbnz	r6, 800a798 <_printf_i+0x118>
 800a794:	2d00      	cmp	r5, #0
 800a796:	d04d      	beq.n	800a834 <_printf_i+0x1b4>
 800a798:	4615      	mov	r5, r2
 800a79a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a79e:	fb03 6711 	mls	r7, r3, r1, r6
 800a7a2:	5dc7      	ldrb	r7, [r0, r7]
 800a7a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7a8:	4637      	mov	r7, r6
 800a7aa:	42bb      	cmp	r3, r7
 800a7ac:	460e      	mov	r6, r1
 800a7ae:	d9f4      	bls.n	800a79a <_printf_i+0x11a>
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d10b      	bne.n	800a7cc <_printf_i+0x14c>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	07de      	lsls	r6, r3, #31
 800a7b8:	d508      	bpl.n	800a7cc <_printf_i+0x14c>
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	6861      	ldr	r1, [r4, #4]
 800a7be:	4299      	cmp	r1, r3
 800a7c0:	bfde      	ittt	le
 800a7c2:	2330      	movle	r3, #48	; 0x30
 800a7c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7cc:	1b52      	subs	r2, r2, r5
 800a7ce:	6122      	str	r2, [r4, #16]
 800a7d0:	f8cd a000 	str.w	sl, [sp]
 800a7d4:	464b      	mov	r3, r9
 800a7d6:	aa03      	add	r2, sp, #12
 800a7d8:	4621      	mov	r1, r4
 800a7da:	4640      	mov	r0, r8
 800a7dc:	f7ff fee2 	bl	800a5a4 <_printf_common>
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d14c      	bne.n	800a87e <_printf_i+0x1fe>
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e8:	b004      	add	sp, #16
 800a7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ee:	4835      	ldr	r0, [pc, #212]	; (800a8c4 <_printf_i+0x244>)
 800a7f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7f4:	6829      	ldr	r1, [r5, #0]
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7fc:	6029      	str	r1, [r5, #0]
 800a7fe:	061d      	lsls	r5, r3, #24
 800a800:	d514      	bpl.n	800a82c <_printf_i+0x1ac>
 800a802:	07df      	lsls	r7, r3, #31
 800a804:	bf44      	itt	mi
 800a806:	f043 0320 	orrmi.w	r3, r3, #32
 800a80a:	6023      	strmi	r3, [r4, #0]
 800a80c:	b91e      	cbnz	r6, 800a816 <_printf_i+0x196>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	f023 0320 	bic.w	r3, r3, #32
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	2310      	movs	r3, #16
 800a818:	e7b0      	b.n	800a77c <_printf_i+0xfc>
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	f043 0320 	orr.w	r3, r3, #32
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	2378      	movs	r3, #120	; 0x78
 800a824:	4828      	ldr	r0, [pc, #160]	; (800a8c8 <_printf_i+0x248>)
 800a826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a82a:	e7e3      	b.n	800a7f4 <_printf_i+0x174>
 800a82c:	0659      	lsls	r1, r3, #25
 800a82e:	bf48      	it	mi
 800a830:	b2b6      	uxthmi	r6, r6
 800a832:	e7e6      	b.n	800a802 <_printf_i+0x182>
 800a834:	4615      	mov	r5, r2
 800a836:	e7bb      	b.n	800a7b0 <_printf_i+0x130>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	6826      	ldr	r6, [r4, #0]
 800a83c:	6961      	ldr	r1, [r4, #20]
 800a83e:	1d18      	adds	r0, r3, #4
 800a840:	6028      	str	r0, [r5, #0]
 800a842:	0635      	lsls	r5, r6, #24
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	d501      	bpl.n	800a84c <_printf_i+0x1cc>
 800a848:	6019      	str	r1, [r3, #0]
 800a84a:	e002      	b.n	800a852 <_printf_i+0x1d2>
 800a84c:	0670      	lsls	r0, r6, #25
 800a84e:	d5fb      	bpl.n	800a848 <_printf_i+0x1c8>
 800a850:	8019      	strh	r1, [r3, #0]
 800a852:	2300      	movs	r3, #0
 800a854:	6123      	str	r3, [r4, #16]
 800a856:	4615      	mov	r5, r2
 800a858:	e7ba      	b.n	800a7d0 <_printf_i+0x150>
 800a85a:	682b      	ldr	r3, [r5, #0]
 800a85c:	1d1a      	adds	r2, r3, #4
 800a85e:	602a      	str	r2, [r5, #0]
 800a860:	681d      	ldr	r5, [r3, #0]
 800a862:	6862      	ldr	r2, [r4, #4]
 800a864:	2100      	movs	r1, #0
 800a866:	4628      	mov	r0, r5
 800a868:	f7f5 fcba 	bl	80001e0 <memchr>
 800a86c:	b108      	cbz	r0, 800a872 <_printf_i+0x1f2>
 800a86e:	1b40      	subs	r0, r0, r5
 800a870:	6060      	str	r0, [r4, #4]
 800a872:	6863      	ldr	r3, [r4, #4]
 800a874:	6123      	str	r3, [r4, #16]
 800a876:	2300      	movs	r3, #0
 800a878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a87c:	e7a8      	b.n	800a7d0 <_printf_i+0x150>
 800a87e:	6923      	ldr	r3, [r4, #16]
 800a880:	462a      	mov	r2, r5
 800a882:	4649      	mov	r1, r9
 800a884:	4640      	mov	r0, r8
 800a886:	47d0      	blx	sl
 800a888:	3001      	adds	r0, #1
 800a88a:	d0ab      	beq.n	800a7e4 <_printf_i+0x164>
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	079b      	lsls	r3, r3, #30
 800a890:	d413      	bmi.n	800a8ba <_printf_i+0x23a>
 800a892:	68e0      	ldr	r0, [r4, #12]
 800a894:	9b03      	ldr	r3, [sp, #12]
 800a896:	4298      	cmp	r0, r3
 800a898:	bfb8      	it	lt
 800a89a:	4618      	movlt	r0, r3
 800a89c:	e7a4      	b.n	800a7e8 <_printf_i+0x168>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	4632      	mov	r2, r6
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	47d0      	blx	sl
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d09b      	beq.n	800a7e4 <_printf_i+0x164>
 800a8ac:	3501      	adds	r5, #1
 800a8ae:	68e3      	ldr	r3, [r4, #12]
 800a8b0:	9903      	ldr	r1, [sp, #12]
 800a8b2:	1a5b      	subs	r3, r3, r1
 800a8b4:	42ab      	cmp	r3, r5
 800a8b6:	dcf2      	bgt.n	800a89e <_printf_i+0x21e>
 800a8b8:	e7eb      	b.n	800a892 <_printf_i+0x212>
 800a8ba:	2500      	movs	r5, #0
 800a8bc:	f104 0619 	add.w	r6, r4, #25
 800a8c0:	e7f5      	b.n	800a8ae <_printf_i+0x22e>
 800a8c2:	bf00      	nop
 800a8c4:	0800dcd6 	.word	0x0800dcd6
 800a8c8:	0800dce7 	.word	0x0800dce7

0800a8cc <siprintf>:
 800a8cc:	b40e      	push	{r1, r2, r3}
 800a8ce:	b500      	push	{lr}
 800a8d0:	b09c      	sub	sp, #112	; 0x70
 800a8d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a8d4:	9002      	str	r0, [sp, #8]
 800a8d6:	9006      	str	r0, [sp, #24]
 800a8d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a8dc:	4809      	ldr	r0, [pc, #36]	; (800a904 <siprintf+0x38>)
 800a8de:	9107      	str	r1, [sp, #28]
 800a8e0:	9104      	str	r1, [sp, #16]
 800a8e2:	4909      	ldr	r1, [pc, #36]	; (800a908 <siprintf+0x3c>)
 800a8e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e8:	9105      	str	r1, [sp, #20]
 800a8ea:	6800      	ldr	r0, [r0, #0]
 800a8ec:	9301      	str	r3, [sp, #4]
 800a8ee:	a902      	add	r1, sp, #8
 800a8f0:	f001 fb6a 	bl	800bfc8 <_svfiprintf_r>
 800a8f4:	9b02      	ldr	r3, [sp, #8]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	701a      	strb	r2, [r3, #0]
 800a8fa:	b01c      	add	sp, #112	; 0x70
 800a8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a900:	b003      	add	sp, #12
 800a902:	4770      	bx	lr
 800a904:	20000010 	.word	0x20000010
 800a908:	ffff0208 	.word	0xffff0208

0800a90c <quorem>:
 800a90c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a910:	6903      	ldr	r3, [r0, #16]
 800a912:	690c      	ldr	r4, [r1, #16]
 800a914:	42a3      	cmp	r3, r4
 800a916:	4607      	mov	r7, r0
 800a918:	f2c0 8081 	blt.w	800aa1e <quorem+0x112>
 800a91c:	3c01      	subs	r4, #1
 800a91e:	f101 0814 	add.w	r8, r1, #20
 800a922:	f100 0514 	add.w	r5, r0, #20
 800a926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a930:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a934:	3301      	adds	r3, #1
 800a936:	429a      	cmp	r2, r3
 800a938:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a93c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a940:	fbb2 f6f3 	udiv	r6, r2, r3
 800a944:	d331      	bcc.n	800a9aa <quorem+0x9e>
 800a946:	f04f 0e00 	mov.w	lr, #0
 800a94a:	4640      	mov	r0, r8
 800a94c:	46ac      	mov	ip, r5
 800a94e:	46f2      	mov	sl, lr
 800a950:	f850 2b04 	ldr.w	r2, [r0], #4
 800a954:	b293      	uxth	r3, r2
 800a956:	fb06 e303 	mla	r3, r6, r3, lr
 800a95a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a95e:	b29b      	uxth	r3, r3
 800a960:	ebaa 0303 	sub.w	r3, sl, r3
 800a964:	f8dc a000 	ldr.w	sl, [ip]
 800a968:	0c12      	lsrs	r2, r2, #16
 800a96a:	fa13 f38a 	uxtah	r3, r3, sl
 800a96e:	fb06 e202 	mla	r2, r6, r2, lr
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	9b00      	ldr	r3, [sp, #0]
 800a976:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a97a:	b292      	uxth	r2, r2
 800a97c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a984:	f8bd 3000 	ldrh.w	r3, [sp]
 800a988:	4581      	cmp	r9, r0
 800a98a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a98e:	f84c 3b04 	str.w	r3, [ip], #4
 800a992:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a996:	d2db      	bcs.n	800a950 <quorem+0x44>
 800a998:	f855 300b 	ldr.w	r3, [r5, fp]
 800a99c:	b92b      	cbnz	r3, 800a9aa <quorem+0x9e>
 800a99e:	9b01      	ldr	r3, [sp, #4]
 800a9a0:	3b04      	subs	r3, #4
 800a9a2:	429d      	cmp	r5, r3
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	d32e      	bcc.n	800aa06 <quorem+0xfa>
 800a9a8:	613c      	str	r4, [r7, #16]
 800a9aa:	4638      	mov	r0, r7
 800a9ac:	f001 f8b8 	bl	800bb20 <__mcmp>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	db24      	blt.n	800a9fe <quorem+0xf2>
 800a9b4:	3601      	adds	r6, #1
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f04f 0c00 	mov.w	ip, #0
 800a9bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9c0:	f8d0 e000 	ldr.w	lr, [r0]
 800a9c4:	b293      	uxth	r3, r2
 800a9c6:	ebac 0303 	sub.w	r3, ip, r3
 800a9ca:	0c12      	lsrs	r2, r2, #16
 800a9cc:	fa13 f38e 	uxtah	r3, r3, lr
 800a9d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a9d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9de:	45c1      	cmp	r9, r8
 800a9e0:	f840 3b04 	str.w	r3, [r0], #4
 800a9e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9e8:	d2e8      	bcs.n	800a9bc <quorem+0xb0>
 800a9ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9f2:	b922      	cbnz	r2, 800a9fe <quorem+0xf2>
 800a9f4:	3b04      	subs	r3, #4
 800a9f6:	429d      	cmp	r5, r3
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	d30a      	bcc.n	800aa12 <quorem+0x106>
 800a9fc:	613c      	str	r4, [r7, #16]
 800a9fe:	4630      	mov	r0, r6
 800aa00:	b003      	add	sp, #12
 800aa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa06:	6812      	ldr	r2, [r2, #0]
 800aa08:	3b04      	subs	r3, #4
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	d1cc      	bne.n	800a9a8 <quorem+0x9c>
 800aa0e:	3c01      	subs	r4, #1
 800aa10:	e7c7      	b.n	800a9a2 <quorem+0x96>
 800aa12:	6812      	ldr	r2, [r2, #0]
 800aa14:	3b04      	subs	r3, #4
 800aa16:	2a00      	cmp	r2, #0
 800aa18:	d1f0      	bne.n	800a9fc <quorem+0xf0>
 800aa1a:	3c01      	subs	r4, #1
 800aa1c:	e7eb      	b.n	800a9f6 <quorem+0xea>
 800aa1e:	2000      	movs	r0, #0
 800aa20:	e7ee      	b.n	800aa00 <quorem+0xf4>
 800aa22:	0000      	movs	r0, r0
 800aa24:	0000      	movs	r0, r0
	...

0800aa28 <_dtoa_r>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	ed2d 8b04 	vpush	{d8-d9}
 800aa30:	ec57 6b10 	vmov	r6, r7, d0
 800aa34:	b093      	sub	sp, #76	; 0x4c
 800aa36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa3c:	9106      	str	r1, [sp, #24]
 800aa3e:	ee10 aa10 	vmov	sl, s0
 800aa42:	4604      	mov	r4, r0
 800aa44:	9209      	str	r2, [sp, #36]	; 0x24
 800aa46:	930c      	str	r3, [sp, #48]	; 0x30
 800aa48:	46bb      	mov	fp, r7
 800aa4a:	b975      	cbnz	r5, 800aa6a <_dtoa_r+0x42>
 800aa4c:	2010      	movs	r0, #16
 800aa4e:	f000 fddd 	bl	800b60c <malloc>
 800aa52:	4602      	mov	r2, r0
 800aa54:	6260      	str	r0, [r4, #36]	; 0x24
 800aa56:	b920      	cbnz	r0, 800aa62 <_dtoa_r+0x3a>
 800aa58:	4ba7      	ldr	r3, [pc, #668]	; (800acf8 <_dtoa_r+0x2d0>)
 800aa5a:	21ea      	movs	r1, #234	; 0xea
 800aa5c:	48a7      	ldr	r0, [pc, #668]	; (800acfc <_dtoa_r+0x2d4>)
 800aa5e:	f001 fbc3 	bl	800c1e8 <__assert_func>
 800aa62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa66:	6005      	str	r5, [r0, #0]
 800aa68:	60c5      	str	r5, [r0, #12]
 800aa6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa6c:	6819      	ldr	r1, [r3, #0]
 800aa6e:	b151      	cbz	r1, 800aa86 <_dtoa_r+0x5e>
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	604a      	str	r2, [r1, #4]
 800aa74:	2301      	movs	r3, #1
 800aa76:	4093      	lsls	r3, r2
 800aa78:	608b      	str	r3, [r1, #8]
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fe0e 	bl	800b69c <_Bfree>
 800aa80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa82:	2200      	movs	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	1e3b      	subs	r3, r7, #0
 800aa88:	bfaa      	itet	ge
 800aa8a:	2300      	movge	r3, #0
 800aa8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aa90:	f8c8 3000 	strge.w	r3, [r8]
 800aa94:	4b9a      	ldr	r3, [pc, #616]	; (800ad00 <_dtoa_r+0x2d8>)
 800aa96:	bfbc      	itt	lt
 800aa98:	2201      	movlt	r2, #1
 800aa9a:	f8c8 2000 	strlt.w	r2, [r8]
 800aa9e:	ea33 030b 	bics.w	r3, r3, fp
 800aaa2:	d11b      	bne.n	800aadc <_dtoa_r+0xb4>
 800aaa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaa6:	f242 730f 	movw	r3, #9999	; 0x270f
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aab0:	4333      	orrs	r3, r6
 800aab2:	f000 8592 	beq.w	800b5da <_dtoa_r+0xbb2>
 800aab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aab8:	b963      	cbnz	r3, 800aad4 <_dtoa_r+0xac>
 800aaba:	4b92      	ldr	r3, [pc, #584]	; (800ad04 <_dtoa_r+0x2dc>)
 800aabc:	e022      	b.n	800ab04 <_dtoa_r+0xdc>
 800aabe:	4b92      	ldr	r3, [pc, #584]	; (800ad08 <_dtoa_r+0x2e0>)
 800aac0:	9301      	str	r3, [sp, #4]
 800aac2:	3308      	adds	r3, #8
 800aac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aac6:	6013      	str	r3, [r2, #0]
 800aac8:	9801      	ldr	r0, [sp, #4]
 800aaca:	b013      	add	sp, #76	; 0x4c
 800aacc:	ecbd 8b04 	vpop	{d8-d9}
 800aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad4:	4b8b      	ldr	r3, [pc, #556]	; (800ad04 <_dtoa_r+0x2dc>)
 800aad6:	9301      	str	r3, [sp, #4]
 800aad8:	3303      	adds	r3, #3
 800aada:	e7f3      	b.n	800aac4 <_dtoa_r+0x9c>
 800aadc:	2200      	movs	r2, #0
 800aade:	2300      	movs	r3, #0
 800aae0:	4650      	mov	r0, sl
 800aae2:	4659      	mov	r1, fp
 800aae4:	f7f5 fff0 	bl	8000ac8 <__aeabi_dcmpeq>
 800aae8:	ec4b ab19 	vmov	d9, sl, fp
 800aaec:	4680      	mov	r8, r0
 800aaee:	b158      	cbz	r0, 800ab08 <_dtoa_r+0xe0>
 800aaf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 856b 	beq.w	800b5d4 <_dtoa_r+0xbac>
 800aafe:	4883      	ldr	r0, [pc, #524]	; (800ad0c <_dtoa_r+0x2e4>)
 800ab00:	6018      	str	r0, [r3, #0]
 800ab02:	1e43      	subs	r3, r0, #1
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	e7df      	b.n	800aac8 <_dtoa_r+0xa0>
 800ab08:	ec4b ab10 	vmov	d0, sl, fp
 800ab0c:	aa10      	add	r2, sp, #64	; 0x40
 800ab0e:	a911      	add	r1, sp, #68	; 0x44
 800ab10:	4620      	mov	r0, r4
 800ab12:	f001 f8ab 	bl	800bc6c <__d2b>
 800ab16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ab1a:	ee08 0a10 	vmov	s16, r0
 800ab1e:	2d00      	cmp	r5, #0
 800ab20:	f000 8084 	beq.w	800ac2c <_dtoa_r+0x204>
 800ab24:	ee19 3a90 	vmov	r3, s19
 800ab28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab30:	4656      	mov	r6, sl
 800ab32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ab3e:	4b74      	ldr	r3, [pc, #464]	; (800ad10 <_dtoa_r+0x2e8>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	4630      	mov	r0, r6
 800ab44:	4639      	mov	r1, r7
 800ab46:	f7f5 fb9f 	bl	8000288 <__aeabi_dsub>
 800ab4a:	a365      	add	r3, pc, #404	; (adr r3, 800ace0 <_dtoa_r+0x2b8>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f7f5 fd52 	bl	80005f8 <__aeabi_dmul>
 800ab54:	a364      	add	r3, pc, #400	; (adr r3, 800ace8 <_dtoa_r+0x2c0>)
 800ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5a:	f7f5 fb97 	bl	800028c <__adddf3>
 800ab5e:	4606      	mov	r6, r0
 800ab60:	4628      	mov	r0, r5
 800ab62:	460f      	mov	r7, r1
 800ab64:	f7f5 fcde 	bl	8000524 <__aeabi_i2d>
 800ab68:	a361      	add	r3, pc, #388	; (adr r3, 800acf0 <_dtoa_r+0x2c8>)
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	f7f5 fd43 	bl	80005f8 <__aeabi_dmul>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4630      	mov	r0, r6
 800ab78:	4639      	mov	r1, r7
 800ab7a:	f7f5 fb87 	bl	800028c <__adddf3>
 800ab7e:	4606      	mov	r6, r0
 800ab80:	460f      	mov	r7, r1
 800ab82:	f7f5 ffe9 	bl	8000b58 <__aeabi_d2iz>
 800ab86:	2200      	movs	r2, #0
 800ab88:	9000      	str	r0, [sp, #0]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	4639      	mov	r1, r7
 800ab90:	f7f5 ffa4 	bl	8000adc <__aeabi_dcmplt>
 800ab94:	b150      	cbz	r0, 800abac <_dtoa_r+0x184>
 800ab96:	9800      	ldr	r0, [sp, #0]
 800ab98:	f7f5 fcc4 	bl	8000524 <__aeabi_i2d>
 800ab9c:	4632      	mov	r2, r6
 800ab9e:	463b      	mov	r3, r7
 800aba0:	f7f5 ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 800aba4:	b910      	cbnz	r0, 800abac <_dtoa_r+0x184>
 800aba6:	9b00      	ldr	r3, [sp, #0]
 800aba8:	3b01      	subs	r3, #1
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	9b00      	ldr	r3, [sp, #0]
 800abae:	2b16      	cmp	r3, #22
 800abb0:	d85a      	bhi.n	800ac68 <_dtoa_r+0x240>
 800abb2:	9a00      	ldr	r2, [sp, #0]
 800abb4:	4b57      	ldr	r3, [pc, #348]	; (800ad14 <_dtoa_r+0x2ec>)
 800abb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	ec51 0b19 	vmov	r0, r1, d9
 800abc2:	f7f5 ff8b 	bl	8000adc <__aeabi_dcmplt>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d050      	beq.n	800ac6c <_dtoa_r+0x244>
 800abca:	9b00      	ldr	r3, [sp, #0]
 800abcc:	3b01      	subs	r3, #1
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	2300      	movs	r3, #0
 800abd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800abd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abd6:	1b5d      	subs	r5, r3, r5
 800abd8:	1e6b      	subs	r3, r5, #1
 800abda:	9305      	str	r3, [sp, #20]
 800abdc:	bf45      	ittet	mi
 800abde:	f1c5 0301 	rsbmi	r3, r5, #1
 800abe2:	9304      	strmi	r3, [sp, #16]
 800abe4:	2300      	movpl	r3, #0
 800abe6:	2300      	movmi	r3, #0
 800abe8:	bf4c      	ite	mi
 800abea:	9305      	strmi	r3, [sp, #20]
 800abec:	9304      	strpl	r3, [sp, #16]
 800abee:	9b00      	ldr	r3, [sp, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	db3d      	blt.n	800ac70 <_dtoa_r+0x248>
 800abf4:	9b05      	ldr	r3, [sp, #20]
 800abf6:	9a00      	ldr	r2, [sp, #0]
 800abf8:	920a      	str	r2, [sp, #40]	; 0x28
 800abfa:	4413      	add	r3, r2
 800abfc:	9305      	str	r3, [sp, #20]
 800abfe:	2300      	movs	r3, #0
 800ac00:	9307      	str	r3, [sp, #28]
 800ac02:	9b06      	ldr	r3, [sp, #24]
 800ac04:	2b09      	cmp	r3, #9
 800ac06:	f200 8089 	bhi.w	800ad1c <_dtoa_r+0x2f4>
 800ac0a:	2b05      	cmp	r3, #5
 800ac0c:	bfc4      	itt	gt
 800ac0e:	3b04      	subgt	r3, #4
 800ac10:	9306      	strgt	r3, [sp, #24]
 800ac12:	9b06      	ldr	r3, [sp, #24]
 800ac14:	f1a3 0302 	sub.w	r3, r3, #2
 800ac18:	bfcc      	ite	gt
 800ac1a:	2500      	movgt	r5, #0
 800ac1c:	2501      	movle	r5, #1
 800ac1e:	2b03      	cmp	r3, #3
 800ac20:	f200 8087 	bhi.w	800ad32 <_dtoa_r+0x30a>
 800ac24:	e8df f003 	tbb	[pc, r3]
 800ac28:	59383a2d 	.word	0x59383a2d
 800ac2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac30:	441d      	add	r5, r3
 800ac32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac36:	2b20      	cmp	r3, #32
 800ac38:	bfc1      	itttt	gt
 800ac3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ac42:	fa0b f303 	lslgt.w	r3, fp, r3
 800ac46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac4a:	bfda      	itte	le
 800ac4c:	f1c3 0320 	rsble	r3, r3, #32
 800ac50:	fa06 f003 	lslle.w	r0, r6, r3
 800ac54:	4318      	orrgt	r0, r3
 800ac56:	f7f5 fc55 	bl	8000504 <__aeabi_ui2d>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ac62:	3d01      	subs	r5, #1
 800ac64:	930e      	str	r3, [sp, #56]	; 0x38
 800ac66:	e76a      	b.n	800ab3e <_dtoa_r+0x116>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e7b2      	b.n	800abd2 <_dtoa_r+0x1aa>
 800ac6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac6e:	e7b1      	b.n	800abd4 <_dtoa_r+0x1ac>
 800ac70:	9b04      	ldr	r3, [sp, #16]
 800ac72:	9a00      	ldr	r2, [sp, #0]
 800ac74:	1a9b      	subs	r3, r3, r2
 800ac76:	9304      	str	r3, [sp, #16]
 800ac78:	4253      	negs	r3, r2
 800ac7a:	9307      	str	r3, [sp, #28]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac80:	e7bf      	b.n	800ac02 <_dtoa_r+0x1da>
 800ac82:	2300      	movs	r3, #0
 800ac84:	9308      	str	r3, [sp, #32]
 800ac86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	dc55      	bgt.n	800ad38 <_dtoa_r+0x310>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac92:	461a      	mov	r2, r3
 800ac94:	9209      	str	r2, [sp, #36]	; 0x24
 800ac96:	e00c      	b.n	800acb2 <_dtoa_r+0x28a>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e7f3      	b.n	800ac84 <_dtoa_r+0x25c>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aca0:	9308      	str	r3, [sp, #32]
 800aca2:	9b00      	ldr	r3, [sp, #0]
 800aca4:	4413      	add	r3, r2
 800aca6:	9302      	str	r3, [sp, #8]
 800aca8:	3301      	adds	r3, #1
 800acaa:	2b01      	cmp	r3, #1
 800acac:	9303      	str	r3, [sp, #12]
 800acae:	bfb8      	it	lt
 800acb0:	2301      	movlt	r3, #1
 800acb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800acb4:	2200      	movs	r2, #0
 800acb6:	6042      	str	r2, [r0, #4]
 800acb8:	2204      	movs	r2, #4
 800acba:	f102 0614 	add.w	r6, r2, #20
 800acbe:	429e      	cmp	r6, r3
 800acc0:	6841      	ldr	r1, [r0, #4]
 800acc2:	d93d      	bls.n	800ad40 <_dtoa_r+0x318>
 800acc4:	4620      	mov	r0, r4
 800acc6:	f000 fca9 	bl	800b61c <_Balloc>
 800acca:	9001      	str	r0, [sp, #4]
 800accc:	2800      	cmp	r0, #0
 800acce:	d13b      	bne.n	800ad48 <_dtoa_r+0x320>
 800acd0:	4b11      	ldr	r3, [pc, #68]	; (800ad18 <_dtoa_r+0x2f0>)
 800acd2:	4602      	mov	r2, r0
 800acd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800acd8:	e6c0      	b.n	800aa5c <_dtoa_r+0x34>
 800acda:	2301      	movs	r3, #1
 800acdc:	e7df      	b.n	800ac9e <_dtoa_r+0x276>
 800acde:	bf00      	nop
 800ace0:	636f4361 	.word	0x636f4361
 800ace4:	3fd287a7 	.word	0x3fd287a7
 800ace8:	8b60c8b3 	.word	0x8b60c8b3
 800acec:	3fc68a28 	.word	0x3fc68a28
 800acf0:	509f79fb 	.word	0x509f79fb
 800acf4:	3fd34413 	.word	0x3fd34413
 800acf8:	0800dd05 	.word	0x0800dd05
 800acfc:	0800dd1c 	.word	0x0800dd1c
 800ad00:	7ff00000 	.word	0x7ff00000
 800ad04:	0800dd01 	.word	0x0800dd01
 800ad08:	0800dcf8 	.word	0x0800dcf8
 800ad0c:	0800dcd5 	.word	0x0800dcd5
 800ad10:	3ff80000 	.word	0x3ff80000
 800ad14:	0800de10 	.word	0x0800de10
 800ad18:	0800dd77 	.word	0x0800dd77
 800ad1c:	2501      	movs	r5, #1
 800ad1e:	2300      	movs	r3, #0
 800ad20:	9306      	str	r3, [sp, #24]
 800ad22:	9508      	str	r5, [sp, #32]
 800ad24:	f04f 33ff 	mov.w	r3, #4294967295
 800ad28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2312      	movs	r3, #18
 800ad30:	e7b0      	b.n	800ac94 <_dtoa_r+0x26c>
 800ad32:	2301      	movs	r3, #1
 800ad34:	9308      	str	r3, [sp, #32]
 800ad36:	e7f5      	b.n	800ad24 <_dtoa_r+0x2fc>
 800ad38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad3e:	e7b8      	b.n	800acb2 <_dtoa_r+0x28a>
 800ad40:	3101      	adds	r1, #1
 800ad42:	6041      	str	r1, [r0, #4]
 800ad44:	0052      	lsls	r2, r2, #1
 800ad46:	e7b8      	b.n	800acba <_dtoa_r+0x292>
 800ad48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad4a:	9a01      	ldr	r2, [sp, #4]
 800ad4c:	601a      	str	r2, [r3, #0]
 800ad4e:	9b03      	ldr	r3, [sp, #12]
 800ad50:	2b0e      	cmp	r3, #14
 800ad52:	f200 809d 	bhi.w	800ae90 <_dtoa_r+0x468>
 800ad56:	2d00      	cmp	r5, #0
 800ad58:	f000 809a 	beq.w	800ae90 <_dtoa_r+0x468>
 800ad5c:	9b00      	ldr	r3, [sp, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	dd32      	ble.n	800adc8 <_dtoa_r+0x3a0>
 800ad62:	4ab7      	ldr	r2, [pc, #732]	; (800b040 <_dtoa_r+0x618>)
 800ad64:	f003 030f 	and.w	r3, r3, #15
 800ad68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad70:	9b00      	ldr	r3, [sp, #0]
 800ad72:	05d8      	lsls	r0, r3, #23
 800ad74:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ad78:	d516      	bpl.n	800ada8 <_dtoa_r+0x380>
 800ad7a:	4bb2      	ldr	r3, [pc, #712]	; (800b044 <_dtoa_r+0x61c>)
 800ad7c:	ec51 0b19 	vmov	r0, r1, d9
 800ad80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad84:	f7f5 fd62 	bl	800084c <__aeabi_ddiv>
 800ad88:	f007 070f 	and.w	r7, r7, #15
 800ad8c:	4682      	mov	sl, r0
 800ad8e:	468b      	mov	fp, r1
 800ad90:	2503      	movs	r5, #3
 800ad92:	4eac      	ldr	r6, [pc, #688]	; (800b044 <_dtoa_r+0x61c>)
 800ad94:	b957      	cbnz	r7, 800adac <_dtoa_r+0x384>
 800ad96:	4642      	mov	r2, r8
 800ad98:	464b      	mov	r3, r9
 800ad9a:	4650      	mov	r0, sl
 800ad9c:	4659      	mov	r1, fp
 800ad9e:	f7f5 fd55 	bl	800084c <__aeabi_ddiv>
 800ada2:	4682      	mov	sl, r0
 800ada4:	468b      	mov	fp, r1
 800ada6:	e028      	b.n	800adfa <_dtoa_r+0x3d2>
 800ada8:	2502      	movs	r5, #2
 800adaa:	e7f2      	b.n	800ad92 <_dtoa_r+0x36a>
 800adac:	07f9      	lsls	r1, r7, #31
 800adae:	d508      	bpl.n	800adc2 <_dtoa_r+0x39a>
 800adb0:	4640      	mov	r0, r8
 800adb2:	4649      	mov	r1, r9
 800adb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800adb8:	f7f5 fc1e 	bl	80005f8 <__aeabi_dmul>
 800adbc:	3501      	adds	r5, #1
 800adbe:	4680      	mov	r8, r0
 800adc0:	4689      	mov	r9, r1
 800adc2:	107f      	asrs	r7, r7, #1
 800adc4:	3608      	adds	r6, #8
 800adc6:	e7e5      	b.n	800ad94 <_dtoa_r+0x36c>
 800adc8:	f000 809b 	beq.w	800af02 <_dtoa_r+0x4da>
 800adcc:	9b00      	ldr	r3, [sp, #0]
 800adce:	4f9d      	ldr	r7, [pc, #628]	; (800b044 <_dtoa_r+0x61c>)
 800add0:	425e      	negs	r6, r3
 800add2:	4b9b      	ldr	r3, [pc, #620]	; (800b040 <_dtoa_r+0x618>)
 800add4:	f006 020f 	and.w	r2, r6, #15
 800add8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	ec51 0b19 	vmov	r0, r1, d9
 800ade4:	f7f5 fc08 	bl	80005f8 <__aeabi_dmul>
 800ade8:	1136      	asrs	r6, r6, #4
 800adea:	4682      	mov	sl, r0
 800adec:	468b      	mov	fp, r1
 800adee:	2300      	movs	r3, #0
 800adf0:	2502      	movs	r5, #2
 800adf2:	2e00      	cmp	r6, #0
 800adf4:	d17a      	bne.n	800aeec <_dtoa_r+0x4c4>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1d3      	bne.n	800ada2 <_dtoa_r+0x37a>
 800adfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 8082 	beq.w	800af06 <_dtoa_r+0x4de>
 800ae02:	4b91      	ldr	r3, [pc, #580]	; (800b048 <_dtoa_r+0x620>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	4650      	mov	r0, sl
 800ae08:	4659      	mov	r1, fp
 800ae0a:	f7f5 fe67 	bl	8000adc <__aeabi_dcmplt>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d079      	beq.n	800af06 <_dtoa_r+0x4de>
 800ae12:	9b03      	ldr	r3, [sp, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d076      	beq.n	800af06 <_dtoa_r+0x4de>
 800ae18:	9b02      	ldr	r3, [sp, #8]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	dd36      	ble.n	800ae8c <_dtoa_r+0x464>
 800ae1e:	9b00      	ldr	r3, [sp, #0]
 800ae20:	4650      	mov	r0, sl
 800ae22:	4659      	mov	r1, fp
 800ae24:	1e5f      	subs	r7, r3, #1
 800ae26:	2200      	movs	r2, #0
 800ae28:	4b88      	ldr	r3, [pc, #544]	; (800b04c <_dtoa_r+0x624>)
 800ae2a:	f7f5 fbe5 	bl	80005f8 <__aeabi_dmul>
 800ae2e:	9e02      	ldr	r6, [sp, #8]
 800ae30:	4682      	mov	sl, r0
 800ae32:	468b      	mov	fp, r1
 800ae34:	3501      	adds	r5, #1
 800ae36:	4628      	mov	r0, r5
 800ae38:	f7f5 fb74 	bl	8000524 <__aeabi_i2d>
 800ae3c:	4652      	mov	r2, sl
 800ae3e:	465b      	mov	r3, fp
 800ae40:	f7f5 fbda 	bl	80005f8 <__aeabi_dmul>
 800ae44:	4b82      	ldr	r3, [pc, #520]	; (800b050 <_dtoa_r+0x628>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	f7f5 fa20 	bl	800028c <__adddf3>
 800ae4c:	46d0      	mov	r8, sl
 800ae4e:	46d9      	mov	r9, fp
 800ae50:	4682      	mov	sl, r0
 800ae52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ae56:	2e00      	cmp	r6, #0
 800ae58:	d158      	bne.n	800af0c <_dtoa_r+0x4e4>
 800ae5a:	4b7e      	ldr	r3, [pc, #504]	; (800b054 <_dtoa_r+0x62c>)
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	4640      	mov	r0, r8
 800ae60:	4649      	mov	r1, r9
 800ae62:	f7f5 fa11 	bl	8000288 <__aeabi_dsub>
 800ae66:	4652      	mov	r2, sl
 800ae68:	465b      	mov	r3, fp
 800ae6a:	4680      	mov	r8, r0
 800ae6c:	4689      	mov	r9, r1
 800ae6e:	f7f5 fe53 	bl	8000b18 <__aeabi_dcmpgt>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f040 8295 	bne.w	800b3a2 <_dtoa_r+0x97a>
 800ae78:	4652      	mov	r2, sl
 800ae7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ae7e:	4640      	mov	r0, r8
 800ae80:	4649      	mov	r1, r9
 800ae82:	f7f5 fe2b 	bl	8000adc <__aeabi_dcmplt>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	f040 8289 	bne.w	800b39e <_dtoa_r+0x976>
 800ae8c:	ec5b ab19 	vmov	sl, fp, d9
 800ae90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f2c0 8148 	blt.w	800b128 <_dtoa_r+0x700>
 800ae98:	9a00      	ldr	r2, [sp, #0]
 800ae9a:	2a0e      	cmp	r2, #14
 800ae9c:	f300 8144 	bgt.w	800b128 <_dtoa_r+0x700>
 800aea0:	4b67      	ldr	r3, [pc, #412]	; (800b040 <_dtoa_r+0x618>)
 800aea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aeaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f280 80d5 	bge.w	800b05c <_dtoa_r+0x634>
 800aeb2:	9b03      	ldr	r3, [sp, #12]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f300 80d1 	bgt.w	800b05c <_dtoa_r+0x634>
 800aeba:	f040 826f 	bne.w	800b39c <_dtoa_r+0x974>
 800aebe:	4b65      	ldr	r3, [pc, #404]	; (800b054 <_dtoa_r+0x62c>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	4640      	mov	r0, r8
 800aec4:	4649      	mov	r1, r9
 800aec6:	f7f5 fb97 	bl	80005f8 <__aeabi_dmul>
 800aeca:	4652      	mov	r2, sl
 800aecc:	465b      	mov	r3, fp
 800aece:	f7f5 fe19 	bl	8000b04 <__aeabi_dcmpge>
 800aed2:	9e03      	ldr	r6, [sp, #12]
 800aed4:	4637      	mov	r7, r6
 800aed6:	2800      	cmp	r0, #0
 800aed8:	f040 8245 	bne.w	800b366 <_dtoa_r+0x93e>
 800aedc:	9d01      	ldr	r5, [sp, #4]
 800aede:	2331      	movs	r3, #49	; 0x31
 800aee0:	f805 3b01 	strb.w	r3, [r5], #1
 800aee4:	9b00      	ldr	r3, [sp, #0]
 800aee6:	3301      	adds	r3, #1
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	e240      	b.n	800b36e <_dtoa_r+0x946>
 800aeec:	07f2      	lsls	r2, r6, #31
 800aeee:	d505      	bpl.n	800aefc <_dtoa_r+0x4d4>
 800aef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aef4:	f7f5 fb80 	bl	80005f8 <__aeabi_dmul>
 800aef8:	3501      	adds	r5, #1
 800aefa:	2301      	movs	r3, #1
 800aefc:	1076      	asrs	r6, r6, #1
 800aefe:	3708      	adds	r7, #8
 800af00:	e777      	b.n	800adf2 <_dtoa_r+0x3ca>
 800af02:	2502      	movs	r5, #2
 800af04:	e779      	b.n	800adfa <_dtoa_r+0x3d2>
 800af06:	9f00      	ldr	r7, [sp, #0]
 800af08:	9e03      	ldr	r6, [sp, #12]
 800af0a:	e794      	b.n	800ae36 <_dtoa_r+0x40e>
 800af0c:	9901      	ldr	r1, [sp, #4]
 800af0e:	4b4c      	ldr	r3, [pc, #304]	; (800b040 <_dtoa_r+0x618>)
 800af10:	4431      	add	r1, r6
 800af12:	910d      	str	r1, [sp, #52]	; 0x34
 800af14:	9908      	ldr	r1, [sp, #32]
 800af16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af1e:	2900      	cmp	r1, #0
 800af20:	d043      	beq.n	800afaa <_dtoa_r+0x582>
 800af22:	494d      	ldr	r1, [pc, #308]	; (800b058 <_dtoa_r+0x630>)
 800af24:	2000      	movs	r0, #0
 800af26:	f7f5 fc91 	bl	800084c <__aeabi_ddiv>
 800af2a:	4652      	mov	r2, sl
 800af2c:	465b      	mov	r3, fp
 800af2e:	f7f5 f9ab 	bl	8000288 <__aeabi_dsub>
 800af32:	9d01      	ldr	r5, [sp, #4]
 800af34:	4682      	mov	sl, r0
 800af36:	468b      	mov	fp, r1
 800af38:	4649      	mov	r1, r9
 800af3a:	4640      	mov	r0, r8
 800af3c:	f7f5 fe0c 	bl	8000b58 <__aeabi_d2iz>
 800af40:	4606      	mov	r6, r0
 800af42:	f7f5 faef 	bl	8000524 <__aeabi_i2d>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	4640      	mov	r0, r8
 800af4c:	4649      	mov	r1, r9
 800af4e:	f7f5 f99b 	bl	8000288 <__aeabi_dsub>
 800af52:	3630      	adds	r6, #48	; 0x30
 800af54:	f805 6b01 	strb.w	r6, [r5], #1
 800af58:	4652      	mov	r2, sl
 800af5a:	465b      	mov	r3, fp
 800af5c:	4680      	mov	r8, r0
 800af5e:	4689      	mov	r9, r1
 800af60:	f7f5 fdbc 	bl	8000adc <__aeabi_dcmplt>
 800af64:	2800      	cmp	r0, #0
 800af66:	d163      	bne.n	800b030 <_dtoa_r+0x608>
 800af68:	4642      	mov	r2, r8
 800af6a:	464b      	mov	r3, r9
 800af6c:	4936      	ldr	r1, [pc, #216]	; (800b048 <_dtoa_r+0x620>)
 800af6e:	2000      	movs	r0, #0
 800af70:	f7f5 f98a 	bl	8000288 <__aeabi_dsub>
 800af74:	4652      	mov	r2, sl
 800af76:	465b      	mov	r3, fp
 800af78:	f7f5 fdb0 	bl	8000adc <__aeabi_dcmplt>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	f040 80b5 	bne.w	800b0ec <_dtoa_r+0x6c4>
 800af82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af84:	429d      	cmp	r5, r3
 800af86:	d081      	beq.n	800ae8c <_dtoa_r+0x464>
 800af88:	4b30      	ldr	r3, [pc, #192]	; (800b04c <_dtoa_r+0x624>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	4650      	mov	r0, sl
 800af8e:	4659      	mov	r1, fp
 800af90:	f7f5 fb32 	bl	80005f8 <__aeabi_dmul>
 800af94:	4b2d      	ldr	r3, [pc, #180]	; (800b04c <_dtoa_r+0x624>)
 800af96:	4682      	mov	sl, r0
 800af98:	468b      	mov	fp, r1
 800af9a:	4640      	mov	r0, r8
 800af9c:	4649      	mov	r1, r9
 800af9e:	2200      	movs	r2, #0
 800afa0:	f7f5 fb2a 	bl	80005f8 <__aeabi_dmul>
 800afa4:	4680      	mov	r8, r0
 800afa6:	4689      	mov	r9, r1
 800afa8:	e7c6      	b.n	800af38 <_dtoa_r+0x510>
 800afaa:	4650      	mov	r0, sl
 800afac:	4659      	mov	r1, fp
 800afae:	f7f5 fb23 	bl	80005f8 <__aeabi_dmul>
 800afb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afb4:	9d01      	ldr	r5, [sp, #4]
 800afb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800afb8:	4682      	mov	sl, r0
 800afba:	468b      	mov	fp, r1
 800afbc:	4649      	mov	r1, r9
 800afbe:	4640      	mov	r0, r8
 800afc0:	f7f5 fdca 	bl	8000b58 <__aeabi_d2iz>
 800afc4:	4606      	mov	r6, r0
 800afc6:	f7f5 faad 	bl	8000524 <__aeabi_i2d>
 800afca:	3630      	adds	r6, #48	; 0x30
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	4640      	mov	r0, r8
 800afd2:	4649      	mov	r1, r9
 800afd4:	f7f5 f958 	bl	8000288 <__aeabi_dsub>
 800afd8:	f805 6b01 	strb.w	r6, [r5], #1
 800afdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afde:	429d      	cmp	r5, r3
 800afe0:	4680      	mov	r8, r0
 800afe2:	4689      	mov	r9, r1
 800afe4:	f04f 0200 	mov.w	r2, #0
 800afe8:	d124      	bne.n	800b034 <_dtoa_r+0x60c>
 800afea:	4b1b      	ldr	r3, [pc, #108]	; (800b058 <_dtoa_r+0x630>)
 800afec:	4650      	mov	r0, sl
 800afee:	4659      	mov	r1, fp
 800aff0:	f7f5 f94c 	bl	800028c <__adddf3>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4640      	mov	r0, r8
 800affa:	4649      	mov	r1, r9
 800affc:	f7f5 fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 800b000:	2800      	cmp	r0, #0
 800b002:	d173      	bne.n	800b0ec <_dtoa_r+0x6c4>
 800b004:	4652      	mov	r2, sl
 800b006:	465b      	mov	r3, fp
 800b008:	4913      	ldr	r1, [pc, #76]	; (800b058 <_dtoa_r+0x630>)
 800b00a:	2000      	movs	r0, #0
 800b00c:	f7f5 f93c 	bl	8000288 <__aeabi_dsub>
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	4640      	mov	r0, r8
 800b016:	4649      	mov	r1, r9
 800b018:	f7f5 fd60 	bl	8000adc <__aeabi_dcmplt>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	f43f af35 	beq.w	800ae8c <_dtoa_r+0x464>
 800b022:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b024:	1e6b      	subs	r3, r5, #1
 800b026:	930f      	str	r3, [sp, #60]	; 0x3c
 800b028:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b02c:	2b30      	cmp	r3, #48	; 0x30
 800b02e:	d0f8      	beq.n	800b022 <_dtoa_r+0x5fa>
 800b030:	9700      	str	r7, [sp, #0]
 800b032:	e049      	b.n	800b0c8 <_dtoa_r+0x6a0>
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <_dtoa_r+0x624>)
 800b036:	f7f5 fadf 	bl	80005f8 <__aeabi_dmul>
 800b03a:	4680      	mov	r8, r0
 800b03c:	4689      	mov	r9, r1
 800b03e:	e7bd      	b.n	800afbc <_dtoa_r+0x594>
 800b040:	0800de10 	.word	0x0800de10
 800b044:	0800dde8 	.word	0x0800dde8
 800b048:	3ff00000 	.word	0x3ff00000
 800b04c:	40240000 	.word	0x40240000
 800b050:	401c0000 	.word	0x401c0000
 800b054:	40140000 	.word	0x40140000
 800b058:	3fe00000 	.word	0x3fe00000
 800b05c:	9d01      	ldr	r5, [sp, #4]
 800b05e:	4656      	mov	r6, sl
 800b060:	465f      	mov	r7, fp
 800b062:	4642      	mov	r2, r8
 800b064:	464b      	mov	r3, r9
 800b066:	4630      	mov	r0, r6
 800b068:	4639      	mov	r1, r7
 800b06a:	f7f5 fbef 	bl	800084c <__aeabi_ddiv>
 800b06e:	f7f5 fd73 	bl	8000b58 <__aeabi_d2iz>
 800b072:	4682      	mov	sl, r0
 800b074:	f7f5 fa56 	bl	8000524 <__aeabi_i2d>
 800b078:	4642      	mov	r2, r8
 800b07a:	464b      	mov	r3, r9
 800b07c:	f7f5 fabc 	bl	80005f8 <__aeabi_dmul>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	4630      	mov	r0, r6
 800b086:	4639      	mov	r1, r7
 800b088:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b08c:	f7f5 f8fc 	bl	8000288 <__aeabi_dsub>
 800b090:	f805 6b01 	strb.w	r6, [r5], #1
 800b094:	9e01      	ldr	r6, [sp, #4]
 800b096:	9f03      	ldr	r7, [sp, #12]
 800b098:	1bae      	subs	r6, r5, r6
 800b09a:	42b7      	cmp	r7, r6
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	d135      	bne.n	800b10e <_dtoa_r+0x6e6>
 800b0a2:	f7f5 f8f3 	bl	800028c <__adddf3>
 800b0a6:	4642      	mov	r2, r8
 800b0a8:	464b      	mov	r3, r9
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	460f      	mov	r7, r1
 800b0ae:	f7f5 fd33 	bl	8000b18 <__aeabi_dcmpgt>
 800b0b2:	b9d0      	cbnz	r0, 800b0ea <_dtoa_r+0x6c2>
 800b0b4:	4642      	mov	r2, r8
 800b0b6:	464b      	mov	r3, r9
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	f7f5 fd04 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0c0:	b110      	cbz	r0, 800b0c8 <_dtoa_r+0x6a0>
 800b0c2:	f01a 0f01 	tst.w	sl, #1
 800b0c6:	d110      	bne.n	800b0ea <_dtoa_r+0x6c2>
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	ee18 1a10 	vmov	r1, s16
 800b0ce:	f000 fae5 	bl	800b69c <_Bfree>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	9800      	ldr	r0, [sp, #0]
 800b0d6:	702b      	strb	r3, [r5, #0]
 800b0d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0da:	3001      	adds	r0, #1
 800b0dc:	6018      	str	r0, [r3, #0]
 800b0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f43f acf1 	beq.w	800aac8 <_dtoa_r+0xa0>
 800b0e6:	601d      	str	r5, [r3, #0]
 800b0e8:	e4ee      	b.n	800aac8 <_dtoa_r+0xa0>
 800b0ea:	9f00      	ldr	r7, [sp, #0]
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	461d      	mov	r5, r3
 800b0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0f4:	2a39      	cmp	r2, #57	; 0x39
 800b0f6:	d106      	bne.n	800b106 <_dtoa_r+0x6de>
 800b0f8:	9a01      	ldr	r2, [sp, #4]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d1f7      	bne.n	800b0ee <_dtoa_r+0x6c6>
 800b0fe:	9901      	ldr	r1, [sp, #4]
 800b100:	2230      	movs	r2, #48	; 0x30
 800b102:	3701      	adds	r7, #1
 800b104:	700a      	strb	r2, [r1, #0]
 800b106:	781a      	ldrb	r2, [r3, #0]
 800b108:	3201      	adds	r2, #1
 800b10a:	701a      	strb	r2, [r3, #0]
 800b10c:	e790      	b.n	800b030 <_dtoa_r+0x608>
 800b10e:	4ba6      	ldr	r3, [pc, #664]	; (800b3a8 <_dtoa_r+0x980>)
 800b110:	2200      	movs	r2, #0
 800b112:	f7f5 fa71 	bl	80005f8 <__aeabi_dmul>
 800b116:	2200      	movs	r2, #0
 800b118:	2300      	movs	r3, #0
 800b11a:	4606      	mov	r6, r0
 800b11c:	460f      	mov	r7, r1
 800b11e:	f7f5 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b122:	2800      	cmp	r0, #0
 800b124:	d09d      	beq.n	800b062 <_dtoa_r+0x63a>
 800b126:	e7cf      	b.n	800b0c8 <_dtoa_r+0x6a0>
 800b128:	9a08      	ldr	r2, [sp, #32]
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	f000 80d7 	beq.w	800b2de <_dtoa_r+0x8b6>
 800b130:	9a06      	ldr	r2, [sp, #24]
 800b132:	2a01      	cmp	r2, #1
 800b134:	f300 80ba 	bgt.w	800b2ac <_dtoa_r+0x884>
 800b138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b13a:	2a00      	cmp	r2, #0
 800b13c:	f000 80b2 	beq.w	800b2a4 <_dtoa_r+0x87c>
 800b140:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b144:	9e07      	ldr	r6, [sp, #28]
 800b146:	9d04      	ldr	r5, [sp, #16]
 800b148:	9a04      	ldr	r2, [sp, #16]
 800b14a:	441a      	add	r2, r3
 800b14c:	9204      	str	r2, [sp, #16]
 800b14e:	9a05      	ldr	r2, [sp, #20]
 800b150:	2101      	movs	r1, #1
 800b152:	441a      	add	r2, r3
 800b154:	4620      	mov	r0, r4
 800b156:	9205      	str	r2, [sp, #20]
 800b158:	f000 fb58 	bl	800b80c <__i2b>
 800b15c:	4607      	mov	r7, r0
 800b15e:	2d00      	cmp	r5, #0
 800b160:	dd0c      	ble.n	800b17c <_dtoa_r+0x754>
 800b162:	9b05      	ldr	r3, [sp, #20]
 800b164:	2b00      	cmp	r3, #0
 800b166:	dd09      	ble.n	800b17c <_dtoa_r+0x754>
 800b168:	42ab      	cmp	r3, r5
 800b16a:	9a04      	ldr	r2, [sp, #16]
 800b16c:	bfa8      	it	ge
 800b16e:	462b      	movge	r3, r5
 800b170:	1ad2      	subs	r2, r2, r3
 800b172:	9204      	str	r2, [sp, #16]
 800b174:	9a05      	ldr	r2, [sp, #20]
 800b176:	1aed      	subs	r5, r5, r3
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	9305      	str	r3, [sp, #20]
 800b17c:	9b07      	ldr	r3, [sp, #28]
 800b17e:	b31b      	cbz	r3, 800b1c8 <_dtoa_r+0x7a0>
 800b180:	9b08      	ldr	r3, [sp, #32]
 800b182:	2b00      	cmp	r3, #0
 800b184:	f000 80af 	beq.w	800b2e6 <_dtoa_r+0x8be>
 800b188:	2e00      	cmp	r6, #0
 800b18a:	dd13      	ble.n	800b1b4 <_dtoa_r+0x78c>
 800b18c:	4639      	mov	r1, r7
 800b18e:	4632      	mov	r2, r6
 800b190:	4620      	mov	r0, r4
 800b192:	f000 fbfb 	bl	800b98c <__pow5mult>
 800b196:	ee18 2a10 	vmov	r2, s16
 800b19a:	4601      	mov	r1, r0
 800b19c:	4607      	mov	r7, r0
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 fb4a 	bl	800b838 <__multiply>
 800b1a4:	ee18 1a10 	vmov	r1, s16
 800b1a8:	4680      	mov	r8, r0
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f000 fa76 	bl	800b69c <_Bfree>
 800b1b0:	ee08 8a10 	vmov	s16, r8
 800b1b4:	9b07      	ldr	r3, [sp, #28]
 800b1b6:	1b9a      	subs	r2, r3, r6
 800b1b8:	d006      	beq.n	800b1c8 <_dtoa_r+0x7a0>
 800b1ba:	ee18 1a10 	vmov	r1, s16
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 fbe4 	bl	800b98c <__pow5mult>
 800b1c4:	ee08 0a10 	vmov	s16, r0
 800b1c8:	2101      	movs	r1, #1
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f000 fb1e 	bl	800b80c <__i2b>
 800b1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	4606      	mov	r6, r0
 800b1d6:	f340 8088 	ble.w	800b2ea <_dtoa_r+0x8c2>
 800b1da:	461a      	mov	r2, r3
 800b1dc:	4601      	mov	r1, r0
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f000 fbd4 	bl	800b98c <__pow5mult>
 800b1e4:	9b06      	ldr	r3, [sp, #24]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	f340 8081 	ble.w	800b2f0 <_dtoa_r+0x8c8>
 800b1ee:	f04f 0800 	mov.w	r8, #0
 800b1f2:	6933      	ldr	r3, [r6, #16]
 800b1f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b1f8:	6918      	ldr	r0, [r3, #16]
 800b1fa:	f000 fab7 	bl	800b76c <__hi0bits>
 800b1fe:	f1c0 0020 	rsb	r0, r0, #32
 800b202:	9b05      	ldr	r3, [sp, #20]
 800b204:	4418      	add	r0, r3
 800b206:	f010 001f 	ands.w	r0, r0, #31
 800b20a:	f000 8092 	beq.w	800b332 <_dtoa_r+0x90a>
 800b20e:	f1c0 0320 	rsb	r3, r0, #32
 800b212:	2b04      	cmp	r3, #4
 800b214:	f340 808a 	ble.w	800b32c <_dtoa_r+0x904>
 800b218:	f1c0 001c 	rsb	r0, r0, #28
 800b21c:	9b04      	ldr	r3, [sp, #16]
 800b21e:	4403      	add	r3, r0
 800b220:	9304      	str	r3, [sp, #16]
 800b222:	9b05      	ldr	r3, [sp, #20]
 800b224:	4403      	add	r3, r0
 800b226:	4405      	add	r5, r0
 800b228:	9305      	str	r3, [sp, #20]
 800b22a:	9b04      	ldr	r3, [sp, #16]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dd07      	ble.n	800b240 <_dtoa_r+0x818>
 800b230:	ee18 1a10 	vmov	r1, s16
 800b234:	461a      	mov	r2, r3
 800b236:	4620      	mov	r0, r4
 800b238:	f000 fc02 	bl	800ba40 <__lshift>
 800b23c:	ee08 0a10 	vmov	s16, r0
 800b240:	9b05      	ldr	r3, [sp, #20]
 800b242:	2b00      	cmp	r3, #0
 800b244:	dd05      	ble.n	800b252 <_dtoa_r+0x82a>
 800b246:	4631      	mov	r1, r6
 800b248:	461a      	mov	r2, r3
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 fbf8 	bl	800ba40 <__lshift>
 800b250:	4606      	mov	r6, r0
 800b252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b254:	2b00      	cmp	r3, #0
 800b256:	d06e      	beq.n	800b336 <_dtoa_r+0x90e>
 800b258:	ee18 0a10 	vmov	r0, s16
 800b25c:	4631      	mov	r1, r6
 800b25e:	f000 fc5f 	bl	800bb20 <__mcmp>
 800b262:	2800      	cmp	r0, #0
 800b264:	da67      	bge.n	800b336 <_dtoa_r+0x90e>
 800b266:	9b00      	ldr	r3, [sp, #0]
 800b268:	3b01      	subs	r3, #1
 800b26a:	ee18 1a10 	vmov	r1, s16
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	220a      	movs	r2, #10
 800b272:	2300      	movs	r3, #0
 800b274:	4620      	mov	r0, r4
 800b276:	f000 fa33 	bl	800b6e0 <__multadd>
 800b27a:	9b08      	ldr	r3, [sp, #32]
 800b27c:	ee08 0a10 	vmov	s16, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	f000 81b1 	beq.w	800b5e8 <_dtoa_r+0xbc0>
 800b286:	2300      	movs	r3, #0
 800b288:	4639      	mov	r1, r7
 800b28a:	220a      	movs	r2, #10
 800b28c:	4620      	mov	r0, r4
 800b28e:	f000 fa27 	bl	800b6e0 <__multadd>
 800b292:	9b02      	ldr	r3, [sp, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	4607      	mov	r7, r0
 800b298:	f300 808e 	bgt.w	800b3b8 <_dtoa_r+0x990>
 800b29c:	9b06      	ldr	r3, [sp, #24]
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	dc51      	bgt.n	800b346 <_dtoa_r+0x91e>
 800b2a2:	e089      	b.n	800b3b8 <_dtoa_r+0x990>
 800b2a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b2aa:	e74b      	b.n	800b144 <_dtoa_r+0x71c>
 800b2ac:	9b03      	ldr	r3, [sp, #12]
 800b2ae:	1e5e      	subs	r6, r3, #1
 800b2b0:	9b07      	ldr	r3, [sp, #28]
 800b2b2:	42b3      	cmp	r3, r6
 800b2b4:	bfbf      	itttt	lt
 800b2b6:	9b07      	ldrlt	r3, [sp, #28]
 800b2b8:	9607      	strlt	r6, [sp, #28]
 800b2ba:	1af2      	sublt	r2, r6, r3
 800b2bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b2be:	bfb6      	itet	lt
 800b2c0:	189b      	addlt	r3, r3, r2
 800b2c2:	1b9e      	subge	r6, r3, r6
 800b2c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b2c6:	9b03      	ldr	r3, [sp, #12]
 800b2c8:	bfb8      	it	lt
 800b2ca:	2600      	movlt	r6, #0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	bfb7      	itett	lt
 800b2d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b2d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b2d8:	1a9d      	sublt	r5, r3, r2
 800b2da:	2300      	movlt	r3, #0
 800b2dc:	e734      	b.n	800b148 <_dtoa_r+0x720>
 800b2de:	9e07      	ldr	r6, [sp, #28]
 800b2e0:	9d04      	ldr	r5, [sp, #16]
 800b2e2:	9f08      	ldr	r7, [sp, #32]
 800b2e4:	e73b      	b.n	800b15e <_dtoa_r+0x736>
 800b2e6:	9a07      	ldr	r2, [sp, #28]
 800b2e8:	e767      	b.n	800b1ba <_dtoa_r+0x792>
 800b2ea:	9b06      	ldr	r3, [sp, #24]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	dc18      	bgt.n	800b322 <_dtoa_r+0x8fa>
 800b2f0:	f1ba 0f00 	cmp.w	sl, #0
 800b2f4:	d115      	bne.n	800b322 <_dtoa_r+0x8fa>
 800b2f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2fa:	b993      	cbnz	r3, 800b322 <_dtoa_r+0x8fa>
 800b2fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b300:	0d1b      	lsrs	r3, r3, #20
 800b302:	051b      	lsls	r3, r3, #20
 800b304:	b183      	cbz	r3, 800b328 <_dtoa_r+0x900>
 800b306:	9b04      	ldr	r3, [sp, #16]
 800b308:	3301      	adds	r3, #1
 800b30a:	9304      	str	r3, [sp, #16]
 800b30c:	9b05      	ldr	r3, [sp, #20]
 800b30e:	3301      	adds	r3, #1
 800b310:	9305      	str	r3, [sp, #20]
 800b312:	f04f 0801 	mov.w	r8, #1
 800b316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f47f af6a 	bne.w	800b1f2 <_dtoa_r+0x7ca>
 800b31e:	2001      	movs	r0, #1
 800b320:	e76f      	b.n	800b202 <_dtoa_r+0x7da>
 800b322:	f04f 0800 	mov.w	r8, #0
 800b326:	e7f6      	b.n	800b316 <_dtoa_r+0x8ee>
 800b328:	4698      	mov	r8, r3
 800b32a:	e7f4      	b.n	800b316 <_dtoa_r+0x8ee>
 800b32c:	f43f af7d 	beq.w	800b22a <_dtoa_r+0x802>
 800b330:	4618      	mov	r0, r3
 800b332:	301c      	adds	r0, #28
 800b334:	e772      	b.n	800b21c <_dtoa_r+0x7f4>
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	dc37      	bgt.n	800b3ac <_dtoa_r+0x984>
 800b33c:	9b06      	ldr	r3, [sp, #24]
 800b33e:	2b02      	cmp	r3, #2
 800b340:	dd34      	ble.n	800b3ac <_dtoa_r+0x984>
 800b342:	9b03      	ldr	r3, [sp, #12]
 800b344:	9302      	str	r3, [sp, #8]
 800b346:	9b02      	ldr	r3, [sp, #8]
 800b348:	b96b      	cbnz	r3, 800b366 <_dtoa_r+0x93e>
 800b34a:	4631      	mov	r1, r6
 800b34c:	2205      	movs	r2, #5
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 f9c6 	bl	800b6e0 <__multadd>
 800b354:	4601      	mov	r1, r0
 800b356:	4606      	mov	r6, r0
 800b358:	ee18 0a10 	vmov	r0, s16
 800b35c:	f000 fbe0 	bl	800bb20 <__mcmp>
 800b360:	2800      	cmp	r0, #0
 800b362:	f73f adbb 	bgt.w	800aedc <_dtoa_r+0x4b4>
 800b366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b368:	9d01      	ldr	r5, [sp, #4]
 800b36a:	43db      	mvns	r3, r3
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	f04f 0800 	mov.w	r8, #0
 800b372:	4631      	mov	r1, r6
 800b374:	4620      	mov	r0, r4
 800b376:	f000 f991 	bl	800b69c <_Bfree>
 800b37a:	2f00      	cmp	r7, #0
 800b37c:	f43f aea4 	beq.w	800b0c8 <_dtoa_r+0x6a0>
 800b380:	f1b8 0f00 	cmp.w	r8, #0
 800b384:	d005      	beq.n	800b392 <_dtoa_r+0x96a>
 800b386:	45b8      	cmp	r8, r7
 800b388:	d003      	beq.n	800b392 <_dtoa_r+0x96a>
 800b38a:	4641      	mov	r1, r8
 800b38c:	4620      	mov	r0, r4
 800b38e:	f000 f985 	bl	800b69c <_Bfree>
 800b392:	4639      	mov	r1, r7
 800b394:	4620      	mov	r0, r4
 800b396:	f000 f981 	bl	800b69c <_Bfree>
 800b39a:	e695      	b.n	800b0c8 <_dtoa_r+0x6a0>
 800b39c:	2600      	movs	r6, #0
 800b39e:	4637      	mov	r7, r6
 800b3a0:	e7e1      	b.n	800b366 <_dtoa_r+0x93e>
 800b3a2:	9700      	str	r7, [sp, #0]
 800b3a4:	4637      	mov	r7, r6
 800b3a6:	e599      	b.n	800aedc <_dtoa_r+0x4b4>
 800b3a8:	40240000 	.word	0x40240000
 800b3ac:	9b08      	ldr	r3, [sp, #32]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f000 80ca 	beq.w	800b548 <_dtoa_r+0xb20>
 800b3b4:	9b03      	ldr	r3, [sp, #12]
 800b3b6:	9302      	str	r3, [sp, #8]
 800b3b8:	2d00      	cmp	r5, #0
 800b3ba:	dd05      	ble.n	800b3c8 <_dtoa_r+0x9a0>
 800b3bc:	4639      	mov	r1, r7
 800b3be:	462a      	mov	r2, r5
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fb3d 	bl	800ba40 <__lshift>
 800b3c6:	4607      	mov	r7, r0
 800b3c8:	f1b8 0f00 	cmp.w	r8, #0
 800b3cc:	d05b      	beq.n	800b486 <_dtoa_r+0xa5e>
 800b3ce:	6879      	ldr	r1, [r7, #4]
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f000 f923 	bl	800b61c <_Balloc>
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	b928      	cbnz	r0, 800b3e6 <_dtoa_r+0x9be>
 800b3da:	4b87      	ldr	r3, [pc, #540]	; (800b5f8 <_dtoa_r+0xbd0>)
 800b3dc:	4602      	mov	r2, r0
 800b3de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b3e2:	f7ff bb3b 	b.w	800aa5c <_dtoa_r+0x34>
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	3202      	adds	r2, #2
 800b3ea:	0092      	lsls	r2, r2, #2
 800b3ec:	f107 010c 	add.w	r1, r7, #12
 800b3f0:	300c      	adds	r0, #12
 800b3f2:	f7fe fdeb 	bl	8009fcc <memcpy>
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 fb20 	bl	800ba40 <__lshift>
 800b400:	9b01      	ldr	r3, [sp, #4]
 800b402:	f103 0901 	add.w	r9, r3, #1
 800b406:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b40a:	4413      	add	r3, r2
 800b40c:	9305      	str	r3, [sp, #20]
 800b40e:	f00a 0301 	and.w	r3, sl, #1
 800b412:	46b8      	mov	r8, r7
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	4607      	mov	r7, r0
 800b418:	4631      	mov	r1, r6
 800b41a:	ee18 0a10 	vmov	r0, s16
 800b41e:	f7ff fa75 	bl	800a90c <quorem>
 800b422:	4641      	mov	r1, r8
 800b424:	9002      	str	r0, [sp, #8]
 800b426:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b42a:	ee18 0a10 	vmov	r0, s16
 800b42e:	f000 fb77 	bl	800bb20 <__mcmp>
 800b432:	463a      	mov	r2, r7
 800b434:	9003      	str	r0, [sp, #12]
 800b436:	4631      	mov	r1, r6
 800b438:	4620      	mov	r0, r4
 800b43a:	f000 fb8d 	bl	800bb58 <__mdiff>
 800b43e:	68c2      	ldr	r2, [r0, #12]
 800b440:	f109 3bff 	add.w	fp, r9, #4294967295
 800b444:	4605      	mov	r5, r0
 800b446:	bb02      	cbnz	r2, 800b48a <_dtoa_r+0xa62>
 800b448:	4601      	mov	r1, r0
 800b44a:	ee18 0a10 	vmov	r0, s16
 800b44e:	f000 fb67 	bl	800bb20 <__mcmp>
 800b452:	4602      	mov	r2, r0
 800b454:	4629      	mov	r1, r5
 800b456:	4620      	mov	r0, r4
 800b458:	9207      	str	r2, [sp, #28]
 800b45a:	f000 f91f 	bl	800b69c <_Bfree>
 800b45e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b462:	ea43 0102 	orr.w	r1, r3, r2
 800b466:	9b04      	ldr	r3, [sp, #16]
 800b468:	430b      	orrs	r3, r1
 800b46a:	464d      	mov	r5, r9
 800b46c:	d10f      	bne.n	800b48e <_dtoa_r+0xa66>
 800b46e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b472:	d02a      	beq.n	800b4ca <_dtoa_r+0xaa2>
 800b474:	9b03      	ldr	r3, [sp, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	dd02      	ble.n	800b480 <_dtoa_r+0xa58>
 800b47a:	9b02      	ldr	r3, [sp, #8]
 800b47c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b480:	f88b a000 	strb.w	sl, [fp]
 800b484:	e775      	b.n	800b372 <_dtoa_r+0x94a>
 800b486:	4638      	mov	r0, r7
 800b488:	e7ba      	b.n	800b400 <_dtoa_r+0x9d8>
 800b48a:	2201      	movs	r2, #1
 800b48c:	e7e2      	b.n	800b454 <_dtoa_r+0xa2c>
 800b48e:	9b03      	ldr	r3, [sp, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	db04      	blt.n	800b49e <_dtoa_r+0xa76>
 800b494:	9906      	ldr	r1, [sp, #24]
 800b496:	430b      	orrs	r3, r1
 800b498:	9904      	ldr	r1, [sp, #16]
 800b49a:	430b      	orrs	r3, r1
 800b49c:	d122      	bne.n	800b4e4 <_dtoa_r+0xabc>
 800b49e:	2a00      	cmp	r2, #0
 800b4a0:	ddee      	ble.n	800b480 <_dtoa_r+0xa58>
 800b4a2:	ee18 1a10 	vmov	r1, s16
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f000 fac9 	bl	800ba40 <__lshift>
 800b4ae:	4631      	mov	r1, r6
 800b4b0:	ee08 0a10 	vmov	s16, r0
 800b4b4:	f000 fb34 	bl	800bb20 <__mcmp>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	dc03      	bgt.n	800b4c4 <_dtoa_r+0xa9c>
 800b4bc:	d1e0      	bne.n	800b480 <_dtoa_r+0xa58>
 800b4be:	f01a 0f01 	tst.w	sl, #1
 800b4c2:	d0dd      	beq.n	800b480 <_dtoa_r+0xa58>
 800b4c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4c8:	d1d7      	bne.n	800b47a <_dtoa_r+0xa52>
 800b4ca:	2339      	movs	r3, #57	; 0x39
 800b4cc:	f88b 3000 	strb.w	r3, [fp]
 800b4d0:	462b      	mov	r3, r5
 800b4d2:	461d      	mov	r5, r3
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4da:	2a39      	cmp	r2, #57	; 0x39
 800b4dc:	d071      	beq.n	800b5c2 <_dtoa_r+0xb9a>
 800b4de:	3201      	adds	r2, #1
 800b4e0:	701a      	strb	r2, [r3, #0]
 800b4e2:	e746      	b.n	800b372 <_dtoa_r+0x94a>
 800b4e4:	2a00      	cmp	r2, #0
 800b4e6:	dd07      	ble.n	800b4f8 <_dtoa_r+0xad0>
 800b4e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4ec:	d0ed      	beq.n	800b4ca <_dtoa_r+0xaa2>
 800b4ee:	f10a 0301 	add.w	r3, sl, #1
 800b4f2:	f88b 3000 	strb.w	r3, [fp]
 800b4f6:	e73c      	b.n	800b372 <_dtoa_r+0x94a>
 800b4f8:	9b05      	ldr	r3, [sp, #20]
 800b4fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b4fe:	4599      	cmp	r9, r3
 800b500:	d047      	beq.n	800b592 <_dtoa_r+0xb6a>
 800b502:	ee18 1a10 	vmov	r1, s16
 800b506:	2300      	movs	r3, #0
 800b508:	220a      	movs	r2, #10
 800b50a:	4620      	mov	r0, r4
 800b50c:	f000 f8e8 	bl	800b6e0 <__multadd>
 800b510:	45b8      	cmp	r8, r7
 800b512:	ee08 0a10 	vmov	s16, r0
 800b516:	f04f 0300 	mov.w	r3, #0
 800b51a:	f04f 020a 	mov.w	r2, #10
 800b51e:	4641      	mov	r1, r8
 800b520:	4620      	mov	r0, r4
 800b522:	d106      	bne.n	800b532 <_dtoa_r+0xb0a>
 800b524:	f000 f8dc 	bl	800b6e0 <__multadd>
 800b528:	4680      	mov	r8, r0
 800b52a:	4607      	mov	r7, r0
 800b52c:	f109 0901 	add.w	r9, r9, #1
 800b530:	e772      	b.n	800b418 <_dtoa_r+0x9f0>
 800b532:	f000 f8d5 	bl	800b6e0 <__multadd>
 800b536:	4639      	mov	r1, r7
 800b538:	4680      	mov	r8, r0
 800b53a:	2300      	movs	r3, #0
 800b53c:	220a      	movs	r2, #10
 800b53e:	4620      	mov	r0, r4
 800b540:	f000 f8ce 	bl	800b6e0 <__multadd>
 800b544:	4607      	mov	r7, r0
 800b546:	e7f1      	b.n	800b52c <_dtoa_r+0xb04>
 800b548:	9b03      	ldr	r3, [sp, #12]
 800b54a:	9302      	str	r3, [sp, #8]
 800b54c:	9d01      	ldr	r5, [sp, #4]
 800b54e:	ee18 0a10 	vmov	r0, s16
 800b552:	4631      	mov	r1, r6
 800b554:	f7ff f9da 	bl	800a90c <quorem>
 800b558:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b55c:	9b01      	ldr	r3, [sp, #4]
 800b55e:	f805 ab01 	strb.w	sl, [r5], #1
 800b562:	1aea      	subs	r2, r5, r3
 800b564:	9b02      	ldr	r3, [sp, #8]
 800b566:	4293      	cmp	r3, r2
 800b568:	dd09      	ble.n	800b57e <_dtoa_r+0xb56>
 800b56a:	ee18 1a10 	vmov	r1, s16
 800b56e:	2300      	movs	r3, #0
 800b570:	220a      	movs	r2, #10
 800b572:	4620      	mov	r0, r4
 800b574:	f000 f8b4 	bl	800b6e0 <__multadd>
 800b578:	ee08 0a10 	vmov	s16, r0
 800b57c:	e7e7      	b.n	800b54e <_dtoa_r+0xb26>
 800b57e:	9b02      	ldr	r3, [sp, #8]
 800b580:	2b00      	cmp	r3, #0
 800b582:	bfc8      	it	gt
 800b584:	461d      	movgt	r5, r3
 800b586:	9b01      	ldr	r3, [sp, #4]
 800b588:	bfd8      	it	le
 800b58a:	2501      	movle	r5, #1
 800b58c:	441d      	add	r5, r3
 800b58e:	f04f 0800 	mov.w	r8, #0
 800b592:	ee18 1a10 	vmov	r1, s16
 800b596:	2201      	movs	r2, #1
 800b598:	4620      	mov	r0, r4
 800b59a:	f000 fa51 	bl	800ba40 <__lshift>
 800b59e:	4631      	mov	r1, r6
 800b5a0:	ee08 0a10 	vmov	s16, r0
 800b5a4:	f000 fabc 	bl	800bb20 <__mcmp>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	dc91      	bgt.n	800b4d0 <_dtoa_r+0xaa8>
 800b5ac:	d102      	bne.n	800b5b4 <_dtoa_r+0xb8c>
 800b5ae:	f01a 0f01 	tst.w	sl, #1
 800b5b2:	d18d      	bne.n	800b4d0 <_dtoa_r+0xaa8>
 800b5b4:	462b      	mov	r3, r5
 800b5b6:	461d      	mov	r5, r3
 800b5b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5bc:	2a30      	cmp	r2, #48	; 0x30
 800b5be:	d0fa      	beq.n	800b5b6 <_dtoa_r+0xb8e>
 800b5c0:	e6d7      	b.n	800b372 <_dtoa_r+0x94a>
 800b5c2:	9a01      	ldr	r2, [sp, #4]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d184      	bne.n	800b4d2 <_dtoa_r+0xaaa>
 800b5c8:	9b00      	ldr	r3, [sp, #0]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	2331      	movs	r3, #49	; 0x31
 800b5d0:	7013      	strb	r3, [r2, #0]
 800b5d2:	e6ce      	b.n	800b372 <_dtoa_r+0x94a>
 800b5d4:	4b09      	ldr	r3, [pc, #36]	; (800b5fc <_dtoa_r+0xbd4>)
 800b5d6:	f7ff ba95 	b.w	800ab04 <_dtoa_r+0xdc>
 800b5da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f47f aa6e 	bne.w	800aabe <_dtoa_r+0x96>
 800b5e2:	4b07      	ldr	r3, [pc, #28]	; (800b600 <_dtoa_r+0xbd8>)
 800b5e4:	f7ff ba8e 	b.w	800ab04 <_dtoa_r+0xdc>
 800b5e8:	9b02      	ldr	r3, [sp, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	dcae      	bgt.n	800b54c <_dtoa_r+0xb24>
 800b5ee:	9b06      	ldr	r3, [sp, #24]
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	f73f aea8 	bgt.w	800b346 <_dtoa_r+0x91e>
 800b5f6:	e7a9      	b.n	800b54c <_dtoa_r+0xb24>
 800b5f8:	0800dd77 	.word	0x0800dd77
 800b5fc:	0800dcd4 	.word	0x0800dcd4
 800b600:	0800dcf8 	.word	0x0800dcf8

0800b604 <_localeconv_r>:
 800b604:	4800      	ldr	r0, [pc, #0]	; (800b608 <_localeconv_r+0x4>)
 800b606:	4770      	bx	lr
 800b608:	20000164 	.word	0x20000164

0800b60c <malloc>:
 800b60c:	4b02      	ldr	r3, [pc, #8]	; (800b618 <malloc+0xc>)
 800b60e:	4601      	mov	r1, r0
 800b610:	6818      	ldr	r0, [r3, #0]
 800b612:	f000 bc09 	b.w	800be28 <_malloc_r>
 800b616:	bf00      	nop
 800b618:	20000010 	.word	0x20000010

0800b61c <_Balloc>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b620:	4604      	mov	r4, r0
 800b622:	460d      	mov	r5, r1
 800b624:	b976      	cbnz	r6, 800b644 <_Balloc+0x28>
 800b626:	2010      	movs	r0, #16
 800b628:	f7ff fff0 	bl	800b60c <malloc>
 800b62c:	4602      	mov	r2, r0
 800b62e:	6260      	str	r0, [r4, #36]	; 0x24
 800b630:	b920      	cbnz	r0, 800b63c <_Balloc+0x20>
 800b632:	4b18      	ldr	r3, [pc, #96]	; (800b694 <_Balloc+0x78>)
 800b634:	4818      	ldr	r0, [pc, #96]	; (800b698 <_Balloc+0x7c>)
 800b636:	2166      	movs	r1, #102	; 0x66
 800b638:	f000 fdd6 	bl	800c1e8 <__assert_func>
 800b63c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b640:	6006      	str	r6, [r0, #0]
 800b642:	60c6      	str	r6, [r0, #12]
 800b644:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b646:	68f3      	ldr	r3, [r6, #12]
 800b648:	b183      	cbz	r3, 800b66c <_Balloc+0x50>
 800b64a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b652:	b9b8      	cbnz	r0, 800b684 <_Balloc+0x68>
 800b654:	2101      	movs	r1, #1
 800b656:	fa01 f605 	lsl.w	r6, r1, r5
 800b65a:	1d72      	adds	r2, r6, #5
 800b65c:	0092      	lsls	r2, r2, #2
 800b65e:	4620      	mov	r0, r4
 800b660:	f000 fb60 	bl	800bd24 <_calloc_r>
 800b664:	b160      	cbz	r0, 800b680 <_Balloc+0x64>
 800b666:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b66a:	e00e      	b.n	800b68a <_Balloc+0x6e>
 800b66c:	2221      	movs	r2, #33	; 0x21
 800b66e:	2104      	movs	r1, #4
 800b670:	4620      	mov	r0, r4
 800b672:	f000 fb57 	bl	800bd24 <_calloc_r>
 800b676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b678:	60f0      	str	r0, [r6, #12]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1e4      	bne.n	800b64a <_Balloc+0x2e>
 800b680:	2000      	movs	r0, #0
 800b682:	bd70      	pop	{r4, r5, r6, pc}
 800b684:	6802      	ldr	r2, [r0, #0]
 800b686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b68a:	2300      	movs	r3, #0
 800b68c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b690:	e7f7      	b.n	800b682 <_Balloc+0x66>
 800b692:	bf00      	nop
 800b694:	0800dd05 	.word	0x0800dd05
 800b698:	0800dd88 	.word	0x0800dd88

0800b69c <_Bfree>:
 800b69c:	b570      	push	{r4, r5, r6, lr}
 800b69e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	b976      	cbnz	r6, 800b6c4 <_Bfree+0x28>
 800b6a6:	2010      	movs	r0, #16
 800b6a8:	f7ff ffb0 	bl	800b60c <malloc>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	6268      	str	r0, [r5, #36]	; 0x24
 800b6b0:	b920      	cbnz	r0, 800b6bc <_Bfree+0x20>
 800b6b2:	4b09      	ldr	r3, [pc, #36]	; (800b6d8 <_Bfree+0x3c>)
 800b6b4:	4809      	ldr	r0, [pc, #36]	; (800b6dc <_Bfree+0x40>)
 800b6b6:	218a      	movs	r1, #138	; 0x8a
 800b6b8:	f000 fd96 	bl	800c1e8 <__assert_func>
 800b6bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6c0:	6006      	str	r6, [r0, #0]
 800b6c2:	60c6      	str	r6, [r0, #12]
 800b6c4:	b13c      	cbz	r4, 800b6d6 <_Bfree+0x3a>
 800b6c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6c8:	6862      	ldr	r2, [r4, #4]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6d0:	6021      	str	r1, [r4, #0]
 800b6d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}
 800b6d8:	0800dd05 	.word	0x0800dd05
 800b6dc:	0800dd88 	.word	0x0800dd88

0800b6e0 <__multadd>:
 800b6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e4:	690d      	ldr	r5, [r1, #16]
 800b6e6:	4607      	mov	r7, r0
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	461e      	mov	r6, r3
 800b6ec:	f101 0c14 	add.w	ip, r1, #20
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	f8dc 3000 	ldr.w	r3, [ip]
 800b6f6:	b299      	uxth	r1, r3
 800b6f8:	fb02 6101 	mla	r1, r2, r1, r6
 800b6fc:	0c1e      	lsrs	r6, r3, #16
 800b6fe:	0c0b      	lsrs	r3, r1, #16
 800b700:	fb02 3306 	mla	r3, r2, r6, r3
 800b704:	b289      	uxth	r1, r1
 800b706:	3001      	adds	r0, #1
 800b708:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b70c:	4285      	cmp	r5, r0
 800b70e:	f84c 1b04 	str.w	r1, [ip], #4
 800b712:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b716:	dcec      	bgt.n	800b6f2 <__multadd+0x12>
 800b718:	b30e      	cbz	r6, 800b75e <__multadd+0x7e>
 800b71a:	68a3      	ldr	r3, [r4, #8]
 800b71c:	42ab      	cmp	r3, r5
 800b71e:	dc19      	bgt.n	800b754 <__multadd+0x74>
 800b720:	6861      	ldr	r1, [r4, #4]
 800b722:	4638      	mov	r0, r7
 800b724:	3101      	adds	r1, #1
 800b726:	f7ff ff79 	bl	800b61c <_Balloc>
 800b72a:	4680      	mov	r8, r0
 800b72c:	b928      	cbnz	r0, 800b73a <__multadd+0x5a>
 800b72e:	4602      	mov	r2, r0
 800b730:	4b0c      	ldr	r3, [pc, #48]	; (800b764 <__multadd+0x84>)
 800b732:	480d      	ldr	r0, [pc, #52]	; (800b768 <__multadd+0x88>)
 800b734:	21b5      	movs	r1, #181	; 0xb5
 800b736:	f000 fd57 	bl	800c1e8 <__assert_func>
 800b73a:	6922      	ldr	r2, [r4, #16]
 800b73c:	3202      	adds	r2, #2
 800b73e:	f104 010c 	add.w	r1, r4, #12
 800b742:	0092      	lsls	r2, r2, #2
 800b744:	300c      	adds	r0, #12
 800b746:	f7fe fc41 	bl	8009fcc <memcpy>
 800b74a:	4621      	mov	r1, r4
 800b74c:	4638      	mov	r0, r7
 800b74e:	f7ff ffa5 	bl	800b69c <_Bfree>
 800b752:	4644      	mov	r4, r8
 800b754:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b758:	3501      	adds	r5, #1
 800b75a:	615e      	str	r6, [r3, #20]
 800b75c:	6125      	str	r5, [r4, #16]
 800b75e:	4620      	mov	r0, r4
 800b760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b764:	0800dd77 	.word	0x0800dd77
 800b768:	0800dd88 	.word	0x0800dd88

0800b76c <__hi0bits>:
 800b76c:	0c03      	lsrs	r3, r0, #16
 800b76e:	041b      	lsls	r3, r3, #16
 800b770:	b9d3      	cbnz	r3, 800b7a8 <__hi0bits+0x3c>
 800b772:	0400      	lsls	r0, r0, #16
 800b774:	2310      	movs	r3, #16
 800b776:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b77a:	bf04      	itt	eq
 800b77c:	0200      	lsleq	r0, r0, #8
 800b77e:	3308      	addeq	r3, #8
 800b780:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b784:	bf04      	itt	eq
 800b786:	0100      	lsleq	r0, r0, #4
 800b788:	3304      	addeq	r3, #4
 800b78a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b78e:	bf04      	itt	eq
 800b790:	0080      	lsleq	r0, r0, #2
 800b792:	3302      	addeq	r3, #2
 800b794:	2800      	cmp	r0, #0
 800b796:	db05      	blt.n	800b7a4 <__hi0bits+0x38>
 800b798:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b79c:	f103 0301 	add.w	r3, r3, #1
 800b7a0:	bf08      	it	eq
 800b7a2:	2320      	moveq	r3, #32
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	4770      	bx	lr
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e7e4      	b.n	800b776 <__hi0bits+0xa>

0800b7ac <__lo0bits>:
 800b7ac:	6803      	ldr	r3, [r0, #0]
 800b7ae:	f013 0207 	ands.w	r2, r3, #7
 800b7b2:	4601      	mov	r1, r0
 800b7b4:	d00b      	beq.n	800b7ce <__lo0bits+0x22>
 800b7b6:	07da      	lsls	r2, r3, #31
 800b7b8:	d423      	bmi.n	800b802 <__lo0bits+0x56>
 800b7ba:	0798      	lsls	r0, r3, #30
 800b7bc:	bf49      	itett	mi
 800b7be:	085b      	lsrmi	r3, r3, #1
 800b7c0:	089b      	lsrpl	r3, r3, #2
 800b7c2:	2001      	movmi	r0, #1
 800b7c4:	600b      	strmi	r3, [r1, #0]
 800b7c6:	bf5c      	itt	pl
 800b7c8:	600b      	strpl	r3, [r1, #0]
 800b7ca:	2002      	movpl	r0, #2
 800b7cc:	4770      	bx	lr
 800b7ce:	b298      	uxth	r0, r3
 800b7d0:	b9a8      	cbnz	r0, 800b7fe <__lo0bits+0x52>
 800b7d2:	0c1b      	lsrs	r3, r3, #16
 800b7d4:	2010      	movs	r0, #16
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	b90a      	cbnz	r2, 800b7de <__lo0bits+0x32>
 800b7da:	3008      	adds	r0, #8
 800b7dc:	0a1b      	lsrs	r3, r3, #8
 800b7de:	071a      	lsls	r2, r3, #28
 800b7e0:	bf04      	itt	eq
 800b7e2:	091b      	lsreq	r3, r3, #4
 800b7e4:	3004      	addeq	r0, #4
 800b7e6:	079a      	lsls	r2, r3, #30
 800b7e8:	bf04      	itt	eq
 800b7ea:	089b      	lsreq	r3, r3, #2
 800b7ec:	3002      	addeq	r0, #2
 800b7ee:	07da      	lsls	r2, r3, #31
 800b7f0:	d403      	bmi.n	800b7fa <__lo0bits+0x4e>
 800b7f2:	085b      	lsrs	r3, r3, #1
 800b7f4:	f100 0001 	add.w	r0, r0, #1
 800b7f8:	d005      	beq.n	800b806 <__lo0bits+0x5a>
 800b7fa:	600b      	str	r3, [r1, #0]
 800b7fc:	4770      	bx	lr
 800b7fe:	4610      	mov	r0, r2
 800b800:	e7e9      	b.n	800b7d6 <__lo0bits+0x2a>
 800b802:	2000      	movs	r0, #0
 800b804:	4770      	bx	lr
 800b806:	2020      	movs	r0, #32
 800b808:	4770      	bx	lr
	...

0800b80c <__i2b>:
 800b80c:	b510      	push	{r4, lr}
 800b80e:	460c      	mov	r4, r1
 800b810:	2101      	movs	r1, #1
 800b812:	f7ff ff03 	bl	800b61c <_Balloc>
 800b816:	4602      	mov	r2, r0
 800b818:	b928      	cbnz	r0, 800b826 <__i2b+0x1a>
 800b81a:	4b05      	ldr	r3, [pc, #20]	; (800b830 <__i2b+0x24>)
 800b81c:	4805      	ldr	r0, [pc, #20]	; (800b834 <__i2b+0x28>)
 800b81e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b822:	f000 fce1 	bl	800c1e8 <__assert_func>
 800b826:	2301      	movs	r3, #1
 800b828:	6144      	str	r4, [r0, #20]
 800b82a:	6103      	str	r3, [r0, #16]
 800b82c:	bd10      	pop	{r4, pc}
 800b82e:	bf00      	nop
 800b830:	0800dd77 	.word	0x0800dd77
 800b834:	0800dd88 	.word	0x0800dd88

0800b838 <__multiply>:
 800b838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83c:	4691      	mov	r9, r2
 800b83e:	690a      	ldr	r2, [r1, #16]
 800b840:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b844:	429a      	cmp	r2, r3
 800b846:	bfb8      	it	lt
 800b848:	460b      	movlt	r3, r1
 800b84a:	460c      	mov	r4, r1
 800b84c:	bfbc      	itt	lt
 800b84e:	464c      	movlt	r4, r9
 800b850:	4699      	movlt	r9, r3
 800b852:	6927      	ldr	r7, [r4, #16]
 800b854:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b858:	68a3      	ldr	r3, [r4, #8]
 800b85a:	6861      	ldr	r1, [r4, #4]
 800b85c:	eb07 060a 	add.w	r6, r7, sl
 800b860:	42b3      	cmp	r3, r6
 800b862:	b085      	sub	sp, #20
 800b864:	bfb8      	it	lt
 800b866:	3101      	addlt	r1, #1
 800b868:	f7ff fed8 	bl	800b61c <_Balloc>
 800b86c:	b930      	cbnz	r0, 800b87c <__multiply+0x44>
 800b86e:	4602      	mov	r2, r0
 800b870:	4b44      	ldr	r3, [pc, #272]	; (800b984 <__multiply+0x14c>)
 800b872:	4845      	ldr	r0, [pc, #276]	; (800b988 <__multiply+0x150>)
 800b874:	f240 115d 	movw	r1, #349	; 0x15d
 800b878:	f000 fcb6 	bl	800c1e8 <__assert_func>
 800b87c:	f100 0514 	add.w	r5, r0, #20
 800b880:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b884:	462b      	mov	r3, r5
 800b886:	2200      	movs	r2, #0
 800b888:	4543      	cmp	r3, r8
 800b88a:	d321      	bcc.n	800b8d0 <__multiply+0x98>
 800b88c:	f104 0314 	add.w	r3, r4, #20
 800b890:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b894:	f109 0314 	add.w	r3, r9, #20
 800b898:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b89c:	9202      	str	r2, [sp, #8]
 800b89e:	1b3a      	subs	r2, r7, r4
 800b8a0:	3a15      	subs	r2, #21
 800b8a2:	f022 0203 	bic.w	r2, r2, #3
 800b8a6:	3204      	adds	r2, #4
 800b8a8:	f104 0115 	add.w	r1, r4, #21
 800b8ac:	428f      	cmp	r7, r1
 800b8ae:	bf38      	it	cc
 800b8b0:	2204      	movcc	r2, #4
 800b8b2:	9201      	str	r2, [sp, #4]
 800b8b4:	9a02      	ldr	r2, [sp, #8]
 800b8b6:	9303      	str	r3, [sp, #12]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d80c      	bhi.n	800b8d6 <__multiply+0x9e>
 800b8bc:	2e00      	cmp	r6, #0
 800b8be:	dd03      	ble.n	800b8c8 <__multiply+0x90>
 800b8c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d05a      	beq.n	800b97e <__multiply+0x146>
 800b8c8:	6106      	str	r6, [r0, #16]
 800b8ca:	b005      	add	sp, #20
 800b8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d0:	f843 2b04 	str.w	r2, [r3], #4
 800b8d4:	e7d8      	b.n	800b888 <__multiply+0x50>
 800b8d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8da:	f1ba 0f00 	cmp.w	sl, #0
 800b8de:	d024      	beq.n	800b92a <__multiply+0xf2>
 800b8e0:	f104 0e14 	add.w	lr, r4, #20
 800b8e4:	46a9      	mov	r9, r5
 800b8e6:	f04f 0c00 	mov.w	ip, #0
 800b8ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8ee:	f8d9 1000 	ldr.w	r1, [r9]
 800b8f2:	fa1f fb82 	uxth.w	fp, r2
 800b8f6:	b289      	uxth	r1, r1
 800b8f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b900:	f8d9 2000 	ldr.w	r2, [r9]
 800b904:	4461      	add	r1, ip
 800b906:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b90a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b90e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b912:	b289      	uxth	r1, r1
 800b914:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b918:	4577      	cmp	r7, lr
 800b91a:	f849 1b04 	str.w	r1, [r9], #4
 800b91e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b922:	d8e2      	bhi.n	800b8ea <__multiply+0xb2>
 800b924:	9a01      	ldr	r2, [sp, #4]
 800b926:	f845 c002 	str.w	ip, [r5, r2]
 800b92a:	9a03      	ldr	r2, [sp, #12]
 800b92c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b930:	3304      	adds	r3, #4
 800b932:	f1b9 0f00 	cmp.w	r9, #0
 800b936:	d020      	beq.n	800b97a <__multiply+0x142>
 800b938:	6829      	ldr	r1, [r5, #0]
 800b93a:	f104 0c14 	add.w	ip, r4, #20
 800b93e:	46ae      	mov	lr, r5
 800b940:	f04f 0a00 	mov.w	sl, #0
 800b944:	f8bc b000 	ldrh.w	fp, [ip]
 800b948:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b94c:	fb09 220b 	mla	r2, r9, fp, r2
 800b950:	4492      	add	sl, r2
 800b952:	b289      	uxth	r1, r1
 800b954:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b958:	f84e 1b04 	str.w	r1, [lr], #4
 800b95c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b960:	f8be 1000 	ldrh.w	r1, [lr]
 800b964:	0c12      	lsrs	r2, r2, #16
 800b966:	fb09 1102 	mla	r1, r9, r2, r1
 800b96a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b96e:	4567      	cmp	r7, ip
 800b970:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b974:	d8e6      	bhi.n	800b944 <__multiply+0x10c>
 800b976:	9a01      	ldr	r2, [sp, #4]
 800b978:	50a9      	str	r1, [r5, r2]
 800b97a:	3504      	adds	r5, #4
 800b97c:	e79a      	b.n	800b8b4 <__multiply+0x7c>
 800b97e:	3e01      	subs	r6, #1
 800b980:	e79c      	b.n	800b8bc <__multiply+0x84>
 800b982:	bf00      	nop
 800b984:	0800dd77 	.word	0x0800dd77
 800b988:	0800dd88 	.word	0x0800dd88

0800b98c <__pow5mult>:
 800b98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b990:	4615      	mov	r5, r2
 800b992:	f012 0203 	ands.w	r2, r2, #3
 800b996:	4606      	mov	r6, r0
 800b998:	460f      	mov	r7, r1
 800b99a:	d007      	beq.n	800b9ac <__pow5mult+0x20>
 800b99c:	4c25      	ldr	r4, [pc, #148]	; (800ba34 <__pow5mult+0xa8>)
 800b99e:	3a01      	subs	r2, #1
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9a6:	f7ff fe9b 	bl	800b6e0 <__multadd>
 800b9aa:	4607      	mov	r7, r0
 800b9ac:	10ad      	asrs	r5, r5, #2
 800b9ae:	d03d      	beq.n	800ba2c <__pow5mult+0xa0>
 800b9b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9b2:	b97c      	cbnz	r4, 800b9d4 <__pow5mult+0x48>
 800b9b4:	2010      	movs	r0, #16
 800b9b6:	f7ff fe29 	bl	800b60c <malloc>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	6270      	str	r0, [r6, #36]	; 0x24
 800b9be:	b928      	cbnz	r0, 800b9cc <__pow5mult+0x40>
 800b9c0:	4b1d      	ldr	r3, [pc, #116]	; (800ba38 <__pow5mult+0xac>)
 800b9c2:	481e      	ldr	r0, [pc, #120]	; (800ba3c <__pow5mult+0xb0>)
 800b9c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b9c8:	f000 fc0e 	bl	800c1e8 <__assert_func>
 800b9cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9d0:	6004      	str	r4, [r0, #0]
 800b9d2:	60c4      	str	r4, [r0, #12]
 800b9d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9dc:	b94c      	cbnz	r4, 800b9f2 <__pow5mult+0x66>
 800b9de:	f240 2171 	movw	r1, #625	; 0x271
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f7ff ff12 	bl	800b80c <__i2b>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	6003      	str	r3, [r0, #0]
 800b9f2:	f04f 0900 	mov.w	r9, #0
 800b9f6:	07eb      	lsls	r3, r5, #31
 800b9f8:	d50a      	bpl.n	800ba10 <__pow5mult+0x84>
 800b9fa:	4639      	mov	r1, r7
 800b9fc:	4622      	mov	r2, r4
 800b9fe:	4630      	mov	r0, r6
 800ba00:	f7ff ff1a 	bl	800b838 <__multiply>
 800ba04:	4639      	mov	r1, r7
 800ba06:	4680      	mov	r8, r0
 800ba08:	4630      	mov	r0, r6
 800ba0a:	f7ff fe47 	bl	800b69c <_Bfree>
 800ba0e:	4647      	mov	r7, r8
 800ba10:	106d      	asrs	r5, r5, #1
 800ba12:	d00b      	beq.n	800ba2c <__pow5mult+0xa0>
 800ba14:	6820      	ldr	r0, [r4, #0]
 800ba16:	b938      	cbnz	r0, 800ba28 <__pow5mult+0x9c>
 800ba18:	4622      	mov	r2, r4
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	f7ff ff0b 	bl	800b838 <__multiply>
 800ba22:	6020      	str	r0, [r4, #0]
 800ba24:	f8c0 9000 	str.w	r9, [r0]
 800ba28:	4604      	mov	r4, r0
 800ba2a:	e7e4      	b.n	800b9f6 <__pow5mult+0x6a>
 800ba2c:	4638      	mov	r0, r7
 800ba2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba32:	bf00      	nop
 800ba34:	0800ded8 	.word	0x0800ded8
 800ba38:	0800dd05 	.word	0x0800dd05
 800ba3c:	0800dd88 	.word	0x0800dd88

0800ba40 <__lshift>:
 800ba40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba44:	460c      	mov	r4, r1
 800ba46:	6849      	ldr	r1, [r1, #4]
 800ba48:	6923      	ldr	r3, [r4, #16]
 800ba4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba4e:	68a3      	ldr	r3, [r4, #8]
 800ba50:	4607      	mov	r7, r0
 800ba52:	4691      	mov	r9, r2
 800ba54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba58:	f108 0601 	add.w	r6, r8, #1
 800ba5c:	42b3      	cmp	r3, r6
 800ba5e:	db0b      	blt.n	800ba78 <__lshift+0x38>
 800ba60:	4638      	mov	r0, r7
 800ba62:	f7ff fddb 	bl	800b61c <_Balloc>
 800ba66:	4605      	mov	r5, r0
 800ba68:	b948      	cbnz	r0, 800ba7e <__lshift+0x3e>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	4b2a      	ldr	r3, [pc, #168]	; (800bb18 <__lshift+0xd8>)
 800ba6e:	482b      	ldr	r0, [pc, #172]	; (800bb1c <__lshift+0xdc>)
 800ba70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba74:	f000 fbb8 	bl	800c1e8 <__assert_func>
 800ba78:	3101      	adds	r1, #1
 800ba7a:	005b      	lsls	r3, r3, #1
 800ba7c:	e7ee      	b.n	800ba5c <__lshift+0x1c>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f100 0114 	add.w	r1, r0, #20
 800ba84:	f100 0210 	add.w	r2, r0, #16
 800ba88:	4618      	mov	r0, r3
 800ba8a:	4553      	cmp	r3, sl
 800ba8c:	db37      	blt.n	800bafe <__lshift+0xbe>
 800ba8e:	6920      	ldr	r0, [r4, #16]
 800ba90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba94:	f104 0314 	add.w	r3, r4, #20
 800ba98:	f019 091f 	ands.w	r9, r9, #31
 800ba9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800baa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800baa4:	d02f      	beq.n	800bb06 <__lshift+0xc6>
 800baa6:	f1c9 0e20 	rsb	lr, r9, #32
 800baaa:	468a      	mov	sl, r1
 800baac:	f04f 0c00 	mov.w	ip, #0
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	fa02 f209 	lsl.w	r2, r2, r9
 800bab6:	ea42 020c 	orr.w	r2, r2, ip
 800baba:	f84a 2b04 	str.w	r2, [sl], #4
 800babe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bac2:	4298      	cmp	r0, r3
 800bac4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bac8:	d8f2      	bhi.n	800bab0 <__lshift+0x70>
 800baca:	1b03      	subs	r3, r0, r4
 800bacc:	3b15      	subs	r3, #21
 800bace:	f023 0303 	bic.w	r3, r3, #3
 800bad2:	3304      	adds	r3, #4
 800bad4:	f104 0215 	add.w	r2, r4, #21
 800bad8:	4290      	cmp	r0, r2
 800bada:	bf38      	it	cc
 800badc:	2304      	movcc	r3, #4
 800bade:	f841 c003 	str.w	ip, [r1, r3]
 800bae2:	f1bc 0f00 	cmp.w	ip, #0
 800bae6:	d001      	beq.n	800baec <__lshift+0xac>
 800bae8:	f108 0602 	add.w	r6, r8, #2
 800baec:	3e01      	subs	r6, #1
 800baee:	4638      	mov	r0, r7
 800baf0:	612e      	str	r6, [r5, #16]
 800baf2:	4621      	mov	r1, r4
 800baf4:	f7ff fdd2 	bl	800b69c <_Bfree>
 800baf8:	4628      	mov	r0, r5
 800bafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafe:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb02:	3301      	adds	r3, #1
 800bb04:	e7c1      	b.n	800ba8a <__lshift+0x4a>
 800bb06:	3904      	subs	r1, #4
 800bb08:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb10:	4298      	cmp	r0, r3
 800bb12:	d8f9      	bhi.n	800bb08 <__lshift+0xc8>
 800bb14:	e7ea      	b.n	800baec <__lshift+0xac>
 800bb16:	bf00      	nop
 800bb18:	0800dd77 	.word	0x0800dd77
 800bb1c:	0800dd88 	.word	0x0800dd88

0800bb20 <__mcmp>:
 800bb20:	b530      	push	{r4, r5, lr}
 800bb22:	6902      	ldr	r2, [r0, #16]
 800bb24:	690c      	ldr	r4, [r1, #16]
 800bb26:	1b12      	subs	r2, r2, r4
 800bb28:	d10e      	bne.n	800bb48 <__mcmp+0x28>
 800bb2a:	f100 0314 	add.w	r3, r0, #20
 800bb2e:	3114      	adds	r1, #20
 800bb30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb40:	42a5      	cmp	r5, r4
 800bb42:	d003      	beq.n	800bb4c <__mcmp+0x2c>
 800bb44:	d305      	bcc.n	800bb52 <__mcmp+0x32>
 800bb46:	2201      	movs	r2, #1
 800bb48:	4610      	mov	r0, r2
 800bb4a:	bd30      	pop	{r4, r5, pc}
 800bb4c:	4283      	cmp	r3, r0
 800bb4e:	d3f3      	bcc.n	800bb38 <__mcmp+0x18>
 800bb50:	e7fa      	b.n	800bb48 <__mcmp+0x28>
 800bb52:	f04f 32ff 	mov.w	r2, #4294967295
 800bb56:	e7f7      	b.n	800bb48 <__mcmp+0x28>

0800bb58 <__mdiff>:
 800bb58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	4606      	mov	r6, r0
 800bb60:	4611      	mov	r1, r2
 800bb62:	4620      	mov	r0, r4
 800bb64:	4690      	mov	r8, r2
 800bb66:	f7ff ffdb 	bl	800bb20 <__mcmp>
 800bb6a:	1e05      	subs	r5, r0, #0
 800bb6c:	d110      	bne.n	800bb90 <__mdiff+0x38>
 800bb6e:	4629      	mov	r1, r5
 800bb70:	4630      	mov	r0, r6
 800bb72:	f7ff fd53 	bl	800b61c <_Balloc>
 800bb76:	b930      	cbnz	r0, 800bb86 <__mdiff+0x2e>
 800bb78:	4b3a      	ldr	r3, [pc, #232]	; (800bc64 <__mdiff+0x10c>)
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	f240 2132 	movw	r1, #562	; 0x232
 800bb80:	4839      	ldr	r0, [pc, #228]	; (800bc68 <__mdiff+0x110>)
 800bb82:	f000 fb31 	bl	800c1e8 <__assert_func>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb90:	bfa4      	itt	ge
 800bb92:	4643      	movge	r3, r8
 800bb94:	46a0      	movge	r8, r4
 800bb96:	4630      	mov	r0, r6
 800bb98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb9c:	bfa6      	itte	ge
 800bb9e:	461c      	movge	r4, r3
 800bba0:	2500      	movge	r5, #0
 800bba2:	2501      	movlt	r5, #1
 800bba4:	f7ff fd3a 	bl	800b61c <_Balloc>
 800bba8:	b920      	cbnz	r0, 800bbb4 <__mdiff+0x5c>
 800bbaa:	4b2e      	ldr	r3, [pc, #184]	; (800bc64 <__mdiff+0x10c>)
 800bbac:	4602      	mov	r2, r0
 800bbae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbb2:	e7e5      	b.n	800bb80 <__mdiff+0x28>
 800bbb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bbb8:	6926      	ldr	r6, [r4, #16]
 800bbba:	60c5      	str	r5, [r0, #12]
 800bbbc:	f104 0914 	add.w	r9, r4, #20
 800bbc0:	f108 0514 	add.w	r5, r8, #20
 800bbc4:	f100 0e14 	add.w	lr, r0, #20
 800bbc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bbcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bbd0:	f108 0210 	add.w	r2, r8, #16
 800bbd4:	46f2      	mov	sl, lr
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bbe0:	fa1f f883 	uxth.w	r8, r3
 800bbe4:	fa11 f18b 	uxtah	r1, r1, fp
 800bbe8:	0c1b      	lsrs	r3, r3, #16
 800bbea:	eba1 0808 	sub.w	r8, r1, r8
 800bbee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbf6:	fa1f f888 	uxth.w	r8, r8
 800bbfa:	1419      	asrs	r1, r3, #16
 800bbfc:	454e      	cmp	r6, r9
 800bbfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc02:	f84a 3b04 	str.w	r3, [sl], #4
 800bc06:	d8e7      	bhi.n	800bbd8 <__mdiff+0x80>
 800bc08:	1b33      	subs	r3, r6, r4
 800bc0a:	3b15      	subs	r3, #21
 800bc0c:	f023 0303 	bic.w	r3, r3, #3
 800bc10:	3304      	adds	r3, #4
 800bc12:	3415      	adds	r4, #21
 800bc14:	42a6      	cmp	r6, r4
 800bc16:	bf38      	it	cc
 800bc18:	2304      	movcc	r3, #4
 800bc1a:	441d      	add	r5, r3
 800bc1c:	4473      	add	r3, lr
 800bc1e:	469e      	mov	lr, r3
 800bc20:	462e      	mov	r6, r5
 800bc22:	4566      	cmp	r6, ip
 800bc24:	d30e      	bcc.n	800bc44 <__mdiff+0xec>
 800bc26:	f10c 0203 	add.w	r2, ip, #3
 800bc2a:	1b52      	subs	r2, r2, r5
 800bc2c:	f022 0203 	bic.w	r2, r2, #3
 800bc30:	3d03      	subs	r5, #3
 800bc32:	45ac      	cmp	ip, r5
 800bc34:	bf38      	it	cc
 800bc36:	2200      	movcc	r2, #0
 800bc38:	441a      	add	r2, r3
 800bc3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc3e:	b17b      	cbz	r3, 800bc60 <__mdiff+0x108>
 800bc40:	6107      	str	r7, [r0, #16]
 800bc42:	e7a3      	b.n	800bb8c <__mdiff+0x34>
 800bc44:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc48:	fa11 f288 	uxtah	r2, r1, r8
 800bc4c:	1414      	asrs	r4, r2, #16
 800bc4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc52:	b292      	uxth	r2, r2
 800bc54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc58:	f84e 2b04 	str.w	r2, [lr], #4
 800bc5c:	1421      	asrs	r1, r4, #16
 800bc5e:	e7e0      	b.n	800bc22 <__mdiff+0xca>
 800bc60:	3f01      	subs	r7, #1
 800bc62:	e7ea      	b.n	800bc3a <__mdiff+0xe2>
 800bc64:	0800dd77 	.word	0x0800dd77
 800bc68:	0800dd88 	.word	0x0800dd88

0800bc6c <__d2b>:
 800bc6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc70:	4689      	mov	r9, r1
 800bc72:	2101      	movs	r1, #1
 800bc74:	ec57 6b10 	vmov	r6, r7, d0
 800bc78:	4690      	mov	r8, r2
 800bc7a:	f7ff fccf 	bl	800b61c <_Balloc>
 800bc7e:	4604      	mov	r4, r0
 800bc80:	b930      	cbnz	r0, 800bc90 <__d2b+0x24>
 800bc82:	4602      	mov	r2, r0
 800bc84:	4b25      	ldr	r3, [pc, #148]	; (800bd1c <__d2b+0xb0>)
 800bc86:	4826      	ldr	r0, [pc, #152]	; (800bd20 <__d2b+0xb4>)
 800bc88:	f240 310a 	movw	r1, #778	; 0x30a
 800bc8c:	f000 faac 	bl	800c1e8 <__assert_func>
 800bc90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc98:	bb35      	cbnz	r5, 800bce8 <__d2b+0x7c>
 800bc9a:	2e00      	cmp	r6, #0
 800bc9c:	9301      	str	r3, [sp, #4]
 800bc9e:	d028      	beq.n	800bcf2 <__d2b+0x86>
 800bca0:	4668      	mov	r0, sp
 800bca2:	9600      	str	r6, [sp, #0]
 800bca4:	f7ff fd82 	bl	800b7ac <__lo0bits>
 800bca8:	9900      	ldr	r1, [sp, #0]
 800bcaa:	b300      	cbz	r0, 800bcee <__d2b+0x82>
 800bcac:	9a01      	ldr	r2, [sp, #4]
 800bcae:	f1c0 0320 	rsb	r3, r0, #32
 800bcb2:	fa02 f303 	lsl.w	r3, r2, r3
 800bcb6:	430b      	orrs	r3, r1
 800bcb8:	40c2      	lsrs	r2, r0
 800bcba:	6163      	str	r3, [r4, #20]
 800bcbc:	9201      	str	r2, [sp, #4]
 800bcbe:	9b01      	ldr	r3, [sp, #4]
 800bcc0:	61a3      	str	r3, [r4, #24]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	bf14      	ite	ne
 800bcc6:	2202      	movne	r2, #2
 800bcc8:	2201      	moveq	r2, #1
 800bcca:	6122      	str	r2, [r4, #16]
 800bccc:	b1d5      	cbz	r5, 800bd04 <__d2b+0x98>
 800bcce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bcd2:	4405      	add	r5, r0
 800bcd4:	f8c9 5000 	str.w	r5, [r9]
 800bcd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bcdc:	f8c8 0000 	str.w	r0, [r8]
 800bce0:	4620      	mov	r0, r4
 800bce2:	b003      	add	sp, #12
 800bce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcec:	e7d5      	b.n	800bc9a <__d2b+0x2e>
 800bcee:	6161      	str	r1, [r4, #20]
 800bcf0:	e7e5      	b.n	800bcbe <__d2b+0x52>
 800bcf2:	a801      	add	r0, sp, #4
 800bcf4:	f7ff fd5a 	bl	800b7ac <__lo0bits>
 800bcf8:	9b01      	ldr	r3, [sp, #4]
 800bcfa:	6163      	str	r3, [r4, #20]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	6122      	str	r2, [r4, #16]
 800bd00:	3020      	adds	r0, #32
 800bd02:	e7e3      	b.n	800bccc <__d2b+0x60>
 800bd04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd0c:	f8c9 0000 	str.w	r0, [r9]
 800bd10:	6918      	ldr	r0, [r3, #16]
 800bd12:	f7ff fd2b 	bl	800b76c <__hi0bits>
 800bd16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd1a:	e7df      	b.n	800bcdc <__d2b+0x70>
 800bd1c:	0800dd77 	.word	0x0800dd77
 800bd20:	0800dd88 	.word	0x0800dd88

0800bd24 <_calloc_r>:
 800bd24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd26:	fba1 2402 	umull	r2, r4, r1, r2
 800bd2a:	b94c      	cbnz	r4, 800bd40 <_calloc_r+0x1c>
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	9201      	str	r2, [sp, #4]
 800bd30:	f000 f87a 	bl	800be28 <_malloc_r>
 800bd34:	9a01      	ldr	r2, [sp, #4]
 800bd36:	4605      	mov	r5, r0
 800bd38:	b930      	cbnz	r0, 800bd48 <_calloc_r+0x24>
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	b003      	add	sp, #12
 800bd3e:	bd30      	pop	{r4, r5, pc}
 800bd40:	220c      	movs	r2, #12
 800bd42:	6002      	str	r2, [r0, #0]
 800bd44:	2500      	movs	r5, #0
 800bd46:	e7f8      	b.n	800bd3a <_calloc_r+0x16>
 800bd48:	4621      	mov	r1, r4
 800bd4a:	f7fe f94d 	bl	8009fe8 <memset>
 800bd4e:	e7f4      	b.n	800bd3a <_calloc_r+0x16>

0800bd50 <_free_r>:
 800bd50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd52:	2900      	cmp	r1, #0
 800bd54:	d044      	beq.n	800bde0 <_free_r+0x90>
 800bd56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd5a:	9001      	str	r0, [sp, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f1a1 0404 	sub.w	r4, r1, #4
 800bd62:	bfb8      	it	lt
 800bd64:	18e4      	addlt	r4, r4, r3
 800bd66:	f000 fa9b 	bl	800c2a0 <__malloc_lock>
 800bd6a:	4a1e      	ldr	r2, [pc, #120]	; (800bde4 <_free_r+0x94>)
 800bd6c:	9801      	ldr	r0, [sp, #4]
 800bd6e:	6813      	ldr	r3, [r2, #0]
 800bd70:	b933      	cbnz	r3, 800bd80 <_free_r+0x30>
 800bd72:	6063      	str	r3, [r4, #4]
 800bd74:	6014      	str	r4, [r2, #0]
 800bd76:	b003      	add	sp, #12
 800bd78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd7c:	f000 ba96 	b.w	800c2ac <__malloc_unlock>
 800bd80:	42a3      	cmp	r3, r4
 800bd82:	d908      	bls.n	800bd96 <_free_r+0x46>
 800bd84:	6825      	ldr	r5, [r4, #0]
 800bd86:	1961      	adds	r1, r4, r5
 800bd88:	428b      	cmp	r3, r1
 800bd8a:	bf01      	itttt	eq
 800bd8c:	6819      	ldreq	r1, [r3, #0]
 800bd8e:	685b      	ldreq	r3, [r3, #4]
 800bd90:	1949      	addeq	r1, r1, r5
 800bd92:	6021      	streq	r1, [r4, #0]
 800bd94:	e7ed      	b.n	800bd72 <_free_r+0x22>
 800bd96:	461a      	mov	r2, r3
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	b10b      	cbz	r3, 800bda0 <_free_r+0x50>
 800bd9c:	42a3      	cmp	r3, r4
 800bd9e:	d9fa      	bls.n	800bd96 <_free_r+0x46>
 800bda0:	6811      	ldr	r1, [r2, #0]
 800bda2:	1855      	adds	r5, r2, r1
 800bda4:	42a5      	cmp	r5, r4
 800bda6:	d10b      	bne.n	800bdc0 <_free_r+0x70>
 800bda8:	6824      	ldr	r4, [r4, #0]
 800bdaa:	4421      	add	r1, r4
 800bdac:	1854      	adds	r4, r2, r1
 800bdae:	42a3      	cmp	r3, r4
 800bdb0:	6011      	str	r1, [r2, #0]
 800bdb2:	d1e0      	bne.n	800bd76 <_free_r+0x26>
 800bdb4:	681c      	ldr	r4, [r3, #0]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	6053      	str	r3, [r2, #4]
 800bdba:	4421      	add	r1, r4
 800bdbc:	6011      	str	r1, [r2, #0]
 800bdbe:	e7da      	b.n	800bd76 <_free_r+0x26>
 800bdc0:	d902      	bls.n	800bdc8 <_free_r+0x78>
 800bdc2:	230c      	movs	r3, #12
 800bdc4:	6003      	str	r3, [r0, #0]
 800bdc6:	e7d6      	b.n	800bd76 <_free_r+0x26>
 800bdc8:	6825      	ldr	r5, [r4, #0]
 800bdca:	1961      	adds	r1, r4, r5
 800bdcc:	428b      	cmp	r3, r1
 800bdce:	bf04      	itt	eq
 800bdd0:	6819      	ldreq	r1, [r3, #0]
 800bdd2:	685b      	ldreq	r3, [r3, #4]
 800bdd4:	6063      	str	r3, [r4, #4]
 800bdd6:	bf04      	itt	eq
 800bdd8:	1949      	addeq	r1, r1, r5
 800bdda:	6021      	streq	r1, [r4, #0]
 800bddc:	6054      	str	r4, [r2, #4]
 800bdde:	e7ca      	b.n	800bd76 <_free_r+0x26>
 800bde0:	b003      	add	sp, #12
 800bde2:	bd30      	pop	{r4, r5, pc}
 800bde4:	200008e4 	.word	0x200008e4

0800bde8 <sbrk_aligned>:
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	4e0e      	ldr	r6, [pc, #56]	; (800be24 <sbrk_aligned+0x3c>)
 800bdec:	460c      	mov	r4, r1
 800bdee:	6831      	ldr	r1, [r6, #0]
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	b911      	cbnz	r1, 800bdfa <sbrk_aligned+0x12>
 800bdf4:	f000 f9e8 	bl	800c1c8 <_sbrk_r>
 800bdf8:	6030      	str	r0, [r6, #0]
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	f000 f9e3 	bl	800c1c8 <_sbrk_r>
 800be02:	1c43      	adds	r3, r0, #1
 800be04:	d00a      	beq.n	800be1c <sbrk_aligned+0x34>
 800be06:	1cc4      	adds	r4, r0, #3
 800be08:	f024 0403 	bic.w	r4, r4, #3
 800be0c:	42a0      	cmp	r0, r4
 800be0e:	d007      	beq.n	800be20 <sbrk_aligned+0x38>
 800be10:	1a21      	subs	r1, r4, r0
 800be12:	4628      	mov	r0, r5
 800be14:	f000 f9d8 	bl	800c1c8 <_sbrk_r>
 800be18:	3001      	adds	r0, #1
 800be1a:	d101      	bne.n	800be20 <sbrk_aligned+0x38>
 800be1c:	f04f 34ff 	mov.w	r4, #4294967295
 800be20:	4620      	mov	r0, r4
 800be22:	bd70      	pop	{r4, r5, r6, pc}
 800be24:	200008e8 	.word	0x200008e8

0800be28 <_malloc_r>:
 800be28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be2c:	1ccd      	adds	r5, r1, #3
 800be2e:	f025 0503 	bic.w	r5, r5, #3
 800be32:	3508      	adds	r5, #8
 800be34:	2d0c      	cmp	r5, #12
 800be36:	bf38      	it	cc
 800be38:	250c      	movcc	r5, #12
 800be3a:	2d00      	cmp	r5, #0
 800be3c:	4607      	mov	r7, r0
 800be3e:	db01      	blt.n	800be44 <_malloc_r+0x1c>
 800be40:	42a9      	cmp	r1, r5
 800be42:	d905      	bls.n	800be50 <_malloc_r+0x28>
 800be44:	230c      	movs	r3, #12
 800be46:	603b      	str	r3, [r7, #0]
 800be48:	2600      	movs	r6, #0
 800be4a:	4630      	mov	r0, r6
 800be4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be50:	4e2e      	ldr	r6, [pc, #184]	; (800bf0c <_malloc_r+0xe4>)
 800be52:	f000 fa25 	bl	800c2a0 <__malloc_lock>
 800be56:	6833      	ldr	r3, [r6, #0]
 800be58:	461c      	mov	r4, r3
 800be5a:	bb34      	cbnz	r4, 800beaa <_malloc_r+0x82>
 800be5c:	4629      	mov	r1, r5
 800be5e:	4638      	mov	r0, r7
 800be60:	f7ff ffc2 	bl	800bde8 <sbrk_aligned>
 800be64:	1c43      	adds	r3, r0, #1
 800be66:	4604      	mov	r4, r0
 800be68:	d14d      	bne.n	800bf06 <_malloc_r+0xde>
 800be6a:	6834      	ldr	r4, [r6, #0]
 800be6c:	4626      	mov	r6, r4
 800be6e:	2e00      	cmp	r6, #0
 800be70:	d140      	bne.n	800bef4 <_malloc_r+0xcc>
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	4631      	mov	r1, r6
 800be76:	4638      	mov	r0, r7
 800be78:	eb04 0803 	add.w	r8, r4, r3
 800be7c:	f000 f9a4 	bl	800c1c8 <_sbrk_r>
 800be80:	4580      	cmp	r8, r0
 800be82:	d13a      	bne.n	800befa <_malloc_r+0xd2>
 800be84:	6821      	ldr	r1, [r4, #0]
 800be86:	3503      	adds	r5, #3
 800be88:	1a6d      	subs	r5, r5, r1
 800be8a:	f025 0503 	bic.w	r5, r5, #3
 800be8e:	3508      	adds	r5, #8
 800be90:	2d0c      	cmp	r5, #12
 800be92:	bf38      	it	cc
 800be94:	250c      	movcc	r5, #12
 800be96:	4629      	mov	r1, r5
 800be98:	4638      	mov	r0, r7
 800be9a:	f7ff ffa5 	bl	800bde8 <sbrk_aligned>
 800be9e:	3001      	adds	r0, #1
 800bea0:	d02b      	beq.n	800befa <_malloc_r+0xd2>
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	442b      	add	r3, r5
 800bea6:	6023      	str	r3, [r4, #0]
 800bea8:	e00e      	b.n	800bec8 <_malloc_r+0xa0>
 800beaa:	6822      	ldr	r2, [r4, #0]
 800beac:	1b52      	subs	r2, r2, r5
 800beae:	d41e      	bmi.n	800beee <_malloc_r+0xc6>
 800beb0:	2a0b      	cmp	r2, #11
 800beb2:	d916      	bls.n	800bee2 <_malloc_r+0xba>
 800beb4:	1961      	adds	r1, r4, r5
 800beb6:	42a3      	cmp	r3, r4
 800beb8:	6025      	str	r5, [r4, #0]
 800beba:	bf18      	it	ne
 800bebc:	6059      	strne	r1, [r3, #4]
 800bebe:	6863      	ldr	r3, [r4, #4]
 800bec0:	bf08      	it	eq
 800bec2:	6031      	streq	r1, [r6, #0]
 800bec4:	5162      	str	r2, [r4, r5]
 800bec6:	604b      	str	r3, [r1, #4]
 800bec8:	4638      	mov	r0, r7
 800beca:	f104 060b 	add.w	r6, r4, #11
 800bece:	f000 f9ed 	bl	800c2ac <__malloc_unlock>
 800bed2:	f026 0607 	bic.w	r6, r6, #7
 800bed6:	1d23      	adds	r3, r4, #4
 800bed8:	1af2      	subs	r2, r6, r3
 800beda:	d0b6      	beq.n	800be4a <_malloc_r+0x22>
 800bedc:	1b9b      	subs	r3, r3, r6
 800bede:	50a3      	str	r3, [r4, r2]
 800bee0:	e7b3      	b.n	800be4a <_malloc_r+0x22>
 800bee2:	6862      	ldr	r2, [r4, #4]
 800bee4:	42a3      	cmp	r3, r4
 800bee6:	bf0c      	ite	eq
 800bee8:	6032      	streq	r2, [r6, #0]
 800beea:	605a      	strne	r2, [r3, #4]
 800beec:	e7ec      	b.n	800bec8 <_malloc_r+0xa0>
 800beee:	4623      	mov	r3, r4
 800bef0:	6864      	ldr	r4, [r4, #4]
 800bef2:	e7b2      	b.n	800be5a <_malloc_r+0x32>
 800bef4:	4634      	mov	r4, r6
 800bef6:	6876      	ldr	r6, [r6, #4]
 800bef8:	e7b9      	b.n	800be6e <_malloc_r+0x46>
 800befa:	230c      	movs	r3, #12
 800befc:	603b      	str	r3, [r7, #0]
 800befe:	4638      	mov	r0, r7
 800bf00:	f000 f9d4 	bl	800c2ac <__malloc_unlock>
 800bf04:	e7a1      	b.n	800be4a <_malloc_r+0x22>
 800bf06:	6025      	str	r5, [r4, #0]
 800bf08:	e7de      	b.n	800bec8 <_malloc_r+0xa0>
 800bf0a:	bf00      	nop
 800bf0c:	200008e4 	.word	0x200008e4

0800bf10 <__ssputs_r>:
 800bf10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf14:	688e      	ldr	r6, [r1, #8]
 800bf16:	429e      	cmp	r6, r3
 800bf18:	4682      	mov	sl, r0
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	4690      	mov	r8, r2
 800bf1e:	461f      	mov	r7, r3
 800bf20:	d838      	bhi.n	800bf94 <__ssputs_r+0x84>
 800bf22:	898a      	ldrh	r2, [r1, #12]
 800bf24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf28:	d032      	beq.n	800bf90 <__ssputs_r+0x80>
 800bf2a:	6825      	ldr	r5, [r4, #0]
 800bf2c:	6909      	ldr	r1, [r1, #16]
 800bf2e:	eba5 0901 	sub.w	r9, r5, r1
 800bf32:	6965      	ldr	r5, [r4, #20]
 800bf34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	444b      	add	r3, r9
 800bf40:	106d      	asrs	r5, r5, #1
 800bf42:	429d      	cmp	r5, r3
 800bf44:	bf38      	it	cc
 800bf46:	461d      	movcc	r5, r3
 800bf48:	0553      	lsls	r3, r2, #21
 800bf4a:	d531      	bpl.n	800bfb0 <__ssputs_r+0xa0>
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	f7ff ff6b 	bl	800be28 <_malloc_r>
 800bf52:	4606      	mov	r6, r0
 800bf54:	b950      	cbnz	r0, 800bf6c <__ssputs_r+0x5c>
 800bf56:	230c      	movs	r3, #12
 800bf58:	f8ca 3000 	str.w	r3, [sl]
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf62:	81a3      	strh	r3, [r4, #12]
 800bf64:	f04f 30ff 	mov.w	r0, #4294967295
 800bf68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf6c:	6921      	ldr	r1, [r4, #16]
 800bf6e:	464a      	mov	r2, r9
 800bf70:	f7fe f82c 	bl	8009fcc <memcpy>
 800bf74:	89a3      	ldrh	r3, [r4, #12]
 800bf76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf7e:	81a3      	strh	r3, [r4, #12]
 800bf80:	6126      	str	r6, [r4, #16]
 800bf82:	6165      	str	r5, [r4, #20]
 800bf84:	444e      	add	r6, r9
 800bf86:	eba5 0509 	sub.w	r5, r5, r9
 800bf8a:	6026      	str	r6, [r4, #0]
 800bf8c:	60a5      	str	r5, [r4, #8]
 800bf8e:	463e      	mov	r6, r7
 800bf90:	42be      	cmp	r6, r7
 800bf92:	d900      	bls.n	800bf96 <__ssputs_r+0x86>
 800bf94:	463e      	mov	r6, r7
 800bf96:	6820      	ldr	r0, [r4, #0]
 800bf98:	4632      	mov	r2, r6
 800bf9a:	4641      	mov	r1, r8
 800bf9c:	f000 f966 	bl	800c26c <memmove>
 800bfa0:	68a3      	ldr	r3, [r4, #8]
 800bfa2:	1b9b      	subs	r3, r3, r6
 800bfa4:	60a3      	str	r3, [r4, #8]
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	4433      	add	r3, r6
 800bfaa:	6023      	str	r3, [r4, #0]
 800bfac:	2000      	movs	r0, #0
 800bfae:	e7db      	b.n	800bf68 <__ssputs_r+0x58>
 800bfb0:	462a      	mov	r2, r5
 800bfb2:	f000 f981 	bl	800c2b8 <_realloc_r>
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d1e1      	bne.n	800bf80 <__ssputs_r+0x70>
 800bfbc:	6921      	ldr	r1, [r4, #16]
 800bfbe:	4650      	mov	r0, sl
 800bfc0:	f7ff fec6 	bl	800bd50 <_free_r>
 800bfc4:	e7c7      	b.n	800bf56 <__ssputs_r+0x46>
	...

0800bfc8 <_svfiprintf_r>:
 800bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfcc:	4698      	mov	r8, r3
 800bfce:	898b      	ldrh	r3, [r1, #12]
 800bfd0:	061b      	lsls	r3, r3, #24
 800bfd2:	b09d      	sub	sp, #116	; 0x74
 800bfd4:	4607      	mov	r7, r0
 800bfd6:	460d      	mov	r5, r1
 800bfd8:	4614      	mov	r4, r2
 800bfda:	d50e      	bpl.n	800bffa <_svfiprintf_r+0x32>
 800bfdc:	690b      	ldr	r3, [r1, #16]
 800bfde:	b963      	cbnz	r3, 800bffa <_svfiprintf_r+0x32>
 800bfe0:	2140      	movs	r1, #64	; 0x40
 800bfe2:	f7ff ff21 	bl	800be28 <_malloc_r>
 800bfe6:	6028      	str	r0, [r5, #0]
 800bfe8:	6128      	str	r0, [r5, #16]
 800bfea:	b920      	cbnz	r0, 800bff6 <_svfiprintf_r+0x2e>
 800bfec:	230c      	movs	r3, #12
 800bfee:	603b      	str	r3, [r7, #0]
 800bff0:	f04f 30ff 	mov.w	r0, #4294967295
 800bff4:	e0d1      	b.n	800c19a <_svfiprintf_r+0x1d2>
 800bff6:	2340      	movs	r3, #64	; 0x40
 800bff8:	616b      	str	r3, [r5, #20]
 800bffa:	2300      	movs	r3, #0
 800bffc:	9309      	str	r3, [sp, #36]	; 0x24
 800bffe:	2320      	movs	r3, #32
 800c000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c004:	f8cd 800c 	str.w	r8, [sp, #12]
 800c008:	2330      	movs	r3, #48	; 0x30
 800c00a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c1b4 <_svfiprintf_r+0x1ec>
 800c00e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c012:	f04f 0901 	mov.w	r9, #1
 800c016:	4623      	mov	r3, r4
 800c018:	469a      	mov	sl, r3
 800c01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c01e:	b10a      	cbz	r2, 800c024 <_svfiprintf_r+0x5c>
 800c020:	2a25      	cmp	r2, #37	; 0x25
 800c022:	d1f9      	bne.n	800c018 <_svfiprintf_r+0x50>
 800c024:	ebba 0b04 	subs.w	fp, sl, r4
 800c028:	d00b      	beq.n	800c042 <_svfiprintf_r+0x7a>
 800c02a:	465b      	mov	r3, fp
 800c02c:	4622      	mov	r2, r4
 800c02e:	4629      	mov	r1, r5
 800c030:	4638      	mov	r0, r7
 800c032:	f7ff ff6d 	bl	800bf10 <__ssputs_r>
 800c036:	3001      	adds	r0, #1
 800c038:	f000 80aa 	beq.w	800c190 <_svfiprintf_r+0x1c8>
 800c03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c03e:	445a      	add	r2, fp
 800c040:	9209      	str	r2, [sp, #36]	; 0x24
 800c042:	f89a 3000 	ldrb.w	r3, [sl]
 800c046:	2b00      	cmp	r3, #0
 800c048:	f000 80a2 	beq.w	800c190 <_svfiprintf_r+0x1c8>
 800c04c:	2300      	movs	r3, #0
 800c04e:	f04f 32ff 	mov.w	r2, #4294967295
 800c052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c056:	f10a 0a01 	add.w	sl, sl, #1
 800c05a:	9304      	str	r3, [sp, #16]
 800c05c:	9307      	str	r3, [sp, #28]
 800c05e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c062:	931a      	str	r3, [sp, #104]	; 0x68
 800c064:	4654      	mov	r4, sl
 800c066:	2205      	movs	r2, #5
 800c068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c06c:	4851      	ldr	r0, [pc, #324]	; (800c1b4 <_svfiprintf_r+0x1ec>)
 800c06e:	f7f4 f8b7 	bl	80001e0 <memchr>
 800c072:	9a04      	ldr	r2, [sp, #16]
 800c074:	b9d8      	cbnz	r0, 800c0ae <_svfiprintf_r+0xe6>
 800c076:	06d0      	lsls	r0, r2, #27
 800c078:	bf44      	itt	mi
 800c07a:	2320      	movmi	r3, #32
 800c07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c080:	0711      	lsls	r1, r2, #28
 800c082:	bf44      	itt	mi
 800c084:	232b      	movmi	r3, #43	; 0x2b
 800c086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c08a:	f89a 3000 	ldrb.w	r3, [sl]
 800c08e:	2b2a      	cmp	r3, #42	; 0x2a
 800c090:	d015      	beq.n	800c0be <_svfiprintf_r+0xf6>
 800c092:	9a07      	ldr	r2, [sp, #28]
 800c094:	4654      	mov	r4, sl
 800c096:	2000      	movs	r0, #0
 800c098:	f04f 0c0a 	mov.w	ip, #10
 800c09c:	4621      	mov	r1, r4
 800c09e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0a2:	3b30      	subs	r3, #48	; 0x30
 800c0a4:	2b09      	cmp	r3, #9
 800c0a6:	d94e      	bls.n	800c146 <_svfiprintf_r+0x17e>
 800c0a8:	b1b0      	cbz	r0, 800c0d8 <_svfiprintf_r+0x110>
 800c0aa:	9207      	str	r2, [sp, #28]
 800c0ac:	e014      	b.n	800c0d8 <_svfiprintf_r+0x110>
 800c0ae:	eba0 0308 	sub.w	r3, r0, r8
 800c0b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	9304      	str	r3, [sp, #16]
 800c0ba:	46a2      	mov	sl, r4
 800c0bc:	e7d2      	b.n	800c064 <_svfiprintf_r+0x9c>
 800c0be:	9b03      	ldr	r3, [sp, #12]
 800c0c0:	1d19      	adds	r1, r3, #4
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	9103      	str	r1, [sp, #12]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	bfbb      	ittet	lt
 800c0ca:	425b      	neglt	r3, r3
 800c0cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c0d0:	9307      	strge	r3, [sp, #28]
 800c0d2:	9307      	strlt	r3, [sp, #28]
 800c0d4:	bfb8      	it	lt
 800c0d6:	9204      	strlt	r2, [sp, #16]
 800c0d8:	7823      	ldrb	r3, [r4, #0]
 800c0da:	2b2e      	cmp	r3, #46	; 0x2e
 800c0dc:	d10c      	bne.n	800c0f8 <_svfiprintf_r+0x130>
 800c0de:	7863      	ldrb	r3, [r4, #1]
 800c0e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c0e2:	d135      	bne.n	800c150 <_svfiprintf_r+0x188>
 800c0e4:	9b03      	ldr	r3, [sp, #12]
 800c0e6:	1d1a      	adds	r2, r3, #4
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	9203      	str	r2, [sp, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	bfb8      	it	lt
 800c0f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0f4:	3402      	adds	r4, #2
 800c0f6:	9305      	str	r3, [sp, #20]
 800c0f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c1c4 <_svfiprintf_r+0x1fc>
 800c0fc:	7821      	ldrb	r1, [r4, #0]
 800c0fe:	2203      	movs	r2, #3
 800c100:	4650      	mov	r0, sl
 800c102:	f7f4 f86d 	bl	80001e0 <memchr>
 800c106:	b140      	cbz	r0, 800c11a <_svfiprintf_r+0x152>
 800c108:	2340      	movs	r3, #64	; 0x40
 800c10a:	eba0 000a 	sub.w	r0, r0, sl
 800c10e:	fa03 f000 	lsl.w	r0, r3, r0
 800c112:	9b04      	ldr	r3, [sp, #16]
 800c114:	4303      	orrs	r3, r0
 800c116:	3401      	adds	r4, #1
 800c118:	9304      	str	r3, [sp, #16]
 800c11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c11e:	4826      	ldr	r0, [pc, #152]	; (800c1b8 <_svfiprintf_r+0x1f0>)
 800c120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c124:	2206      	movs	r2, #6
 800c126:	f7f4 f85b 	bl	80001e0 <memchr>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	d038      	beq.n	800c1a0 <_svfiprintf_r+0x1d8>
 800c12e:	4b23      	ldr	r3, [pc, #140]	; (800c1bc <_svfiprintf_r+0x1f4>)
 800c130:	bb1b      	cbnz	r3, 800c17a <_svfiprintf_r+0x1b2>
 800c132:	9b03      	ldr	r3, [sp, #12]
 800c134:	3307      	adds	r3, #7
 800c136:	f023 0307 	bic.w	r3, r3, #7
 800c13a:	3308      	adds	r3, #8
 800c13c:	9303      	str	r3, [sp, #12]
 800c13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c140:	4433      	add	r3, r6
 800c142:	9309      	str	r3, [sp, #36]	; 0x24
 800c144:	e767      	b.n	800c016 <_svfiprintf_r+0x4e>
 800c146:	fb0c 3202 	mla	r2, ip, r2, r3
 800c14a:	460c      	mov	r4, r1
 800c14c:	2001      	movs	r0, #1
 800c14e:	e7a5      	b.n	800c09c <_svfiprintf_r+0xd4>
 800c150:	2300      	movs	r3, #0
 800c152:	3401      	adds	r4, #1
 800c154:	9305      	str	r3, [sp, #20]
 800c156:	4619      	mov	r1, r3
 800c158:	f04f 0c0a 	mov.w	ip, #10
 800c15c:	4620      	mov	r0, r4
 800c15e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c162:	3a30      	subs	r2, #48	; 0x30
 800c164:	2a09      	cmp	r2, #9
 800c166:	d903      	bls.n	800c170 <_svfiprintf_r+0x1a8>
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d0c5      	beq.n	800c0f8 <_svfiprintf_r+0x130>
 800c16c:	9105      	str	r1, [sp, #20]
 800c16e:	e7c3      	b.n	800c0f8 <_svfiprintf_r+0x130>
 800c170:	fb0c 2101 	mla	r1, ip, r1, r2
 800c174:	4604      	mov	r4, r0
 800c176:	2301      	movs	r3, #1
 800c178:	e7f0      	b.n	800c15c <_svfiprintf_r+0x194>
 800c17a:	ab03      	add	r3, sp, #12
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	462a      	mov	r2, r5
 800c180:	4b0f      	ldr	r3, [pc, #60]	; (800c1c0 <_svfiprintf_r+0x1f8>)
 800c182:	a904      	add	r1, sp, #16
 800c184:	4638      	mov	r0, r7
 800c186:	f7fd ffd7 	bl	800a138 <_printf_float>
 800c18a:	1c42      	adds	r2, r0, #1
 800c18c:	4606      	mov	r6, r0
 800c18e:	d1d6      	bne.n	800c13e <_svfiprintf_r+0x176>
 800c190:	89ab      	ldrh	r3, [r5, #12]
 800c192:	065b      	lsls	r3, r3, #25
 800c194:	f53f af2c 	bmi.w	800bff0 <_svfiprintf_r+0x28>
 800c198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c19a:	b01d      	add	sp, #116	; 0x74
 800c19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a0:	ab03      	add	r3, sp, #12
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	462a      	mov	r2, r5
 800c1a6:	4b06      	ldr	r3, [pc, #24]	; (800c1c0 <_svfiprintf_r+0x1f8>)
 800c1a8:	a904      	add	r1, sp, #16
 800c1aa:	4638      	mov	r0, r7
 800c1ac:	f7fe fa68 	bl	800a680 <_printf_i>
 800c1b0:	e7eb      	b.n	800c18a <_svfiprintf_r+0x1c2>
 800c1b2:	bf00      	nop
 800c1b4:	0800dee4 	.word	0x0800dee4
 800c1b8:	0800deee 	.word	0x0800deee
 800c1bc:	0800a139 	.word	0x0800a139
 800c1c0:	0800bf11 	.word	0x0800bf11
 800c1c4:	0800deea 	.word	0x0800deea

0800c1c8 <_sbrk_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	4d06      	ldr	r5, [pc, #24]	; (800c1e4 <_sbrk_r+0x1c>)
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	602b      	str	r3, [r5, #0]
 800c1d4:	f7f5 fe5e 	bl	8001e94 <_sbrk>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_sbrk_r+0x1a>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_sbrk_r+0x1a>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	200008ec 	.word	0x200008ec

0800c1e8 <__assert_func>:
 800c1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1ea:	4614      	mov	r4, r2
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	4b09      	ldr	r3, [pc, #36]	; (800c214 <__assert_func+0x2c>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	68d8      	ldr	r0, [r3, #12]
 800c1f6:	b14c      	cbz	r4, 800c20c <__assert_func+0x24>
 800c1f8:	4b07      	ldr	r3, [pc, #28]	; (800c218 <__assert_func+0x30>)
 800c1fa:	9100      	str	r1, [sp, #0]
 800c1fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c200:	4906      	ldr	r1, [pc, #24]	; (800c21c <__assert_func+0x34>)
 800c202:	462b      	mov	r3, r5
 800c204:	f000 f80e 	bl	800c224 <fiprintf>
 800c208:	f000 faac 	bl	800c764 <abort>
 800c20c:	4b04      	ldr	r3, [pc, #16]	; (800c220 <__assert_func+0x38>)
 800c20e:	461c      	mov	r4, r3
 800c210:	e7f3      	b.n	800c1fa <__assert_func+0x12>
 800c212:	bf00      	nop
 800c214:	20000010 	.word	0x20000010
 800c218:	0800def5 	.word	0x0800def5
 800c21c:	0800df02 	.word	0x0800df02
 800c220:	0800df30 	.word	0x0800df30

0800c224 <fiprintf>:
 800c224:	b40e      	push	{r1, r2, r3}
 800c226:	b503      	push	{r0, r1, lr}
 800c228:	4601      	mov	r1, r0
 800c22a:	ab03      	add	r3, sp, #12
 800c22c:	4805      	ldr	r0, [pc, #20]	; (800c244 <fiprintf+0x20>)
 800c22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c232:	6800      	ldr	r0, [r0, #0]
 800c234:	9301      	str	r3, [sp, #4]
 800c236:	f000 f897 	bl	800c368 <_vfiprintf_r>
 800c23a:	b002      	add	sp, #8
 800c23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c240:	b003      	add	sp, #12
 800c242:	4770      	bx	lr
 800c244:	20000010 	.word	0x20000010

0800c248 <__ascii_mbtowc>:
 800c248:	b082      	sub	sp, #8
 800c24a:	b901      	cbnz	r1, 800c24e <__ascii_mbtowc+0x6>
 800c24c:	a901      	add	r1, sp, #4
 800c24e:	b142      	cbz	r2, 800c262 <__ascii_mbtowc+0x1a>
 800c250:	b14b      	cbz	r3, 800c266 <__ascii_mbtowc+0x1e>
 800c252:	7813      	ldrb	r3, [r2, #0]
 800c254:	600b      	str	r3, [r1, #0]
 800c256:	7812      	ldrb	r2, [r2, #0]
 800c258:	1e10      	subs	r0, r2, #0
 800c25a:	bf18      	it	ne
 800c25c:	2001      	movne	r0, #1
 800c25e:	b002      	add	sp, #8
 800c260:	4770      	bx	lr
 800c262:	4610      	mov	r0, r2
 800c264:	e7fb      	b.n	800c25e <__ascii_mbtowc+0x16>
 800c266:	f06f 0001 	mvn.w	r0, #1
 800c26a:	e7f8      	b.n	800c25e <__ascii_mbtowc+0x16>

0800c26c <memmove>:
 800c26c:	4288      	cmp	r0, r1
 800c26e:	b510      	push	{r4, lr}
 800c270:	eb01 0402 	add.w	r4, r1, r2
 800c274:	d902      	bls.n	800c27c <memmove+0x10>
 800c276:	4284      	cmp	r4, r0
 800c278:	4623      	mov	r3, r4
 800c27a:	d807      	bhi.n	800c28c <memmove+0x20>
 800c27c:	1e43      	subs	r3, r0, #1
 800c27e:	42a1      	cmp	r1, r4
 800c280:	d008      	beq.n	800c294 <memmove+0x28>
 800c282:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c28a:	e7f8      	b.n	800c27e <memmove+0x12>
 800c28c:	4402      	add	r2, r0
 800c28e:	4601      	mov	r1, r0
 800c290:	428a      	cmp	r2, r1
 800c292:	d100      	bne.n	800c296 <memmove+0x2a>
 800c294:	bd10      	pop	{r4, pc}
 800c296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c29a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c29e:	e7f7      	b.n	800c290 <memmove+0x24>

0800c2a0 <__malloc_lock>:
 800c2a0:	4801      	ldr	r0, [pc, #4]	; (800c2a8 <__malloc_lock+0x8>)
 800c2a2:	f000 bc1f 	b.w	800cae4 <__retarget_lock_acquire_recursive>
 800c2a6:	bf00      	nop
 800c2a8:	200008f0 	.word	0x200008f0

0800c2ac <__malloc_unlock>:
 800c2ac:	4801      	ldr	r0, [pc, #4]	; (800c2b4 <__malloc_unlock+0x8>)
 800c2ae:	f000 bc1a 	b.w	800cae6 <__retarget_lock_release_recursive>
 800c2b2:	bf00      	nop
 800c2b4:	200008f0 	.word	0x200008f0

0800c2b8 <_realloc_r>:
 800c2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2bc:	4680      	mov	r8, r0
 800c2be:	4614      	mov	r4, r2
 800c2c0:	460e      	mov	r6, r1
 800c2c2:	b921      	cbnz	r1, 800c2ce <_realloc_r+0x16>
 800c2c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	f7ff bdad 	b.w	800be28 <_malloc_r>
 800c2ce:	b92a      	cbnz	r2, 800c2dc <_realloc_r+0x24>
 800c2d0:	f7ff fd3e 	bl	800bd50 <_free_r>
 800c2d4:	4625      	mov	r5, r4
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2dc:	f000 fc6a 	bl	800cbb4 <_malloc_usable_size_r>
 800c2e0:	4284      	cmp	r4, r0
 800c2e2:	4607      	mov	r7, r0
 800c2e4:	d802      	bhi.n	800c2ec <_realloc_r+0x34>
 800c2e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2ea:	d812      	bhi.n	800c312 <_realloc_r+0x5a>
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	4640      	mov	r0, r8
 800c2f0:	f7ff fd9a 	bl	800be28 <_malloc_r>
 800c2f4:	4605      	mov	r5, r0
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d0ed      	beq.n	800c2d6 <_realloc_r+0x1e>
 800c2fa:	42bc      	cmp	r4, r7
 800c2fc:	4622      	mov	r2, r4
 800c2fe:	4631      	mov	r1, r6
 800c300:	bf28      	it	cs
 800c302:	463a      	movcs	r2, r7
 800c304:	f7fd fe62 	bl	8009fcc <memcpy>
 800c308:	4631      	mov	r1, r6
 800c30a:	4640      	mov	r0, r8
 800c30c:	f7ff fd20 	bl	800bd50 <_free_r>
 800c310:	e7e1      	b.n	800c2d6 <_realloc_r+0x1e>
 800c312:	4635      	mov	r5, r6
 800c314:	e7df      	b.n	800c2d6 <_realloc_r+0x1e>

0800c316 <__sfputc_r>:
 800c316:	6893      	ldr	r3, [r2, #8]
 800c318:	3b01      	subs	r3, #1
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	b410      	push	{r4}
 800c31e:	6093      	str	r3, [r2, #8]
 800c320:	da08      	bge.n	800c334 <__sfputc_r+0x1e>
 800c322:	6994      	ldr	r4, [r2, #24]
 800c324:	42a3      	cmp	r3, r4
 800c326:	db01      	blt.n	800c32c <__sfputc_r+0x16>
 800c328:	290a      	cmp	r1, #10
 800c32a:	d103      	bne.n	800c334 <__sfputc_r+0x1e>
 800c32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c330:	f000 b94a 	b.w	800c5c8 <__swbuf_r>
 800c334:	6813      	ldr	r3, [r2, #0]
 800c336:	1c58      	adds	r0, r3, #1
 800c338:	6010      	str	r0, [r2, #0]
 800c33a:	7019      	strb	r1, [r3, #0]
 800c33c:	4608      	mov	r0, r1
 800c33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <__sfputs_r>:
 800c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c346:	4606      	mov	r6, r0
 800c348:	460f      	mov	r7, r1
 800c34a:	4614      	mov	r4, r2
 800c34c:	18d5      	adds	r5, r2, r3
 800c34e:	42ac      	cmp	r4, r5
 800c350:	d101      	bne.n	800c356 <__sfputs_r+0x12>
 800c352:	2000      	movs	r0, #0
 800c354:	e007      	b.n	800c366 <__sfputs_r+0x22>
 800c356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c35a:	463a      	mov	r2, r7
 800c35c:	4630      	mov	r0, r6
 800c35e:	f7ff ffda 	bl	800c316 <__sfputc_r>
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	d1f3      	bne.n	800c34e <__sfputs_r+0xa>
 800c366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c368 <_vfiprintf_r>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	460d      	mov	r5, r1
 800c36e:	b09d      	sub	sp, #116	; 0x74
 800c370:	4614      	mov	r4, r2
 800c372:	4698      	mov	r8, r3
 800c374:	4606      	mov	r6, r0
 800c376:	b118      	cbz	r0, 800c380 <_vfiprintf_r+0x18>
 800c378:	6983      	ldr	r3, [r0, #24]
 800c37a:	b90b      	cbnz	r3, 800c380 <_vfiprintf_r+0x18>
 800c37c:	f000 fb14 	bl	800c9a8 <__sinit>
 800c380:	4b89      	ldr	r3, [pc, #548]	; (800c5a8 <_vfiprintf_r+0x240>)
 800c382:	429d      	cmp	r5, r3
 800c384:	d11b      	bne.n	800c3be <_vfiprintf_r+0x56>
 800c386:	6875      	ldr	r5, [r6, #4]
 800c388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c38a:	07d9      	lsls	r1, r3, #31
 800c38c:	d405      	bmi.n	800c39a <_vfiprintf_r+0x32>
 800c38e:	89ab      	ldrh	r3, [r5, #12]
 800c390:	059a      	lsls	r2, r3, #22
 800c392:	d402      	bmi.n	800c39a <_vfiprintf_r+0x32>
 800c394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c396:	f000 fba5 	bl	800cae4 <__retarget_lock_acquire_recursive>
 800c39a:	89ab      	ldrh	r3, [r5, #12]
 800c39c:	071b      	lsls	r3, r3, #28
 800c39e:	d501      	bpl.n	800c3a4 <_vfiprintf_r+0x3c>
 800c3a0:	692b      	ldr	r3, [r5, #16]
 800c3a2:	b9eb      	cbnz	r3, 800c3e0 <_vfiprintf_r+0x78>
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f000 f96e 	bl	800c688 <__swsetup_r>
 800c3ac:	b1c0      	cbz	r0, 800c3e0 <_vfiprintf_r+0x78>
 800c3ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3b0:	07dc      	lsls	r4, r3, #31
 800c3b2:	d50e      	bpl.n	800c3d2 <_vfiprintf_r+0x6a>
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b8:	b01d      	add	sp, #116	; 0x74
 800c3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3be:	4b7b      	ldr	r3, [pc, #492]	; (800c5ac <_vfiprintf_r+0x244>)
 800c3c0:	429d      	cmp	r5, r3
 800c3c2:	d101      	bne.n	800c3c8 <_vfiprintf_r+0x60>
 800c3c4:	68b5      	ldr	r5, [r6, #8]
 800c3c6:	e7df      	b.n	800c388 <_vfiprintf_r+0x20>
 800c3c8:	4b79      	ldr	r3, [pc, #484]	; (800c5b0 <_vfiprintf_r+0x248>)
 800c3ca:	429d      	cmp	r5, r3
 800c3cc:	bf08      	it	eq
 800c3ce:	68f5      	ldreq	r5, [r6, #12]
 800c3d0:	e7da      	b.n	800c388 <_vfiprintf_r+0x20>
 800c3d2:	89ab      	ldrh	r3, [r5, #12]
 800c3d4:	0598      	lsls	r0, r3, #22
 800c3d6:	d4ed      	bmi.n	800c3b4 <_vfiprintf_r+0x4c>
 800c3d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3da:	f000 fb84 	bl	800cae6 <__retarget_lock_release_recursive>
 800c3de:	e7e9      	b.n	800c3b4 <_vfiprintf_r+0x4c>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e4:	2320      	movs	r3, #32
 800c3e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3ee:	2330      	movs	r3, #48	; 0x30
 800c3f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c5b4 <_vfiprintf_r+0x24c>
 800c3f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3f8:	f04f 0901 	mov.w	r9, #1
 800c3fc:	4623      	mov	r3, r4
 800c3fe:	469a      	mov	sl, r3
 800c400:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c404:	b10a      	cbz	r2, 800c40a <_vfiprintf_r+0xa2>
 800c406:	2a25      	cmp	r2, #37	; 0x25
 800c408:	d1f9      	bne.n	800c3fe <_vfiprintf_r+0x96>
 800c40a:	ebba 0b04 	subs.w	fp, sl, r4
 800c40e:	d00b      	beq.n	800c428 <_vfiprintf_r+0xc0>
 800c410:	465b      	mov	r3, fp
 800c412:	4622      	mov	r2, r4
 800c414:	4629      	mov	r1, r5
 800c416:	4630      	mov	r0, r6
 800c418:	f7ff ff94 	bl	800c344 <__sfputs_r>
 800c41c:	3001      	adds	r0, #1
 800c41e:	f000 80aa 	beq.w	800c576 <_vfiprintf_r+0x20e>
 800c422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c424:	445a      	add	r2, fp
 800c426:	9209      	str	r2, [sp, #36]	; 0x24
 800c428:	f89a 3000 	ldrb.w	r3, [sl]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f000 80a2 	beq.w	800c576 <_vfiprintf_r+0x20e>
 800c432:	2300      	movs	r3, #0
 800c434:	f04f 32ff 	mov.w	r2, #4294967295
 800c438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c43c:	f10a 0a01 	add.w	sl, sl, #1
 800c440:	9304      	str	r3, [sp, #16]
 800c442:	9307      	str	r3, [sp, #28]
 800c444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c448:	931a      	str	r3, [sp, #104]	; 0x68
 800c44a:	4654      	mov	r4, sl
 800c44c:	2205      	movs	r2, #5
 800c44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c452:	4858      	ldr	r0, [pc, #352]	; (800c5b4 <_vfiprintf_r+0x24c>)
 800c454:	f7f3 fec4 	bl	80001e0 <memchr>
 800c458:	9a04      	ldr	r2, [sp, #16]
 800c45a:	b9d8      	cbnz	r0, 800c494 <_vfiprintf_r+0x12c>
 800c45c:	06d1      	lsls	r1, r2, #27
 800c45e:	bf44      	itt	mi
 800c460:	2320      	movmi	r3, #32
 800c462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c466:	0713      	lsls	r3, r2, #28
 800c468:	bf44      	itt	mi
 800c46a:	232b      	movmi	r3, #43	; 0x2b
 800c46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c470:	f89a 3000 	ldrb.w	r3, [sl]
 800c474:	2b2a      	cmp	r3, #42	; 0x2a
 800c476:	d015      	beq.n	800c4a4 <_vfiprintf_r+0x13c>
 800c478:	9a07      	ldr	r2, [sp, #28]
 800c47a:	4654      	mov	r4, sl
 800c47c:	2000      	movs	r0, #0
 800c47e:	f04f 0c0a 	mov.w	ip, #10
 800c482:	4621      	mov	r1, r4
 800c484:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c488:	3b30      	subs	r3, #48	; 0x30
 800c48a:	2b09      	cmp	r3, #9
 800c48c:	d94e      	bls.n	800c52c <_vfiprintf_r+0x1c4>
 800c48e:	b1b0      	cbz	r0, 800c4be <_vfiprintf_r+0x156>
 800c490:	9207      	str	r2, [sp, #28]
 800c492:	e014      	b.n	800c4be <_vfiprintf_r+0x156>
 800c494:	eba0 0308 	sub.w	r3, r0, r8
 800c498:	fa09 f303 	lsl.w	r3, r9, r3
 800c49c:	4313      	orrs	r3, r2
 800c49e:	9304      	str	r3, [sp, #16]
 800c4a0:	46a2      	mov	sl, r4
 800c4a2:	e7d2      	b.n	800c44a <_vfiprintf_r+0xe2>
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	1d19      	adds	r1, r3, #4
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	9103      	str	r1, [sp, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	bfbb      	ittet	lt
 800c4b0:	425b      	neglt	r3, r3
 800c4b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c4b6:	9307      	strge	r3, [sp, #28]
 800c4b8:	9307      	strlt	r3, [sp, #28]
 800c4ba:	bfb8      	it	lt
 800c4bc:	9204      	strlt	r2, [sp, #16]
 800c4be:	7823      	ldrb	r3, [r4, #0]
 800c4c0:	2b2e      	cmp	r3, #46	; 0x2e
 800c4c2:	d10c      	bne.n	800c4de <_vfiprintf_r+0x176>
 800c4c4:	7863      	ldrb	r3, [r4, #1]
 800c4c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4c8:	d135      	bne.n	800c536 <_vfiprintf_r+0x1ce>
 800c4ca:	9b03      	ldr	r3, [sp, #12]
 800c4cc:	1d1a      	adds	r2, r3, #4
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	9203      	str	r2, [sp, #12]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	bfb8      	it	lt
 800c4d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4da:	3402      	adds	r4, #2
 800c4dc:	9305      	str	r3, [sp, #20]
 800c4de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c5c4 <_vfiprintf_r+0x25c>
 800c4e2:	7821      	ldrb	r1, [r4, #0]
 800c4e4:	2203      	movs	r2, #3
 800c4e6:	4650      	mov	r0, sl
 800c4e8:	f7f3 fe7a 	bl	80001e0 <memchr>
 800c4ec:	b140      	cbz	r0, 800c500 <_vfiprintf_r+0x198>
 800c4ee:	2340      	movs	r3, #64	; 0x40
 800c4f0:	eba0 000a 	sub.w	r0, r0, sl
 800c4f4:	fa03 f000 	lsl.w	r0, r3, r0
 800c4f8:	9b04      	ldr	r3, [sp, #16]
 800c4fa:	4303      	orrs	r3, r0
 800c4fc:	3401      	adds	r4, #1
 800c4fe:	9304      	str	r3, [sp, #16]
 800c500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c504:	482c      	ldr	r0, [pc, #176]	; (800c5b8 <_vfiprintf_r+0x250>)
 800c506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c50a:	2206      	movs	r2, #6
 800c50c:	f7f3 fe68 	bl	80001e0 <memchr>
 800c510:	2800      	cmp	r0, #0
 800c512:	d03f      	beq.n	800c594 <_vfiprintf_r+0x22c>
 800c514:	4b29      	ldr	r3, [pc, #164]	; (800c5bc <_vfiprintf_r+0x254>)
 800c516:	bb1b      	cbnz	r3, 800c560 <_vfiprintf_r+0x1f8>
 800c518:	9b03      	ldr	r3, [sp, #12]
 800c51a:	3307      	adds	r3, #7
 800c51c:	f023 0307 	bic.w	r3, r3, #7
 800c520:	3308      	adds	r3, #8
 800c522:	9303      	str	r3, [sp, #12]
 800c524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c526:	443b      	add	r3, r7
 800c528:	9309      	str	r3, [sp, #36]	; 0x24
 800c52a:	e767      	b.n	800c3fc <_vfiprintf_r+0x94>
 800c52c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c530:	460c      	mov	r4, r1
 800c532:	2001      	movs	r0, #1
 800c534:	e7a5      	b.n	800c482 <_vfiprintf_r+0x11a>
 800c536:	2300      	movs	r3, #0
 800c538:	3401      	adds	r4, #1
 800c53a:	9305      	str	r3, [sp, #20]
 800c53c:	4619      	mov	r1, r3
 800c53e:	f04f 0c0a 	mov.w	ip, #10
 800c542:	4620      	mov	r0, r4
 800c544:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c548:	3a30      	subs	r2, #48	; 0x30
 800c54a:	2a09      	cmp	r2, #9
 800c54c:	d903      	bls.n	800c556 <_vfiprintf_r+0x1ee>
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d0c5      	beq.n	800c4de <_vfiprintf_r+0x176>
 800c552:	9105      	str	r1, [sp, #20]
 800c554:	e7c3      	b.n	800c4de <_vfiprintf_r+0x176>
 800c556:	fb0c 2101 	mla	r1, ip, r1, r2
 800c55a:	4604      	mov	r4, r0
 800c55c:	2301      	movs	r3, #1
 800c55e:	e7f0      	b.n	800c542 <_vfiprintf_r+0x1da>
 800c560:	ab03      	add	r3, sp, #12
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	462a      	mov	r2, r5
 800c566:	4b16      	ldr	r3, [pc, #88]	; (800c5c0 <_vfiprintf_r+0x258>)
 800c568:	a904      	add	r1, sp, #16
 800c56a:	4630      	mov	r0, r6
 800c56c:	f7fd fde4 	bl	800a138 <_printf_float>
 800c570:	4607      	mov	r7, r0
 800c572:	1c78      	adds	r0, r7, #1
 800c574:	d1d6      	bne.n	800c524 <_vfiprintf_r+0x1bc>
 800c576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c578:	07d9      	lsls	r1, r3, #31
 800c57a:	d405      	bmi.n	800c588 <_vfiprintf_r+0x220>
 800c57c:	89ab      	ldrh	r3, [r5, #12]
 800c57e:	059a      	lsls	r2, r3, #22
 800c580:	d402      	bmi.n	800c588 <_vfiprintf_r+0x220>
 800c582:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c584:	f000 faaf 	bl	800cae6 <__retarget_lock_release_recursive>
 800c588:	89ab      	ldrh	r3, [r5, #12]
 800c58a:	065b      	lsls	r3, r3, #25
 800c58c:	f53f af12 	bmi.w	800c3b4 <_vfiprintf_r+0x4c>
 800c590:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c592:	e711      	b.n	800c3b8 <_vfiprintf_r+0x50>
 800c594:	ab03      	add	r3, sp, #12
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	462a      	mov	r2, r5
 800c59a:	4b09      	ldr	r3, [pc, #36]	; (800c5c0 <_vfiprintf_r+0x258>)
 800c59c:	a904      	add	r1, sp, #16
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f7fe f86e 	bl	800a680 <_printf_i>
 800c5a4:	e7e4      	b.n	800c570 <_vfiprintf_r+0x208>
 800c5a6:	bf00      	nop
 800c5a8:	0800e05c 	.word	0x0800e05c
 800c5ac:	0800e07c 	.word	0x0800e07c
 800c5b0:	0800e03c 	.word	0x0800e03c
 800c5b4:	0800dee4 	.word	0x0800dee4
 800c5b8:	0800deee 	.word	0x0800deee
 800c5bc:	0800a139 	.word	0x0800a139
 800c5c0:	0800c345 	.word	0x0800c345
 800c5c4:	0800deea 	.word	0x0800deea

0800c5c8 <__swbuf_r>:
 800c5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ca:	460e      	mov	r6, r1
 800c5cc:	4614      	mov	r4, r2
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	b118      	cbz	r0, 800c5da <__swbuf_r+0x12>
 800c5d2:	6983      	ldr	r3, [r0, #24]
 800c5d4:	b90b      	cbnz	r3, 800c5da <__swbuf_r+0x12>
 800c5d6:	f000 f9e7 	bl	800c9a8 <__sinit>
 800c5da:	4b21      	ldr	r3, [pc, #132]	; (800c660 <__swbuf_r+0x98>)
 800c5dc:	429c      	cmp	r4, r3
 800c5de:	d12b      	bne.n	800c638 <__swbuf_r+0x70>
 800c5e0:	686c      	ldr	r4, [r5, #4]
 800c5e2:	69a3      	ldr	r3, [r4, #24]
 800c5e4:	60a3      	str	r3, [r4, #8]
 800c5e6:	89a3      	ldrh	r3, [r4, #12]
 800c5e8:	071a      	lsls	r2, r3, #28
 800c5ea:	d52f      	bpl.n	800c64c <__swbuf_r+0x84>
 800c5ec:	6923      	ldr	r3, [r4, #16]
 800c5ee:	b36b      	cbz	r3, 800c64c <__swbuf_r+0x84>
 800c5f0:	6923      	ldr	r3, [r4, #16]
 800c5f2:	6820      	ldr	r0, [r4, #0]
 800c5f4:	1ac0      	subs	r0, r0, r3
 800c5f6:	6963      	ldr	r3, [r4, #20]
 800c5f8:	b2f6      	uxtb	r6, r6
 800c5fa:	4283      	cmp	r3, r0
 800c5fc:	4637      	mov	r7, r6
 800c5fe:	dc04      	bgt.n	800c60a <__swbuf_r+0x42>
 800c600:	4621      	mov	r1, r4
 800c602:	4628      	mov	r0, r5
 800c604:	f000 f93c 	bl	800c880 <_fflush_r>
 800c608:	bb30      	cbnz	r0, 800c658 <__swbuf_r+0x90>
 800c60a:	68a3      	ldr	r3, [r4, #8]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	60a3      	str	r3, [r4, #8]
 800c610:	6823      	ldr	r3, [r4, #0]
 800c612:	1c5a      	adds	r2, r3, #1
 800c614:	6022      	str	r2, [r4, #0]
 800c616:	701e      	strb	r6, [r3, #0]
 800c618:	6963      	ldr	r3, [r4, #20]
 800c61a:	3001      	adds	r0, #1
 800c61c:	4283      	cmp	r3, r0
 800c61e:	d004      	beq.n	800c62a <__swbuf_r+0x62>
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	07db      	lsls	r3, r3, #31
 800c624:	d506      	bpl.n	800c634 <__swbuf_r+0x6c>
 800c626:	2e0a      	cmp	r6, #10
 800c628:	d104      	bne.n	800c634 <__swbuf_r+0x6c>
 800c62a:	4621      	mov	r1, r4
 800c62c:	4628      	mov	r0, r5
 800c62e:	f000 f927 	bl	800c880 <_fflush_r>
 800c632:	b988      	cbnz	r0, 800c658 <__swbuf_r+0x90>
 800c634:	4638      	mov	r0, r7
 800c636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c638:	4b0a      	ldr	r3, [pc, #40]	; (800c664 <__swbuf_r+0x9c>)
 800c63a:	429c      	cmp	r4, r3
 800c63c:	d101      	bne.n	800c642 <__swbuf_r+0x7a>
 800c63e:	68ac      	ldr	r4, [r5, #8]
 800c640:	e7cf      	b.n	800c5e2 <__swbuf_r+0x1a>
 800c642:	4b09      	ldr	r3, [pc, #36]	; (800c668 <__swbuf_r+0xa0>)
 800c644:	429c      	cmp	r4, r3
 800c646:	bf08      	it	eq
 800c648:	68ec      	ldreq	r4, [r5, #12]
 800c64a:	e7ca      	b.n	800c5e2 <__swbuf_r+0x1a>
 800c64c:	4621      	mov	r1, r4
 800c64e:	4628      	mov	r0, r5
 800c650:	f000 f81a 	bl	800c688 <__swsetup_r>
 800c654:	2800      	cmp	r0, #0
 800c656:	d0cb      	beq.n	800c5f0 <__swbuf_r+0x28>
 800c658:	f04f 37ff 	mov.w	r7, #4294967295
 800c65c:	e7ea      	b.n	800c634 <__swbuf_r+0x6c>
 800c65e:	bf00      	nop
 800c660:	0800e05c 	.word	0x0800e05c
 800c664:	0800e07c 	.word	0x0800e07c
 800c668:	0800e03c 	.word	0x0800e03c

0800c66c <__ascii_wctomb>:
 800c66c:	b149      	cbz	r1, 800c682 <__ascii_wctomb+0x16>
 800c66e:	2aff      	cmp	r2, #255	; 0xff
 800c670:	bf85      	ittet	hi
 800c672:	238a      	movhi	r3, #138	; 0x8a
 800c674:	6003      	strhi	r3, [r0, #0]
 800c676:	700a      	strbls	r2, [r1, #0]
 800c678:	f04f 30ff 	movhi.w	r0, #4294967295
 800c67c:	bf98      	it	ls
 800c67e:	2001      	movls	r0, #1
 800c680:	4770      	bx	lr
 800c682:	4608      	mov	r0, r1
 800c684:	4770      	bx	lr
	...

0800c688 <__swsetup_r>:
 800c688:	4b32      	ldr	r3, [pc, #200]	; (800c754 <__swsetup_r+0xcc>)
 800c68a:	b570      	push	{r4, r5, r6, lr}
 800c68c:	681d      	ldr	r5, [r3, #0]
 800c68e:	4606      	mov	r6, r0
 800c690:	460c      	mov	r4, r1
 800c692:	b125      	cbz	r5, 800c69e <__swsetup_r+0x16>
 800c694:	69ab      	ldr	r3, [r5, #24]
 800c696:	b913      	cbnz	r3, 800c69e <__swsetup_r+0x16>
 800c698:	4628      	mov	r0, r5
 800c69a:	f000 f985 	bl	800c9a8 <__sinit>
 800c69e:	4b2e      	ldr	r3, [pc, #184]	; (800c758 <__swsetup_r+0xd0>)
 800c6a0:	429c      	cmp	r4, r3
 800c6a2:	d10f      	bne.n	800c6c4 <__swsetup_r+0x3c>
 800c6a4:	686c      	ldr	r4, [r5, #4]
 800c6a6:	89a3      	ldrh	r3, [r4, #12]
 800c6a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6ac:	0719      	lsls	r1, r3, #28
 800c6ae:	d42c      	bmi.n	800c70a <__swsetup_r+0x82>
 800c6b0:	06dd      	lsls	r5, r3, #27
 800c6b2:	d411      	bmi.n	800c6d8 <__swsetup_r+0x50>
 800c6b4:	2309      	movs	r3, #9
 800c6b6:	6033      	str	r3, [r6, #0]
 800c6b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6bc:	81a3      	strh	r3, [r4, #12]
 800c6be:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c2:	e03e      	b.n	800c742 <__swsetup_r+0xba>
 800c6c4:	4b25      	ldr	r3, [pc, #148]	; (800c75c <__swsetup_r+0xd4>)
 800c6c6:	429c      	cmp	r4, r3
 800c6c8:	d101      	bne.n	800c6ce <__swsetup_r+0x46>
 800c6ca:	68ac      	ldr	r4, [r5, #8]
 800c6cc:	e7eb      	b.n	800c6a6 <__swsetup_r+0x1e>
 800c6ce:	4b24      	ldr	r3, [pc, #144]	; (800c760 <__swsetup_r+0xd8>)
 800c6d0:	429c      	cmp	r4, r3
 800c6d2:	bf08      	it	eq
 800c6d4:	68ec      	ldreq	r4, [r5, #12]
 800c6d6:	e7e6      	b.n	800c6a6 <__swsetup_r+0x1e>
 800c6d8:	0758      	lsls	r0, r3, #29
 800c6da:	d512      	bpl.n	800c702 <__swsetup_r+0x7a>
 800c6dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6de:	b141      	cbz	r1, 800c6f2 <__swsetup_r+0x6a>
 800c6e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6e4:	4299      	cmp	r1, r3
 800c6e6:	d002      	beq.n	800c6ee <__swsetup_r+0x66>
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f7ff fb31 	bl	800bd50 <_free_r>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	6363      	str	r3, [r4, #52]	; 0x34
 800c6f2:	89a3      	ldrh	r3, [r4, #12]
 800c6f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6f8:	81a3      	strh	r3, [r4, #12]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	6063      	str	r3, [r4, #4]
 800c6fe:	6923      	ldr	r3, [r4, #16]
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	89a3      	ldrh	r3, [r4, #12]
 800c704:	f043 0308 	orr.w	r3, r3, #8
 800c708:	81a3      	strh	r3, [r4, #12]
 800c70a:	6923      	ldr	r3, [r4, #16]
 800c70c:	b94b      	cbnz	r3, 800c722 <__swsetup_r+0x9a>
 800c70e:	89a3      	ldrh	r3, [r4, #12]
 800c710:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c718:	d003      	beq.n	800c722 <__swsetup_r+0x9a>
 800c71a:	4621      	mov	r1, r4
 800c71c:	4630      	mov	r0, r6
 800c71e:	f000 fa09 	bl	800cb34 <__smakebuf_r>
 800c722:	89a0      	ldrh	r0, [r4, #12]
 800c724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c728:	f010 0301 	ands.w	r3, r0, #1
 800c72c:	d00a      	beq.n	800c744 <__swsetup_r+0xbc>
 800c72e:	2300      	movs	r3, #0
 800c730:	60a3      	str	r3, [r4, #8]
 800c732:	6963      	ldr	r3, [r4, #20]
 800c734:	425b      	negs	r3, r3
 800c736:	61a3      	str	r3, [r4, #24]
 800c738:	6923      	ldr	r3, [r4, #16]
 800c73a:	b943      	cbnz	r3, 800c74e <__swsetup_r+0xc6>
 800c73c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c740:	d1ba      	bne.n	800c6b8 <__swsetup_r+0x30>
 800c742:	bd70      	pop	{r4, r5, r6, pc}
 800c744:	0781      	lsls	r1, r0, #30
 800c746:	bf58      	it	pl
 800c748:	6963      	ldrpl	r3, [r4, #20]
 800c74a:	60a3      	str	r3, [r4, #8]
 800c74c:	e7f4      	b.n	800c738 <__swsetup_r+0xb0>
 800c74e:	2000      	movs	r0, #0
 800c750:	e7f7      	b.n	800c742 <__swsetup_r+0xba>
 800c752:	bf00      	nop
 800c754:	20000010 	.word	0x20000010
 800c758:	0800e05c 	.word	0x0800e05c
 800c75c:	0800e07c 	.word	0x0800e07c
 800c760:	0800e03c 	.word	0x0800e03c

0800c764 <abort>:
 800c764:	b508      	push	{r3, lr}
 800c766:	2006      	movs	r0, #6
 800c768:	f000 fa54 	bl	800cc14 <raise>
 800c76c:	2001      	movs	r0, #1
 800c76e:	f7f5 fb19 	bl	8001da4 <_exit>
	...

0800c774 <__sflush_r>:
 800c774:	898a      	ldrh	r2, [r1, #12]
 800c776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c77a:	4605      	mov	r5, r0
 800c77c:	0710      	lsls	r0, r2, #28
 800c77e:	460c      	mov	r4, r1
 800c780:	d458      	bmi.n	800c834 <__sflush_r+0xc0>
 800c782:	684b      	ldr	r3, [r1, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	dc05      	bgt.n	800c794 <__sflush_r+0x20>
 800c788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	dc02      	bgt.n	800c794 <__sflush_r+0x20>
 800c78e:	2000      	movs	r0, #0
 800c790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c796:	2e00      	cmp	r6, #0
 800c798:	d0f9      	beq.n	800c78e <__sflush_r+0x1a>
 800c79a:	2300      	movs	r3, #0
 800c79c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7a0:	682f      	ldr	r7, [r5, #0]
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	d032      	beq.n	800c80c <__sflush_r+0x98>
 800c7a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7a8:	89a3      	ldrh	r3, [r4, #12]
 800c7aa:	075a      	lsls	r2, r3, #29
 800c7ac:	d505      	bpl.n	800c7ba <__sflush_r+0x46>
 800c7ae:	6863      	ldr	r3, [r4, #4]
 800c7b0:	1ac0      	subs	r0, r0, r3
 800c7b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7b4:	b10b      	cbz	r3, 800c7ba <__sflush_r+0x46>
 800c7b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7b8:	1ac0      	subs	r0, r0, r3
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	4602      	mov	r2, r0
 800c7be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7c0:	6a21      	ldr	r1, [r4, #32]
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	47b0      	blx	r6
 800c7c6:	1c43      	adds	r3, r0, #1
 800c7c8:	89a3      	ldrh	r3, [r4, #12]
 800c7ca:	d106      	bne.n	800c7da <__sflush_r+0x66>
 800c7cc:	6829      	ldr	r1, [r5, #0]
 800c7ce:	291d      	cmp	r1, #29
 800c7d0:	d82c      	bhi.n	800c82c <__sflush_r+0xb8>
 800c7d2:	4a2a      	ldr	r2, [pc, #168]	; (800c87c <__sflush_r+0x108>)
 800c7d4:	40ca      	lsrs	r2, r1
 800c7d6:	07d6      	lsls	r6, r2, #31
 800c7d8:	d528      	bpl.n	800c82c <__sflush_r+0xb8>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	6062      	str	r2, [r4, #4]
 800c7de:	04d9      	lsls	r1, r3, #19
 800c7e0:	6922      	ldr	r2, [r4, #16]
 800c7e2:	6022      	str	r2, [r4, #0]
 800c7e4:	d504      	bpl.n	800c7f0 <__sflush_r+0x7c>
 800c7e6:	1c42      	adds	r2, r0, #1
 800c7e8:	d101      	bne.n	800c7ee <__sflush_r+0x7a>
 800c7ea:	682b      	ldr	r3, [r5, #0]
 800c7ec:	b903      	cbnz	r3, 800c7f0 <__sflush_r+0x7c>
 800c7ee:	6560      	str	r0, [r4, #84]	; 0x54
 800c7f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7f2:	602f      	str	r7, [r5, #0]
 800c7f4:	2900      	cmp	r1, #0
 800c7f6:	d0ca      	beq.n	800c78e <__sflush_r+0x1a>
 800c7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7fc:	4299      	cmp	r1, r3
 800c7fe:	d002      	beq.n	800c806 <__sflush_r+0x92>
 800c800:	4628      	mov	r0, r5
 800c802:	f7ff faa5 	bl	800bd50 <_free_r>
 800c806:	2000      	movs	r0, #0
 800c808:	6360      	str	r0, [r4, #52]	; 0x34
 800c80a:	e7c1      	b.n	800c790 <__sflush_r+0x1c>
 800c80c:	6a21      	ldr	r1, [r4, #32]
 800c80e:	2301      	movs	r3, #1
 800c810:	4628      	mov	r0, r5
 800c812:	47b0      	blx	r6
 800c814:	1c41      	adds	r1, r0, #1
 800c816:	d1c7      	bne.n	800c7a8 <__sflush_r+0x34>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0c4      	beq.n	800c7a8 <__sflush_r+0x34>
 800c81e:	2b1d      	cmp	r3, #29
 800c820:	d001      	beq.n	800c826 <__sflush_r+0xb2>
 800c822:	2b16      	cmp	r3, #22
 800c824:	d101      	bne.n	800c82a <__sflush_r+0xb6>
 800c826:	602f      	str	r7, [r5, #0]
 800c828:	e7b1      	b.n	800c78e <__sflush_r+0x1a>
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	e7ad      	b.n	800c790 <__sflush_r+0x1c>
 800c834:	690f      	ldr	r7, [r1, #16]
 800c836:	2f00      	cmp	r7, #0
 800c838:	d0a9      	beq.n	800c78e <__sflush_r+0x1a>
 800c83a:	0793      	lsls	r3, r2, #30
 800c83c:	680e      	ldr	r6, [r1, #0]
 800c83e:	bf08      	it	eq
 800c840:	694b      	ldreq	r3, [r1, #20]
 800c842:	600f      	str	r7, [r1, #0]
 800c844:	bf18      	it	ne
 800c846:	2300      	movne	r3, #0
 800c848:	eba6 0807 	sub.w	r8, r6, r7
 800c84c:	608b      	str	r3, [r1, #8]
 800c84e:	f1b8 0f00 	cmp.w	r8, #0
 800c852:	dd9c      	ble.n	800c78e <__sflush_r+0x1a>
 800c854:	6a21      	ldr	r1, [r4, #32]
 800c856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c858:	4643      	mov	r3, r8
 800c85a:	463a      	mov	r2, r7
 800c85c:	4628      	mov	r0, r5
 800c85e:	47b0      	blx	r6
 800c860:	2800      	cmp	r0, #0
 800c862:	dc06      	bgt.n	800c872 <__sflush_r+0xfe>
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c86a:	81a3      	strh	r3, [r4, #12]
 800c86c:	f04f 30ff 	mov.w	r0, #4294967295
 800c870:	e78e      	b.n	800c790 <__sflush_r+0x1c>
 800c872:	4407      	add	r7, r0
 800c874:	eba8 0800 	sub.w	r8, r8, r0
 800c878:	e7e9      	b.n	800c84e <__sflush_r+0xda>
 800c87a:	bf00      	nop
 800c87c:	20400001 	.word	0x20400001

0800c880 <_fflush_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	690b      	ldr	r3, [r1, #16]
 800c884:	4605      	mov	r5, r0
 800c886:	460c      	mov	r4, r1
 800c888:	b913      	cbnz	r3, 800c890 <_fflush_r+0x10>
 800c88a:	2500      	movs	r5, #0
 800c88c:	4628      	mov	r0, r5
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	b118      	cbz	r0, 800c89a <_fflush_r+0x1a>
 800c892:	6983      	ldr	r3, [r0, #24]
 800c894:	b90b      	cbnz	r3, 800c89a <_fflush_r+0x1a>
 800c896:	f000 f887 	bl	800c9a8 <__sinit>
 800c89a:	4b14      	ldr	r3, [pc, #80]	; (800c8ec <_fflush_r+0x6c>)
 800c89c:	429c      	cmp	r4, r3
 800c89e:	d11b      	bne.n	800c8d8 <_fflush_r+0x58>
 800c8a0:	686c      	ldr	r4, [r5, #4]
 800c8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d0ef      	beq.n	800c88a <_fflush_r+0xa>
 800c8aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8ac:	07d0      	lsls	r0, r2, #31
 800c8ae:	d404      	bmi.n	800c8ba <_fflush_r+0x3a>
 800c8b0:	0599      	lsls	r1, r3, #22
 800c8b2:	d402      	bmi.n	800c8ba <_fflush_r+0x3a>
 800c8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8b6:	f000 f915 	bl	800cae4 <__retarget_lock_acquire_recursive>
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	4621      	mov	r1, r4
 800c8be:	f7ff ff59 	bl	800c774 <__sflush_r>
 800c8c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8c4:	07da      	lsls	r2, r3, #31
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	d4e0      	bmi.n	800c88c <_fflush_r+0xc>
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	059b      	lsls	r3, r3, #22
 800c8ce:	d4dd      	bmi.n	800c88c <_fflush_r+0xc>
 800c8d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8d2:	f000 f908 	bl	800cae6 <__retarget_lock_release_recursive>
 800c8d6:	e7d9      	b.n	800c88c <_fflush_r+0xc>
 800c8d8:	4b05      	ldr	r3, [pc, #20]	; (800c8f0 <_fflush_r+0x70>)
 800c8da:	429c      	cmp	r4, r3
 800c8dc:	d101      	bne.n	800c8e2 <_fflush_r+0x62>
 800c8de:	68ac      	ldr	r4, [r5, #8]
 800c8e0:	e7df      	b.n	800c8a2 <_fflush_r+0x22>
 800c8e2:	4b04      	ldr	r3, [pc, #16]	; (800c8f4 <_fflush_r+0x74>)
 800c8e4:	429c      	cmp	r4, r3
 800c8e6:	bf08      	it	eq
 800c8e8:	68ec      	ldreq	r4, [r5, #12]
 800c8ea:	e7da      	b.n	800c8a2 <_fflush_r+0x22>
 800c8ec:	0800e05c 	.word	0x0800e05c
 800c8f0:	0800e07c 	.word	0x0800e07c
 800c8f4:	0800e03c 	.word	0x0800e03c

0800c8f8 <std>:
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	b510      	push	{r4, lr}
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	e9c0 3300 	strd	r3, r3, [r0]
 800c902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c906:	6083      	str	r3, [r0, #8]
 800c908:	8181      	strh	r1, [r0, #12]
 800c90a:	6643      	str	r3, [r0, #100]	; 0x64
 800c90c:	81c2      	strh	r2, [r0, #14]
 800c90e:	6183      	str	r3, [r0, #24]
 800c910:	4619      	mov	r1, r3
 800c912:	2208      	movs	r2, #8
 800c914:	305c      	adds	r0, #92	; 0x5c
 800c916:	f7fd fb67 	bl	8009fe8 <memset>
 800c91a:	4b05      	ldr	r3, [pc, #20]	; (800c930 <std+0x38>)
 800c91c:	6263      	str	r3, [r4, #36]	; 0x24
 800c91e:	4b05      	ldr	r3, [pc, #20]	; (800c934 <std+0x3c>)
 800c920:	62a3      	str	r3, [r4, #40]	; 0x28
 800c922:	4b05      	ldr	r3, [pc, #20]	; (800c938 <std+0x40>)
 800c924:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c926:	4b05      	ldr	r3, [pc, #20]	; (800c93c <std+0x44>)
 800c928:	6224      	str	r4, [r4, #32]
 800c92a:	6323      	str	r3, [r4, #48]	; 0x30
 800c92c:	bd10      	pop	{r4, pc}
 800c92e:	bf00      	nop
 800c930:	0800cc4d 	.word	0x0800cc4d
 800c934:	0800cc6f 	.word	0x0800cc6f
 800c938:	0800cca7 	.word	0x0800cca7
 800c93c:	0800cccb 	.word	0x0800cccb

0800c940 <_cleanup_r>:
 800c940:	4901      	ldr	r1, [pc, #4]	; (800c948 <_cleanup_r+0x8>)
 800c942:	f000 b8af 	b.w	800caa4 <_fwalk_reent>
 800c946:	bf00      	nop
 800c948:	0800c881 	.word	0x0800c881

0800c94c <__sfmoreglue>:
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	2268      	movs	r2, #104	; 0x68
 800c950:	1e4d      	subs	r5, r1, #1
 800c952:	4355      	muls	r5, r2
 800c954:	460e      	mov	r6, r1
 800c956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c95a:	f7ff fa65 	bl	800be28 <_malloc_r>
 800c95e:	4604      	mov	r4, r0
 800c960:	b140      	cbz	r0, 800c974 <__sfmoreglue+0x28>
 800c962:	2100      	movs	r1, #0
 800c964:	e9c0 1600 	strd	r1, r6, [r0]
 800c968:	300c      	adds	r0, #12
 800c96a:	60a0      	str	r0, [r4, #8]
 800c96c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c970:	f7fd fb3a 	bl	8009fe8 <memset>
 800c974:	4620      	mov	r0, r4
 800c976:	bd70      	pop	{r4, r5, r6, pc}

0800c978 <__sfp_lock_acquire>:
 800c978:	4801      	ldr	r0, [pc, #4]	; (800c980 <__sfp_lock_acquire+0x8>)
 800c97a:	f000 b8b3 	b.w	800cae4 <__retarget_lock_acquire_recursive>
 800c97e:	bf00      	nop
 800c980:	200008f1 	.word	0x200008f1

0800c984 <__sfp_lock_release>:
 800c984:	4801      	ldr	r0, [pc, #4]	; (800c98c <__sfp_lock_release+0x8>)
 800c986:	f000 b8ae 	b.w	800cae6 <__retarget_lock_release_recursive>
 800c98a:	bf00      	nop
 800c98c:	200008f1 	.word	0x200008f1

0800c990 <__sinit_lock_acquire>:
 800c990:	4801      	ldr	r0, [pc, #4]	; (800c998 <__sinit_lock_acquire+0x8>)
 800c992:	f000 b8a7 	b.w	800cae4 <__retarget_lock_acquire_recursive>
 800c996:	bf00      	nop
 800c998:	200008f2 	.word	0x200008f2

0800c99c <__sinit_lock_release>:
 800c99c:	4801      	ldr	r0, [pc, #4]	; (800c9a4 <__sinit_lock_release+0x8>)
 800c99e:	f000 b8a2 	b.w	800cae6 <__retarget_lock_release_recursive>
 800c9a2:	bf00      	nop
 800c9a4:	200008f2 	.word	0x200008f2

0800c9a8 <__sinit>:
 800c9a8:	b510      	push	{r4, lr}
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	f7ff fff0 	bl	800c990 <__sinit_lock_acquire>
 800c9b0:	69a3      	ldr	r3, [r4, #24]
 800c9b2:	b11b      	cbz	r3, 800c9bc <__sinit+0x14>
 800c9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9b8:	f7ff bff0 	b.w	800c99c <__sinit_lock_release>
 800c9bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c9c0:	6523      	str	r3, [r4, #80]	; 0x50
 800c9c2:	4b13      	ldr	r3, [pc, #76]	; (800ca10 <__sinit+0x68>)
 800c9c4:	4a13      	ldr	r2, [pc, #76]	; (800ca14 <__sinit+0x6c>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c9ca:	42a3      	cmp	r3, r4
 800c9cc:	bf04      	itt	eq
 800c9ce:	2301      	moveq	r3, #1
 800c9d0:	61a3      	streq	r3, [r4, #24]
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	f000 f820 	bl	800ca18 <__sfp>
 800c9d8:	6060      	str	r0, [r4, #4]
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f000 f81c 	bl	800ca18 <__sfp>
 800c9e0:	60a0      	str	r0, [r4, #8]
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	f000 f818 	bl	800ca18 <__sfp>
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	60e0      	str	r0, [r4, #12]
 800c9ec:	2104      	movs	r1, #4
 800c9ee:	6860      	ldr	r0, [r4, #4]
 800c9f0:	f7ff ff82 	bl	800c8f8 <std>
 800c9f4:	68a0      	ldr	r0, [r4, #8]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	2109      	movs	r1, #9
 800c9fa:	f7ff ff7d 	bl	800c8f8 <std>
 800c9fe:	68e0      	ldr	r0, [r4, #12]
 800ca00:	2202      	movs	r2, #2
 800ca02:	2112      	movs	r1, #18
 800ca04:	f7ff ff78 	bl	800c8f8 <std>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	61a3      	str	r3, [r4, #24]
 800ca0c:	e7d2      	b.n	800c9b4 <__sinit+0xc>
 800ca0e:	bf00      	nop
 800ca10:	0800dcc0 	.word	0x0800dcc0
 800ca14:	0800c941 	.word	0x0800c941

0800ca18 <__sfp>:
 800ca18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1a:	4607      	mov	r7, r0
 800ca1c:	f7ff ffac 	bl	800c978 <__sfp_lock_acquire>
 800ca20:	4b1e      	ldr	r3, [pc, #120]	; (800ca9c <__sfp+0x84>)
 800ca22:	681e      	ldr	r6, [r3, #0]
 800ca24:	69b3      	ldr	r3, [r6, #24]
 800ca26:	b913      	cbnz	r3, 800ca2e <__sfp+0x16>
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f7ff ffbd 	bl	800c9a8 <__sinit>
 800ca2e:	3648      	adds	r6, #72	; 0x48
 800ca30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	d503      	bpl.n	800ca40 <__sfp+0x28>
 800ca38:	6833      	ldr	r3, [r6, #0]
 800ca3a:	b30b      	cbz	r3, 800ca80 <__sfp+0x68>
 800ca3c:	6836      	ldr	r6, [r6, #0]
 800ca3e:	e7f7      	b.n	800ca30 <__sfp+0x18>
 800ca40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca44:	b9d5      	cbnz	r5, 800ca7c <__sfp+0x64>
 800ca46:	4b16      	ldr	r3, [pc, #88]	; (800caa0 <__sfp+0x88>)
 800ca48:	60e3      	str	r3, [r4, #12]
 800ca4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca4e:	6665      	str	r5, [r4, #100]	; 0x64
 800ca50:	f000 f847 	bl	800cae2 <__retarget_lock_init_recursive>
 800ca54:	f7ff ff96 	bl	800c984 <__sfp_lock_release>
 800ca58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ca5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ca60:	6025      	str	r5, [r4, #0]
 800ca62:	61a5      	str	r5, [r4, #24]
 800ca64:	2208      	movs	r2, #8
 800ca66:	4629      	mov	r1, r5
 800ca68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca6c:	f7fd fabc 	bl	8009fe8 <memset>
 800ca70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ca74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ca78:	4620      	mov	r0, r4
 800ca7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca7c:	3468      	adds	r4, #104	; 0x68
 800ca7e:	e7d9      	b.n	800ca34 <__sfp+0x1c>
 800ca80:	2104      	movs	r1, #4
 800ca82:	4638      	mov	r0, r7
 800ca84:	f7ff ff62 	bl	800c94c <__sfmoreglue>
 800ca88:	4604      	mov	r4, r0
 800ca8a:	6030      	str	r0, [r6, #0]
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d1d5      	bne.n	800ca3c <__sfp+0x24>
 800ca90:	f7ff ff78 	bl	800c984 <__sfp_lock_release>
 800ca94:	230c      	movs	r3, #12
 800ca96:	603b      	str	r3, [r7, #0]
 800ca98:	e7ee      	b.n	800ca78 <__sfp+0x60>
 800ca9a:	bf00      	nop
 800ca9c:	0800dcc0 	.word	0x0800dcc0
 800caa0:	ffff0001 	.word	0xffff0001

0800caa4 <_fwalk_reent>:
 800caa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caa8:	4606      	mov	r6, r0
 800caaa:	4688      	mov	r8, r1
 800caac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cab0:	2700      	movs	r7, #0
 800cab2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cab6:	f1b9 0901 	subs.w	r9, r9, #1
 800caba:	d505      	bpl.n	800cac8 <_fwalk_reent+0x24>
 800cabc:	6824      	ldr	r4, [r4, #0]
 800cabe:	2c00      	cmp	r4, #0
 800cac0:	d1f7      	bne.n	800cab2 <_fwalk_reent+0xe>
 800cac2:	4638      	mov	r0, r7
 800cac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cac8:	89ab      	ldrh	r3, [r5, #12]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d907      	bls.n	800cade <_fwalk_reent+0x3a>
 800cace:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cad2:	3301      	adds	r3, #1
 800cad4:	d003      	beq.n	800cade <_fwalk_reent+0x3a>
 800cad6:	4629      	mov	r1, r5
 800cad8:	4630      	mov	r0, r6
 800cada:	47c0      	blx	r8
 800cadc:	4307      	orrs	r7, r0
 800cade:	3568      	adds	r5, #104	; 0x68
 800cae0:	e7e9      	b.n	800cab6 <_fwalk_reent+0x12>

0800cae2 <__retarget_lock_init_recursive>:
 800cae2:	4770      	bx	lr

0800cae4 <__retarget_lock_acquire_recursive>:
 800cae4:	4770      	bx	lr

0800cae6 <__retarget_lock_release_recursive>:
 800cae6:	4770      	bx	lr

0800cae8 <__swhatbuf_r>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	460e      	mov	r6, r1
 800caec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf0:	2900      	cmp	r1, #0
 800caf2:	b096      	sub	sp, #88	; 0x58
 800caf4:	4614      	mov	r4, r2
 800caf6:	461d      	mov	r5, r3
 800caf8:	da08      	bge.n	800cb0c <__swhatbuf_r+0x24>
 800cafa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	602a      	str	r2, [r5, #0]
 800cb02:	061a      	lsls	r2, r3, #24
 800cb04:	d410      	bmi.n	800cb28 <__swhatbuf_r+0x40>
 800cb06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb0a:	e00e      	b.n	800cb2a <__swhatbuf_r+0x42>
 800cb0c:	466a      	mov	r2, sp
 800cb0e:	f000 f903 	bl	800cd18 <_fstat_r>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	dbf1      	blt.n	800cafa <__swhatbuf_r+0x12>
 800cb16:	9a01      	ldr	r2, [sp, #4]
 800cb18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb20:	425a      	negs	r2, r3
 800cb22:	415a      	adcs	r2, r3
 800cb24:	602a      	str	r2, [r5, #0]
 800cb26:	e7ee      	b.n	800cb06 <__swhatbuf_r+0x1e>
 800cb28:	2340      	movs	r3, #64	; 0x40
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	b016      	add	sp, #88	; 0x58
 800cb30:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb34 <__smakebuf_r>:
 800cb34:	898b      	ldrh	r3, [r1, #12]
 800cb36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb38:	079d      	lsls	r5, r3, #30
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	d507      	bpl.n	800cb50 <__smakebuf_r+0x1c>
 800cb40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	6123      	str	r3, [r4, #16]
 800cb48:	2301      	movs	r3, #1
 800cb4a:	6163      	str	r3, [r4, #20]
 800cb4c:	b002      	add	sp, #8
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	ab01      	add	r3, sp, #4
 800cb52:	466a      	mov	r2, sp
 800cb54:	f7ff ffc8 	bl	800cae8 <__swhatbuf_r>
 800cb58:	9900      	ldr	r1, [sp, #0]
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f7ff f963 	bl	800be28 <_malloc_r>
 800cb62:	b948      	cbnz	r0, 800cb78 <__smakebuf_r+0x44>
 800cb64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb68:	059a      	lsls	r2, r3, #22
 800cb6a:	d4ef      	bmi.n	800cb4c <__smakebuf_r+0x18>
 800cb6c:	f023 0303 	bic.w	r3, r3, #3
 800cb70:	f043 0302 	orr.w	r3, r3, #2
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	e7e3      	b.n	800cb40 <__smakebuf_r+0xc>
 800cb78:	4b0d      	ldr	r3, [pc, #52]	; (800cbb0 <__smakebuf_r+0x7c>)
 800cb7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb7c:	89a3      	ldrh	r3, [r4, #12]
 800cb7e:	6020      	str	r0, [r4, #0]
 800cb80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb84:	81a3      	strh	r3, [r4, #12]
 800cb86:	9b00      	ldr	r3, [sp, #0]
 800cb88:	6163      	str	r3, [r4, #20]
 800cb8a:	9b01      	ldr	r3, [sp, #4]
 800cb8c:	6120      	str	r0, [r4, #16]
 800cb8e:	b15b      	cbz	r3, 800cba8 <__smakebuf_r+0x74>
 800cb90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb94:	4630      	mov	r0, r6
 800cb96:	f000 f8d1 	bl	800cd3c <_isatty_r>
 800cb9a:	b128      	cbz	r0, 800cba8 <__smakebuf_r+0x74>
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	f023 0303 	bic.w	r3, r3, #3
 800cba2:	f043 0301 	orr.w	r3, r3, #1
 800cba6:	81a3      	strh	r3, [r4, #12]
 800cba8:	89a0      	ldrh	r0, [r4, #12]
 800cbaa:	4305      	orrs	r5, r0
 800cbac:	81a5      	strh	r5, [r4, #12]
 800cbae:	e7cd      	b.n	800cb4c <__smakebuf_r+0x18>
 800cbb0:	0800c941 	.word	0x0800c941

0800cbb4 <_malloc_usable_size_r>:
 800cbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb8:	1f18      	subs	r0, r3, #4
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	bfbc      	itt	lt
 800cbbe:	580b      	ldrlt	r3, [r1, r0]
 800cbc0:	18c0      	addlt	r0, r0, r3
 800cbc2:	4770      	bx	lr

0800cbc4 <_raise_r>:
 800cbc4:	291f      	cmp	r1, #31
 800cbc6:	b538      	push	{r3, r4, r5, lr}
 800cbc8:	4604      	mov	r4, r0
 800cbca:	460d      	mov	r5, r1
 800cbcc:	d904      	bls.n	800cbd8 <_raise_r+0x14>
 800cbce:	2316      	movs	r3, #22
 800cbd0:	6003      	str	r3, [r0, #0]
 800cbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd6:	bd38      	pop	{r3, r4, r5, pc}
 800cbd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cbda:	b112      	cbz	r2, 800cbe2 <_raise_r+0x1e>
 800cbdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbe0:	b94b      	cbnz	r3, 800cbf6 <_raise_r+0x32>
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f000 f830 	bl	800cc48 <_getpid_r>
 800cbe8:	462a      	mov	r2, r5
 800cbea:	4601      	mov	r1, r0
 800cbec:	4620      	mov	r0, r4
 800cbee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbf2:	f000 b817 	b.w	800cc24 <_kill_r>
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d00a      	beq.n	800cc10 <_raise_r+0x4c>
 800cbfa:	1c59      	adds	r1, r3, #1
 800cbfc:	d103      	bne.n	800cc06 <_raise_r+0x42>
 800cbfe:	2316      	movs	r3, #22
 800cc00:	6003      	str	r3, [r0, #0]
 800cc02:	2001      	movs	r0, #1
 800cc04:	e7e7      	b.n	800cbd6 <_raise_r+0x12>
 800cc06:	2400      	movs	r4, #0
 800cc08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	4798      	blx	r3
 800cc10:	2000      	movs	r0, #0
 800cc12:	e7e0      	b.n	800cbd6 <_raise_r+0x12>

0800cc14 <raise>:
 800cc14:	4b02      	ldr	r3, [pc, #8]	; (800cc20 <raise+0xc>)
 800cc16:	4601      	mov	r1, r0
 800cc18:	6818      	ldr	r0, [r3, #0]
 800cc1a:	f7ff bfd3 	b.w	800cbc4 <_raise_r>
 800cc1e:	bf00      	nop
 800cc20:	20000010 	.word	0x20000010

0800cc24 <_kill_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4d07      	ldr	r5, [pc, #28]	; (800cc44 <_kill_r+0x20>)
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	4608      	mov	r0, r1
 800cc2e:	4611      	mov	r1, r2
 800cc30:	602b      	str	r3, [r5, #0]
 800cc32:	f7f5 f8a7 	bl	8001d84 <_kill>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	d102      	bne.n	800cc40 <_kill_r+0x1c>
 800cc3a:	682b      	ldr	r3, [r5, #0]
 800cc3c:	b103      	cbz	r3, 800cc40 <_kill_r+0x1c>
 800cc3e:	6023      	str	r3, [r4, #0]
 800cc40:	bd38      	pop	{r3, r4, r5, pc}
 800cc42:	bf00      	nop
 800cc44:	200008ec 	.word	0x200008ec

0800cc48 <_getpid_r>:
 800cc48:	f7f5 b894 	b.w	8001d74 <_getpid>

0800cc4c <__sread>:
 800cc4c:	b510      	push	{r4, lr}
 800cc4e:	460c      	mov	r4, r1
 800cc50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc54:	f000 f894 	bl	800cd80 <_read_r>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	bfab      	itete	ge
 800cc5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc5e:	89a3      	ldrhlt	r3, [r4, #12]
 800cc60:	181b      	addge	r3, r3, r0
 800cc62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc66:	bfac      	ite	ge
 800cc68:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc6a:	81a3      	strhlt	r3, [r4, #12]
 800cc6c:	bd10      	pop	{r4, pc}

0800cc6e <__swrite>:
 800cc6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc72:	461f      	mov	r7, r3
 800cc74:	898b      	ldrh	r3, [r1, #12]
 800cc76:	05db      	lsls	r3, r3, #23
 800cc78:	4605      	mov	r5, r0
 800cc7a:	460c      	mov	r4, r1
 800cc7c:	4616      	mov	r6, r2
 800cc7e:	d505      	bpl.n	800cc8c <__swrite+0x1e>
 800cc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc84:	2302      	movs	r3, #2
 800cc86:	2200      	movs	r2, #0
 800cc88:	f000 f868 	bl	800cd5c <_lseek_r>
 800cc8c:	89a3      	ldrh	r3, [r4, #12]
 800cc8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc96:	81a3      	strh	r3, [r4, #12]
 800cc98:	4632      	mov	r2, r6
 800cc9a:	463b      	mov	r3, r7
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cca2:	f000 b817 	b.w	800ccd4 <_write_r>

0800cca6 <__sseek>:
 800cca6:	b510      	push	{r4, lr}
 800cca8:	460c      	mov	r4, r1
 800ccaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccae:	f000 f855 	bl	800cd5c <_lseek_r>
 800ccb2:	1c43      	adds	r3, r0, #1
 800ccb4:	89a3      	ldrh	r3, [r4, #12]
 800ccb6:	bf15      	itete	ne
 800ccb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccc2:	81a3      	strheq	r3, [r4, #12]
 800ccc4:	bf18      	it	ne
 800ccc6:	81a3      	strhne	r3, [r4, #12]
 800ccc8:	bd10      	pop	{r4, pc}

0800ccca <__sclose>:
 800ccca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccce:	f000 b813 	b.w	800ccf8 <_close_r>
	...

0800ccd4 <_write_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d07      	ldr	r5, [pc, #28]	; (800ccf4 <_write_r+0x20>)
 800ccd8:	4604      	mov	r4, r0
 800ccda:	4608      	mov	r0, r1
 800ccdc:	4611      	mov	r1, r2
 800ccde:	2200      	movs	r2, #0
 800cce0:	602a      	str	r2, [r5, #0]
 800cce2:	461a      	mov	r2, r3
 800cce4:	f7f5 f885 	bl	8001df2 <_write>
 800cce8:	1c43      	adds	r3, r0, #1
 800ccea:	d102      	bne.n	800ccf2 <_write_r+0x1e>
 800ccec:	682b      	ldr	r3, [r5, #0]
 800ccee:	b103      	cbz	r3, 800ccf2 <_write_r+0x1e>
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	bd38      	pop	{r3, r4, r5, pc}
 800ccf4:	200008ec 	.word	0x200008ec

0800ccf8 <_close_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d06      	ldr	r5, [pc, #24]	; (800cd14 <_close_r+0x1c>)
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	4604      	mov	r4, r0
 800cd00:	4608      	mov	r0, r1
 800cd02:	602b      	str	r3, [r5, #0]
 800cd04:	f7f5 f891 	bl	8001e2a <_close>
 800cd08:	1c43      	adds	r3, r0, #1
 800cd0a:	d102      	bne.n	800cd12 <_close_r+0x1a>
 800cd0c:	682b      	ldr	r3, [r5, #0]
 800cd0e:	b103      	cbz	r3, 800cd12 <_close_r+0x1a>
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	bd38      	pop	{r3, r4, r5, pc}
 800cd14:	200008ec 	.word	0x200008ec

0800cd18 <_fstat_r>:
 800cd18:	b538      	push	{r3, r4, r5, lr}
 800cd1a:	4d07      	ldr	r5, [pc, #28]	; (800cd38 <_fstat_r+0x20>)
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	4604      	mov	r4, r0
 800cd20:	4608      	mov	r0, r1
 800cd22:	4611      	mov	r1, r2
 800cd24:	602b      	str	r3, [r5, #0]
 800cd26:	f7f5 f88c 	bl	8001e42 <_fstat>
 800cd2a:	1c43      	adds	r3, r0, #1
 800cd2c:	d102      	bne.n	800cd34 <_fstat_r+0x1c>
 800cd2e:	682b      	ldr	r3, [r5, #0]
 800cd30:	b103      	cbz	r3, 800cd34 <_fstat_r+0x1c>
 800cd32:	6023      	str	r3, [r4, #0]
 800cd34:	bd38      	pop	{r3, r4, r5, pc}
 800cd36:	bf00      	nop
 800cd38:	200008ec 	.word	0x200008ec

0800cd3c <_isatty_r>:
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4d06      	ldr	r5, [pc, #24]	; (800cd58 <_isatty_r+0x1c>)
 800cd40:	2300      	movs	r3, #0
 800cd42:	4604      	mov	r4, r0
 800cd44:	4608      	mov	r0, r1
 800cd46:	602b      	str	r3, [r5, #0]
 800cd48:	f7f5 f88b 	bl	8001e62 <_isatty>
 800cd4c:	1c43      	adds	r3, r0, #1
 800cd4e:	d102      	bne.n	800cd56 <_isatty_r+0x1a>
 800cd50:	682b      	ldr	r3, [r5, #0]
 800cd52:	b103      	cbz	r3, 800cd56 <_isatty_r+0x1a>
 800cd54:	6023      	str	r3, [r4, #0]
 800cd56:	bd38      	pop	{r3, r4, r5, pc}
 800cd58:	200008ec 	.word	0x200008ec

0800cd5c <_lseek_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4d07      	ldr	r5, [pc, #28]	; (800cd7c <_lseek_r+0x20>)
 800cd60:	4604      	mov	r4, r0
 800cd62:	4608      	mov	r0, r1
 800cd64:	4611      	mov	r1, r2
 800cd66:	2200      	movs	r2, #0
 800cd68:	602a      	str	r2, [r5, #0]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f7f5 f884 	bl	8001e78 <_lseek>
 800cd70:	1c43      	adds	r3, r0, #1
 800cd72:	d102      	bne.n	800cd7a <_lseek_r+0x1e>
 800cd74:	682b      	ldr	r3, [r5, #0]
 800cd76:	b103      	cbz	r3, 800cd7a <_lseek_r+0x1e>
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	bd38      	pop	{r3, r4, r5, pc}
 800cd7c:	200008ec 	.word	0x200008ec

0800cd80 <_read_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4d07      	ldr	r5, [pc, #28]	; (800cda0 <_read_r+0x20>)
 800cd84:	4604      	mov	r4, r0
 800cd86:	4608      	mov	r0, r1
 800cd88:	4611      	mov	r1, r2
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	602a      	str	r2, [r5, #0]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	f7f5 f812 	bl	8001db8 <_read>
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	d102      	bne.n	800cd9e <_read_r+0x1e>
 800cd98:	682b      	ldr	r3, [r5, #0]
 800cd9a:	b103      	cbz	r3, 800cd9e <_read_r+0x1e>
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	bd38      	pop	{r3, r4, r5, pc}
 800cda0:	200008ec 	.word	0x200008ec

0800cda4 <_init>:
 800cda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda6:	bf00      	nop
 800cda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdaa:	bc08      	pop	{r3}
 800cdac:	469e      	mov	lr, r3
 800cdae:	4770      	bx	lr

0800cdb0 <_fini>:
 800cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb2:	bf00      	nop
 800cdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb6:	bc08      	pop	{r3}
 800cdb8:	469e      	mov	lr, r3
 800cdba:	4770      	bx	lr
