
PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000114c  0800a868  0800a868  0001a868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9b4  0800b9b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9b4  0800b9b4  0001b9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9bc  0800b9bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9bc  0800b9bc  0001b9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9c0  0800b9c0  0001b9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000624  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000800  20000800  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b51  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df6  00000000  00000000  00032d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00035b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001050  00000000  00000000  00036cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a36  00000000  00000000  00037d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016197  00000000  00000000  0005b776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d03fc  00000000  00000000  0007190d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141d09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a38  00000000  00000000  00141d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a850 	.word	0x0800a850

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a850 	.word	0x0800a850

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_DMA_Init+0x3c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <MX_DMA_Init+0x3c>)
 8000efc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_DMA_Init+0x3c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 ff99 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f18:	200f      	movs	r0, #15
 8000f1a:	f000 ffb2 	bl	8001e82 <HAL_NVIC_EnableIRQ>

}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	4b71      	ldr	r3, [pc, #452]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a70      	ldr	r2, [pc, #448]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f4c:	f043 0310 	orr.w	r3, r3, #16
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b6e      	ldr	r3, [pc, #440]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	4b6a      	ldr	r3, [pc, #424]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a69      	ldr	r2, [pc, #420]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b67      	ldr	r3, [pc, #412]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b63      	ldr	r3, [pc, #396]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a62      	ldr	r2, [pc, #392]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b60      	ldr	r3, [pc, #384]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b5c      	ldr	r3, [pc, #368]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a5b      	ldr	r2, [pc, #364]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b59      	ldr	r3, [pc, #356]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b55      	ldr	r3, [pc, #340]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a54      	ldr	r2, [pc, #336]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b52      	ldr	r3, [pc, #328]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a4d      	ldr	r2, [pc, #308]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b4b      	ldr	r3, [pc, #300]	; (800110c <MX_GPIO_Init+0x1e0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	4848      	ldr	r0, [pc, #288]	; (8001110 <MX_GPIO_Init+0x1e4>)
 8000ff0:	f001 fc9e 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RES_Pin|LCD_CMD_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
 8000ffa:	4846      	ldr	r0, [pc, #280]	; (8001114 <MX_GPIO_Init+0x1e8>)
 8000ffc:	f001 fc98 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001006:	4844      	ldr	r0, [pc, #272]	; (8001118 <MX_GPIO_Init+0x1ec>)
 8001008:	f001 fc92 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	483b      	ldr	r0, [pc, #236]	; (8001110 <MX_GPIO_Init+0x1e4>)
 8001024:	f001 fae8 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800102c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4837      	ldr	r0, [pc, #220]	; (800111c <MX_GPIO_Init+0x1f0>)
 800103e:	f001 fadb 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B_START_Pin|B_VIEW_Pin|B_ENC_Pin;
 8001042:	230e      	movs	r3, #14
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001046:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4831      	ldr	r0, [pc, #196]	; (800111c <MX_GPIO_Init+0x1f0>)
 8001058:	f001 face 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800105c:	2304      	movs	r3, #4
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4829      	ldr	r0, [pc, #164]	; (8001114 <MX_GPIO_Init+0x1e8>)
 8001070:	f001 fac2 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_CMD_Pin|SPI2_CS_Pin;
 8001074:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4821      	ldr	r0, [pc, #132]	; (8001114 <MX_GPIO_Init+0x1e8>)
 800108e:	f001 fab3 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001092:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <MX_GPIO_Init+0x1ec>)
 80010ac:	f001 faa4 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80010b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4815      	ldr	r0, [pc, #84]	; (800111c <MX_GPIO_Init+0x1f0>)
 80010c6:	f001 fa97 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80010ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010dc:	230a      	movs	r3, #10
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	480d      	ldr	r0, [pc, #52]	; (800111c <MX_GPIO_Init+0x1f0>)
 80010e8:	f001 fa86 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010ec:	2320      	movs	r3, #32
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <MX_GPIO_Init+0x1ec>)
 8001100:	f001 fa7a 	bl	80025f8 <HAL_GPIO_Init>

}
 8001104:	bf00      	nop
 8001106:	3730      	adds	r7, #48	; 0x30
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020800 	.word	0x40020800
 8001114:	40020400 	.word	0x40020400
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40020000 	.word	0x40020000

08001120 <HAL_I2C_MspInit>:
  /* USER CODE END I2C1_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <HAL_I2C_MspInit+0xa4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d13b      	bne.n	80011ba <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115e:	23c0      	movs	r3, #192	; 0xc0
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001162:	2312      	movs	r3, #18
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116e:	2304      	movs	r3, #4
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4814      	ldr	r0, [pc, #80]	; (80011cc <HAL_I2C_MspInit+0xac>)
 800117a:	f001 fa3d 	bl	80025f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_I2C_MspInit+0xa8>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	201f      	movs	r0, #31
 80011a0:	f000 fe53 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011a4:	201f      	movs	r0, #31
 80011a6:	f000 fe6c 	bl	8001e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2020      	movs	r0, #32
 80011b0:	f000 fe4b 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011b4:	2020      	movs	r0, #32
 80011b6:	f000 fe64 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40005400 	.word	0x40005400
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020400 	.word	0x40020400

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 fcc7 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f87b 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f7ff fea5 	bl	8000f2c <MX_GPIO_Init>
  MX_DMA_Init();
 80011e2:	f7ff fe83 	bl	8000eec <MX_DMA_Init>
  MX_TIM3_Init();
 80011e6:	f000 fac9 	bl	800177c <MX_TIM3_Init>
  MX_TIM9_Init();
 80011ea:	f000 fb1b 	bl	8001824 <MX_TIM9_Init>
  MX_TIM10_Init();
 80011ee:	f000 fb5d 	bl	80018ac <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */


   char txt[20];

   bool dir = false;
 80011f2:	2300      	movs	r3, #0
 80011f4:	75fb      	strb	r3, [r7, #23]

   f_ina219_Init();
 80011f6:	f005 fffa 	bl	80071ee <f_ina219_Init>
   f_lcd_Init();
 80011fa:	f006 f8b7 	bl	800736c <f_lcd_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 f_lcd_ClearAll();
 80011fe:	f006 f90d 	bl	800741c <f_lcd_ClearAll>


	 current = f_ina219_GetCurrentInMilis();
 8001202:	f006 f81d 	bl	8007240 <f_ina219_GetCurrentInMilis>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <main+0xe0>)
 800120c:	801a      	strh	r2, [r3, #0]
	 sprintf(txt, "Curr:  %4d", current);
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <main+0xe0>)
 8001210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001214:	461a      	mov	r2, r3
 8001216:	463b      	mov	r3, r7
 8001218:	4926      	ldr	r1, [pc, #152]	; (80012b4 <main+0xe4>)
 800121a:	4618      	mov	r0, r3
 800121c:	f007 f89e 	bl	800835c <siprintf>
	 f_lcd_WriteTxt(0, 0, txt, &test2);
 8001220:	463a      	mov	r2, r7
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <main+0xe8>)
 8001224:	2100      	movs	r1, #0
 8001226:	2000      	movs	r0, #0
 8001228:	f006 f90f 	bl	800744a <f_lcd_WriteTxt>

	 shunt = f_ina219_GetShuntVoltageInMicro();
 800122c:	f006 f86e 	bl	800730c <f_ina219_GetShuntVoltageInMicro>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <main+0xec>)
 8001236:	801a      	strh	r2, [r3, #0]
	 sprintf(txt, "Shunt: %4d", shunt);
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <main+0xec>)
 800123a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123e:	461a      	mov	r2, r3
 8001240:	463b      	mov	r3, r7
 8001242:	491f      	ldr	r1, [pc, #124]	; (80012c0 <main+0xf0>)
 8001244:	4618      	mov	r0, r3
 8001246:	f007 f889 	bl	800835c <siprintf>
	 f_lcd_WriteTxt(0, 16, txt, &test2);
 800124a:	463a      	mov	r2, r7
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <main+0xe8>)
 800124e:	2110      	movs	r1, #16
 8001250:	2000      	movs	r0, #0
 8001252:	f006 f8fa 	bl	800744a <f_lcd_WriteTxt>

	 bus = f_ina219_GetBusVoltageInMilis();
 8001256:	f006 f843 	bl	80072e0 <f_ina219_GetBusVoltageInMilis>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <main+0xf4>)
 8001260:	801a      	strh	r2, [r3, #0]
	 sprintf(txt, "Bus:   %4d", bus);
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <main+0xf4>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	463b      	mov	r3, r7
 800126a:	4917      	ldr	r1, [pc, #92]	; (80012c8 <main+0xf8>)
 800126c:	4618      	mov	r0, r3
 800126e:	f007 f875 	bl	800835c <siprintf>
	 f_lcd_WriteTxt(0, 32, txt, &test2);
 8001272:	463a      	mov	r2, r7
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <main+0xe8>)
 8001276:	2120      	movs	r1, #32
 8001278:	2000      	movs	r0, #0
 800127a:	f006 f8e6 	bl	800744a <f_lcd_WriteTxt>

	 power = f_ina219_GetPowerInMilis();
 800127e:	f006 f807 	bl	8007290 <f_ina219_GetPowerInMilis>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <main+0xfc>)
 8001288:	801a      	strh	r2, [r3, #0]
	 sprintf(txt, "Pow:   %4d", power);
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <main+0xfc>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	463b      	mov	r3, r7
 8001292:	490f      	ldr	r1, [pc, #60]	; (80012d0 <main+0x100>)
 8001294:	4618      	mov	r0, r3
 8001296:	f007 f861 	bl	800835c <siprintf>
	 f_lcd_WriteTxt(0, 48, txt, &test2);
 800129a:	463a      	mov	r2, r7
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <main+0xe8>)
 800129e:	2130      	movs	r1, #48	; 0x30
 80012a0:	2000      	movs	r0, #0
 80012a2:	f006 f8d2 	bl	800744a <f_lcd_WriteTxt>

	 HAL_Delay(100);
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f000 fcd0 	bl	8001c4c <HAL_Delay>
	 f_lcd_ClearAll();
 80012ac:	e7a7      	b.n	80011fe <main+0x2e>
 80012ae:	bf00      	nop
 80012b0:	2000024c 	.word	0x2000024c
 80012b4:	0800a868 	.word	0x0800a868
 80012b8:	0800b5d4 	.word	0x0800b5d4
 80012bc:	2000024e 	.word	0x2000024e
 80012c0:	0800a874 	.word	0x0800a874
 80012c4:	20000250 	.word	0x20000250
 80012c8:	0800a880 	.word	0x0800a880
 80012cc:	20000252 	.word	0x20000252
 80012d0:	0800a88c 	.word	0x0800a88c

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	; 0x50
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	2230      	movs	r2, #48	; 0x30
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f006 fbc8 	bl	8007a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <SystemClock_Config+0xcc>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <SystemClock_Config+0xcc>)
 8001302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001306:	6413      	str	r3, [r2, #64]	; 0x40
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <SystemClock_Config+0xcc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <SystemClock_Config+0xd0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <SystemClock_Config+0xd0>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <SystemClock_Config+0xd0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001330:	2301      	movs	r3, #1
 8001332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133a:	2302      	movs	r3, #2
 800133c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001344:	2308      	movs	r3, #8
 8001346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001348:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800134c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800134e:	2302      	movs	r3, #2
 8001350:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001352:	2307      	movs	r3, #7
 8001354:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	4618      	mov	r0, r3
 800135c:	f003 ff72 	bl	8005244 <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001366:	f000 f81f 	bl	80013a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136e:	2302      	movs	r3, #2
 8001370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001376:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800137a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800137c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001380:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2105      	movs	r1, #5
 8001388:	4618      	mov	r0, r3
 800138a:	f004 f9d3 	bl	8005734 <HAL_RCC_ClockConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001394:	f000 f808 	bl	80013a8 <Error_Handler>
  }
}
 8001398:	bf00      	nop
 800139a:	3750      	adds	r7, #80	; 0x50
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <Error_Handler+0x8>
	...

080013b4 <HAL_SPI_MspInit>:
  /* USER CODE END SPI2_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a3f      	ldr	r2, [pc, #252]	; (80014d0 <HAL_SPI_MspInit+0x11c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d177      	bne.n	80014c6 <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <HAL_SPI_MspInit+0x120>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a3d      	ldr	r2, [pc, #244]	; (80014d4 <HAL_SPI_MspInit+0x120>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <HAL_SPI_MspInit+0x120>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <HAL_SPI_MspInit+0x120>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a36      	ldr	r2, [pc, #216]	; (80014d4 <HAL_SPI_MspInit+0x120>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <HAL_SPI_MspInit+0x120>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_SPI_MspInit+0x120>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a2f      	ldr	r2, [pc, #188]	; (80014d4 <HAL_SPI_MspInit+0x120>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <HAL_SPI_MspInit+0x120>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800142a:	2308      	movs	r3, #8
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800143a:	2305      	movs	r3, #5
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4824      	ldr	r0, [pc, #144]	; (80014d8 <HAL_SPI_MspInit+0x124>)
 8001446:	f001 f8d7 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800144a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800145c:	2305      	movs	r3, #5
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	481d      	ldr	r0, [pc, #116]	; (80014dc <HAL_SPI_MspInit+0x128>)
 8001468:	f001 f8c6 	bl	80025f8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_SPI_MspInit+0x130>)
 8001470:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 800147a:	2240      	movs	r2, #64	; 0x40
 800147c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 8001486:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 80014ac:	f000 fd04 	bl	8001eb8 <HAL_DMA_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80014b6:	f7ff ff77 	bl	80013a8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 80014be:	649a      	str	r2, [r3, #72]	; 0x48
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_SPI_MspInit+0x12c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40003800 	.word	0x40003800
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020400 	.word	0x40020400
 80014e0:	200002ac 	.word	0x200002ac
 80014e4:	40026070 	.word	0x40026070

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <HAL_MspInit+0x4c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_MspInit+0x4c>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001526:	2007      	movs	r0, #7
 8001528:	f000 fc84 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001584:	f000 fb42 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  f_lcd_SendFrameCallback();
 8001588:	f006 f860 	bl	800764c <f_lcd_SendFrameCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <DMA1_Stream4_IRQHandler+0x10>)
 8001596:	f000 fdb7 	bl	8002108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200002ac 	.word	0x200002ac

080015a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <I2C1_EV_IRQHandler+0x10>)
 80015aa:	f001 fe43 	bl	8003234 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200001f8 	.word	0x200001f8

080015b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <I2C1_ER_IRQHandler+0x10>)
 80015be:	f001 ffaa 	bl	8003516 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200001f8 	.word	0x200001f8

080015cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	return 1;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_kill>:

int _kill(int pid, int sig)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015e6:	f006 fa1d 	bl	8007a24 <__errno>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2216      	movs	r2, #22
 80015ee:	601a      	str	r2, [r3, #0]
	return -1;
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_exit>:

void _exit (int status)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ffe7 	bl	80015dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800160e:	e7fe      	b.n	800160e <_exit+0x12>

08001610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001622:	f3af 8000 	nop.w
 8001626:	4601      	mov	r1, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	b2ca      	uxtb	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf0      	blt.n	8001622 <_read+0x12>
	}

return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e009      	b.n	8001670 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <_write+0x12>
	}
	return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016aa:	605a      	str	r2, [r3, #4]
	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f006 f982 	bl	8007a24 <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20020000 	.word	0x20020000
 800174c:	00000400 	.word	0x00000400
 8001750:	2000030c 	.word	0x2000030c
 8001754:	20000800 	.word	0x20000800

08001758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <SystemInit+0x20>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <SystemInit+0x20>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <MX_TIM3_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	; 0x30
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	2224      	movs	r2, #36	; 0x24
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f006 f974 	bl	8007a78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <MX_TIM3_Init+0xa0>)
 800179a:	4a21      	ldr	r2, [pc, #132]	; (8001820 <MX_TIM3_Init+0xa4>)
 800179c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <MX_TIM3_Init+0xa0>)
 80017a0:	22a8      	movs	r2, #168	; 0xa8
 80017a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <MX_TIM3_Init+0xa0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_TIM3_Init+0xa0>)
 80017ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_TIM3_Init+0xa0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_TIM3_Init+0xa0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017be:	2301      	movs	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017c6:	2301      	movs	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017d6:	2301      	movs	r3, #1
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4619      	mov	r1, r3
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <MX_TIM3_Init+0xa0>)
 80017ea:	f004 fe82 	bl	80064f2 <HAL_TIM_Encoder_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017f4:	f7ff fdd8 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_TIM3_Init+0xa0>)
 8001806:	f005 fbf3 	bl	8006ff0 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001810:	f7ff fdca 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	3730      	adds	r7, #48	; 0x30
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000310 	.word	0x20000310
 8001820:	40000400 	.word	0x40000400

08001824 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	615a      	str	r2, [r3, #20]
 800183a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <MX_TIM9_Init+0x80>)
 800183e:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <MX_TIM9_Init+0x84>)
 8001840:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <MX_TIM9_Init+0x80>)
 8001844:	22a7      	movs	r2, #167	; 0xa7
 8001846:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_TIM9_Init+0x80>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 255;
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <MX_TIM9_Init+0x80>)
 8001850:	22ff      	movs	r2, #255	; 0xff
 8001852:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_TIM9_Init+0x80>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_TIM9_Init+0x80>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001860:	4810      	ldr	r0, [pc, #64]	; (80018a4 <MX_TIM9_Init+0x80>)
 8001862:	f004 fd9e 	bl	80063a2 <HAL_TIM_PWM_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 800186c:	f7ff fd9c 	bl	80013a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001870:	2360      	movs	r3, #96	; 0x60
 8001872:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2200      	movs	r2, #0
 8001884:	4619      	mov	r1, r3
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <MX_TIM9_Init+0x80>)
 8001888:	f004 ff76 	bl	8006778 <HAL_TIM_PWM_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8001892:	f7ff fd89 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001896:	4803      	ldr	r0, [pc, #12]	; (80018a4 <MX_TIM9_Init+0x80>)
 8001898:	f000 f902 	bl	8001aa0 <HAL_TIM_MspPostInit>

}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000358 	.word	0x20000358
 80018a8:	40014000 	.word	0x40014000

080018ac <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80018b2:	463b      	mov	r3, r7
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <MX_TIM10_Init+0x88>)
 80018c0:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <MX_TIM10_Init+0x8c>)
 80018c2:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <MX_TIM10_Init+0x88>)
 80018c6:	22a8      	movs	r2, #168	; 0xa8
 80018c8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <MX_TIM10_Init+0x88>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <MX_TIM10_Init+0x88>)
 80018d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_TIM10_Init+0x88>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_TIM10_Init+0x88>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80018e4:	4813      	ldr	r0, [pc, #76]	; (8001934 <MX_TIM10_Init+0x88>)
 80018e6:	f004 fd0d 	bl	8006304 <HAL_TIM_Base_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 80018f0:	f7ff fd5a 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 80018f4:	480f      	ldr	r0, [pc, #60]	; (8001934 <MX_TIM10_Init+0x88>)
 80018f6:	f004 fda3 	bl	8006440 <HAL_TIM_IC_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8001900:	f7ff fd52 	bl	80013a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001904:	2300      	movs	r3, #0
 8001906:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001908:	2301      	movs	r3, #1
 800190a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	2200      	movs	r2, #0
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <MX_TIM10_Init+0x88>)
 800191c:	f004 fe8f 	bl	800663e <HAL_TIM_IC_ConfigChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 8001926:	f7ff fd3f 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200003a0 	.word	0x200003a0
 8001938:	40014400 	.word	0x40014400

0800193c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_TIM_Encoder_MspInit+0x84>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d12b      	bne.n	80019b6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_P_Pin|ENC_M_Pin;
 8001996:	23c0      	movs	r3, #192	; 0xc0
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019a6:	2302      	movs	r3, #2
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80019b2:	f000 fe21 	bl	80025f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40000400 	.word	0x40000400
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000

080019cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10d      	bne.n	80019fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_TIM_PWM_MspInit+0x40>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_TIM_PWM_MspInit+0x40>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_TIM_PWM_MspInit+0x40>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40014000 	.word	0x40014000
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM10)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_TIM_Base_MspInit+0x84>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12c      	bne.n	8001a8c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_TIM_Base_MspInit+0x88>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_TIM_Base_MspInit+0x88>)
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_TIM_Base_MspInit+0x88>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_TIM_Base_MspInit+0x88>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <HAL_TIM_Base_MspInit+0x88>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_TIM_Base_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = SENSOR_IC_Pin;
 8001a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSOR_IC_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <HAL_TIM_Base_MspInit+0x8c>)
 8001a88:	f000 fdb6 	bl	80025f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40014400 	.word	0x40014400
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020400 	.word	0x40020400

08001aa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_TIM_MspPostInit+0x68>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d11d      	bne.n	8001afe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001aee:	2303      	movs	r3, #3
 8001af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_TIM_MspPostInit+0x70>)
 8001afa:	f000 fd7d 	bl	80025f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40014000 	.word	0x40014000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40021000 	.word	0x40021000

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1a:	490e      	ldr	r1, [pc, #56]	; (8001b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b30:	4c0b      	ldr	r4, [pc, #44]	; (8001b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b3e:	f7ff fe0b 	bl	8001758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f005 ff75 	bl	8007a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff fb43 	bl	80011d0 <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b58:	0800b9c4 	.word	0x0800b9c4
  ldr r2, =_sbss
 8001b5c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b60:	20000800 	.word	0x20000800

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <HAL_Init+0x40>)
 8001b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_Init+0x40>)
 8001b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_Init+0x40>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 f94f 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fca4 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f967 	bl	8001e9e <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 f92f 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	200003e8 	.word	0x200003e8

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200003e8 	.word	0x200003e8

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff3e 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff31 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff feb6 	bl	8001c34 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e099      	b.n	8002008 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef4:	e00f      	b.n	8001f16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ef6:	f7ff fe9d 	bl	8001c34 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	d908      	bls.n	8001f16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e078      	b.n	8002008 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e8      	bne.n	8001ef6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4b38      	ldr	r3, [pc, #224]	; (8002010 <HAL_DMA_Init+0x158>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d107      	bne.n	8001f80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f023 0307 	bic.w	r3, r3, #7
 8001f96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d117      	bne.n	8001fda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00e      	beq.n	8001fda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fa9f 	bl	8002500 <DMA_CheckFifoParam>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2240      	movs	r2, #64	; 0x40
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e016      	b.n	8002008 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fa56 	bl	8002494 <DMA_CalcBaseAndBitshift>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	223f      	movs	r2, #63	; 0x3f
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	f010803f 	.word	0xf010803f

08002014 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_DMA_Start_IT+0x26>
 8002036:	2302      	movs	r3, #2
 8002038:	e040      	b.n	80020bc <HAL_DMA_Start_IT+0xa8>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d12f      	bne.n	80020ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f9e8 	bl	8002438 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	223f      	movs	r2, #63	; 0x3f
 800206e:	409a      	lsls	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0216 	orr.w	r2, r2, #22
 8002082:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0208 	orr.w	r2, r2, #8
 800209a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e005      	b.n	80020ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020b6:	2302      	movs	r3, #2
 80020b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d004      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00c      	b.n	80020fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2205      	movs	r2, #5
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0201 	bic.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002114:	4b8e      	ldr	r3, [pc, #568]	; (8002350 <HAL_DMA_IRQHandler+0x248>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a8e      	ldr	r2, [pc, #568]	; (8002354 <HAL_DMA_IRQHandler+0x24c>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0a9b      	lsrs	r3, r3, #10
 8002120:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002132:	2208      	movs	r2, #8
 8002134:	409a      	lsls	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01a      	beq.n	8002174 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0204 	bic.w	r2, r2, #4
 800215a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	2208      	movs	r2, #8
 8002162:	409a      	lsls	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2201      	movs	r2, #1
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d012      	beq.n	80021aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2201      	movs	r2, #1
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f043 0202 	orr.w	r2, r3, #2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	2204      	movs	r2, #4
 80021b0:	409a      	lsls	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d012      	beq.n	80021e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00b      	beq.n	80021e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	2204      	movs	r2, #4
 80021ce:	409a      	lsls	r2, r3
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	f043 0204 	orr.w	r2, r3, #4
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	2210      	movs	r2, #16
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d043      	beq.n	8002278 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d03c      	beq.n	8002278 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	2210      	movs	r2, #16
 8002204:	409a      	lsls	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d018      	beq.n	800224a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d108      	bne.n	8002238 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	d024      	beq.n	8002278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
 8002236:	e01f      	b.n	8002278 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01b      	beq.n	8002278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
 8002248:	e016      	b.n	8002278 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0208 	bic.w	r2, r2, #8
 8002266:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	2220      	movs	r2, #32
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 808f 	beq.w	80023a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8087 	beq.w	80023a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	2220      	movs	r2, #32
 80022a0:	409a      	lsls	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d136      	bne.n	8002320 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0216 	bic.w	r2, r2, #22
 80022c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <HAL_DMA_IRQHandler+0x1da>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0208 	bic.w	r2, r2, #8
 80022f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f6:	223f      	movs	r2, #63	; 0x3f
 80022f8:	409a      	lsls	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002312:	2b00      	cmp	r3, #0
 8002314:	d07e      	beq.n	8002414 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	4798      	blx	r3
        }
        return;
 800231e:	e079      	b.n	8002414 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01d      	beq.n	800236a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10d      	bne.n	8002358 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	2b00      	cmp	r3, #0
 8002342:	d031      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
 800234c:	e02c      	b.n	80023a8 <HAL_DMA_IRQHandler+0x2a0>
 800234e:	bf00      	nop
 8002350:	20000000 	.word	0x20000000
 8002354:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d023      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
 8002368:	e01e      	b.n	80023a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10f      	bne.n	8002398 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0210 	bic.w	r2, r2, #16
 8002386:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d032      	beq.n	8002416 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d022      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2205      	movs	r2, #5
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3301      	adds	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d307      	bcc.n	80023f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f2      	bne.n	80023d4 <HAL_DMA_IRQHandler+0x2cc>
 80023ee:	e000      	b.n	80023f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
 8002412:	e000      	b.n	8002416 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002414:	bf00      	nop
    }
  }
}
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800242a:	b2db      	uxtb	r3, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002454:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b40      	cmp	r3, #64	; 0x40
 8002464:	d108      	bne.n	8002478 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002476:	e007      	b.n	8002488 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	60da      	str	r2, [r3, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	3b10      	subs	r3, #16
 80024a4:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <DMA_CalcBaseAndBitshift+0x64>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ae:	4a13      	ldr	r2, [pc, #76]	; (80024fc <DMA_CalcBaseAndBitshift+0x68>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d909      	bls.n	80024d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	1d1a      	adds	r2, r3, #4
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	659a      	str	r2, [r3, #88]	; 0x58
 80024d4:	e007      	b.n	80024e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024de:	f023 0303 	bic.w	r3, r3, #3
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	aaaaaaab 	.word	0xaaaaaaab
 80024fc:	0800a8b0 	.word	0x0800a8b0

08002500 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d11f      	bne.n	800255a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d856      	bhi.n	80025ce <DMA_CheckFifoParam+0xce>
 8002520:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <DMA_CheckFifoParam+0x28>)
 8002522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002526:	bf00      	nop
 8002528:	08002539 	.word	0x08002539
 800252c:	0800254b 	.word	0x0800254b
 8002530:	08002539 	.word	0x08002539
 8002534:	080025cf 	.word	0x080025cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d046      	beq.n	80025d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002548:	e043      	b.n	80025d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002552:	d140      	bne.n	80025d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002558:	e03d      	b.n	80025d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002562:	d121      	bne.n	80025a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b03      	cmp	r3, #3
 8002568:	d837      	bhi.n	80025da <DMA_CheckFifoParam+0xda>
 800256a:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <DMA_CheckFifoParam+0x70>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	08002581 	.word	0x08002581
 8002574:	08002587 	.word	0x08002587
 8002578:	08002581 	.word	0x08002581
 800257c:	08002599 	.word	0x08002599
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
      break;
 8002584:	e030      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d025      	beq.n	80025de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002596:	e022      	b.n	80025de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025a0:	d11f      	bne.n	80025e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025a6:	e01c      	b.n	80025e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d903      	bls.n	80025b6 <DMA_CheckFifoParam+0xb6>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d003      	beq.n	80025bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025b4:	e018      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
      break;
 80025ba:	e015      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00e      	beq.n	80025e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      break;
 80025cc:	e00b      	b.n	80025e6 <DMA_CheckFifoParam+0xe6>
      break;
 80025ce:	bf00      	nop
 80025d0:	e00a      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;
 80025d2:	bf00      	nop
 80025d4:	e008      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;
 80025d6:	bf00      	nop
 80025d8:	e006      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;
 80025da:	bf00      	nop
 80025dc:	e004      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e002      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025e2:	bf00      	nop
 80025e4:	e000      	b.n	80025e8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
    }
  } 
  
  return status; 
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop

080025f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	e16b      	b.n	80028ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	f040 815a 	bne.w	80028e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d005      	beq.n	800264a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002646:	2b02      	cmp	r3, #2
 8002648:	d130      	bne.n	80026ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	2203      	movs	r2, #3
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 0201 	and.w	r2, r3, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d017      	beq.n	80026e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d123      	bne.n	800273c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	08da      	lsrs	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3208      	adds	r2, #8
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0203 	and.w	r2, r3, #3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80b4 	beq.w	80028e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b60      	ldr	r3, [pc, #384]	; (8002904 <HAL_GPIO_Init+0x30c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a5f      	ldr	r2, [pc, #380]	; (8002904 <HAL_GPIO_Init+0x30c>)
 8002788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <HAL_GPIO_Init+0x30c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279a:	4a5b      	ldr	r2, [pc, #364]	; (8002908 <HAL_GPIO_Init+0x310>)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a52      	ldr	r2, [pc, #328]	; (800290c <HAL_GPIO_Init+0x314>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d02b      	beq.n	800281e <HAL_GPIO_Init+0x226>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a51      	ldr	r2, [pc, #324]	; (8002910 <HAL_GPIO_Init+0x318>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d025      	beq.n	800281a <HAL_GPIO_Init+0x222>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a50      	ldr	r2, [pc, #320]	; (8002914 <HAL_GPIO_Init+0x31c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01f      	beq.n	8002816 <HAL_GPIO_Init+0x21e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4f      	ldr	r2, [pc, #316]	; (8002918 <HAL_GPIO_Init+0x320>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x21a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4e      	ldr	r2, [pc, #312]	; (800291c <HAL_GPIO_Init+0x324>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x216>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4d      	ldr	r2, [pc, #308]	; (8002920 <HAL_GPIO_Init+0x328>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x212>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4c      	ldr	r2, [pc, #304]	; (8002924 <HAL_GPIO_Init+0x32c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x20e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4b      	ldr	r2, [pc, #300]	; (8002928 <HAL_GPIO_Init+0x330>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x20a>
 80027fe:	2307      	movs	r3, #7
 8002800:	e00e      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002802:	2308      	movs	r3, #8
 8002804:	e00c      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002806:	2306      	movs	r3, #6
 8002808:	e00a      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800280a:	2305      	movs	r3, #5
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800280e:	2304      	movs	r3, #4
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800281e:	2300      	movs	r3, #0
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f002 0203 	and.w	r2, r2, #3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002830:	4935      	ldr	r1, [pc, #212]	; (8002908 <HAL_GPIO_Init+0x310>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b3b      	ldr	r3, [pc, #236]	; (800292c <HAL_GPIO_Init+0x334>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002862:	4a32      	ldr	r2, [pc, #200]	; (800292c <HAL_GPIO_Init+0x334>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002868:	4b30      	ldr	r3, [pc, #192]	; (800292c <HAL_GPIO_Init+0x334>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800288c:	4a27      	ldr	r2, [pc, #156]	; (800292c <HAL_GPIO_Init+0x334>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <HAL_GPIO_Init+0x334>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b6:	4a1d      	ldr	r2, [pc, #116]	; (800292c <HAL_GPIO_Init+0x334>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_GPIO_Init+0x334>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e0:	4a12      	ldr	r2, [pc, #72]	; (800292c <HAL_GPIO_Init+0x334>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	f67f ae90 	bls.w	8002614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40013800 	.word	0x40013800
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40021400 	.word	0x40021400
 8002924:	40021800 	.word	0x40021800
 8002928:	40021c00 	.word	0x40021c00
 800292c:	40013c00 	.word	0x40013c00

08002930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800294c:	e003      	b.n	8002956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	619a      	str	r2, [r3, #24]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e12b      	b.n	8002bce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fbc8 	bl	8001120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2224      	movs	r2, #36	; 0x24
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029c8:	f003 f8ac 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 80029cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4a81      	ldr	r2, [pc, #516]	; (8002bd8 <HAL_I2C_Init+0x274>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d807      	bhi.n	80029e8 <HAL_I2C_Init+0x84>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a80      	ldr	r2, [pc, #512]	; (8002bdc <HAL_I2C_Init+0x278>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	bf94      	ite	ls
 80029e0:	2301      	movls	r3, #1
 80029e2:	2300      	movhi	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e006      	b.n	80029f6 <HAL_I2C_Init+0x92>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a7d      	ldr	r2, [pc, #500]	; (8002be0 <HAL_I2C_Init+0x27c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	bf94      	ite	ls
 80029f0:	2301      	movls	r3, #1
 80029f2:	2300      	movhi	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0e7      	b.n	8002bce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4a78      	ldr	r2, [pc, #480]	; (8002be4 <HAL_I2C_Init+0x280>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	0c9b      	lsrs	r3, r3, #18
 8002a08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a6a      	ldr	r2, [pc, #424]	; (8002bd8 <HAL_I2C_Init+0x274>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d802      	bhi.n	8002a38 <HAL_I2C_Init+0xd4>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	3301      	adds	r3, #1
 8002a36:	e009      	b.n	8002a4c <HAL_I2C_Init+0xe8>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	4a69      	ldr	r2, [pc, #420]	; (8002be8 <HAL_I2C_Init+0x284>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	495c      	ldr	r1, [pc, #368]	; (8002bd8 <HAL_I2C_Init+0x274>)
 8002a68:	428b      	cmp	r3, r1
 8002a6a:	d819      	bhi.n	8002aa0 <HAL_I2C_Init+0x13c>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e59      	subs	r1, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a7a:	1c59      	adds	r1, r3, #1
 8002a7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a80:	400b      	ands	r3, r1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_I2C_Init+0x138>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1e59      	subs	r1, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9a:	e051      	b.n	8002b40 <HAL_I2C_Init+0x1dc>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	e04f      	b.n	8002b40 <HAL_I2C_Init+0x1dc>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d111      	bne.n	8002acc <HAL_I2C_Init+0x168>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1e58      	subs	r0, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e012      	b.n	8002af2 <HAL_I2C_Init+0x18e>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e58      	subs	r0, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	0099      	lsls	r1, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Init+0x196>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e022      	b.n	8002b40 <HAL_I2C_Init+0x1dc>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10e      	bne.n	8002b20 <HAL_I2C_Init+0x1bc>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1e58      	subs	r0, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6859      	ldr	r1, [r3, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	440b      	add	r3, r1
 8002b10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1e:	e00f      	b.n	8002b40 <HAL_I2C_Init+0x1dc>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1e58      	subs	r0, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	0099      	lsls	r1, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	6809      	ldr	r1, [r1, #0]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6911      	ldr	r1, [r2, #16]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68d2      	ldr	r2, [r2, #12]
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	000186a0 	.word	0x000186a0
 8002bdc:	001e847f 	.word	0x001e847f
 8002be0:	003d08ff 	.word	0x003d08ff
 8002be4:	431bde83 	.word	0x431bde83
 8002be8:	10624dd3 	.word	0x10624dd3

08002bec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	817b      	strh	r3, [r7, #10]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7ff f818 	bl	8001c34 <HAL_GetTick>
 8002c04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	f040 80e0 	bne.w	8002dd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2319      	movs	r3, #25
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4970      	ldr	r1, [pc, #448]	; (8002de0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f002 f8e6 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e0d3      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_I2C_Master_Transmit+0x50>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e0cc      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d007      	beq.n	8002c62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2221      	movs	r2, #33	; 0x21
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	893a      	ldrh	r2, [r7, #8]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a50      	ldr	r2, [pc, #320]	; (8002de4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ca4:	8979      	ldrh	r1, [r7, #10]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f001 fea8 	bl	8004a00 <I2C_MasterRequestWrite>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e08d      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cd0:	e066      	b.n	8002da0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	6a39      	ldr	r1, [r7, #32]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f002 f960 	bl	8004f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d107      	bne.n	8002cfa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06b      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d11b      	bne.n	8002d74 <HAL_I2C_Master_Transmit+0x188>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d017      	beq.n	8002d74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	6a39      	ldr	r1, [r7, #32]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f002 f950 	bl	800501e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00d      	beq.n	8002da0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d107      	bne.n	8002d9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e01a      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d194      	bne.n	8002cd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	00100002 	.word	0x00100002
 8002de4:	ffff0000 	.word	0xffff0000

08002de8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	461a      	mov	r2, r3
 8002df4:	460b      	mov	r3, r1
 8002df6:	817b      	strh	r3, [r7, #10]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7fe ff1a 	bl	8001c34 <HAL_GetTick>
 8002e00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	f040 820b 	bne.w	8003226 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2319      	movs	r3, #25
 8002e16:	2201      	movs	r2, #1
 8002e18:	497c      	ldr	r1, [pc, #496]	; (800300c <HAL_I2C_Master_Receive+0x224>)
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f001 ffe8 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
 8002e28:	e1fe      	b.n	8003228 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_I2C_Master_Receive+0x50>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e1f7      	b.n	8003228 <HAL_I2C_Master_Receive+0x440>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d007      	beq.n	8002e5e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2222      	movs	r2, #34	; 0x22
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2210      	movs	r2, #16
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	893a      	ldrh	r2, [r7, #8]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4a5c      	ldr	r2, [pc, #368]	; (8003010 <HAL_I2C_Master_Receive+0x228>)
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f001 fe2c 	bl	8004b04 <I2C_MasterRequestRead>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e1b8      	b.n	8003228 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d113      	bne.n	8002ee6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	623b      	str	r3, [r7, #32]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	623b      	str	r3, [r7, #32]
 8002ed2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e18c      	b.n	8003200 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d11b      	bne.n	8002f26 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e16c      	b.n	8003200 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d11b      	bne.n	8002f66 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	e14c      	b.n	8003200 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f8c:	e138      	b.n	8003200 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	f200 80f1 	bhi.w	800317a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d123      	bne.n	8002fe8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f002 f8ad 	bl	8005104 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e139      	b.n	8003228 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe6:	e10b      	b.n	8003200 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d14e      	bne.n	800308e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4906      	ldr	r1, [pc, #24]	; (8003014 <HAL_I2C_Master_Receive+0x22c>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f001 fef8 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e10e      	b.n	8003228 <HAL_I2C_Master_Receive+0x440>
 800300a:	bf00      	nop
 800300c:	00100002 	.word	0x00100002
 8003010:	ffff0000 	.word	0xffff0000
 8003014:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800308c:	e0b8      	b.n	8003200 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	2200      	movs	r2, #0
 8003096:	4966      	ldr	r1, [pc, #408]	; (8003230 <HAL_I2C_Master_Receive+0x448>)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f001 fea9 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0bf      	b.n	8003228 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	2200      	movs	r2, #0
 80030f2:	494f      	ldr	r1, [pc, #316]	; (8003230 <HAL_I2C_Master_Receive+0x448>)
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f001 fe7b 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e091      	b.n	8003228 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003178:	e042      	b.n	8003200 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f001 ffc0 	bl	8005104 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e04c      	b.n	8003228 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d118      	bne.n	8003200 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	f47f aec2 	bne.w	8002f8e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003226:	2302      	movs	r3, #2
  }
}
 8003228:	4618      	mov	r0, r3
 800322a:	3728      	adds	r7, #40	; 0x28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	00010004 	.word	0x00010004

08003234 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003254:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b10      	cmp	r3, #16
 8003262:	d003      	beq.n	800326c <HAL_I2C_EV_IRQHandler+0x38>
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	f040 80c1 	bne.w	80033ee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800328c:	d003      	beq.n	8003296 <HAL_I2C_EV_IRQHandler+0x62>
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003294:	d101      	bne.n	800329a <HAL_I2C_EV_IRQHandler+0x66>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_I2C_EV_IRQHandler+0x68>
 800329a:	2300      	movs	r3, #0
 800329c:	2b01      	cmp	r3, #1
 800329e:	f000 8132 	beq.w	8003506 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00c      	beq.n	80032c6 <HAL_I2C_EV_IRQHandler+0x92>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	0a5b      	lsrs	r3, r3, #9
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d006      	beq.n	80032c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f001 ffa8 	bl	800520e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fd83 	bl	8003dca <I2C_Master_SB>
 80032c4:	e092      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	08db      	lsrs	r3, r3, #3
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	0a5b      	lsrs	r3, r3, #9
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fdf9 	bl	8003ed6 <I2C_Master_ADD10>
 80032e4:	e082      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_I2C_EV_IRQHandler+0xd2>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	0a5b      	lsrs	r3, r3, #9
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fe13 	bl	8003f2a <I2C_Master_ADDR>
 8003304:	e072      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d03b      	beq.n	800338a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003320:	f000 80f3 	beq.w	800350a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	09db      	lsrs	r3, r3, #7
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00f      	beq.n	8003350 <HAL_I2C_EV_IRQHandler+0x11c>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <HAL_I2C_EV_IRQHandler+0x11c>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d103      	bne.n	8003350 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f9f3 	bl	8003734 <I2C_MasterTransmit_TXE>
 800334e:	e04d      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80d6 	beq.w	800350a <HAL_I2C_EV_IRQHandler+0x2d6>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	0a5b      	lsrs	r3, r3, #9
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80cf 	beq.w	800350a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800336c:	7bbb      	ldrb	r3, [r7, #14]
 800336e:	2b21      	cmp	r3, #33	; 0x21
 8003370:	d103      	bne.n	800337a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fa7a 	bl	800386c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003378:	e0c7      	b.n	800350a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b40      	cmp	r3, #64	; 0x40
 800337e:	f040 80c4 	bne.w	800350a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fae8 	bl	8003958 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003388:	e0bf      	b.n	800350a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003398:	f000 80b7 	beq.w	800350a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00f      	beq.n	80033c8 <HAL_I2C_EV_IRQHandler+0x194>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	0a9b      	lsrs	r3, r3, #10
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <HAL_I2C_EV_IRQHandler+0x194>
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fb5d 	bl	8003a80 <I2C_MasterReceive_RXNE>
 80033c6:	e011      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 809a 	beq.w	800350a <HAL_I2C_EV_IRQHandler+0x2d6>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	0a5b      	lsrs	r3, r3, #9
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8093 	beq.w	800350a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fc06 	bl	8003bf6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ea:	e08e      	b.n	800350a <HAL_I2C_EV_IRQHandler+0x2d6>
 80033ec:	e08d      	b.n	800350a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d004      	beq.n	8003400 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	e007      	b.n	8003410 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d012      	beq.n	8003442 <HAL_I2C_EV_IRQHandler+0x20e>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	0a5b      	lsrs	r3, r3, #9
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00c      	beq.n	8003442 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003438:	69b9      	ldr	r1, [r7, #24]
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 ffc4 	bl	80043c8 <I2C_Slave_ADDR>
 8003440:	e066      	b.n	8003510 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_I2C_EV_IRQHandler+0x22e>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	0a5b      	lsrs	r3, r3, #9
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fffe 	bl	800445c <I2C_Slave_STOPF>
 8003460:	e056      	b.n	8003510 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003462:	7bbb      	ldrb	r3, [r7, #14]
 8003464:	2b21      	cmp	r3, #33	; 0x21
 8003466:	d002      	beq.n	800346e <HAL_I2C_EV_IRQHandler+0x23a>
 8003468:	7bbb      	ldrb	r3, [r7, #14]
 800346a:	2b29      	cmp	r3, #41	; 0x29
 800346c:	d125      	bne.n	80034ba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	09db      	lsrs	r3, r3, #7
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00f      	beq.n	800349a <HAL_I2C_EV_IRQHandler+0x266>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	0a9b      	lsrs	r3, r3, #10
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_I2C_EV_IRQHandler+0x266>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 feda 	bl	800424c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003498:	e039      	b.n	800350e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	089b      	lsrs	r3, r3, #2
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d033      	beq.n	800350e <HAL_I2C_EV_IRQHandler+0x2da>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	0a5b      	lsrs	r3, r3, #9
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d02d      	beq.n	800350e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 ff07 	bl	80042c6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b8:	e029      	b.n	800350e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00f      	beq.n	80034e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	0a9b      	lsrs	r3, r3, #10
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 ff12 	bl	8004308 <I2C_SlaveReceive_RXNE>
 80034e4:	e014      	b.n	8003510 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00e      	beq.n	8003510 <HAL_I2C_EV_IRQHandler+0x2dc>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	0a5b      	lsrs	r3, r3, #9
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 ff40 	bl	8004384 <I2C_SlaveReceive_BTF>
 8003504:	e004      	b.n	8003510 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800350e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b08a      	sub	sp, #40	; 0x28
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003538:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00e      	beq.n	8003564 <HAL_I2C_ER_IRQHandler+0x4e>
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003562:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	0a5b      	lsrs	r3, r3, #9
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <HAL_I2C_ER_IRQHandler+0x78>
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	f043 0302 	orr.w	r3, r3, #2
 8003582:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800358c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	0a9b      	lsrs	r3, r3, #10
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d03f      	beq.n	800361a <HAL_I2C_ER_IRQHandler+0x104>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d039      	beq.n	800361a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80035a6:	7efb      	ldrb	r3, [r7, #27]
 80035a8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80035c0:	7ebb      	ldrb	r3, [r7, #26]
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d112      	bne.n	80035ec <HAL_I2C_ER_IRQHandler+0xd6>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10f      	bne.n	80035ec <HAL_I2C_ER_IRQHandler+0xd6>
 80035cc:	7cfb      	ldrb	r3, [r7, #19]
 80035ce:	2b21      	cmp	r3, #33	; 0x21
 80035d0:	d008      	beq.n	80035e4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b29      	cmp	r3, #41	; 0x29
 80035d6:	d005      	beq.n	80035e4 <HAL_I2C_ER_IRQHandler+0xce>
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	2b28      	cmp	r3, #40	; 0x28
 80035dc:	d106      	bne.n	80035ec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b21      	cmp	r3, #33	; 0x21
 80035e2:	d103      	bne.n	80035ec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f001 f869 	bl	80046bc <I2C_Slave_AF>
 80035ea:	e016      	b.n	800361a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035f4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035fe:	7efb      	ldrb	r3, [r7, #27]
 8003600:	2b10      	cmp	r3, #16
 8003602:	d002      	beq.n	800360a <HAL_I2C_ER_IRQHandler+0xf4>
 8003604:	7efb      	ldrb	r3, [r7, #27]
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d107      	bne.n	800361a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003618:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	0adb      	lsrs	r3, r3, #11
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00e      	beq.n	8003644 <HAL_I2C_ER_IRQHandler+0x12e>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003642:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f001 f8a0 	bl	800479c <I2C_ITError>
  }
}
 800365c:	bf00      	nop
 800365e:	3728      	adds	r7, #40	; 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
 80036c0:	4613      	mov	r3, r2
 80036c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003742:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800374a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	2b00      	cmp	r3, #0
 8003758:	d150      	bne.n	80037fc <I2C_MasterTransmit_TXE+0xc8>
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b21      	cmp	r3, #33	; 0x21
 800375e:	d14d      	bne.n	80037fc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b08      	cmp	r3, #8
 8003764:	d01d      	beq.n	80037a2 <I2C_MasterTransmit_TXE+0x6e>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b20      	cmp	r3, #32
 800376a:	d01a      	beq.n	80037a2 <I2C_MasterTransmit_TXE+0x6e>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003772:	d016      	beq.n	80037a2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003782:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2211      	movs	r2, #17
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ff62 	bl	8003664 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037a0:	e060      	b.n	8003864 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037b0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d107      	bne.n	80037ec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff7d 	bl	80036e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037ea:	e03b      	b.n	8003864 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff35 	bl	8003664 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037fa:	e033      	b.n	8003864 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b21      	cmp	r3, #33	; 0x21
 8003800:	d005      	beq.n	800380e <I2C_MasterTransmit_TXE+0xda>
 8003802:	7bbb      	ldrb	r3, [r7, #14]
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d12d      	bne.n	8003864 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b22      	cmp	r3, #34	; 0x22
 800380c:	d12a      	bne.n	8003864 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d108      	bne.n	800382a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003826:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003828:	e01c      	b.n	8003864 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d103      	bne.n	800383e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f88e 	bl	8003958 <I2C_MemoryTransmit_TXE_BTF>
}
 800383c:	e012      	b.n	8003864 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003862:	e7ff      	b.n	8003864 <I2C_MasterTransmit_TXE+0x130>
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b21      	cmp	r3, #33	; 0x21
 8003884:	d164      	bne.n	8003950 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d012      	beq.n	80038b6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038b4:	e04c      	b.n	8003950 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d01d      	beq.n	80038f8 <I2C_MasterTransmit_BTF+0x8c>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d01a      	beq.n	80038f8 <I2C_MasterTransmit_BTF+0x8c>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c8:	d016      	beq.n	80038f8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2211      	movs	r2, #17
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff feb7 	bl	8003664 <HAL_I2C_MasterTxCpltCallback>
}
 80038f6:	e02b      	b.n	8003950 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003906:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003916:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d107      	bne.n	8003942 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff fed2 	bl	80036e4 <HAL_I2C_MemTxCpltCallback>
}
 8003940:	e006      	b.n	8003950 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff fe8a 	bl	8003664 <HAL_I2C_MasterTxCpltCallback>
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003966:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11d      	bne.n	80039ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	2b01      	cmp	r3, #1
 8003976:	d10b      	bne.n	8003990 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397c:	b2da      	uxtb	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003988:	1c9a      	adds	r2, r3, #2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800398e:	e073      	b.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003994:	b29b      	uxth	r3, r3
 8003996:	121b      	asrs	r3, r3, #8
 8003998:	b2da      	uxtb	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039aa:	e065      	b.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d10b      	bne.n	80039cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039ca:	e055      	b.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d151      	bne.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b22      	cmp	r3, #34	; 0x22
 80039d8:	d10d      	bne.n	80039f6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039f4:	e040      	b.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b21      	cmp	r3, #33	; 0x21
 8003a04:	d112      	bne.n	8003a2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a2a:	e025      	b.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d120      	bne.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b21      	cmp	r3, #33	; 0x21
 8003a3a:	d11d      	bne.n	8003a78 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a4a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fe36 	bl	80036e4 <HAL_I2C_MemTxCpltCallback>
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b22      	cmp	r3, #34	; 0x22
 8003a92:	f040 80ac 	bne.w	8003bee <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d921      	bls.n	8003ae8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	f040 808c 	bne.w	8003bee <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ae6:	e082      	b.n	8003bee <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d075      	beq.n	8003bdc <I2C_MasterReceive_RXNE+0x15c>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d002      	beq.n	8003afc <I2C_MasterReceive_RXNE+0x7c>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d16f      	bne.n	8003bdc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f001 facf 	bl	80050a0 <I2C_WaitOnSTOPRequestThroughIT>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d142      	bne.n	8003b8e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b16:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b26:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b40      	cmp	r3, #64	; 0x40
 8003b60:	d10a      	bne.n	8003b78 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fdc1 	bl	80036f8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b76:	e03a      	b.n	8003bee <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2212      	movs	r2, #18
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff fd76 	bl	8003678 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b8c:	e02f      	b.n	8003bee <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fd99 	bl	800370c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bda:	e008      	b.n	8003bee <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	605a      	str	r2, [r3, #4]
}
 8003bec:	e7ff      	b.n	8003bee <I2C_MasterReceive_RXNE+0x16e>
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d11b      	bne.n	8003c46 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c44:	e0bd      	b.n	8003dc2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d129      	bne.n	8003ca4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d00a      	beq.n	8003c7c <I2C_MasterReceive_BTF+0x86>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d007      	beq.n	8003c7c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ca2:	e08e      	b.n	8003dc2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d176      	bne.n	8003d9c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d002      	beq.n	8003cba <I2C_MasterReceive_BTF+0xc4>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d108      	bne.n	8003ccc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e019      	b.n	8003d00 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d002      	beq.n	8003cd8 <I2C_MasterReceive_BTF+0xe2>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d108      	bne.n	8003cea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e00a      	b.n	8003d00 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d007      	beq.n	8003d00 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d5a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d10a      	bne.n	8003d86 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fcba 	bl	80036f8 <HAL_I2C_MemRxCpltCallback>
}
 8003d84:	e01d      	b.n	8003dc2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2212      	movs	r2, #18
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fc6f 	bl	8003678 <HAL_I2C_MasterRxCpltCallback>
}
 8003d9a:	e012      	b.n	8003dc2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b40      	cmp	r3, #64	; 0x40
 8003ddc:	d117      	bne.n	8003e0e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003df6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003df8:	e067      	b.n	8003eca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	611a      	str	r2, [r3, #16]
}
 8003e0c:	e05d      	b.n	8003eca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e16:	d133      	bne.n	8003e80 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b21      	cmp	r3, #33	; 0x21
 8003e22:	d109      	bne.n	8003e38 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e34:	611a      	str	r2, [r3, #16]
 8003e36:	e008      	b.n	8003e4a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <I2C_Master_SB+0x92>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d108      	bne.n	8003e6e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d032      	beq.n	8003eca <I2C_Master_SB+0x100>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d02d      	beq.n	8003eca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7c:	605a      	str	r2, [r3, #4]
}
 8003e7e:	e024      	b.n	8003eca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10e      	bne.n	8003ea6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	11db      	asrs	r3, r3, #7
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 0306 	and.w	r3, r3, #6
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f063 030f 	orn	r3, r3, #15
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]
}
 8003ea4:	e011      	b.n	8003eca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10d      	bne.n	8003eca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	11db      	asrs	r3, r3, #7
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 0306 	and.w	r3, r3, #6
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f063 030e 	orn	r3, r3, #14
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <I2C_Master_ADD10+0x26>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d108      	bne.n	8003f0e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00c      	beq.n	8003f1e <I2C_Master_ADD10+0x48>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1c:	605a      	str	r2, [r3, #4]
  }
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b091      	sub	sp, #68	; 0x44
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b22      	cmp	r3, #34	; 0x22
 8003f52:	f040 8169 	bne.w	8004228 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10f      	bne.n	8003f7e <I2C_Master_ADDR+0x54>
 8003f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d10b      	bne.n	8003f7e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f66:	2300      	movs	r3, #0
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	633b      	str	r3, [r7, #48]	; 0x30
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	633b      	str	r3, [r7, #48]	; 0x30
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	e160      	b.n	8004240 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d11d      	bne.n	8003fc2 <I2C_Master_ADDR+0x98>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f8e:	d118      	bne.n	8003fc2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f90:	2300      	movs	r3, #0
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	651a      	str	r2, [r3, #80]	; 0x50
 8003fc0:	e13e      	b.n	8004240 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d113      	bne.n	8003ff4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e115      	b.n	8004220 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	f040 808a 	bne.w	8004114 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004006:	d137      	bne.n	8004078 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004016:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004026:	d113      	bne.n	8004050 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004036:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004038:	2300      	movs	r3, #0
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	e0e7      	b.n	8004220 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004050:	2300      	movs	r3, #0
 8004052:	623b      	str	r3, [r7, #32]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e0d3      	b.n	8004220 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	2b08      	cmp	r3, #8
 800407c:	d02e      	beq.n	80040dc <I2C_Master_ADDR+0x1b2>
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	2b20      	cmp	r3, #32
 8004082:	d02b      	beq.n	80040dc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004086:	2b12      	cmp	r3, #18
 8004088:	d102      	bne.n	8004090 <I2C_Master_ADDR+0x166>
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	2b01      	cmp	r3, #1
 800408e:	d125      	bne.n	80040dc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004092:	2b04      	cmp	r3, #4
 8004094:	d00e      	beq.n	80040b4 <I2C_Master_ADDR+0x18a>
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	2b02      	cmp	r3, #2
 800409a:	d00b      	beq.n	80040b4 <I2C_Master_ADDR+0x18a>
 800409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d008      	beq.n	80040b4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e007      	b.n	80040c4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040c2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	e0a1      	b.n	8004220 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	61bb      	str	r3, [r7, #24]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e085      	b.n	8004220 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d14d      	bne.n	80041ba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	2b04      	cmp	r3, #4
 8004122:	d016      	beq.n	8004152 <I2C_Master_ADDR+0x228>
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	2b02      	cmp	r3, #2
 8004128:	d013      	beq.n	8004152 <I2C_Master_ADDR+0x228>
 800412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412c:	2b10      	cmp	r3, #16
 800412e:	d010      	beq.n	8004152 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e007      	b.n	8004162 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004160:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800416c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004170:	d117      	bne.n	80041a2 <I2C_Master_ADDR+0x278>
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004178:	d00b      	beq.n	8004192 <I2C_Master_ADDR+0x268>
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	2b01      	cmp	r3, #1
 800417e:	d008      	beq.n	8004192 <I2C_Master_ADDR+0x268>
 8004180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004182:	2b08      	cmp	r3, #8
 8004184:	d005      	beq.n	8004192 <I2C_Master_ADDR+0x268>
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	2b10      	cmp	r3, #16
 800418a:	d002      	beq.n	8004192 <I2C_Master_ADDR+0x268>
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	2b20      	cmp	r3, #32
 8004190:	d107      	bne.n	80041a2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	e032      	b.n	8004220 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d8:	d117      	bne.n	800420a <I2C_Master_ADDR+0x2e0>
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041e0:	d00b      	beq.n	80041fa <I2C_Master_ADDR+0x2d0>
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d008      	beq.n	80041fa <I2C_Master_ADDR+0x2d0>
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d005      	beq.n	80041fa <I2C_Master_ADDR+0x2d0>
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d002      	beq.n	80041fa <I2C_Master_ADDR+0x2d0>
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d107      	bne.n	800420a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004208:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004226:	e00b      	b.n	8004240 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
}
 800423e:	e7ff      	b.n	8004240 <I2C_Master_ADDR+0x316>
 8004240:	bf00      	nop
 8004242:	3744      	adds	r7, #68	; 0x44
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d02b      	beq.n	80042be <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	781a      	ldrb	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d114      	bne.n	80042be <I2C_SlaveTransmit_TXE+0x72>
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b29      	cmp	r3, #41	; 0x29
 8004298:	d111      	bne.n	80042be <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2221      	movs	r2, #33	; 0x21
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2228      	movs	r2, #40	; 0x28
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff f9e7 	bl	800368c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042be:	bf00      	nop
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d011      	beq.n	80042fc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004316:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d02c      	beq.n	800437c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d114      	bne.n	800437c <I2C_SlaveReceive_RXNE+0x74>
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b2a      	cmp	r3, #42	; 0x2a
 8004356:	d111      	bne.n	800437c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004366:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2222      	movs	r2, #34	; 0x22
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2228      	movs	r2, #40	; 0x28
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff f992 	bl	80036a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d012      	beq.n	80043bc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043e2:	2b28      	cmp	r3, #40	; 0x28
 80043e4:	d127      	bne.n	8004436 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	09db      	lsrs	r3, r3, #7
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d103      	bne.n	800441a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	81bb      	strh	r3, [r7, #12]
 8004418:	e002      	b.n	8004420 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004428:	89ba      	ldrh	r2, [r7, #12]
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff f940 	bl	80036b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004434:	e00e      	b.n	8004454 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800447a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800447c:	2300      	movs	r3, #0
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b8:	d172      	bne.n	80045a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b22      	cmp	r3, #34	; 0x22
 80044be:	d002      	beq.n	80044c6 <I2C_Slave_STOPF+0x6a>
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b2a      	cmp	r3, #42	; 0x2a
 80044c4:	d135      	bne.n	8004532 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f043 0204 	orr.w	r2, r3, #4
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fd ff8c 	bl	800241c <HAL_DMA_GetState>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d049      	beq.n	800459e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	4a69      	ldr	r2, [pc, #420]	; (80046b4 <I2C_Slave_STOPF+0x258>)
 8004510:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd fdd4 	bl	80020c4 <HAL_DMA_Abort_IT>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d03d      	beq.n	800459e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800452c:	4610      	mov	r0, r2
 800452e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004530:	e035      	b.n	800459e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	b29a      	uxth	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f043 0204 	orr.w	r2, r3, #4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004564:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456a:	4618      	mov	r0, r3
 800456c:	f7fd ff56 	bl	800241c <HAL_DMA_GetState>
 8004570:	4603      	mov	r3, r0
 8004572:	2b01      	cmp	r3, #1
 8004574:	d014      	beq.n	80045a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	4a4e      	ldr	r2, [pc, #312]	; (80046b4 <I2C_Slave_STOPF+0x258>)
 800457c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	4618      	mov	r0, r3
 8004584:	f7fd fd9e 	bl	80020c4 <HAL_DMA_Abort_IT>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d008      	beq.n	80045a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004598:	4610      	mov	r0, r2
 800459a:	4798      	blx	r3
 800459c:	e000      	b.n	80045a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800459e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d03e      	beq.n	8004628 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d112      	bne.n	80045de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d112      	bne.n	8004612 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f043 0204 	orr.w	r2, r3, #4
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f8b3 	bl	800479c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004636:	e039      	b.n	80046ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b2a      	cmp	r3, #42	; 0x2a
 800463c:	d109      	bne.n	8004652 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2228      	movs	r2, #40	; 0x28
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff f827 	bl	80036a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b28      	cmp	r3, #40	; 0x28
 800465c:	d111      	bne.n	8004682 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <I2C_Slave_STOPF+0x25c>)
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff f828 	bl	80036d0 <HAL_I2C_ListenCpltCallback>
}
 8004680:	e014      	b.n	80046ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	2b22      	cmp	r3, #34	; 0x22
 8004688:	d002      	beq.n	8004690 <I2C_Slave_STOPF+0x234>
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	2b22      	cmp	r3, #34	; 0x22
 800468e:	d10d      	bne.n	80046ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fe fffa 	bl	80036a0 <HAL_I2C_SlaveRxCpltCallback>
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	08004ca1 	.word	0x08004ca1
 80046b8:	ffff0000 	.word	0xffff0000

080046bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d002      	beq.n	80046de <I2C_Slave_AF+0x22>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d129      	bne.n	8004732 <I2C_Slave_AF+0x76>
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	2b28      	cmp	r3, #40	; 0x28
 80046e2:	d126      	bne.n	8004732 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a2c      	ldr	r2, [pc, #176]	; (8004798 <I2C_Slave_AF+0xdc>)
 80046e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004702:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004712:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fe ffd0 	bl	80036d0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004730:	e02e      	b.n	8004790 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	2b21      	cmp	r3, #33	; 0x21
 8004736:	d126      	bne.n	8004786 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <I2C_Slave_AF+0xdc>)
 800473c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2221      	movs	r2, #33	; 0x21
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004762:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800476c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fe ff84 	bl	800368c <HAL_I2C_SlaveTxCpltCallback>
}
 8004784:	e004      	b.n	8004790 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800478e:	615a      	str	r2, [r3, #20]
}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	ffff0000 	.word	0xffff0000

0800479c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047b4:	7bbb      	ldrb	r3, [r7, #14]
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d002      	beq.n	80047c0 <I2C_ITError+0x24>
 80047ba:	7bbb      	ldrb	r3, [r7, #14]
 80047bc:	2b40      	cmp	r3, #64	; 0x40
 80047be:	d10a      	bne.n	80047d6 <I2C_ITError+0x3a>
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b22      	cmp	r3, #34	; 0x22
 80047c4:	d107      	bne.n	80047d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047dc:	2b28      	cmp	r3, #40	; 0x28
 80047de:	d107      	bne.n	80047f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2228      	movs	r2, #40	; 0x28
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047ee:	e015      	b.n	800481c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fe:	d00a      	beq.n	8004816 <I2C_ITError+0x7a>
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b60      	cmp	r3, #96	; 0x60
 8004804:	d007      	beq.n	8004816 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482a:	d162      	bne.n	80048f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b01      	cmp	r3, #1
 8004848:	d020      	beq.n	800488c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	4a6a      	ldr	r2, [pc, #424]	; (80049f8 <I2C_ITError+0x25c>)
 8004850:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd fc34 	bl	80020c4 <HAL_DMA_Abort_IT>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8089 	beq.w	8004976 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004886:	4610      	mov	r0, r2
 8004888:	4798      	blx	r3
 800488a:	e074      	b.n	8004976 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	4a59      	ldr	r2, [pc, #356]	; (80049f8 <I2C_ITError+0x25c>)
 8004892:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	4618      	mov	r0, r3
 800489a:	f7fd fc13 	bl	80020c4 <HAL_DMA_Abort_IT>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d068      	beq.n	8004976 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d10b      	bne.n	80048ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048ec:	4610      	mov	r0, r2
 80048ee:	4798      	blx	r3
 80048f0:	e041      	b.n	8004976 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b60      	cmp	r3, #96	; 0x60
 80048fc:	d125      	bne.n	800494a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	d10b      	bne.n	8004932 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fe feec 	bl	8003720 <HAL_I2C_AbortCpltCallback>
 8004948:	e015      	b.n	8004976 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b40      	cmp	r3, #64	; 0x40
 8004956:	d10b      	bne.n	8004970 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7fe fecb 	bl	800370c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10e      	bne.n	80049a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004996:	2b00      	cmp	r3, #0
 8004998:	d104      	bne.n	80049a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d113      	bne.n	80049f0 <I2C_ITError+0x254>
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b28      	cmp	r3, #40	; 0x28
 80049cc:	d110      	bne.n	80049f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <I2C_ITError+0x260>)
 80049d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fe fe70 	bl	80036d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	08004ca1 	.word	0x08004ca1
 80049fc:	ffff0000 	.word	0xffff0000

08004a00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d006      	beq.n	8004a2a <I2C_MasterRequestWrite+0x2a>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d003      	beq.n	8004a2a <I2C_MasterRequestWrite+0x2a>
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a28:	d108      	bne.n	8004a3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e00b      	b.n	8004a54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	2b12      	cmp	r3, #18
 8004a42:	d107      	bne.n	8004a54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f9c5 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7a:	d103      	bne.n	8004a84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e035      	b.n	8004af4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a90:	d108      	bne.n	8004aa4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a92:	897b      	ldrh	r3, [r7, #10]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aa0:	611a      	str	r2, [r3, #16]
 8004aa2:	e01b      	b.n	8004adc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004aa4:	897b      	ldrh	r3, [r7, #10]
 8004aa6:	11db      	asrs	r3, r3, #7
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f003 0306 	and.w	r3, r3, #6
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f063 030f 	orn	r3, r3, #15
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	490e      	ldr	r1, [pc, #56]	; (8004afc <I2C_MasterRequestWrite+0xfc>)
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f9eb 	bl	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e010      	b.n	8004af4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ad2:	897b      	ldrh	r3, [r7, #10]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4907      	ldr	r1, [pc, #28]	; (8004b00 <I2C_MasterRequestWrite+0x100>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f9db 	bl	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	00010008 	.word	0x00010008
 8004b00:	00010002 	.word	0x00010002

08004b04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	460b      	mov	r3, r1
 8004b12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d006      	beq.n	8004b3e <I2C_MasterRequestRead+0x3a>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d003      	beq.n	8004b3e <I2C_MasterRequestRead+0x3a>
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b3c:	d108      	bne.n	8004b50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e00b      	b.n	8004b68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	2b11      	cmp	r3, #17
 8004b56:	d107      	bne.n	8004b68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f93b 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00d      	beq.n	8004b9c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8e:	d103      	bne.n	8004b98 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e079      	b.n	8004c90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba4:	d108      	bne.n	8004bb8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ba6:	897b      	ldrh	r3, [r7, #10]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	611a      	str	r2, [r3, #16]
 8004bb6:	e05f      	b.n	8004c78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bb8:	897b      	ldrh	r3, [r7, #10]
 8004bba:	11db      	asrs	r3, r3, #7
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 0306 	and.w	r3, r3, #6
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f063 030f 	orn	r3, r3, #15
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4930      	ldr	r1, [pc, #192]	; (8004c98 <I2C_MasterRequestRead+0x194>)
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f961 	bl	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e054      	b.n	8004c90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004be6:	897b      	ldrh	r3, [r7, #10]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4929      	ldr	r1, [pc, #164]	; (8004c9c <I2C_MasterRequestRead+0x198>)
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f951 	bl	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e044      	b.n	8004c90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f8d9 	bl	8004df0 <I2C_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00d      	beq.n	8004c60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c52:	d103      	bne.n	8004c5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e017      	b.n	8004c90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c60:	897b      	ldrh	r3, [r7, #10]
 8004c62:	11db      	asrs	r3, r3, #7
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 0306 	and.w	r3, r3, #6
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f063 030e 	orn	r3, r3, #14
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4907      	ldr	r1, [pc, #28]	; (8004c9c <I2C_MasterRequestRead+0x198>)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f90d 	bl	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	00010008 	.word	0x00010008
 8004c9c:	00010002 	.word	0x00010002

08004ca0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cba:	4b4b      	ldr	r3, [pc, #300]	; (8004de8 <I2C_DMAAbort+0x148>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	08db      	lsrs	r3, r3, #3
 8004cc0:	4a4a      	ldr	r2, [pc, #296]	; (8004dec <I2C_DMAAbort+0x14c>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	0a1a      	lsrs	r2, r3, #8
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	00da      	lsls	r2, r3, #3
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f043 0220 	orr.w	r2, r3, #32
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004ce6:	e00a      	b.n	8004cfe <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfc:	d0ea      	beq.n	8004cd4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2200      	movs	r2, #0
 8004d32:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d40:	2200      	movs	r2, #0
 8004d42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	2200      	movs	r2, #0
 8004d52:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b60      	cmp	r3, #96	; 0x60
 8004d6e:	d10e      	bne.n	8004d8e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2200      	movs	r2, #0
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d86:	6978      	ldr	r0, [r7, #20]
 8004d88:	f7fe fcca 	bl	8003720 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d8c:	e027      	b.n	8004dde <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d94:	2b28      	cmp	r3, #40	; 0x28
 8004d96:	d117      	bne.n	8004dc8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2228      	movs	r2, #40	; 0x28
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dc6:	e007      	b.n	8004dd8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004dd8:	6978      	ldr	r0, [r7, #20]
 8004dda:	f7fe fc97 	bl	800370c <HAL_I2C_ErrorCallback>
}
 8004dde:	bf00      	nop
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000000 	.word	0x20000000
 8004dec:	14f8b589 	.word	0x14f8b589

08004df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e00:	e025      	b.n	8004e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d021      	beq.n	8004e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0a:	f7fc ff13 	bl	8001c34 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d302      	bcc.n	8004e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d116      	bne.n	8004e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f043 0220 	orr.w	r2, r3, #32
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e023      	b.n	8004e96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	0c1b      	lsrs	r3, r3, #16
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d10d      	bne.n	8004e74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	43da      	mvns	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4013      	ands	r3, r2
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf0c      	ite	eq
 8004e6a:	2301      	moveq	r3, #1
 8004e6c:	2300      	movne	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	e00c      	b.n	8004e8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	43da      	mvns	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf0c      	ite	eq
 8004e86:	2301      	moveq	r3, #1
 8004e88:	2300      	movne	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d0b6      	beq.n	8004e02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
 8004eaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eac:	e051      	b.n	8004f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ebc:	d123      	bne.n	8004f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ecc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ed6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f043 0204 	orr.w	r2, r3, #4
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e046      	b.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d021      	beq.n	8004f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fc fe91 	bl	8001c34 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d116      	bne.n	8004f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f043 0220 	orr.w	r2, r3, #32
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e020      	b.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10c      	bne.n	8004f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	43da      	mvns	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4013      	ands	r3, r2
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	bf14      	ite	ne
 8004f6e:	2301      	movne	r3, #1
 8004f70:	2300      	moveq	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	e00b      	b.n	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	43da      	mvns	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4013      	ands	r3, r2
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bf14      	ite	ne
 8004f88:	2301      	movne	r3, #1
 8004f8a:	2300      	moveq	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d18d      	bne.n	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fa8:	e02d      	b.n	8005006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f900 	bl	80051b0 <I2C_IsAcknowledgeFailed>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e02d      	b.n	8005016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc0:	d021      	beq.n	8005006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc2:	f7fc fe37 	bl	8001c34 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d302      	bcc.n	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d116      	bne.n	8005006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f043 0220 	orr.w	r2, r3, #32
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e007      	b.n	8005016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d1ca      	bne.n	8004faa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800502a:	e02d      	b.n	8005088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f8bf 	bl	80051b0 <I2C_IsAcknowledgeFailed>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e02d      	b.n	8005098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d021      	beq.n	8005088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005044:	f7fc fdf6 	bl	8001c34 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	d302      	bcc.n	800505a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d116      	bne.n	8005088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e007      	b.n	8005098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b04      	cmp	r3, #4
 8005094:	d1ca      	bne.n	800502c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80050ac:	4b13      	ldr	r3, [pc, #76]	; (80050fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	08db      	lsrs	r3, r3, #3
 80050b2:	4a13      	ldr	r2, [pc, #76]	; (8005100 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	0a1a      	lsrs	r2, r3, #8
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d107      	bne.n	80050de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f043 0220 	orr.w	r2, r3, #32
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e008      	b.n	80050f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ec:	d0e9      	beq.n	80050c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	20000000 	.word	0x20000000
 8005100:	14f8b589 	.word	0x14f8b589

08005104 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005110:	e042      	b.n	8005198 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b10      	cmp	r3, #16
 800511e:	d119      	bne.n	8005154 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0210 	mvn.w	r2, #16
 8005128:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e029      	b.n	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005154:	f7fc fd6e 	bl	8001c34 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	d302      	bcc.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d116      	bne.n	8005198 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e007      	b.n	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d1b5      	bne.n	8005112 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c6:	d11b      	bne.n	8005200 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	f043 0204 	orr.w	r2, r3, #4
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800521e:	d103      	bne.n	8005228 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005226:	e007      	b.n	8005238 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005230:	d102      	bne.n	8005238 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2208      	movs	r2, #8
 8005236:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e267      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d075      	beq.n	800534e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005262:	4b88      	ldr	r3, [pc, #544]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
 800526a:	2b04      	cmp	r3, #4
 800526c:	d00c      	beq.n	8005288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800526e:	4b85      	ldr	r3, [pc, #532]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005276:	2b08      	cmp	r3, #8
 8005278:	d112      	bne.n	80052a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800527a:	4b82      	ldr	r3, [pc, #520]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005286:	d10b      	bne.n	80052a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005288:	4b7e      	ldr	r3, [pc, #504]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d05b      	beq.n	800534c <HAL_RCC_OscConfig+0x108>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d157      	bne.n	800534c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e242      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a8:	d106      	bne.n	80052b8 <HAL_RCC_OscConfig+0x74>
 80052aa:	4b76      	ldr	r3, [pc, #472]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a75      	ldr	r2, [pc, #468]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80052b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	e01d      	b.n	80052f4 <HAL_RCC_OscConfig+0xb0>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052c0:	d10c      	bne.n	80052dc <HAL_RCC_OscConfig+0x98>
 80052c2:	4b70      	ldr	r3, [pc, #448]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a6f      	ldr	r2, [pc, #444]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80052c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	4b6d      	ldr	r3, [pc, #436]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a6c      	ldr	r2, [pc, #432]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80052d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e00b      	b.n	80052f4 <HAL_RCC_OscConfig+0xb0>
 80052dc:	4b69      	ldr	r3, [pc, #420]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a68      	ldr	r2, [pc, #416]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80052e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	4b66      	ldr	r3, [pc, #408]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a65      	ldr	r2, [pc, #404]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80052ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d013      	beq.n	8005324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fc:	f7fc fc9a 	bl	8001c34 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005304:	f7fc fc96 	bl	8001c34 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b64      	cmp	r3, #100	; 0x64
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e207      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005316:	4b5b      	ldr	r3, [pc, #364]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCC_OscConfig+0xc0>
 8005322:	e014      	b.n	800534e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fc fc86 	bl	8001c34 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800532c:	f7fc fc82 	bl	8001c34 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b64      	cmp	r3, #100	; 0x64
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e1f3      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800533e:	4b51      	ldr	r3, [pc, #324]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f0      	bne.n	800532c <HAL_RCC_OscConfig+0xe8>
 800534a:	e000      	b.n	800534e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800534c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d063      	beq.n	8005422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800535a:	4b4a      	ldr	r3, [pc, #296]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 030c 	and.w	r3, r3, #12
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005366:	4b47      	ldr	r3, [pc, #284]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800536e:	2b08      	cmp	r3, #8
 8005370:	d11c      	bne.n	80053ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005372:	4b44      	ldr	r3, [pc, #272]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d116      	bne.n	80053ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537e:	4b41      	ldr	r3, [pc, #260]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_RCC_OscConfig+0x152>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d001      	beq.n	8005396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e1c7      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005396:	4b3b      	ldr	r3, [pc, #236]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4937      	ldr	r1, [pc, #220]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053aa:	e03a      	b.n	8005422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d020      	beq.n	80053f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053b4:	4b34      	ldr	r3, [pc, #208]	; (8005488 <HAL_RCC_OscConfig+0x244>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ba:	f7fc fc3b 	bl	8001c34 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c2:	f7fc fc37 	bl	8001c34 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e1a8      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d4:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e0:	4b28      	ldr	r3, [pc, #160]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4925      	ldr	r1, [pc, #148]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	600b      	str	r3, [r1, #0]
 80053f4:	e015      	b.n	8005422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053f6:	4b24      	ldr	r3, [pc, #144]	; (8005488 <HAL_RCC_OscConfig+0x244>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fc fc1a 	bl	8001c34 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005404:	f7fc fc16 	bl	8001c34 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e187      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005416:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d036      	beq.n	800549c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d016      	beq.n	8005464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005436:	4b15      	ldr	r3, [pc, #84]	; (800548c <HAL_RCC_OscConfig+0x248>)
 8005438:	2201      	movs	r2, #1
 800543a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543c:	f7fc fbfa 	bl	8001c34 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005444:	f7fc fbf6 	bl	8001c34 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e167      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <HAL_RCC_OscConfig+0x240>)
 8005458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCC_OscConfig+0x200>
 8005462:	e01b      	b.n	800549c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_OscConfig+0x248>)
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546a:	f7fc fbe3 	bl	8001c34 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005470:	e00e      	b.n	8005490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005472:	f7fc fbdf 	bl	8001c34 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d907      	bls.n	8005490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e150      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
 8005484:	40023800 	.word	0x40023800
 8005488:	42470000 	.word	0x42470000
 800548c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005490:	4b88      	ldr	r3, [pc, #544]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1ea      	bne.n	8005472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8097 	beq.w	80055d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054aa:	2300      	movs	r3, #0
 80054ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ae:	4b81      	ldr	r3, [pc, #516]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10f      	bne.n	80054da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	4b7d      	ldr	r3, [pc, #500]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	4a7c      	ldr	r2, [pc, #496]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c8:	6413      	str	r3, [r2, #64]	; 0x40
 80054ca:	4b7a      	ldr	r3, [pc, #488]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	60bb      	str	r3, [r7, #8]
 80054d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d6:	2301      	movs	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054da:	4b77      	ldr	r3, [pc, #476]	; (80056b8 <HAL_RCC_OscConfig+0x474>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d118      	bne.n	8005518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e6:	4b74      	ldr	r3, [pc, #464]	; (80056b8 <HAL_RCC_OscConfig+0x474>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a73      	ldr	r2, [pc, #460]	; (80056b8 <HAL_RCC_OscConfig+0x474>)
 80054ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f2:	f7fc fb9f 	bl	8001c34 <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fa:	f7fc fb9b 	bl	8001c34 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e10c      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550c:	4b6a      	ldr	r3, [pc, #424]	; (80056b8 <HAL_RCC_OscConfig+0x474>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d106      	bne.n	800552e <HAL_RCC_OscConfig+0x2ea>
 8005520:	4b64      	ldr	r3, [pc, #400]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	4a63      	ldr	r2, [pc, #396]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	6713      	str	r3, [r2, #112]	; 0x70
 800552c:	e01c      	b.n	8005568 <HAL_RCC_OscConfig+0x324>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b05      	cmp	r3, #5
 8005534:	d10c      	bne.n	8005550 <HAL_RCC_OscConfig+0x30c>
 8005536:	4b5f      	ldr	r3, [pc, #380]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	4a5e      	ldr	r2, [pc, #376]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 800553c:	f043 0304 	orr.w	r3, r3, #4
 8005540:	6713      	str	r3, [r2, #112]	; 0x70
 8005542:	4b5c      	ldr	r3, [pc, #368]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005546:	4a5b      	ldr	r2, [pc, #364]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	6713      	str	r3, [r2, #112]	; 0x70
 800554e:	e00b      	b.n	8005568 <HAL_RCC_OscConfig+0x324>
 8005550:	4b58      	ldr	r3, [pc, #352]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	4a57      	ldr	r2, [pc, #348]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005556:	f023 0301 	bic.w	r3, r3, #1
 800555a:	6713      	str	r3, [r2, #112]	; 0x70
 800555c:	4b55      	ldr	r3, [pc, #340]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	4a54      	ldr	r2, [pc, #336]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005562:	f023 0304 	bic.w	r3, r3, #4
 8005566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d015      	beq.n	800559c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fc fb60 	bl	8001c34 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005576:	e00a      	b.n	800558e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005578:	f7fc fb5c 	bl	8001c34 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	; 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0cb      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558e:	4b49      	ldr	r3, [pc, #292]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0ee      	beq.n	8005578 <HAL_RCC_OscConfig+0x334>
 800559a:	e014      	b.n	80055c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800559c:	f7fc fb4a 	bl	8001c34 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055a2:	e00a      	b.n	80055ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a4:	f7fc fb46 	bl	8001c34 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0b5      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ba:	4b3e      	ldr	r3, [pc, #248]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1ee      	bne.n	80055a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d105      	bne.n	80055d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055cc:	4b39      	ldr	r3, [pc, #228]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	4a38      	ldr	r2, [pc, #224]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 80055d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80a1 	beq.w	8005724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055e2:	4b34      	ldr	r3, [pc, #208]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d05c      	beq.n	80056a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d141      	bne.n	800567a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f6:	4b31      	ldr	r3, [pc, #196]	; (80056bc <HAL_RCC_OscConfig+0x478>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fc:	f7fc fb1a 	bl	8001c34 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005604:	f7fc fb16 	bl	8001c34 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e087      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005616:	4b27      	ldr	r3, [pc, #156]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f0      	bne.n	8005604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	019b      	lsls	r3, r3, #6
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	3b01      	subs	r3, #1
 800563c:	041b      	lsls	r3, r3, #16
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	061b      	lsls	r3, r3, #24
 8005646:	491b      	ldr	r1, [pc, #108]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 8005648:	4313      	orrs	r3, r2
 800564a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800564c:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <HAL_RCC_OscConfig+0x478>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005652:	f7fc faef 	bl	8001c34 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565a:	f7fc faeb 	bl	8001c34 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e05c      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800566c:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x416>
 8005678:	e054      	b.n	8005724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567a:	4b10      	ldr	r3, [pc, #64]	; (80056bc <HAL_RCC_OscConfig+0x478>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005680:	f7fc fad8 	bl	8001c34 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005688:	f7fc fad4 	bl	8001c34 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e045      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569a:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <HAL_RCC_OscConfig+0x470>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x444>
 80056a6:	e03d      	b.n	8005724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d107      	bne.n	80056c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e038      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40007000 	.word	0x40007000
 80056bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056c0:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <HAL_RCC_OscConfig+0x4ec>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d028      	beq.n	8005720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d121      	bne.n	8005720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d11a      	bne.n	8005720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056f0:	4013      	ands	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d111      	bne.n	8005720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	3b01      	subs	r3, #1
 800570a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800570c:	429a      	cmp	r2, r3
 800570e:	d107      	bne.n	8005720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800571c:	429a      	cmp	r2, r3
 800571e:	d001      	beq.n	8005724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40023800 	.word	0x40023800

08005734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e0cc      	b.n	80058e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005748:	4b68      	ldr	r3, [pc, #416]	; (80058ec <HAL_RCC_ClockConfig+0x1b8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d90c      	bls.n	8005770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005756:	4b65      	ldr	r3, [pc, #404]	; (80058ec <HAL_RCC_ClockConfig+0x1b8>)
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800575e:	4b63      	ldr	r3, [pc, #396]	; (80058ec <HAL_RCC_ClockConfig+0x1b8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e0b8      	b.n	80058e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d020      	beq.n	80057be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005788:	4b59      	ldr	r3, [pc, #356]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4a58      	ldr	r2, [pc, #352]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057a0:	4b53      	ldr	r3, [pc, #332]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a52      	ldr	r2, [pc, #328]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ac:	4b50      	ldr	r3, [pc, #320]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	494d      	ldr	r1, [pc, #308]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d044      	beq.n	8005854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d107      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057d2:	4b47      	ldr	r3, [pc, #284]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d119      	bne.n	8005812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e07f      	b.n	80058e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d003      	beq.n	80057f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d107      	bne.n	8005802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f2:	4b3f      	ldr	r3, [pc, #252]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e06f      	b.n	80058e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005802:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e067      	b.n	80058e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005812:	4b37      	ldr	r3, [pc, #220]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f023 0203 	bic.w	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	4934      	ldr	r1, [pc, #208]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	4313      	orrs	r3, r2
 8005822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005824:	f7fc fa06 	bl	8001c34 <HAL_GetTick>
 8005828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582a:	e00a      	b.n	8005842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800582c:	f7fc fa02 	bl	8001c34 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	; 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e04f      	b.n	80058e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	4b2b      	ldr	r3, [pc, #172]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 020c 	and.w	r2, r3, #12
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	429a      	cmp	r2, r3
 8005852:	d1eb      	bne.n	800582c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005854:	4b25      	ldr	r3, [pc, #148]	; (80058ec <HAL_RCC_ClockConfig+0x1b8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d20c      	bcs.n	800587c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005862:	4b22      	ldr	r3, [pc, #136]	; (80058ec <HAL_RCC_ClockConfig+0x1b8>)
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586a:	4b20      	ldr	r3, [pc, #128]	; (80058ec <HAL_RCC_ClockConfig+0x1b8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e032      	b.n	80058e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005888:	4b19      	ldr	r3, [pc, #100]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4916      	ldr	r1, [pc, #88]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	4313      	orrs	r3, r2
 8005898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058a6:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	490e      	ldr	r1, [pc, #56]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058ba:	f000 f821 	bl	8005900 <HAL_RCC_GetSysClockFreq>
 80058be:	4602      	mov	r2, r0
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	490a      	ldr	r1, [pc, #40]	; (80058f4 <HAL_RCC_ClockConfig+0x1c0>)
 80058cc:	5ccb      	ldrb	r3, [r1, r3]
 80058ce:	fa22 f303 	lsr.w	r3, r2, r3
 80058d2:	4a09      	ldr	r2, [pc, #36]	; (80058f8 <HAL_RCC_ClockConfig+0x1c4>)
 80058d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058d6:	4b09      	ldr	r3, [pc, #36]	; (80058fc <HAL_RCC_ClockConfig+0x1c8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fc f966 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40023c00 	.word	0x40023c00
 80058f0:	40023800 	.word	0x40023800
 80058f4:	0800a898 	.word	0x0800a898
 80058f8:	20000000 	.word	0x20000000
 80058fc:	20000004 	.word	0x20000004

08005900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005904:	b094      	sub	sp, #80	; 0x50
 8005906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	647b      	str	r3, [r7, #68]	; 0x44
 800590c:	2300      	movs	r3, #0
 800590e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005910:	2300      	movs	r3, #0
 8005912:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005918:	4b79      	ldr	r3, [pc, #484]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 030c 	and.w	r3, r3, #12
 8005920:	2b08      	cmp	r3, #8
 8005922:	d00d      	beq.n	8005940 <HAL_RCC_GetSysClockFreq+0x40>
 8005924:	2b08      	cmp	r3, #8
 8005926:	f200 80e1 	bhi.w	8005aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0x34>
 800592e:	2b04      	cmp	r3, #4
 8005930:	d003      	beq.n	800593a <HAL_RCC_GetSysClockFreq+0x3a>
 8005932:	e0db      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005934:	4b73      	ldr	r3, [pc, #460]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8005936:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005938:	e0db      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800593a:	4b73      	ldr	r3, [pc, #460]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800593c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800593e:	e0d8      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005940:	4b6f      	ldr	r3, [pc, #444]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005948:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800594a:	4b6d      	ldr	r3, [pc, #436]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d063      	beq.n	8005a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005956:	4b6a      	ldr	r3, [pc, #424]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	099b      	lsrs	r3, r3, #6
 800595c:	2200      	movs	r2, #0
 800595e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005968:	633b      	str	r3, [r7, #48]	; 0x30
 800596a:	2300      	movs	r3, #0
 800596c:	637b      	str	r3, [r7, #52]	; 0x34
 800596e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005972:	4622      	mov	r2, r4
 8005974:	462b      	mov	r3, r5
 8005976:	f04f 0000 	mov.w	r0, #0
 800597a:	f04f 0100 	mov.w	r1, #0
 800597e:	0159      	lsls	r1, r3, #5
 8005980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005984:	0150      	lsls	r0, r2, #5
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4621      	mov	r1, r4
 800598c:	1a51      	subs	r1, r2, r1
 800598e:	6139      	str	r1, [r7, #16]
 8005990:	4629      	mov	r1, r5
 8005992:	eb63 0301 	sbc.w	r3, r3, r1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059a4:	4659      	mov	r1, fp
 80059a6:	018b      	lsls	r3, r1, #6
 80059a8:	4651      	mov	r1, sl
 80059aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059ae:	4651      	mov	r1, sl
 80059b0:	018a      	lsls	r2, r1, #6
 80059b2:	4651      	mov	r1, sl
 80059b4:	ebb2 0801 	subs.w	r8, r2, r1
 80059b8:	4659      	mov	r1, fp
 80059ba:	eb63 0901 	sbc.w	r9, r3, r1
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059d2:	4690      	mov	r8, r2
 80059d4:	4699      	mov	r9, r3
 80059d6:	4623      	mov	r3, r4
 80059d8:	eb18 0303 	adds.w	r3, r8, r3
 80059dc:	60bb      	str	r3, [r7, #8]
 80059de:	462b      	mov	r3, r5
 80059e0:	eb49 0303 	adc.w	r3, r9, r3
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059f2:	4629      	mov	r1, r5
 80059f4:	024b      	lsls	r3, r1, #9
 80059f6:	4621      	mov	r1, r4
 80059f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059fc:	4621      	mov	r1, r4
 80059fe:	024a      	lsls	r2, r1, #9
 8005a00:	4610      	mov	r0, r2
 8005a02:	4619      	mov	r1, r3
 8005a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a06:	2200      	movs	r2, #0
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a10:	f7fb f8ea 	bl	8000be8 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4613      	mov	r3, r2
 8005a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a1c:	e058      	b.n	8005ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a1e:	4b38      	ldr	r3, [pc, #224]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	099b      	lsrs	r3, r3, #6
 8005a24:	2200      	movs	r2, #0
 8005a26:	4618      	mov	r0, r3
 8005a28:	4611      	mov	r1, r2
 8005a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a2e:	623b      	str	r3, [r7, #32]
 8005a30:	2300      	movs	r3, #0
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
 8005a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a38:	4642      	mov	r2, r8
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	f04f 0000 	mov.w	r0, #0
 8005a40:	f04f 0100 	mov.w	r1, #0
 8005a44:	0159      	lsls	r1, r3, #5
 8005a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a4a:	0150      	lsls	r0, r2, #5
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4641      	mov	r1, r8
 8005a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a56:	4649      	mov	r1, r9
 8005a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a70:	ebb2 040a 	subs.w	r4, r2, sl
 8005a74:	eb63 050b 	sbc.w	r5, r3, fp
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	00eb      	lsls	r3, r5, #3
 8005a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a86:	00e2      	lsls	r2, r4, #3
 8005a88:	4614      	mov	r4, r2
 8005a8a:	461d      	mov	r5, r3
 8005a8c:	4643      	mov	r3, r8
 8005a8e:	18e3      	adds	r3, r4, r3
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	464b      	mov	r3, r9
 8005a94:	eb45 0303 	adc.w	r3, r5, r3
 8005a98:	607b      	str	r3, [r7, #4]
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	028b      	lsls	r3, r1, #10
 8005aaa:	4621      	mov	r1, r4
 8005aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	028a      	lsls	r2, r1, #10
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aba:	2200      	movs	r2, #0
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	61fa      	str	r2, [r7, #28]
 8005ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ac4:	f7fb f890 	bl	8000be8 <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4613      	mov	r3, r2
 8005ace:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	0c1b      	lsrs	r3, r3, #16
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	3301      	adds	r3, #1
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aea:	e002      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8005aee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3750      	adds	r7, #80	; 0x50
 8005af8:	46bd      	mov	sp, r7
 8005afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005afe:	bf00      	nop
 8005b00:	40023800 	.word	0x40023800
 8005b04:	00f42400 	.word	0x00f42400
 8005b08:	007a1200 	.word	0x007a1200

08005b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b10:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000000 	.word	0x20000000

08005b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b28:	f7ff fff0 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	0a9b      	lsrs	r3, r3, #10
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	4903      	ldr	r1, [pc, #12]	; (8005b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b3a:	5ccb      	ldrb	r3, [r1, r3]
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40023800 	.word	0x40023800
 8005b48:	0800a8a8 	.word	0x0800a8a8

08005b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e07b      	b.n	8005c56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d108      	bne.n	8005b78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b6e:	d009      	beq.n	8005b84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	61da      	str	r2, [r3, #28]
 8005b76:	e005      	b.n	8005b84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fc08 	bl	80013b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c08:	ea42 0103 	orr.w	r1, r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	0c1b      	lsrs	r3, r3, #16
 8005c22:	f003 0104 	and.w	r1, r3, #4
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	f003 0210 	and.w	r2, r3, #16
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b088      	sub	sp, #32
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	603b      	str	r3, [r7, #0]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_SPI_Transmit+0x22>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e126      	b.n	8005ece <HAL_SPI_Transmit+0x270>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c88:	f7fb ffd4 	bl	8001c34 <HAL_GetTick>
 8005c8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d002      	beq.n	8005ca4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ca2:	e10b      	b.n	8005ebc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <HAL_SPI_Transmit+0x52>
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d102      	bne.n	8005cb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cb4:	e102      	b.n	8005ebc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2203      	movs	r2, #3
 8005cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	88fa      	ldrh	r2, [r7, #6]
 8005cce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	88fa      	ldrh	r2, [r7, #6]
 8005cd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfc:	d10f      	bne.n	8005d1e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	d007      	beq.n	8005d3c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d44:	d14b      	bne.n	8005dde <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_SPI_Transmit+0xf6>
 8005d4e:	8afb      	ldrh	r3, [r7, #22]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d13e      	bne.n	8005dd2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	881a      	ldrh	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	1c9a      	adds	r2, r3, #2
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d78:	e02b      	b.n	8005dd2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d112      	bne.n	8005dae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	881a      	ldrh	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	1c9a      	adds	r2, r3, #2
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dac:	e011      	b.n	8005dd2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dae:	f7fb ff41 	bl	8001c34 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d803      	bhi.n	8005dc6 <HAL_SPI_Transmit+0x168>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d102      	bne.n	8005dcc <HAL_SPI_Transmit+0x16e>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dd0:	e074      	b.n	8005ebc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1ce      	bne.n	8005d7a <HAL_SPI_Transmit+0x11c>
 8005ddc:	e04c      	b.n	8005e78 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <HAL_SPI_Transmit+0x18e>
 8005de6:	8afb      	ldrh	r3, [r7, #22]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d140      	bne.n	8005e6e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e12:	e02c      	b.n	8005e6e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d113      	bne.n	8005e4a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e48:	e011      	b.n	8005e6e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e4a:	f7fb fef3 	bl	8001c34 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d803      	bhi.n	8005e62 <HAL_SPI_Transmit+0x204>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e60:	d102      	bne.n	8005e68 <HAL_SPI_Transmit+0x20a>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e6c:	e026      	b.n	8005ebc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1cd      	bne.n	8005e14 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	6839      	ldr	r1, [r7, #0]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f9ff 	bl	8006280 <SPI_EndRxTxTransaction>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e96:	2300      	movs	r3, #0
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e000      	b.n	8005ebc <HAL_SPI_Transmit+0x25e>
  }

error:
 8005eba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_SPI_Transmit_DMA+0x20>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e09b      	b.n	8006030 <HAL_SPI_Transmit_DMA+0x158>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d002      	beq.n	8005f12 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f10:	e089      	b.n	8006026 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_SPI_Transmit_DMA+0x46>
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f22:	e080      	b.n	8006026 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2203      	movs	r2, #3
 8005f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	88fa      	ldrh	r2, [r7, #6]
 8005f42:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f6a:	d10f      	bne.n	8005f8c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f90:	4a29      	ldr	r2, [pc, #164]	; (8006038 <HAL_SPI_Transmit_DMA+0x160>)
 8005f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f98:	4a28      	ldr	r2, [pc, #160]	; (800603c <HAL_SPI_Transmit_DMA+0x164>)
 8005f9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa0:	4a27      	ldr	r2, [pc, #156]	; (8006040 <HAL_SPI_Transmit_DMA+0x168>)
 8005fa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa8:	2200      	movs	r2, #0
 8005faa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	330c      	adds	r3, #12
 8005fbc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005fc4:	f7fc f826 	bl	8002014 <HAL_DMA_Start_IT>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00c      	beq.n	8005fe8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd2:	f043 0210 	orr.w	r2, r3, #16
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005fe6:	e01e      	b.n	8006026 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d007      	beq.n	8006006 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006004:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0220 	orr.w	r2, r2, #32
 8006014:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0202 	orr.w	r2, r2, #2
 8006024:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	08006115 	.word	0x08006115
 800603c:	0800606d 	.word	0x0800606d
 8006040:	08006131 	.word	0x08006131

08006044 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800607a:	f7fb fddb 	bl	8001c34 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608e:	d03b      	beq.n	8006108 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0220 	bic.w	r2, r2, #32
 800609e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0202 	bic.w	r2, r2, #2
 80060ae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	2164      	movs	r1, #100	; 0x64
 80060b4:	6978      	ldr	r0, [r7, #20]
 80060b6:	f000 f8e3 	bl	8006280 <SPI_EndRxTxTransaction>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c4:	f043 0220 	orr.w	r2, r3, #32
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006100:	6978      	ldr	r0, [r7, #20]
 8006102:	f7ff ffa9 	bl	8006058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006106:	e002      	b.n	800610e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006108:	6978      	ldr	r0, [r7, #20]
 800610a:	f001 fc7b 	bl	8007a04 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7ff ff8e 	bl	8006044 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006128:	bf00      	nop
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0203 	bic.w	r2, r2, #3
 800614c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006152:	f043 0210 	orr.w	r2, r3, #16
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff ff78 	bl	8006058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	4613      	mov	r3, r2
 800617e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006180:	f7fb fd58 	bl	8001c34 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	4413      	add	r3, r2
 800618e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006190:	f7fb fd50 	bl	8001c34 <HAL_GetTick>
 8006194:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006196:	4b39      	ldr	r3, [pc, #228]	; (800627c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	015b      	lsls	r3, r3, #5
 800619c:	0d1b      	lsrs	r3, r3, #20
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	fb02 f303 	mul.w	r3, r2, r3
 80061a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061a6:	e054      	b.n	8006252 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d050      	beq.n	8006252 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061b0:	f7fb fd40 	bl	8001c34 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d902      	bls.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d13d      	bne.n	8006242 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061de:	d111      	bne.n	8006204 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e8:	d004      	beq.n	80061f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f2:	d107      	bne.n	8006204 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006202:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800620c:	d10f      	bne.n	800622e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800622c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e017      	b.n	8006272 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	3b01      	subs	r3, #1
 8006250:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4013      	ands	r3, r2
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	429a      	cmp	r2, r3
 8006260:	bf0c      	ite	eq
 8006262:	2301      	moveq	r3, #1
 8006264:	2300      	movne	r3, #0
 8006266:	b2db      	uxtb	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	429a      	cmp	r2, r3
 800626e:	d19b      	bne.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000000 	.word	0x20000000

08006280 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800628c:	4b1b      	ldr	r3, [pc, #108]	; (80062fc <SPI_EndRxTxTransaction+0x7c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1b      	ldr	r2, [pc, #108]	; (8006300 <SPI_EndRxTxTransaction+0x80>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	0d5b      	lsrs	r3, r3, #21
 8006298:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800629c:	fb02 f303 	mul.w	r3, r2, r3
 80062a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062aa:	d112      	bne.n	80062d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2200      	movs	r2, #0
 80062b4:	2180      	movs	r1, #128	; 0x80
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff ff5a 	bl	8006170 <SPI_WaitFlagStateUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d016      	beq.n	80062f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	f043 0220 	orr.w	r2, r3, #32
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e00f      	b.n	80062f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	3b01      	subs	r3, #1
 80062dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e8:	2b80      	cmp	r3, #128	; 0x80
 80062ea:	d0f2      	beq.n	80062d2 <SPI_EndRxTxTransaction+0x52>
 80062ec:	e000      	b.n	80062f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80062ee:	bf00      	nop
  }

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000000 	.word	0x20000000
 8006300:	165e9f81 	.word	0x165e9f81

08006304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e041      	b.n	800639a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fb fb70 	bl	8001a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f000 fada 	bl	80068fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b082      	sub	sp, #8
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e041      	b.n	8006438 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fb faff 	bl	80019cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3304      	adds	r3, #4
 80063de:	4619      	mov	r1, r3
 80063e0:	4610      	mov	r0, r2
 80063e2:	f000 fa8b 	bl	80068fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e041      	b.n	80064d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f839 	bl	80064de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3304      	adds	r3, #4
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f000 fa3c 	bl	80068fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e097      	b.n	8006636 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fb fa0e 	bl	800193c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006536:	f023 0307 	bic.w	r3, r3, #7
 800653a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3304      	adds	r3, #4
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f000 f9d8 	bl	80068fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006574:	f023 0303 	bic.w	r3, r3, #3
 8006578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	4313      	orrs	r3, r2
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006592:	f023 030c 	bic.w	r3, r3, #12
 8006596:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800659e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	4313      	orrs	r3, r2
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	011a      	lsls	r2, r3, #4
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	031b      	lsls	r3, r3, #12
 80065c2:	4313      	orrs	r3, r2
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065d0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80065d8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	4313      	orrs	r3, r2
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b086      	sub	sp, #24
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_TIM_IC_ConfigChannel+0x1e>
 8006658:	2302      	movs	r3, #2
 800665a:	e088      	b.n	800676e <HAL_TIM_IC_ConfigChannel+0x130>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d11b      	bne.n	80066a2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f000 fb8f 	bl	8006d9c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 020c 	bic.w	r2, r2, #12
 800668c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6999      	ldr	r1, [r3, #24]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	619a      	str	r2, [r3, #24]
 80066a0:	e060      	b.n	8006764 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d11c      	bne.n	80066e2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f000 fbe4 	bl	8006e84 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066ca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6999      	ldr	r1, [r3, #24]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	021a      	lsls	r2, r3, #8
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	619a      	str	r2, [r3, #24]
 80066e0:	e040      	b.n	8006764 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d11b      	bne.n	8006720 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6819      	ldr	r1, [r3, #0]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f000 fc01 	bl	8006efe <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69da      	ldr	r2, [r3, #28]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 020c 	bic.w	r2, r2, #12
 800670a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69d9      	ldr	r1, [r3, #28]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	61da      	str	r2, [r3, #28]
 800671e:	e021      	b.n	8006764 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b0c      	cmp	r3, #12
 8006724:	d11c      	bne.n	8006760 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6819      	ldr	r1, [r3, #0]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f000 fc1e 	bl	8006f76 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006748:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69d9      	ldr	r1, [r3, #28]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	021a      	lsls	r2, r3, #8
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	61da      	str	r2, [r3, #28]
 800675e:	e001      	b.n	8006764 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800676c:	7dfb      	ldrb	r3, [r7, #23]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006792:	2302      	movs	r3, #2
 8006794:	e0ae      	b.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	f200 809f 	bhi.w	80068e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067e1 	.word	0x080067e1
 80067b0:	080068e5 	.word	0x080068e5
 80067b4:	080068e5 	.word	0x080068e5
 80067b8:	080068e5 	.word	0x080068e5
 80067bc:	08006821 	.word	0x08006821
 80067c0:	080068e5 	.word	0x080068e5
 80067c4:	080068e5 	.word	0x080068e5
 80067c8:	080068e5 	.word	0x080068e5
 80067cc:	08006863 	.word	0x08006863
 80067d0:	080068e5 	.word	0x080068e5
 80067d4:	080068e5 	.word	0x080068e5
 80067d8:	080068e5 	.word	0x080068e5
 80067dc:	080068a3 	.word	0x080068a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 f928 	bl	8006a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0208 	orr.w	r2, r2, #8
 80067fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0204 	bic.w	r2, r2, #4
 800680a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6999      	ldr	r1, [r3, #24]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	619a      	str	r2, [r3, #24]
      break;
 800681e:	e064      	b.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	4618      	mov	r0, r3
 8006828:	f000 f978 	bl	8006b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800683a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699a      	ldr	r2, [r3, #24]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800684a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6999      	ldr	r1, [r3, #24]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	021a      	lsls	r2, r3, #8
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	619a      	str	r2, [r3, #24]
      break;
 8006860:	e043      	b.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	4618      	mov	r0, r3
 800686a:	f000 f9cd 	bl	8006c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0208 	orr.w	r2, r2, #8
 800687c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0204 	bic.w	r2, r2, #4
 800688c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69d9      	ldr	r1, [r3, #28]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	61da      	str	r2, [r3, #28]
      break;
 80068a0:	e023      	b.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fa21 	bl	8006cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69da      	ldr	r2, [r3, #28]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69d9      	ldr	r1, [r3, #28]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	021a      	lsls	r2, r3, #8
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	61da      	str	r2, [r3, #28]
      break;
 80068e2:	e002      	b.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	75fb      	strb	r3, [r7, #23]
      break;
 80068e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a40      	ldr	r2, [pc, #256]	; (8006a10 <TIM_Base_SetConfig+0x114>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d013      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691a:	d00f      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a3d      	ldr	r2, [pc, #244]	; (8006a14 <TIM_Base_SetConfig+0x118>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00b      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a3c      	ldr	r2, [pc, #240]	; (8006a18 <TIM_Base_SetConfig+0x11c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d007      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a3b      	ldr	r2, [pc, #236]	; (8006a1c <TIM_Base_SetConfig+0x120>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a3a      	ldr	r2, [pc, #232]	; (8006a20 <TIM_Base_SetConfig+0x124>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d108      	bne.n	800694e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2f      	ldr	r2, [pc, #188]	; (8006a10 <TIM_Base_SetConfig+0x114>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d02b      	beq.n	80069ae <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695c:	d027      	beq.n	80069ae <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2c      	ldr	r2, [pc, #176]	; (8006a14 <TIM_Base_SetConfig+0x118>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d023      	beq.n	80069ae <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2b      	ldr	r2, [pc, #172]	; (8006a18 <TIM_Base_SetConfig+0x11c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01f      	beq.n	80069ae <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <TIM_Base_SetConfig+0x120>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d01b      	beq.n	80069ae <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a29      	ldr	r2, [pc, #164]	; (8006a20 <TIM_Base_SetConfig+0x124>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d017      	beq.n	80069ae <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a28      	ldr	r2, [pc, #160]	; (8006a24 <TIM_Base_SetConfig+0x128>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d013      	beq.n	80069ae <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a27      	ldr	r2, [pc, #156]	; (8006a28 <TIM_Base_SetConfig+0x12c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00f      	beq.n	80069ae <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a26      	ldr	r2, [pc, #152]	; (8006a2c <TIM_Base_SetConfig+0x130>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00b      	beq.n	80069ae <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a25      	ldr	r2, [pc, #148]	; (8006a30 <TIM_Base_SetConfig+0x134>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d007      	beq.n	80069ae <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a24      	ldr	r2, [pc, #144]	; (8006a34 <TIM_Base_SetConfig+0x138>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_Base_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a23      	ldr	r2, [pc, #140]	; (8006a38 <TIM_Base_SetConfig+0x13c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d108      	bne.n	80069c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <TIM_Base_SetConfig+0x114>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_Base_SetConfig+0xf8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a0c      	ldr	r2, [pc, #48]	; (8006a20 <TIM_Base_SetConfig+0x124>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d103      	bne.n	80069fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	691a      	ldr	r2, [r3, #16]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	615a      	str	r2, [r3, #20]
}
 8006a02:	bf00      	nop
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	40010000 	.word	0x40010000
 8006a14:	40000400 	.word	0x40000400
 8006a18:	40000800 	.word	0x40000800
 8006a1c:	40000c00 	.word	0x40000c00
 8006a20:	40010400 	.word	0x40010400
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40014400 	.word	0x40014400
 8006a2c:	40014800 	.word	0x40014800
 8006a30:	40001800 	.word	0x40001800
 8006a34:	40001c00 	.word	0x40001c00
 8006a38:	40002000 	.word	0x40002000

08006a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0201 	bic.w	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0303 	bic.w	r3, r3, #3
 8006a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f023 0302 	bic.w	r3, r3, #2
 8006a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a20      	ldr	r2, [pc, #128]	; (8006b14 <TIM_OC1_SetConfig+0xd8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_OC1_SetConfig+0x64>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a1f      	ldr	r2, [pc, #124]	; (8006b18 <TIM_OC1_SetConfig+0xdc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10c      	bne.n	8006aba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f023 0308 	bic.w	r3, r3, #8
 8006aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f023 0304 	bic.w	r3, r3, #4
 8006ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a15      	ldr	r2, [pc, #84]	; (8006b14 <TIM_OC1_SetConfig+0xd8>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d003      	beq.n	8006aca <TIM_OC1_SetConfig+0x8e>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a14      	ldr	r2, [pc, #80]	; (8006b18 <TIM_OC1_SetConfig+0xdc>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d111      	bne.n	8006aee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	621a      	str	r2, [r3, #32]
}
 8006b08:	bf00      	nop
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40010400 	.word	0x40010400

08006b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f023 0210 	bic.w	r2, r3, #16
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f023 0320 	bic.w	r3, r3, #32
 8006b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a22      	ldr	r2, [pc, #136]	; (8006c00 <TIM_OC2_SetConfig+0xe4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC2_SetConfig+0x68>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a21      	ldr	r2, [pc, #132]	; (8006c04 <TIM_OC2_SetConfig+0xe8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d10d      	bne.n	8006ba0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	011b      	lsls	r3, r3, #4
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a17      	ldr	r2, [pc, #92]	; (8006c00 <TIM_OC2_SetConfig+0xe4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_OC2_SetConfig+0x94>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a16      	ldr	r2, [pc, #88]	; (8006c04 <TIM_OC2_SetConfig+0xe8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d113      	bne.n	8006bd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	621a      	str	r2, [r3, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40010400 	.word	0x40010400

08006c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a21      	ldr	r2, [pc, #132]	; (8006ce8 <TIM_OC3_SetConfig+0xe0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d003      	beq.n	8006c6e <TIM_OC3_SetConfig+0x66>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a20      	ldr	r2, [pc, #128]	; (8006cec <TIM_OC3_SetConfig+0xe4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d10d      	bne.n	8006c8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a16      	ldr	r2, [pc, #88]	; (8006ce8 <TIM_OC3_SetConfig+0xe0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d003      	beq.n	8006c9a <TIM_OC3_SetConfig+0x92>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a15      	ldr	r2, [pc, #84]	; (8006cec <TIM_OC3_SetConfig+0xe4>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d113      	bne.n	8006cc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	621a      	str	r2, [r3, #32]
}
 8006cdc:	bf00      	nop
 8006cde:	371c      	adds	r7, #28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	40010000 	.word	0x40010000
 8006cec:	40010400 	.word	0x40010400

08006cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	031b      	lsls	r3, r3, #12
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a12      	ldr	r2, [pc, #72]	; (8006d94 <TIM_OC4_SetConfig+0xa4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d003      	beq.n	8006d58 <TIM_OC4_SetConfig+0x68>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a11      	ldr	r2, [pc, #68]	; (8006d98 <TIM_OC4_SetConfig+0xa8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d109      	bne.n	8006d6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	019b      	lsls	r3, r3, #6
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	621a      	str	r2, [r3, #32]
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40010400 	.word	0x40010400

08006d9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f023 0201 	bic.w	r2, r3, #1
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4a28      	ldr	r2, [pc, #160]	; (8006e68 <TIM_TI1_SetConfig+0xcc>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d01b      	beq.n	8006e02 <TIM_TI1_SetConfig+0x66>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd0:	d017      	beq.n	8006e02 <TIM_TI1_SetConfig+0x66>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4a25      	ldr	r2, [pc, #148]	; (8006e6c <TIM_TI1_SetConfig+0xd0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d013      	beq.n	8006e02 <TIM_TI1_SetConfig+0x66>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4a24      	ldr	r2, [pc, #144]	; (8006e70 <TIM_TI1_SetConfig+0xd4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00f      	beq.n	8006e02 <TIM_TI1_SetConfig+0x66>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4a23      	ldr	r2, [pc, #140]	; (8006e74 <TIM_TI1_SetConfig+0xd8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00b      	beq.n	8006e02 <TIM_TI1_SetConfig+0x66>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4a22      	ldr	r2, [pc, #136]	; (8006e78 <TIM_TI1_SetConfig+0xdc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d007      	beq.n	8006e02 <TIM_TI1_SetConfig+0x66>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4a21      	ldr	r2, [pc, #132]	; (8006e7c <TIM_TI1_SetConfig+0xe0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d003      	beq.n	8006e02 <TIM_TI1_SetConfig+0x66>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <TIM_TI1_SetConfig+0xe4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d101      	bne.n	8006e06 <TIM_TI1_SetConfig+0x6a>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <TIM_TI1_SetConfig+0x6c>
 8006e06:	2300      	movs	r3, #0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f023 0303 	bic.w	r3, r3, #3
 8006e12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	e003      	b.n	8006e26 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f023 030a 	bic.w	r3, r3, #10
 8006e40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f003 030a 	and.w	r3, r3, #10
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40001800 	.word	0x40001800

08006e84 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	f023 0210 	bic.w	r2, r3, #16
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ec2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	031b      	lsls	r3, r3, #12
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ed6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	621a      	str	r2, [r3, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b087      	sub	sp, #28
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	607a      	str	r2, [r7, #4]
 8006f0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f023 0303 	bic.w	r3, r3, #3
 8006f2a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	021b      	lsls	r3, r3, #8
 8006f54:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b087      	sub	sp, #28
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	607a      	str	r2, [r7, #4]
 8006f82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	031b      	lsls	r3, r3, #12
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006fc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	031b      	lsls	r3, r3, #12
 8006fce:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007004:	2302      	movs	r3, #2
 8007006:	e05a      	b.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a21      	ldr	r2, [pc, #132]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d022      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007054:	d01d      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a1d      	ldr	r2, [pc, #116]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d018      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1b      	ldr	r2, [pc, #108]	; (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d013      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1a      	ldr	r2, [pc, #104]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00e      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a18      	ldr	r2, [pc, #96]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d009      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a17      	ldr	r2, [pc, #92]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d004      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a15      	ldr	r2, [pc, #84]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d10c      	bne.n	80070ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40000400 	.word	0x40000400
 80070d4:	40000800 	.word	0x40000800
 80070d8:	40000c00 	.word	0x40000c00
 80070dc:	40010400 	.word	0x40010400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40001800 	.word	0x40001800

080070e8 <f_receiveWord>:
uint16_t curr_reg = INA219_CALIB_VALUE;
uint16_t curr_lsc = INA219_CURRENT_LSB * 1000000;


static uint16_t f_receiveWord(uint8_t address)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	4603      	mov	r3, r0
 80070f0:	71fb      	strb	r3, [r7, #7]
	uint8_t receive[2];

	HAL_I2C_Master_Transmit(&hi2c1, INA219_I2C_ADDRESS, &address, 1, 50);
 80070f2:	1dfa      	adds	r2, r7, #7
 80070f4:	2332      	movs	r3, #50	; 0x32
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	2301      	movs	r3, #1
 80070fa:	2180      	movs	r1, #128	; 0x80
 80070fc:	480b      	ldr	r0, [pc, #44]	; (800712c <f_receiveWord+0x44>)
 80070fe:	f7fb fd75 	bl	8002bec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, INA219_I2C_ADDRESS, (uint8_t*)&receive, 2, 50);
 8007102:	f107 020c 	add.w	r2, r7, #12
 8007106:	2332      	movs	r3, #50	; 0x32
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	2302      	movs	r3, #2
 800710c:	2180      	movs	r1, #128	; 0x80
 800710e:	4807      	ldr	r0, [pc, #28]	; (800712c <f_receiveWord+0x44>)
 8007110:	f7fb fe6a 	bl	8002de8 <HAL_I2C_Master_Receive>

	return (receive[0] << 8) | receive[1];
 8007114:	7b3b      	ldrb	r3, [r7, #12]
 8007116:	021b      	lsls	r3, r3, #8
 8007118:	b21a      	sxth	r2, r3
 800711a:	7b7b      	ldrb	r3, [r7, #13]
 800711c:	b21b      	sxth	r3, r3
 800711e:	4313      	orrs	r3, r2
 8007120:	b21b      	sxth	r3, r3
 8007122:	b29b      	uxth	r3, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	200001f8 	.word	0x200001f8

08007130 <f_sendWord>:

static inline void f_sendWord(uint8_t address, uint16_t word)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af02      	add	r7, sp, #8
 8007136:	4603      	mov	r3, r0
 8007138:	460a      	mov	r2, r1
 800713a:	71fb      	strb	r3, [r7, #7]
 800713c:	4613      	mov	r3, r2
 800713e:	80bb      	strh	r3, [r7, #4]
	uint8_t transmit[3] = {address, word >> 8, word & 0xFF};
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	733b      	strb	r3, [r7, #12]
 8007144:	88bb      	ldrh	r3, [r7, #4]
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	b29b      	uxth	r3, r3
 800714a:	b2db      	uxtb	r3, r3
 800714c:	737b      	strb	r3, [r7, #13]
 800714e:	88bb      	ldrh	r3, [r7, #4]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&hi2c1, INA219_I2C_ADDRESS, (uint8_t*)&transmit, 3, 50);
 8007154:	f107 020c 	add.w	r2, r7, #12
 8007158:	2332      	movs	r3, #50	; 0x32
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	2303      	movs	r3, #3
 800715e:	2180      	movs	r1, #128	; 0x80
 8007160:	4803      	ldr	r0, [pc, #12]	; (8007170 <f_sendWord+0x40>)
 8007162:	f7fb fd43 	bl	8002bec <HAL_I2C_Master_Transmit>
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	200001f8 	.word	0x200001f8

08007174 <f_ina219_HwInit>:

static void f_ina219_HwInit()
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
	 hi2c1.Instance = I2C1;
 8007178:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <f_ina219_HwInit+0x50>)
 800717a:	4a13      	ldr	r2, [pc, #76]	; (80071c8 <f_ina219_HwInit+0x54>)
 800717c:	601a      	str	r2, [r3, #0]
	 hi2c1.Init.ClockSpeed = 100000;
 800717e:	4b11      	ldr	r3, [pc, #68]	; (80071c4 <f_ina219_HwInit+0x50>)
 8007180:	4a12      	ldr	r2, [pc, #72]	; (80071cc <f_ina219_HwInit+0x58>)
 8007182:	605a      	str	r2, [r3, #4]
	 hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <f_ina219_HwInit+0x50>)
 8007186:	2200      	movs	r2, #0
 8007188:	609a      	str	r2, [r3, #8]
	 hi2c1.Init.OwnAddress1 = 0;
 800718a:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <f_ina219_HwInit+0x50>)
 800718c:	2200      	movs	r2, #0
 800718e:	60da      	str	r2, [r3, #12]
	 hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007190:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <f_ina219_HwInit+0x50>)
 8007192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007196:	611a      	str	r2, [r3, #16]
	 hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007198:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <f_ina219_HwInit+0x50>)
 800719a:	2200      	movs	r2, #0
 800719c:	615a      	str	r2, [r3, #20]
	 hi2c1.Init.OwnAddress2 = 0;
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <f_ina219_HwInit+0x50>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	619a      	str	r2, [r3, #24]
	 hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80071a4:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <f_ina219_HwInit+0x50>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	61da      	str	r2, [r3, #28]
	 hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80071aa:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <f_ina219_HwInit+0x50>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	621a      	str	r2, [r3, #32]
	 if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80071b0:	4804      	ldr	r0, [pc, #16]	; (80071c4 <f_ina219_HwInit+0x50>)
 80071b2:	f7fb fbd7 	bl	8002964 <HAL_I2C_Init>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <f_ina219_HwInit+0x4c>
	 {
	   Error_Handler();
 80071bc:	f7fa f8f4 	bl	80013a8 <Error_Handler>
	 }
}
 80071c0:	bf00      	nop
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	200001f8 	.word	0x200001f8
 80071c8:	40005400 	.word	0x40005400
 80071cc:	000186a0 	.word	0x000186a0

080071d0 <f_ina219_calibrate>:

static void f_ina219_calibrate()
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
	uint16_t calib = (uint16_t)INA219_CALIB_VALUE;
 80071d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071da:	80fb      	strh	r3, [r7, #6]

	f_sendWord(INA219_CALIBRATION, calib);
 80071dc:	88fb      	ldrh	r3, [r7, #6]
 80071de:	4619      	mov	r1, r3
 80071e0:	2005      	movs	r0, #5
 80071e2:	f7ff ffa5 	bl	8007130 <f_sendWord>
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <f_ina219_Init>:

//============== public functions ==================

void f_ina219_Init()
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
	f_ina219_HwInit();
 80071f4:	f7ff ffbe 	bl	8007174 <f_ina219_HwInit>
	// bus voltage range = 32v
	// gain divide = 2
	// bus mode/average = 12bit/ 16
	// shunt mode/average = 12bit/ 16
	//mode = bus and shunt, continuous
	uint16_t config = (1 << 13) | (1 << 11) | (12 << 7) | (12 << 3) | (7 << 0);
 80071f8:	f642 6367 	movw	r3, #11879	; 0x2e67
 80071fc:	80fb      	strh	r3, [r7, #6]

	f_ina219_reset();
 80071fe:	f000 f80e 	bl	800721e <f_ina219_reset>
	HAL_Delay(1);
 8007202:	2001      	movs	r0, #1
 8007204:	f7fa fd22 	bl	8001c4c <HAL_Delay>
	f_sendWord(INA219_CONFIG, config);
 8007208:	88fb      	ldrh	r3, [r7, #6]
 800720a:	4619      	mov	r1, r3
 800720c:	2000      	movs	r0, #0
 800720e:	f7ff ff8f 	bl	8007130 <f_sendWord>

	f_ina219_calibrate();
 8007212:	f7ff ffdd 	bl	80071d0 <f_ina219_calibrate>

}
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <f_ina219_reset>:

void f_ina219_reset()
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
	uint16_t tempConfig = (1 << 15);
 8007224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007228:	80fb      	strh	r3, [r7, #6]

	f_sendWord(INA219_CONFIG, tempConfig);
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	4619      	mov	r1, r3
 800722e:	2000      	movs	r0, #0
 8007230:	f7ff ff7e 	bl	8007130 <f_sendWord>
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	0000      	movs	r0, r0
	...

08007240 <f_ina219_GetCurrentInMilis>:
	tempConfig = (tempConfig & 0xFFF8) | mode;
	HAL_I2C_Master_Transmit(&hi2c1, INA219_I2C_ADDRESS, (uint8_t*)&tempConfig, 2, 50);
}

int16_t f_ina219_GetCurrentInMilis()
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
	int16_t current = f_receiveWord(INA219_CURRENT);
 8007246:	2004      	movs	r0, #4
 8007248:	f7ff ff4e 	bl	80070e8 <f_receiveWord>
 800724c:	4603      	mov	r3, r0
 800724e:	80fb      	strh	r3, [r7, #6]

	return 1000*current*INA219_CURRENT_LSB;
 8007250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007258:	fb02 f303 	mul.w	r3, r2, r3
 800725c:	4618      	mov	r0, r3
 800725e:	f7f9 f961 	bl	8000524 <__aeabi_i2d>
 8007262:	a309      	add	r3, pc, #36	; (adr r3, 8007288 <f_ina219_GetCurrentInMilis+0x48>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f7f9 f9c6 	bl	80005f8 <__aeabi_dmul>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4610      	mov	r0, r2
 8007272:	4619      	mov	r1, r3
 8007274:	f7f9 fc70 	bl	8000b58 <__aeabi_d2iz>
 8007278:	4603      	mov	r3, r0
 800727a:	b21b      	sxth	r3, r3
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	f3af 8000 	nop.w
 8007288:	d2f1a9fc 	.word	0xd2f1a9fc
 800728c:	3f20624d 	.word	0x3f20624d

08007290 <f_ina219_GetPowerInMilis>:

uint16_t f_ina219_GetPowerInMilis()
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
	uint16_t power = f_receiveWord(INA219_POWER);
 8007296:	2003      	movs	r0, #3
 8007298:	f7ff ff26 	bl	80070e8 <f_receiveWord>
 800729c:	4603      	mov	r3, r0
 800729e:	80fb      	strh	r3, [r7, #6]

	return 1000*20*power*INA219_CURRENT_LSB;
 80072a0:	88fb      	ldrh	r3, [r7, #6]
 80072a2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7f9 f93a 	bl	8000524 <__aeabi_i2d>
 80072b0:	a309      	add	r3, pc, #36	; (adr r3, 80072d8 <f_ina219_GetPowerInMilis+0x48>)
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	f7f9 f99f 	bl	80005f8 <__aeabi_dmul>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4610      	mov	r0, r2
 80072c0:	4619      	mov	r1, r3
 80072c2:	f7f9 fc71 	bl	8000ba8 <__aeabi_d2uiz>
 80072c6:	4603      	mov	r3, r0
 80072c8:	b29b      	uxth	r3, r3
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	f3af 8000 	nop.w
 80072d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80072dc:	3f20624d 	.word	0x3f20624d

080072e0 <f_ina219_GetBusVoltageInMilis>:

int16_t f_ina219_GetBusVoltageInMilis()
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
	int16_t voltage = f_receiveWord(INA219_BUS_VOLTAGE);
 80072e6:	2002      	movs	r0, #2
 80072e8:	f7ff fefe 	bl	80070e8 <f_receiveWord>
 80072ec:	4603      	mov	r3, r0
 80072ee:	80fb      	strh	r3, [r7, #6]
	voltage = 4*(voltage >> 3);
 80072f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072f4:	10db      	asrs	r3, r3, #3
 80072f6:	b21b      	sxth	r3, r3
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	80fb      	strh	r3, [r7, #6]

	return voltage;
 8007300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <f_ina219_GetShuntVoltageInMicro>:

int16_t f_ina219_GetShuntVoltageInMicro()
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
	int16_t voltage = f_receiveWord(INA219_SHUNT_VOLTAGE);
 8007312:	2001      	movs	r0, #1
 8007314:	f7ff fee8 	bl	80070e8 <f_receiveWord>
 8007318:	4603      	mov	r3, r0
 800731a:	80fb      	strh	r3, [r7, #6]

	return 10*voltage;
 800731c:	88fb      	ldrh	r3, [r7, #6]
 800731e:	461a      	mov	r2, r3
 8007320:	0092      	lsls	r2, r2, #2
 8007322:	4413      	add	r3, r2
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	b29b      	uxth	r3, r3
 8007328:	b21b      	sxth	r3, r3
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <f_SendFrameBufferPage>:

uint8_t sh1106_FrameBuffer[SH1106_HEIGHT/8][SH1106_WIDTH];
uint8_t sh1106_pageDirtyMask;

static inline void f_SendFrameBufferPage(uint8_t page)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	71fb      	strb	r3, [r7, #7]
	f_sh1106_cmd_SetColumnAddress(0);
 800733e:	2000      	movs	r0, #0
 8007340:	f000 fa72 	bl	8007828 <f_sh1106_cmd_SetColumnAddress>
	f_sh1106_cmd_SetPageAddress(page);
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 fad2 	bl	80078f0 <f_sh1106_cmd_SetPageAddress>
	f_sh1106_SendPageData(page, &sh1106_FrameBuffer[page][0], SH1106_WIDTH);
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	01db      	lsls	r3, r3, #7
 8007350:	4a05      	ldr	r2, [pc, #20]	; (8007368 <f_SendFrameBufferPage+0x34>)
 8007352:	1899      	adds	r1, r3, r2
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	2280      	movs	r2, #128	; 0x80
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fb17 	bl	800798c <f_sh1106_SendPageData>
}
 800735e:	bf00      	nop
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	200003ec 	.word	0x200003ec

0800736c <f_lcd_Init>:

//=========== public functions =================

void f_lcd_Init()
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
	f_sh1106_Init();
 8007372:	f000 fa45 	bl	8007800 <f_sh1106_Init>

	f_sh1106_cmd_SetScanDirection(1);
 8007376:	2001      	movs	r0, #1
 8007378:	f000 fadc 	bl	8007934 <f_sh1106_cmd_SetScanDirection>
	f_sh1106_cmd_SetSegmentDirection(1);
 800737c:	2001      	movs	r0, #1
 800737e:	f000 fa7d 	bl	800787c <f_sh1106_cmd_SetSegmentDirection>
	f_lcd_ClearAll();
 8007382:	f000 f84b 	bl	800741c <f_lcd_ClearAll>

	for(uint8_t page = 0; page < 8; page++)
 8007386:	2300      	movs	r3, #0
 8007388:	71fb      	strb	r3, [r7, #7]
 800738a:	e009      	b.n	80073a0 <f_lcd_Init+0x34>
	{
		f_SendFrameBufferPage(page);
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff ffd0 	bl	8007334 <f_SendFrameBufferPage>
		HAL_Delay(4);
 8007394:	2004      	movs	r0, #4
 8007396:	f7fa fc59 	bl	8001c4c <HAL_Delay>
	for(uint8_t page = 0; page < 8; page++)
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	3301      	adds	r3, #1
 800739e:	71fb      	strb	r3, [r7, #7]
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	2b07      	cmp	r3, #7
 80073a4:	d9f2      	bls.n	800738c <f_lcd_Init+0x20>
	}

	f_sh1106_cmd_TogglePower(1);
 80073a6:	2001      	movs	r0, #1
 80073a8:	f000 fa85 	bl	80078b6 <f_sh1106_cmd_TogglePower>

}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <f_lcd_Clear>:

void f_lcd_Clear(uint8_t col_start, uint8_t col_end, uint8_t page)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	4603      	mov	r3, r0
 80073bc:	71fb      	strb	r3, [r7, #7]
 80073be:	460b      	mov	r3, r1
 80073c0:	71bb      	strb	r3, [r7, #6]
 80073c2:	4613      	mov	r3, r2
 80073c4:	717b      	strb	r3, [r7, #5]
	uint8_t blank = 0x00;
 80073c6:	2300      	movs	r3, #0
 80073c8:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i = col_start; i < col_end; i++)
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	73fb      	strb	r3, [r7, #15]
 80073ce:	e00a      	b.n	80073e6 <f_lcd_Clear+0x32>
	{
		sh1106_FrameBuffer[page][i] = blank;
 80073d0:	797a      	ldrb	r2, [r7, #5]
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	490f      	ldr	r1, [pc, #60]	; (8007414 <f_lcd_Clear+0x60>)
 80073d6:	01d2      	lsls	r2, r2, #7
 80073d8:	440a      	add	r2, r1
 80073da:	4413      	add	r3, r2
 80073dc:	7bba      	ldrb	r2, [r7, #14]
 80073de:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = col_start; i < col_end; i++)
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	3301      	adds	r3, #1
 80073e4:	73fb      	strb	r3, [r7, #15]
 80073e6:	7bfa      	ldrb	r2, [r7, #15]
 80073e8:	79bb      	ldrb	r3, [r7, #6]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d3f0      	bcc.n	80073d0 <f_lcd_Clear+0x1c>
	}

	sh1106_pageDirtyMask |= (1 << page);
 80073ee:	797b      	ldrb	r3, [r7, #5]
 80073f0:	2201      	movs	r2, #1
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	b25a      	sxtb	r2, r3
 80073f8:	4b07      	ldr	r3, [pc, #28]	; (8007418 <f_lcd_Clear+0x64>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	b25b      	sxtb	r3, r3
 80073fe:	4313      	orrs	r3, r2
 8007400:	b25b      	sxtb	r3, r3
 8007402:	b2da      	uxtb	r2, r3
 8007404:	4b04      	ldr	r3, [pc, #16]	; (8007418 <f_lcd_Clear+0x64>)
 8007406:	701a      	strb	r2, [r3, #0]
}
 8007408:	bf00      	nop
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	200003ec 	.word	0x200003ec
 8007418:	200007ec 	.word	0x200007ec

0800741c <f_lcd_ClearAll>:

void f_lcd_ClearAll()
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++) f_lcd_Clear(0, SH1106_WIDTH, page);
 8007422:	2300      	movs	r3, #0
 8007424:	71fb      	strb	r3, [r7, #7]
 8007426:	e008      	b.n	800743a <f_lcd_ClearAll+0x1e>
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	461a      	mov	r2, r3
 800742c:	2180      	movs	r1, #128	; 0x80
 800742e:	2000      	movs	r0, #0
 8007430:	f7ff ffc0 	bl	80073b4 <f_lcd_Clear>
 8007434:	79fb      	ldrb	r3, [r7, #7]
 8007436:	3301      	adds	r3, #1
 8007438:	71fb      	strb	r3, [r7, #7]
 800743a:	79fb      	ldrb	r3, [r7, #7]
 800743c:	2b07      	cmp	r3, #7
 800743e:	d9f3      	bls.n	8007428 <f_lcd_ClearAll+0xc>
}
 8007440:	bf00      	nop
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <f_lcd_WriteTxt>:

void f_lcd_WriteTxt(uint8_t x, uint8_t y, const char* txt, const tFont *font)
{
 800744a:	b590      	push	{r4, r7, lr}
 800744c:	b089      	sub	sp, #36	; 0x24
 800744e:	af02      	add	r7, sp, #8
 8007450:	60ba      	str	r2, [r7, #8]
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]
 8007458:	460b      	mov	r3, r1
 800745a:	73bb      	strb	r3, [r7, #14]
	uint8_t fontHeight = font->chars->image->height;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	88db      	ldrh	r3, [r3, #6]
 8007464:	75fb      	strb	r3, [r7, #23]
	uint8_t ch;


	while((ch = *txt++))
 8007466:	e026      	b.n	80074b6 <f_lcd_WriteTxt+0x6c>
	{
		uint8_t fontWidth = font->chars[ch - 0x20].image->width;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	7dbb      	ldrb	r3, [r7, #22]
 800746e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007472:	3b20      	subs	r3, #32
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	4413      	add	r3, r2
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	889b      	ldrh	r3, [r3, #4]
 800747c:	757b      	strb	r3, [r7, #21]

		f_lcd_DrawRaw(x, y, font->chars[ch - 0x20].image->data, fontWidth, fontHeight);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	7dbb      	ldrb	r3, [r7, #22]
 8007484:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007488:	3b20      	subs	r3, #32
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	4413      	add	r3, r2
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	7d7c      	ldrb	r4, [r7, #21]
 8007494:	7bb9      	ldrb	r1, [r7, #14]
 8007496:	7bf8      	ldrb	r0, [r7, #15]
 8007498:	7dfb      	ldrb	r3, [r7, #23]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4623      	mov	r3, r4
 800749e:	f000 f819 	bl	80074d4 <f_lcd_DrawRaw>

		x += fontWidth;
 80074a2:	7bfa      	ldrb	r2, [r7, #15]
 80074a4:	7d7b      	ldrb	r3, [r7, #21]
 80074a6:	4413      	add	r3, r2
 80074a8:	73fb      	strb	r3, [r7, #15]
		if((SH1106_WIDTH - x) < fontWidth) break; //no line wrapping
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
 80074ac:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 80074b0:	7d7b      	ldrb	r3, [r7, #21]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	db08      	blt.n	80074c8 <f_lcd_WriteTxt+0x7e>
	while((ch = *txt++))
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	60ba      	str	r2, [r7, #8]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	75bb      	strb	r3, [r7, #22]
 80074c0:	7dbb      	ldrb	r3, [r7, #22]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1d0      	bne.n	8007468 <f_lcd_WriteTxt+0x1e>
	}
}
 80074c6:	e000      	b.n	80074ca <f_lcd_WriteTxt+0x80>
		if((SH1106_WIDTH - x) < fontWidth) break; //no line wrapping
 80074c8:	bf00      	nop
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd90      	pop	{r4, r7, pc}
	...

080074d4 <f_lcd_DrawRaw>:

void f_lcd_DrawRaw(uint8_t x, uint8_t y, const uint8_t* image, uint8_t x_size, uint8_t y_size)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	603a      	str	r2, [r7, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	4603      	mov	r3, r0
 80074e0:	71fb      	strb	r3, [r7, #7]
 80074e2:	460b      	mov	r3, r1
 80074e4:	71bb      	strb	r3, [r7, #6]
 80074e6:	4613      	mov	r3, r2
 80074e8:	717b      	strb	r3, [r7, #5]
	uint8_t bufferPage;
	uint8_t imagePage = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	75fb      	strb	r3, [r7, #23]

	uint8_t bitsLeftInBuffer;
	uint8_t bitsLeftInImage = 8; //first row of image is always full byte
 80074ee:	2308      	movs	r3, #8
 80074f0:	75bb      	strb	r3, [r7, #22]
	uint8_t bitsToWrite;

	bool writtenUpperHalf; //if false then lower half


	while(y_size)
 80074f2:	e09b      	b.n	800762c <f_lcd_DrawRaw+0x158>
	{
		bufferPage = y/8;
 80074f4:	79bb      	ldrb	r3, [r7, #6]
 80074f6:	08db      	lsrs	r3, r3, #3
 80074f8:	743b      	strb	r3, [r7, #16]
		bitsLeftInBuffer = 8 - (y & 0x07);
 80074fa:	79bb      	ldrb	r3, [r7, #6]
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	b2db      	uxtb	r3, r3
 8007502:	f1c3 0308 	rsb	r3, r3, #8
 8007506:	73fb      	strb	r3, [r7, #15]

		if(bitsLeftInImage > bitsLeftInBuffer) //probably you write on lower half (upper bits)
 8007508:	7dba      	ldrb	r2, [r7, #22]
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	429a      	cmp	r2, r3
 800750e:	d904      	bls.n	800751a <f_lcd_DrawRaw+0x46>
			{
				bitsToWrite = bitsLeftInBuffer;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	757b      	strb	r3, [r7, #21]
				writtenUpperHalf = false;
 8007514:	2300      	movs	r3, #0
 8007516:	753b      	strb	r3, [r7, #20]
 8007518:	e003      	b.n	8007522 <f_lcd_DrawRaw+0x4e>
			}
		else
			{
				bitsToWrite = bitsLeftInImage;
 800751a:	7dbb      	ldrb	r3, [r7, #22]
 800751c:	757b      	strb	r3, [r7, #21]
				writtenUpperHalf = true;
 800751e:	2301      	movs	r3, #1
 8007520:	753b      	strb	r3, [r7, #20]
			}

		for(uint8_t lines = 0; lines < x_size; lines++)
 8007522:	2300      	movs	r3, #0
 8007524:	74fb      	strb	r3, [r7, #19]
 8007526:	e05a      	b.n	80075de <f_lcd_DrawRaw+0x10a>
		{
			uint8_t dataToPreserve;
			uint8_t dataToWrite;

			if(writtenUpperHalf) //preserve MSB bits
 8007528:	7d3b      	ldrb	r3, [r7, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d023      	beq.n	8007576 <f_lcd_DrawRaw+0xa2>
			{
				dataToPreserve = sh1106_FrameBuffer[bufferPage][x + lines] & (0xFF << bitsToWrite);
 800752e:	7c3a      	ldrb	r2, [r7, #16]
 8007530:	79f9      	ldrb	r1, [r7, #7]
 8007532:	7cfb      	ldrb	r3, [r7, #19]
 8007534:	440b      	add	r3, r1
 8007536:	4943      	ldr	r1, [pc, #268]	; (8007644 <f_lcd_DrawRaw+0x170>)
 8007538:	01d2      	lsls	r2, r2, #7
 800753a:	440a      	add	r2, r1
 800753c:	4413      	add	r3, r2
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	b25a      	sxtb	r2, r3
 8007542:	7d7b      	ldrb	r3, [r7, #21]
 8007544:	21ff      	movs	r1, #255	; 0xff
 8007546:	fa01 f303 	lsl.w	r3, r1, r3
 800754a:	b25b      	sxtb	r3, r3
 800754c:	4013      	ands	r3, r2
 800754e:	b25b      	sxtb	r3, r3
 8007550:	74bb      	strb	r3, [r7, #18]
				dataToWrite = image[imagePage*x_size + lines] >> (8 - bitsToWrite);
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	797a      	ldrb	r2, [r7, #5]
 8007556:	fb03 f202 	mul.w	r2, r3, r2
 800755a:	7cfb      	ldrb	r3, [r7, #19]
 800755c:	4413      	add	r3, r2
 800755e:	461a      	mov	r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	4413      	add	r3, r2
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	7d7b      	ldrb	r3, [r7, #21]
 800756a:	f1c3 0308 	rsb	r3, r3, #8
 800756e:	fa42 f303 	asr.w	r3, r2, r3
 8007572:	747b      	strb	r3, [r7, #17]
 8007574:	e022      	b.n	80075bc <f_lcd_DrawRaw+0xe8>
			}
			else //preserve LSB bits
			{
				dataToPreserve = sh1106_FrameBuffer[bufferPage][x + lines] & (0xFF >> bitsToWrite);
 8007576:	7c3a      	ldrb	r2, [r7, #16]
 8007578:	79f9      	ldrb	r1, [r7, #7]
 800757a:	7cfb      	ldrb	r3, [r7, #19]
 800757c:	440b      	add	r3, r1
 800757e:	4931      	ldr	r1, [pc, #196]	; (8007644 <f_lcd_DrawRaw+0x170>)
 8007580:	01d2      	lsls	r2, r2, #7
 8007582:	440a      	add	r2, r1
 8007584:	4413      	add	r3, r2
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	b25a      	sxtb	r2, r3
 800758a:	7d7b      	ldrb	r3, [r7, #21]
 800758c:	21ff      	movs	r1, #255	; 0xff
 800758e:	fa41 f303 	asr.w	r3, r1, r3
 8007592:	b25b      	sxtb	r3, r3
 8007594:	4013      	ands	r3, r2
 8007596:	b25b      	sxtb	r3, r3
 8007598:	74bb      	strb	r3, [r7, #18]
				dataToWrite = image[imagePage*x_size + lines] << (8 - bitsToWrite);
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	797a      	ldrb	r2, [r7, #5]
 800759e:	fb03 f202 	mul.w	r2, r3, r2
 80075a2:	7cfb      	ldrb	r3, [r7, #19]
 80075a4:	4413      	add	r3, r2
 80075a6:	461a      	mov	r2, r3
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	4413      	add	r3, r2
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	7d7b      	ldrb	r3, [r7, #21]
 80075b2:	f1c3 0308 	rsb	r3, r3, #8
 80075b6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ba:	747b      	strb	r3, [r7, #17]
			}

			sh1106_FrameBuffer[bufferPage][x + lines] = dataToPreserve | dataToWrite;//write image to page
 80075bc:	7c3a      	ldrb	r2, [r7, #16]
 80075be:	79f9      	ldrb	r1, [r7, #7]
 80075c0:	7cfb      	ldrb	r3, [r7, #19]
 80075c2:	440b      	add	r3, r1
 80075c4:	7cb8      	ldrb	r0, [r7, #18]
 80075c6:	7c79      	ldrb	r1, [r7, #17]
 80075c8:	4301      	orrs	r1, r0
 80075ca:	b2c8      	uxtb	r0, r1
 80075cc:	491d      	ldr	r1, [pc, #116]	; (8007644 <f_lcd_DrawRaw+0x170>)
 80075ce:	01d2      	lsls	r2, r2, #7
 80075d0:	440a      	add	r2, r1
 80075d2:	4413      	add	r3, r2
 80075d4:	4602      	mov	r2, r0
 80075d6:	701a      	strb	r2, [r3, #0]
		for(uint8_t lines = 0; lines < x_size; lines++)
 80075d8:	7cfb      	ldrb	r3, [r7, #19]
 80075da:	3301      	adds	r3, #1
 80075dc:	74fb      	strb	r3, [r7, #19]
 80075de:	7cfa      	ldrb	r2, [r7, #19]
 80075e0:	797b      	ldrb	r3, [r7, #5]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d3a0      	bcc.n	8007528 <f_lcd_DrawRaw+0x54>
		}

		bitsLeftInImage -= bitsToWrite;
 80075e6:	7dba      	ldrb	r2, [r7, #22]
 80075e8:	7d7b      	ldrb	r3, [r7, #21]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	75bb      	strb	r3, [r7, #22]
		if(bitsLeftInImage == 0) //jump to next page from image
 80075ee:	7dbb      	ldrb	r3, [r7, #22]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d104      	bne.n	80075fe <f_lcd_DrawRaw+0x12a>
		{
			imagePage++;
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	3301      	adds	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]
			bitsLeftInImage = 8;
 80075fa:	2308      	movs	r3, #8
 80075fc:	75bb      	strb	r3, [r7, #22]
		}

		y_size -= bitsToWrite;
 80075fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007602:	7d7b      	ldrb	r3, [r7, #21]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	f887 3020 	strb.w	r3, [r7, #32]
		y += bitsToWrite;
 800760a:	79ba      	ldrb	r2, [r7, #6]
 800760c:	7d7b      	ldrb	r3, [r7, #21]
 800760e:	4413      	add	r3, r2
 8007610:	71bb      	strb	r3, [r7, #6]

		sh1106_pageDirtyMask |= (1 << bufferPage);
 8007612:	7c3b      	ldrb	r3, [r7, #16]
 8007614:	2201      	movs	r2, #1
 8007616:	fa02 f303 	lsl.w	r3, r2, r3
 800761a:	b25a      	sxtb	r2, r3
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <f_lcd_DrawRaw+0x174>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	b25b      	sxtb	r3, r3
 8007622:	4313      	orrs	r3, r2
 8007624:	b25b      	sxtb	r3, r3
 8007626:	b2da      	uxtb	r2, r3
 8007628:	4b07      	ldr	r3, [pc, #28]	; (8007648 <f_lcd_DrawRaw+0x174>)
 800762a:	701a      	strb	r2, [r3, #0]
	while(y_size)
 800762c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007630:	2b00      	cmp	r3, #0
 8007632:	f47f af5f 	bne.w	80074f4 <f_lcd_DrawRaw+0x20>

	}

}
 8007636:	bf00      	nop
 8007638:	bf00      	nop
 800763a:	371c      	adds	r7, #28
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	200003ec 	.word	0x200003ec
 8007648:	200007ec 	.word	0x200007ec

0800764c <f_lcd_SendFrameCallback>:
	sh1106_pageDirtyMask |= (1 << (y/8));
}


void f_lcd_SendFrameCallback()
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
	static uint8_t timer;
	static uint8_t activePage;


	if((HAL_GetTick() - timer) > 5) //software timer
 8007650:	f7fa faf0 	bl	8001c34 <HAL_GetTick>
 8007654:	4603      	mov	r3, r0
 8007656:	4a1d      	ldr	r2, [pc, #116]	; (80076cc <f_lcd_SendFrameCallback+0x80>)
 8007658:	7812      	ldrb	r2, [r2, #0]
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	2b05      	cmp	r3, #5
 800765e:	d932      	bls.n	80076c6 <f_lcd_SendFrameCallback+0x7a>
	{

		if(sh1106_pageDirtyMask & (1 << activePage))
 8007660:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <f_lcd_SendFrameCallback+0x84>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <f_lcd_SendFrameCallback+0x88>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	fa42 f303 	asr.w	r3, r2, r3
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d014      	beq.n	80076a0 <f_lcd_SendFrameCallback+0x54>
		{
			f_SendFrameBufferPage(activePage);
 8007676:	4b17      	ldr	r3, [pc, #92]	; (80076d4 <f_lcd_SendFrameCallback+0x88>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fe5a 	bl	8007334 <f_SendFrameBufferPage>

			sh1106_pageDirtyMask &= ~(1 << activePage);
 8007680:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <f_lcd_SendFrameCallback+0x88>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	2301      	movs	r3, #1
 8007688:	4093      	lsls	r3, r2
 800768a:	b25b      	sxtb	r3, r3
 800768c:	43db      	mvns	r3, r3
 800768e:	b25a      	sxtb	r2, r3
 8007690:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <f_lcd_SendFrameCallback+0x84>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	b25b      	sxtb	r3, r3
 8007696:	4013      	ands	r3, r2
 8007698:	b25b      	sxtb	r3, r3
 800769a:	b2da      	uxtb	r2, r3
 800769c:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <f_lcd_SendFrameCallback+0x84>)
 800769e:	701a      	strb	r2, [r3, #0]

		}

		activePage = (activePage + 1) % 8;
 80076a0:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <f_lcd_SendFrameCallback+0x88>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	3301      	adds	r3, #1
 80076a6:	425a      	negs	r2, r3
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	f002 0207 	and.w	r2, r2, #7
 80076b0:	bf58      	it	pl
 80076b2:	4253      	negpl	r3, r2
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	4b07      	ldr	r3, [pc, #28]	; (80076d4 <f_lcd_SendFrameCallback+0x88>)
 80076b8:	701a      	strb	r2, [r3, #0]
		timer = HAL_GetTick();
 80076ba:	f7fa fabb 	bl	8001c34 <HAL_GetTick>
 80076be:	4603      	mov	r3, r0
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	4b02      	ldr	r3, [pc, #8]	; (80076cc <f_lcd_SendFrameCallback+0x80>)
 80076c4:	701a      	strb	r2, [r3, #0]
	}
}
 80076c6:	bf00      	nop
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	200007ed 	.word	0x200007ed
 80076d0:	200007ec 	.word	0x200007ec
 80076d4:	200007ee 	.word	0x200007ee

080076d8 <f_sh1106_HwInit>:
#define RES_LOW()		GPIO_LOW(LCD_RES_GPIO_Port, LCD_RES_Pin)

bool sh1106_TransmitBusy;

static void f_sh1106_HwInit()
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
	hspi2.Instance = SPI2;
 80076dc:	4b1d      	ldr	r3, [pc, #116]	; (8007754 <f_sh1106_HwInit+0x7c>)
 80076de:	4a1e      	ldr	r2, [pc, #120]	; (8007758 <f_sh1106_HwInit+0x80>)
 80076e0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80076e2:	4b1c      	ldr	r3, [pc, #112]	; (8007754 <f_sh1106_HwInit+0x7c>)
 80076e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80076e8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80076ea:	4b1a      	ldr	r3, [pc, #104]	; (8007754 <f_sh1106_HwInit+0x7c>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80076f0:	4b18      	ldr	r3, [pc, #96]	; (8007754 <f_sh1106_HwInit+0x7c>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80076f6:	4b17      	ldr	r3, [pc, #92]	; (8007754 <f_sh1106_HwInit+0x7c>)
 80076f8:	2202      	movs	r2, #2
 80076fa:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80076fc:	4b15      	ldr	r3, [pc, #84]	; (8007754 <f_sh1106_HwInit+0x7c>)
 80076fe:	2201      	movs	r2, #1
 8007700:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8007702:	4b14      	ldr	r3, [pc, #80]	; (8007754 <f_sh1106_HwInit+0x7c>)
 8007704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007708:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800770a:	4b12      	ldr	r3, [pc, #72]	; (8007754 <f_sh1106_HwInit+0x7c>)
 800770c:	2220      	movs	r2, #32
 800770e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007710:	4b10      	ldr	r3, [pc, #64]	; (8007754 <f_sh1106_HwInit+0x7c>)
 8007712:	2200      	movs	r2, #0
 8007714:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <f_sh1106_HwInit+0x7c>)
 8007718:	2200      	movs	r2, #0
 800771a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800771c:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <f_sh1106_HwInit+0x7c>)
 800771e:	2200      	movs	r2, #0
 8007720:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8007722:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <f_sh1106_HwInit+0x7c>)
 8007724:	220a      	movs	r2, #10
 8007726:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007728:	480a      	ldr	r0, [pc, #40]	; (8007754 <f_sh1106_HwInit+0x7c>)
 800772a:	f7fe fa0f 	bl	8005b4c <HAL_SPI_Init>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <f_sh1106_HwInit+0x60>
	{
		Error_Handler();
 8007734:	f7f9 fe38 	bl	80013a8 <Error_Handler>
	}

	__HAL_SPI_ENABLE(&hspi2);
 8007738:	4b06      	ldr	r3, [pc, #24]	; (8007754 <f_sh1106_HwInit+0x7c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b05      	ldr	r3, [pc, #20]	; (8007754 <f_sh1106_HwInit+0x7c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007746:	601a      	str	r2, [r3, #0]
	CS_HIGH();
 8007748:	4b04      	ldr	r3, [pc, #16]	; (800775c <f_sh1106_HwInit+0x84>)
 800774a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800774e:	619a      	str	r2, [r3, #24]
}
 8007750:	bf00      	nop
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000254 	.word	0x20000254
 8007758:	40003800 	.word	0x40003800
 800775c:	40020400 	.word	0x40020400

08007760 <f_sh1106_SendData>:

static bool f_sh1106_SendData(uint8_t *data, uint16_t length, bool cmd)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	807b      	strh	r3, [r7, #2]
 800776c:	4613      	mov	r3, r2
 800776e:	707b      	strb	r3, [r7, #1]
	bool isOk = false;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
	uint8_t tries;

	for(tries = 0; tries < 3; tries++)
 8007774:	2300      	movs	r3, #0
 8007776:	73bb      	strb	r3, [r7, #14]
 8007778:	e032      	b.n	80077e0 <f_sh1106_SendData+0x80>
	{
		if(sh1106_TransmitBusy)
 800777a:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <f_sh1106_SendData+0x94>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <f_sh1106_SendData+0x2a>
		{
			HAL_Delay(10);
 8007782:	200a      	movs	r0, #10
 8007784:	f7fa fa62 	bl	8001c4c <HAL_Delay>
 8007788:	e027      	b.n	80077da <f_sh1106_SendData+0x7a>
		}
		else
		{
			if(cmd) CMD_LOW();
 800778a:	787b      	ldrb	r3, [r7, #1]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d004      	beq.n	800779a <f_sh1106_SendData+0x3a>
 8007790:	4b19      	ldr	r3, [pc, #100]	; (80077f8 <f_sh1106_SendData+0x98>)
 8007792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007796:	619a      	str	r2, [r3, #24]
 8007798:	e003      	b.n	80077a2 <f_sh1106_SendData+0x42>
			else CMD_HIGH();
 800779a:	4b17      	ldr	r3, [pc, #92]	; (80077f8 <f_sh1106_SendData+0x98>)
 800779c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077a0:	619a      	str	r2, [r3, #24]

			sh1106_TransmitBusy = true;
 80077a2:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <f_sh1106_SendData+0x94>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	701a      	strb	r2, [r3, #0]
			CS_LOW();
 80077a8:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <f_sh1106_SendData+0x98>)
 80077aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80077ae:	619a      	str	r2, [r3, #24]
			HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, data, length, 10);
 80077b0:	887a      	ldrh	r2, [r7, #2]
 80077b2:	230a      	movs	r3, #10
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	4811      	ldr	r0, [pc, #68]	; (80077fc <f_sh1106_SendData+0x9c>)
 80077b8:	f7fe fa51 	bl	8005c5e <HAL_SPI_Transmit>
 80077bc:	4603      	mov	r3, r0
 80077be:	737b      	strb	r3, [r7, #13]
			CS_HIGH();
 80077c0:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <f_sh1106_SendData+0x98>)
 80077c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80077c6:	619a      	str	r2, [r3, #24]
			sh1106_TransmitBusy = false;
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <f_sh1106_SendData+0x94>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]

			if(status == HAL_OK) isOk = true;
 80077ce:	7b7b      	ldrb	r3, [r7, #13]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d109      	bne.n	80077e8 <f_sh1106_SendData+0x88>
 80077d4:	2301      	movs	r3, #1
 80077d6:	73fb      	strb	r3, [r7, #15]

			break;
 80077d8:	e006      	b.n	80077e8 <f_sh1106_SendData+0x88>
	for(tries = 0; tries < 3; tries++)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	3301      	adds	r3, #1
 80077de:	73bb      	strb	r3, [r7, #14]
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d9c9      	bls.n	800777a <f_sh1106_SendData+0x1a>
 80077e6:	e000      	b.n	80077ea <f_sh1106_SendData+0x8a>
			break;
 80077e8:	bf00      	nop
		}
	}

	return isOk;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	200007ef 	.word	0x200007ef
 80077f8:	40020400 	.word	0x40020400
 80077fc:	20000254 	.word	0x20000254

08007800 <f_sh1106_Init>:

//============ public functions ========================

void f_sh1106_Init()
{
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
	f_sh1106_HwInit();
 8007804:	f7ff ff68 	bl	80076d8 <f_sh1106_HwInit>

	RES_LOW();
 8007808:	4b06      	ldr	r3, [pc, #24]	; (8007824 <f_sh1106_Init+0x24>)
 800780a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800780e:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 8007810:	2001      	movs	r0, #1
 8007812:	f7fa fa1b 	bl	8001c4c <HAL_Delay>
	RES_HIGH();
 8007816:	4b03      	ldr	r3, [pc, #12]	; (8007824 <f_sh1106_Init+0x24>)
 8007818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800781c:	619a      	str	r2, [r3, #24]

}
 800781e:	bf00      	nop
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	40020400 	.word	0x40020400

08007828 <f_sh1106_cmd_SetColumnAddress>:

bool f_sh1106_cmd_SetColumnAddress(uint8_t address)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	71fb      	strb	r3, [r7, #7]
	if(address >= SH1106_WIDTH) return false;
 8007832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007836:	2b00      	cmp	r3, #0
 8007838:	da01      	bge.n	800783e <f_sh1106_cmd_SetColumnAddress+0x16>
 800783a:	2300      	movs	r3, #0
 800783c:	e01a      	b.n	8007874 <f_sh1106_cmd_SetColumnAddress+0x4c>

	address += 2; //2 first and last pixels are not visible
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	3302      	adds	r3, #2
 8007842:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[2];

	cmd[0] = 0x10 | ((address >> 4) & 0x0F);
 8007844:	79fb      	ldrb	r3, [r7, #7]
 8007846:	091b      	lsrs	r3, r3, #4
 8007848:	b2db      	uxtb	r3, r3
 800784a:	b25b      	sxtb	r3, r3
 800784c:	f043 0310 	orr.w	r3, r3, #16
 8007850:	b25b      	sxtb	r3, r3
 8007852:	b2db      	uxtb	r3, r3
 8007854:	733b      	strb	r3, [r7, #12]
	cmd[1] = address & 0x0F;
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	f003 030f 	and.w	r3, r3, #15
 800785c:	b2db      	uxtb	r3, r3
 800785e:	737b      	strb	r3, [r7, #13]

	bool isOk = f_sh1106_SendData((uint8_t*)&cmd, 2, true);
 8007860:	f107 030c 	add.w	r3, r7, #12
 8007864:	2201      	movs	r2, #1
 8007866:	2102      	movs	r1, #2
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff ff79 	bl	8007760 <f_sh1106_SendData>
 800786e:	4603      	mov	r3, r0
 8007870:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8007872:	7bfb      	ldrb	r3, [r7, #15]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <f_sh1106_cmd_SetSegmentDirection>:

	return isOk;
}

bool f_sh1106_cmd_SetSegmentDirection(bool reverse)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xA0 | (reverse & 0x01);
 8007886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	b25b      	sxtb	r3, r3
 8007890:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8007894:	b25b      	sxtb	r3, r3
 8007896:	b2db      	uxtb	r3, r3
 8007898:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 800789a:	f107 030e 	add.w	r3, r7, #14
 800789e:	2201      	movs	r2, #1
 80078a0:	2101      	movs	r1, #1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff ff5c 	bl	8007760 <f_sh1106_SendData>
 80078a8:	4603      	mov	r3, r0
 80078aa:	73fb      	strb	r3, [r7, #15]

	return isOk;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <f_sh1106_cmd_TogglePower>:

	return isOk;
}

bool f_sh1106_cmd_TogglePower(bool sleep)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	4603      	mov	r3, r0
 80078be:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xAE | (sleep & 0x01);
 80078c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	b25b      	sxtb	r3, r3
 80078ca:	f063 0351 	orn	r3, r3, #81	; 0x51
 80078ce:	b25b      	sxtb	r3, r3
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 80078d4:	f107 030e 	add.w	r3, r7, #14
 80078d8:	2201      	movs	r2, #1
 80078da:	2101      	movs	r1, #1
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff ff3f 	bl	8007760 <f_sh1106_SendData>
 80078e2:	4603      	mov	r3, r0
 80078e4:	73fb      	strb	r3, [r7, #15]

	return isOk;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <f_sh1106_cmd_SetPageAddress>:

bool f_sh1106_cmd_SetPageAddress(uint8_t page)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	71fb      	strb	r3, [r7, #7]
	if(page >= SH1106_HEIGHT/8) return false;
 80078fa:	79fb      	ldrb	r3, [r7, #7]
 80078fc:	2b07      	cmp	r3, #7
 80078fe:	d901      	bls.n	8007904 <f_sh1106_cmd_SetPageAddress+0x14>
 8007900:	2300      	movs	r3, #0
 8007902:	e013      	b.n	800792c <f_sh1106_cmd_SetPageAddress+0x3c>

	uint8_t cmd = 0xB0 | (page & 0x0F);
 8007904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	b25b      	sxtb	r3, r3
 800790e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8007912:	b25b      	sxtb	r3, r3
 8007914:	b2db      	uxtb	r3, r3
 8007916:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8007918:	f107 030e 	add.w	r3, r7, #14
 800791c:	2201      	movs	r2, #1
 800791e:	2101      	movs	r1, #1
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff ff1d 	bl	8007760 <f_sh1106_SendData>
 8007926:	4603      	mov	r3, r0
 8007928:	73fb      	strb	r3, [r7, #15]

	return isOk;
 800792a:	7bfb      	ldrb	r3, [r7, #15]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <f_sh1106_cmd_SetScanDirection>:

bool f_sh1106_cmd_SetScanDirection(bool reverse)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xC0 | ((reverse << 3) & 0x0F);
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	b25b      	sxtb	r3, r3
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	b25b      	sxtb	r3, r3
 800794a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800794e:	b25b      	sxtb	r3, r3
 8007950:	b2db      	uxtb	r3, r3
 8007952:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8007954:	f107 030e 	add.w	r3, r7, #14
 8007958:	2201      	movs	r2, #1
 800795a:	2101      	movs	r1, #1
 800795c:	4618      	mov	r0, r3
 800795e:	f7ff feff 	bl	8007760 <f_sh1106_SendData>
 8007962:	4603      	mov	r3, r0
 8007964:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8007966:	7bfb      	ldrb	r3, [r7, #15]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <f_sh1106_CS_HIGH>:

	return isOk;
}

void f_sh1106_CS_HIGH()
{
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
	CS_HIGH();
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <f_sh1106_CS_HIGH+0x18>)
 8007976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800797a:	619a      	str	r2, [r3, #24]
}
 800797c:	bf00      	nop
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	40020400 	.word	0x40020400

0800798c <f_sh1106_SendPageData>:

bool f_sh1106_SendPageData(uint8_t page, uint8_t *data, uint8_t length)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
 8007998:	4613      	mov	r3, r2
 800799a:	71bb      	strb	r3, [r7, #6]
	uint8_t tries = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]

	HAL_StatusTypeDef status;
	do
	{
		CS_LOW();
 80079a0:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <f_sh1106_SendPageData+0x6c>)
 80079a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80079a6:	619a      	str	r2, [r3, #24]
		CMD_HIGH(); //only data is send;
 80079a8:	4b13      	ldr	r3, [pc, #76]	; (80079f8 <f_sh1106_SendPageData+0x6c>)
 80079aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80079ae:	619a      	str	r2, [r3, #24]
		status = HAL_SPI_Transmit_DMA(&hspi2, data, length);
 80079b0:	79bb      	ldrb	r3, [r7, #6]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	4810      	ldr	r0, [pc, #64]	; (80079fc <f_sh1106_SendPageData+0x70>)
 80079ba:	f7fe fa8d 	bl	8005ed8 <HAL_SPI_Transmit_DMA>
 80079be:	4603      	mov	r3, r0
 80079c0:	73bb      	strb	r3, [r7, #14]
		tries ++;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	3301      	adds	r3, #1
 80079c6:	73fb      	strb	r3, [r7, #15]

	}while((status != HAL_OK) && tries < 5);
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <f_sh1106_SendPageData+0x48>
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d9e5      	bls.n	80079a0 <f_sh1106_SendPageData+0x14>

	if(tries == 5)
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d105      	bne.n	80079e6 <f_sh1106_SendPageData+0x5a>
		{
			CS_HIGH();
 80079da:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <f_sh1106_SendPageData+0x6c>)
 80079dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80079e0:	619a      	str	r2, [r3, #24]
			return false;
 80079e2:	2300      	movs	r3, #0
 80079e4:	e003      	b.n	80079ee <f_sh1106_SendPageData+0x62>
		}

	sh1106_TransmitBusy = true;
 80079e6:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <f_sh1106_SendPageData+0x74>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	701a      	strb	r2, [r3, #0]
	return true;
 80079ec:	2301      	movs	r3, #1
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	40020400 	.word	0x40020400
 80079fc:	20000254 	.word	0x20000254
 8007a00:	200007ef 	.word	0x200007ef

08007a04 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	f_sh1106_CS_HIGH();
 8007a0c:	f7ff ffb0 	bl	8007970 <f_sh1106_CS_HIGH>
	sh1106_TransmitBusy = false;
 8007a10:	4b03      	ldr	r3, [pc, #12]	; (8007a20 <HAL_SPI_TxCpltCallback+0x1c>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	701a      	strb	r2, [r3, #0]
}
 8007a16:	bf00      	nop
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	200007ef 	.word	0x200007ef

08007a24 <__errno>:
 8007a24:	4b01      	ldr	r3, [pc, #4]	; (8007a2c <__errno+0x8>)
 8007a26:	6818      	ldr	r0, [r3, #0]
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	2000000c 	.word	0x2000000c

08007a30 <__libc_init_array>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	4d0d      	ldr	r5, [pc, #52]	; (8007a68 <__libc_init_array+0x38>)
 8007a34:	4c0d      	ldr	r4, [pc, #52]	; (8007a6c <__libc_init_array+0x3c>)
 8007a36:	1b64      	subs	r4, r4, r5
 8007a38:	10a4      	asrs	r4, r4, #2
 8007a3a:	2600      	movs	r6, #0
 8007a3c:	42a6      	cmp	r6, r4
 8007a3e:	d109      	bne.n	8007a54 <__libc_init_array+0x24>
 8007a40:	4d0b      	ldr	r5, [pc, #44]	; (8007a70 <__libc_init_array+0x40>)
 8007a42:	4c0c      	ldr	r4, [pc, #48]	; (8007a74 <__libc_init_array+0x44>)
 8007a44:	f002 ff04 	bl	800a850 <_init>
 8007a48:	1b64      	subs	r4, r4, r5
 8007a4a:	10a4      	asrs	r4, r4, #2
 8007a4c:	2600      	movs	r6, #0
 8007a4e:	42a6      	cmp	r6, r4
 8007a50:	d105      	bne.n	8007a5e <__libc_init_array+0x2e>
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a58:	4798      	blx	r3
 8007a5a:	3601      	adds	r6, #1
 8007a5c:	e7ee      	b.n	8007a3c <__libc_init_array+0xc>
 8007a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a62:	4798      	blx	r3
 8007a64:	3601      	adds	r6, #1
 8007a66:	e7f2      	b.n	8007a4e <__libc_init_array+0x1e>
 8007a68:	0800b9bc 	.word	0x0800b9bc
 8007a6c:	0800b9bc 	.word	0x0800b9bc
 8007a70:	0800b9bc 	.word	0x0800b9bc
 8007a74:	0800b9c0 	.word	0x0800b9c0

08007a78 <memset>:
 8007a78:	4402      	add	r2, r0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d100      	bne.n	8007a82 <memset+0xa>
 8007a80:	4770      	bx	lr
 8007a82:	f803 1b01 	strb.w	r1, [r3], #1
 8007a86:	e7f9      	b.n	8007a7c <memset+0x4>

08007a88 <__cvt>:
 8007a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a8c:	ec55 4b10 	vmov	r4, r5, d0
 8007a90:	2d00      	cmp	r5, #0
 8007a92:	460e      	mov	r6, r1
 8007a94:	4619      	mov	r1, r3
 8007a96:	462b      	mov	r3, r5
 8007a98:	bfbb      	ittet	lt
 8007a9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a9e:	461d      	movlt	r5, r3
 8007aa0:	2300      	movge	r3, #0
 8007aa2:	232d      	movlt	r3, #45	; 0x2d
 8007aa4:	700b      	strb	r3, [r1, #0]
 8007aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007aac:	4691      	mov	r9, r2
 8007aae:	f023 0820 	bic.w	r8, r3, #32
 8007ab2:	bfbc      	itt	lt
 8007ab4:	4622      	movlt	r2, r4
 8007ab6:	4614      	movlt	r4, r2
 8007ab8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007abc:	d005      	beq.n	8007aca <__cvt+0x42>
 8007abe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ac2:	d100      	bne.n	8007ac6 <__cvt+0x3e>
 8007ac4:	3601      	adds	r6, #1
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	e000      	b.n	8007acc <__cvt+0x44>
 8007aca:	2103      	movs	r1, #3
 8007acc:	ab03      	add	r3, sp, #12
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	ab02      	add	r3, sp, #8
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	ec45 4b10 	vmov	d0, r4, r5
 8007ad8:	4653      	mov	r3, sl
 8007ada:	4632      	mov	r2, r6
 8007adc:	f000 fcec 	bl	80084b8 <_dtoa_r>
 8007ae0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	d102      	bne.n	8007aee <__cvt+0x66>
 8007ae8:	f019 0f01 	tst.w	r9, #1
 8007aec:	d022      	beq.n	8007b34 <__cvt+0xac>
 8007aee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007af2:	eb07 0906 	add.w	r9, r7, r6
 8007af6:	d110      	bne.n	8007b1a <__cvt+0x92>
 8007af8:	783b      	ldrb	r3, [r7, #0]
 8007afa:	2b30      	cmp	r3, #48	; 0x30
 8007afc:	d10a      	bne.n	8007b14 <__cvt+0x8c>
 8007afe:	2200      	movs	r2, #0
 8007b00:	2300      	movs	r3, #0
 8007b02:	4620      	mov	r0, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	f7f8 ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b0a:	b918      	cbnz	r0, 8007b14 <__cvt+0x8c>
 8007b0c:	f1c6 0601 	rsb	r6, r6, #1
 8007b10:	f8ca 6000 	str.w	r6, [sl]
 8007b14:	f8da 3000 	ldr.w	r3, [sl]
 8007b18:	4499      	add	r9, r3
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4620      	mov	r0, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7f8 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b26:	b108      	cbz	r0, 8007b2c <__cvt+0xa4>
 8007b28:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b2c:	2230      	movs	r2, #48	; 0x30
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	454b      	cmp	r3, r9
 8007b32:	d307      	bcc.n	8007b44 <__cvt+0xbc>
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b38:	1bdb      	subs	r3, r3, r7
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	b004      	add	sp, #16
 8007b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b44:	1c59      	adds	r1, r3, #1
 8007b46:	9103      	str	r1, [sp, #12]
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	e7f0      	b.n	8007b2e <__cvt+0xa6>

08007b4c <__exponent>:
 8007b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2900      	cmp	r1, #0
 8007b52:	bfb8      	it	lt
 8007b54:	4249      	neglt	r1, r1
 8007b56:	f803 2b02 	strb.w	r2, [r3], #2
 8007b5a:	bfb4      	ite	lt
 8007b5c:	222d      	movlt	r2, #45	; 0x2d
 8007b5e:	222b      	movge	r2, #43	; 0x2b
 8007b60:	2909      	cmp	r1, #9
 8007b62:	7042      	strb	r2, [r0, #1]
 8007b64:	dd2a      	ble.n	8007bbc <__exponent+0x70>
 8007b66:	f10d 0407 	add.w	r4, sp, #7
 8007b6a:	46a4      	mov	ip, r4
 8007b6c:	270a      	movs	r7, #10
 8007b6e:	46a6      	mov	lr, r4
 8007b70:	460a      	mov	r2, r1
 8007b72:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b76:	fb07 1516 	mls	r5, r7, r6, r1
 8007b7a:	3530      	adds	r5, #48	; 0x30
 8007b7c:	2a63      	cmp	r2, #99	; 0x63
 8007b7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b86:	4631      	mov	r1, r6
 8007b88:	dcf1      	bgt.n	8007b6e <__exponent+0x22>
 8007b8a:	3130      	adds	r1, #48	; 0x30
 8007b8c:	f1ae 0502 	sub.w	r5, lr, #2
 8007b90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b94:	1c44      	adds	r4, r0, #1
 8007b96:	4629      	mov	r1, r5
 8007b98:	4561      	cmp	r1, ip
 8007b9a:	d30a      	bcc.n	8007bb2 <__exponent+0x66>
 8007b9c:	f10d 0209 	add.w	r2, sp, #9
 8007ba0:	eba2 020e 	sub.w	r2, r2, lr
 8007ba4:	4565      	cmp	r5, ip
 8007ba6:	bf88      	it	hi
 8007ba8:	2200      	movhi	r2, #0
 8007baa:	4413      	add	r3, r2
 8007bac:	1a18      	subs	r0, r3, r0
 8007bae:	b003      	add	sp, #12
 8007bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007bba:	e7ed      	b.n	8007b98 <__exponent+0x4c>
 8007bbc:	2330      	movs	r3, #48	; 0x30
 8007bbe:	3130      	adds	r1, #48	; 0x30
 8007bc0:	7083      	strb	r3, [r0, #2]
 8007bc2:	70c1      	strb	r1, [r0, #3]
 8007bc4:	1d03      	adds	r3, r0, #4
 8007bc6:	e7f1      	b.n	8007bac <__exponent+0x60>

08007bc8 <_printf_float>:
 8007bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	ed2d 8b02 	vpush	{d8}
 8007bd0:	b08d      	sub	sp, #52	; 0x34
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007bd8:	4616      	mov	r6, r2
 8007bda:	461f      	mov	r7, r3
 8007bdc:	4605      	mov	r5, r0
 8007bde:	f001 fa59 	bl	8009094 <_localeconv_r>
 8007be2:	f8d0 a000 	ldr.w	sl, [r0]
 8007be6:	4650      	mov	r0, sl
 8007be8:	f7f8 faf2 	bl	80001d0 <strlen>
 8007bec:	2300      	movs	r3, #0
 8007bee:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	9305      	str	r3, [sp, #20]
 8007bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8007bf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007bfc:	3307      	adds	r3, #7
 8007bfe:	f023 0307 	bic.w	r3, r3, #7
 8007c02:	f103 0208 	add.w	r2, r3, #8
 8007c06:	f8c8 2000 	str.w	r2, [r8]
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c1a:	9307      	str	r3, [sp, #28]
 8007c1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c20:	ee08 0a10 	vmov	s16, r0
 8007c24:	4b9f      	ldr	r3, [pc, #636]	; (8007ea4 <_printf_float+0x2dc>)
 8007c26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2e:	f7f8 ff7d 	bl	8000b2c <__aeabi_dcmpun>
 8007c32:	bb88      	cbnz	r0, 8007c98 <_printf_float+0xd0>
 8007c34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c38:	4b9a      	ldr	r3, [pc, #616]	; (8007ea4 <_printf_float+0x2dc>)
 8007c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3e:	f7f8 ff57 	bl	8000af0 <__aeabi_dcmple>
 8007c42:	bb48      	cbnz	r0, 8007c98 <_printf_float+0xd0>
 8007c44:	2200      	movs	r2, #0
 8007c46:	2300      	movs	r3, #0
 8007c48:	4640      	mov	r0, r8
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	f7f8 ff46 	bl	8000adc <__aeabi_dcmplt>
 8007c50:	b110      	cbz	r0, 8007c58 <_printf_float+0x90>
 8007c52:	232d      	movs	r3, #45	; 0x2d
 8007c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c58:	4b93      	ldr	r3, [pc, #588]	; (8007ea8 <_printf_float+0x2e0>)
 8007c5a:	4894      	ldr	r0, [pc, #592]	; (8007eac <_printf_float+0x2e4>)
 8007c5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c60:	bf94      	ite	ls
 8007c62:	4698      	movls	r8, r3
 8007c64:	4680      	movhi	r8, r0
 8007c66:	2303      	movs	r3, #3
 8007c68:	6123      	str	r3, [r4, #16]
 8007c6a:	9b05      	ldr	r3, [sp, #20]
 8007c6c:	f023 0204 	bic.w	r2, r3, #4
 8007c70:	6022      	str	r2, [r4, #0]
 8007c72:	f04f 0900 	mov.w	r9, #0
 8007c76:	9700      	str	r7, [sp, #0]
 8007c78:	4633      	mov	r3, r6
 8007c7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 f9d8 	bl	8008034 <_printf_common>
 8007c84:	3001      	adds	r0, #1
 8007c86:	f040 8090 	bne.w	8007daa <_printf_float+0x1e2>
 8007c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8e:	b00d      	add	sp, #52	; 0x34
 8007c90:	ecbd 8b02 	vpop	{d8}
 8007c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c98:	4642      	mov	r2, r8
 8007c9a:	464b      	mov	r3, r9
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	f7f8 ff44 	bl	8000b2c <__aeabi_dcmpun>
 8007ca4:	b140      	cbz	r0, 8007cb8 <_printf_float+0xf0>
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	bfbc      	itt	lt
 8007cac:	232d      	movlt	r3, #45	; 0x2d
 8007cae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cb2:	487f      	ldr	r0, [pc, #508]	; (8007eb0 <_printf_float+0x2e8>)
 8007cb4:	4b7f      	ldr	r3, [pc, #508]	; (8007eb4 <_printf_float+0x2ec>)
 8007cb6:	e7d1      	b.n	8007c5c <_printf_float+0x94>
 8007cb8:	6863      	ldr	r3, [r4, #4]
 8007cba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007cbe:	9206      	str	r2, [sp, #24]
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	d13f      	bne.n	8007d44 <_printf_float+0x17c>
 8007cc4:	2306      	movs	r3, #6
 8007cc6:	6063      	str	r3, [r4, #4]
 8007cc8:	9b05      	ldr	r3, [sp, #20]
 8007cca:	6861      	ldr	r1, [r4, #4]
 8007ccc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9303      	str	r3, [sp, #12]
 8007cd4:	ab0a      	add	r3, sp, #40	; 0x28
 8007cd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007cda:	ab09      	add	r3, sp, #36	; 0x24
 8007cdc:	ec49 8b10 	vmov	d0, r8, r9
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	6022      	str	r2, [r4, #0]
 8007ce4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f7ff fecd 	bl	8007a88 <__cvt>
 8007cee:	9b06      	ldr	r3, [sp, #24]
 8007cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cf2:	2b47      	cmp	r3, #71	; 0x47
 8007cf4:	4680      	mov	r8, r0
 8007cf6:	d108      	bne.n	8007d0a <_printf_float+0x142>
 8007cf8:	1cc8      	adds	r0, r1, #3
 8007cfa:	db02      	blt.n	8007d02 <_printf_float+0x13a>
 8007cfc:	6863      	ldr	r3, [r4, #4]
 8007cfe:	4299      	cmp	r1, r3
 8007d00:	dd41      	ble.n	8007d86 <_printf_float+0x1be>
 8007d02:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d06:	fa5f fb8b 	uxtb.w	fp, fp
 8007d0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d0e:	d820      	bhi.n	8007d52 <_printf_float+0x18a>
 8007d10:	3901      	subs	r1, #1
 8007d12:	465a      	mov	r2, fp
 8007d14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d18:	9109      	str	r1, [sp, #36]	; 0x24
 8007d1a:	f7ff ff17 	bl	8007b4c <__exponent>
 8007d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d20:	1813      	adds	r3, r2, r0
 8007d22:	2a01      	cmp	r2, #1
 8007d24:	4681      	mov	r9, r0
 8007d26:	6123      	str	r3, [r4, #16]
 8007d28:	dc02      	bgt.n	8007d30 <_printf_float+0x168>
 8007d2a:	6822      	ldr	r2, [r4, #0]
 8007d2c:	07d2      	lsls	r2, r2, #31
 8007d2e:	d501      	bpl.n	8007d34 <_printf_float+0x16c>
 8007d30:	3301      	adds	r3, #1
 8007d32:	6123      	str	r3, [r4, #16]
 8007d34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d09c      	beq.n	8007c76 <_printf_float+0xae>
 8007d3c:	232d      	movs	r3, #45	; 0x2d
 8007d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d42:	e798      	b.n	8007c76 <_printf_float+0xae>
 8007d44:	9a06      	ldr	r2, [sp, #24]
 8007d46:	2a47      	cmp	r2, #71	; 0x47
 8007d48:	d1be      	bne.n	8007cc8 <_printf_float+0x100>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1bc      	bne.n	8007cc8 <_printf_float+0x100>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e7b9      	b.n	8007cc6 <_printf_float+0xfe>
 8007d52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d56:	d118      	bne.n	8007d8a <_printf_float+0x1c2>
 8007d58:	2900      	cmp	r1, #0
 8007d5a:	6863      	ldr	r3, [r4, #4]
 8007d5c:	dd0b      	ble.n	8007d76 <_printf_float+0x1ae>
 8007d5e:	6121      	str	r1, [r4, #16]
 8007d60:	b913      	cbnz	r3, 8007d68 <_printf_float+0x1a0>
 8007d62:	6822      	ldr	r2, [r4, #0]
 8007d64:	07d0      	lsls	r0, r2, #31
 8007d66:	d502      	bpl.n	8007d6e <_printf_float+0x1a6>
 8007d68:	3301      	adds	r3, #1
 8007d6a:	440b      	add	r3, r1
 8007d6c:	6123      	str	r3, [r4, #16]
 8007d6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d70:	f04f 0900 	mov.w	r9, #0
 8007d74:	e7de      	b.n	8007d34 <_printf_float+0x16c>
 8007d76:	b913      	cbnz	r3, 8007d7e <_printf_float+0x1b6>
 8007d78:	6822      	ldr	r2, [r4, #0]
 8007d7a:	07d2      	lsls	r2, r2, #31
 8007d7c:	d501      	bpl.n	8007d82 <_printf_float+0x1ba>
 8007d7e:	3302      	adds	r3, #2
 8007d80:	e7f4      	b.n	8007d6c <_printf_float+0x1a4>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e7f2      	b.n	8007d6c <_printf_float+0x1a4>
 8007d86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d8c:	4299      	cmp	r1, r3
 8007d8e:	db05      	blt.n	8007d9c <_printf_float+0x1d4>
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	6121      	str	r1, [r4, #16]
 8007d94:	07d8      	lsls	r0, r3, #31
 8007d96:	d5ea      	bpl.n	8007d6e <_printf_float+0x1a6>
 8007d98:	1c4b      	adds	r3, r1, #1
 8007d9a:	e7e7      	b.n	8007d6c <_printf_float+0x1a4>
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	bfd4      	ite	le
 8007da0:	f1c1 0202 	rsble	r2, r1, #2
 8007da4:	2201      	movgt	r2, #1
 8007da6:	4413      	add	r3, r2
 8007da8:	e7e0      	b.n	8007d6c <_printf_float+0x1a4>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	055a      	lsls	r2, r3, #21
 8007dae:	d407      	bmi.n	8007dc0 <_printf_float+0x1f8>
 8007db0:	6923      	ldr	r3, [r4, #16]
 8007db2:	4642      	mov	r2, r8
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b8      	blx	r7
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d12c      	bne.n	8007e18 <_printf_float+0x250>
 8007dbe:	e764      	b.n	8007c8a <_printf_float+0xc2>
 8007dc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dc4:	f240 80e0 	bls.w	8007f88 <_printf_float+0x3c0>
 8007dc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f7f8 fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d034      	beq.n	8007e42 <_printf_float+0x27a>
 8007dd8:	4a37      	ldr	r2, [pc, #220]	; (8007eb8 <_printf_float+0x2f0>)
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b8      	blx	r7
 8007de2:	3001      	adds	r0, #1
 8007de4:	f43f af51 	beq.w	8007c8a <_printf_float+0xc2>
 8007de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dec:	429a      	cmp	r2, r3
 8007dee:	db02      	blt.n	8007df6 <_printf_float+0x22e>
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	07d8      	lsls	r0, r3, #31
 8007df4:	d510      	bpl.n	8007e18 <_printf_float+0x250>
 8007df6:	ee18 3a10 	vmov	r3, s16
 8007dfa:	4652      	mov	r2, sl
 8007dfc:	4631      	mov	r1, r6
 8007dfe:	4628      	mov	r0, r5
 8007e00:	47b8      	blx	r7
 8007e02:	3001      	adds	r0, #1
 8007e04:	f43f af41 	beq.w	8007c8a <_printf_float+0xc2>
 8007e08:	f04f 0800 	mov.w	r8, #0
 8007e0c:	f104 091a 	add.w	r9, r4, #26
 8007e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e12:	3b01      	subs	r3, #1
 8007e14:	4543      	cmp	r3, r8
 8007e16:	dc09      	bgt.n	8007e2c <_printf_float+0x264>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	079b      	lsls	r3, r3, #30
 8007e1c:	f100 8105 	bmi.w	800802a <_printf_float+0x462>
 8007e20:	68e0      	ldr	r0, [r4, #12]
 8007e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e24:	4298      	cmp	r0, r3
 8007e26:	bfb8      	it	lt
 8007e28:	4618      	movlt	r0, r3
 8007e2a:	e730      	b.n	8007c8e <_printf_float+0xc6>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	464a      	mov	r2, r9
 8007e30:	4631      	mov	r1, r6
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b8      	blx	r7
 8007e36:	3001      	adds	r0, #1
 8007e38:	f43f af27 	beq.w	8007c8a <_printf_float+0xc2>
 8007e3c:	f108 0801 	add.w	r8, r8, #1
 8007e40:	e7e6      	b.n	8007e10 <_printf_float+0x248>
 8007e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	dc39      	bgt.n	8007ebc <_printf_float+0x2f4>
 8007e48:	4a1b      	ldr	r2, [pc, #108]	; (8007eb8 <_printf_float+0x2f0>)
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	4628      	mov	r0, r5
 8007e50:	47b8      	blx	r7
 8007e52:	3001      	adds	r0, #1
 8007e54:	f43f af19 	beq.w	8007c8a <_printf_float+0xc2>
 8007e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	d102      	bne.n	8007e66 <_printf_float+0x29e>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	07d9      	lsls	r1, r3, #31
 8007e64:	d5d8      	bpl.n	8007e18 <_printf_float+0x250>
 8007e66:	ee18 3a10 	vmov	r3, s16
 8007e6a:	4652      	mov	r2, sl
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	f43f af09 	beq.w	8007c8a <_printf_float+0xc2>
 8007e78:	f04f 0900 	mov.w	r9, #0
 8007e7c:	f104 0a1a 	add.w	sl, r4, #26
 8007e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e82:	425b      	negs	r3, r3
 8007e84:	454b      	cmp	r3, r9
 8007e86:	dc01      	bgt.n	8007e8c <_printf_float+0x2c4>
 8007e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e8a:	e792      	b.n	8007db2 <_printf_float+0x1ea>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	4652      	mov	r2, sl
 8007e90:	4631      	mov	r1, r6
 8007e92:	4628      	mov	r0, r5
 8007e94:	47b8      	blx	r7
 8007e96:	3001      	adds	r0, #1
 8007e98:	f43f aef7 	beq.w	8007c8a <_printf_float+0xc2>
 8007e9c:	f109 0901 	add.w	r9, r9, #1
 8007ea0:	e7ee      	b.n	8007e80 <_printf_float+0x2b8>
 8007ea2:	bf00      	nop
 8007ea4:	7fefffff 	.word	0x7fefffff
 8007ea8:	0800b5e0 	.word	0x0800b5e0
 8007eac:	0800b5e4 	.word	0x0800b5e4
 8007eb0:	0800b5ec 	.word	0x0800b5ec
 8007eb4:	0800b5e8 	.word	0x0800b5e8
 8007eb8:	0800b5f0 	.word	0x0800b5f0
 8007ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	bfa8      	it	ge
 8007ec4:	461a      	movge	r2, r3
 8007ec6:	2a00      	cmp	r2, #0
 8007ec8:	4691      	mov	r9, r2
 8007eca:	dc37      	bgt.n	8007f3c <_printf_float+0x374>
 8007ecc:	f04f 0b00 	mov.w	fp, #0
 8007ed0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ed4:	f104 021a 	add.w	r2, r4, #26
 8007ed8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	eba3 0309 	sub.w	r3, r3, r9
 8007ee0:	455b      	cmp	r3, fp
 8007ee2:	dc33      	bgt.n	8007f4c <_printf_float+0x384>
 8007ee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	db3b      	blt.n	8007f64 <_printf_float+0x39c>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	07da      	lsls	r2, r3, #31
 8007ef0:	d438      	bmi.n	8007f64 <_printf_float+0x39c>
 8007ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef4:	9a05      	ldr	r2, [sp, #20]
 8007ef6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ef8:	1a9a      	subs	r2, r3, r2
 8007efa:	eba3 0901 	sub.w	r9, r3, r1
 8007efe:	4591      	cmp	r9, r2
 8007f00:	bfa8      	it	ge
 8007f02:	4691      	movge	r9, r2
 8007f04:	f1b9 0f00 	cmp.w	r9, #0
 8007f08:	dc35      	bgt.n	8007f76 <_printf_float+0x3ae>
 8007f0a:	f04f 0800 	mov.w	r8, #0
 8007f0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f12:	f104 0a1a 	add.w	sl, r4, #26
 8007f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	eba3 0309 	sub.w	r3, r3, r9
 8007f20:	4543      	cmp	r3, r8
 8007f22:	f77f af79 	ble.w	8007e18 <_printf_float+0x250>
 8007f26:	2301      	movs	r3, #1
 8007f28:	4652      	mov	r2, sl
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	f43f aeaa 	beq.w	8007c8a <_printf_float+0xc2>
 8007f36:	f108 0801 	add.w	r8, r8, #1
 8007f3a:	e7ec      	b.n	8007f16 <_printf_float+0x34e>
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4642      	mov	r2, r8
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b8      	blx	r7
 8007f46:	3001      	adds	r0, #1
 8007f48:	d1c0      	bne.n	8007ecc <_printf_float+0x304>
 8007f4a:	e69e      	b.n	8007c8a <_printf_float+0xc2>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4628      	mov	r0, r5
 8007f52:	9205      	str	r2, [sp, #20]
 8007f54:	47b8      	blx	r7
 8007f56:	3001      	adds	r0, #1
 8007f58:	f43f ae97 	beq.w	8007c8a <_printf_float+0xc2>
 8007f5c:	9a05      	ldr	r2, [sp, #20]
 8007f5e:	f10b 0b01 	add.w	fp, fp, #1
 8007f62:	e7b9      	b.n	8007ed8 <_printf_float+0x310>
 8007f64:	ee18 3a10 	vmov	r3, s16
 8007f68:	4652      	mov	r2, sl
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	d1be      	bne.n	8007ef2 <_printf_float+0x32a>
 8007f74:	e689      	b.n	8007c8a <_printf_float+0xc2>
 8007f76:	9a05      	ldr	r2, [sp, #20]
 8007f78:	464b      	mov	r3, r9
 8007f7a:	4442      	add	r2, r8
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4628      	mov	r0, r5
 8007f80:	47b8      	blx	r7
 8007f82:	3001      	adds	r0, #1
 8007f84:	d1c1      	bne.n	8007f0a <_printf_float+0x342>
 8007f86:	e680      	b.n	8007c8a <_printf_float+0xc2>
 8007f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f8a:	2a01      	cmp	r2, #1
 8007f8c:	dc01      	bgt.n	8007f92 <_printf_float+0x3ca>
 8007f8e:	07db      	lsls	r3, r3, #31
 8007f90:	d538      	bpl.n	8008004 <_printf_float+0x43c>
 8007f92:	2301      	movs	r3, #1
 8007f94:	4642      	mov	r2, r8
 8007f96:	4631      	mov	r1, r6
 8007f98:	4628      	mov	r0, r5
 8007f9a:	47b8      	blx	r7
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	f43f ae74 	beq.w	8007c8a <_printf_float+0xc2>
 8007fa2:	ee18 3a10 	vmov	r3, s16
 8007fa6:	4652      	mov	r2, sl
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4628      	mov	r0, r5
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	f43f ae6b 	beq.w	8007c8a <_printf_float+0xc2>
 8007fb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f7f8 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fc0:	b9d8      	cbnz	r0, 8007ffa <_printf_float+0x432>
 8007fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc4:	f108 0201 	add.w	r2, r8, #1
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	4631      	mov	r1, r6
 8007fcc:	4628      	mov	r0, r5
 8007fce:	47b8      	blx	r7
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d10e      	bne.n	8007ff2 <_printf_float+0x42a>
 8007fd4:	e659      	b.n	8007c8a <_printf_float+0xc2>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4652      	mov	r2, sl
 8007fda:	4631      	mov	r1, r6
 8007fdc:	4628      	mov	r0, r5
 8007fde:	47b8      	blx	r7
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	f43f ae52 	beq.w	8007c8a <_printf_float+0xc2>
 8007fe6:	f108 0801 	add.w	r8, r8, #1
 8007fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fec:	3b01      	subs	r3, #1
 8007fee:	4543      	cmp	r3, r8
 8007ff0:	dcf1      	bgt.n	8007fd6 <_printf_float+0x40e>
 8007ff2:	464b      	mov	r3, r9
 8007ff4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ff8:	e6dc      	b.n	8007db4 <_printf_float+0x1ec>
 8007ffa:	f04f 0800 	mov.w	r8, #0
 8007ffe:	f104 0a1a 	add.w	sl, r4, #26
 8008002:	e7f2      	b.n	8007fea <_printf_float+0x422>
 8008004:	2301      	movs	r3, #1
 8008006:	4642      	mov	r2, r8
 8008008:	e7df      	b.n	8007fca <_printf_float+0x402>
 800800a:	2301      	movs	r3, #1
 800800c:	464a      	mov	r2, r9
 800800e:	4631      	mov	r1, r6
 8008010:	4628      	mov	r0, r5
 8008012:	47b8      	blx	r7
 8008014:	3001      	adds	r0, #1
 8008016:	f43f ae38 	beq.w	8007c8a <_printf_float+0xc2>
 800801a:	f108 0801 	add.w	r8, r8, #1
 800801e:	68e3      	ldr	r3, [r4, #12]
 8008020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008022:	1a5b      	subs	r3, r3, r1
 8008024:	4543      	cmp	r3, r8
 8008026:	dcf0      	bgt.n	800800a <_printf_float+0x442>
 8008028:	e6fa      	b.n	8007e20 <_printf_float+0x258>
 800802a:	f04f 0800 	mov.w	r8, #0
 800802e:	f104 0919 	add.w	r9, r4, #25
 8008032:	e7f4      	b.n	800801e <_printf_float+0x456>

08008034 <_printf_common>:
 8008034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	4616      	mov	r6, r2
 800803a:	4699      	mov	r9, r3
 800803c:	688a      	ldr	r2, [r1, #8]
 800803e:	690b      	ldr	r3, [r1, #16]
 8008040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008044:	4293      	cmp	r3, r2
 8008046:	bfb8      	it	lt
 8008048:	4613      	movlt	r3, r2
 800804a:	6033      	str	r3, [r6, #0]
 800804c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008050:	4607      	mov	r7, r0
 8008052:	460c      	mov	r4, r1
 8008054:	b10a      	cbz	r2, 800805a <_printf_common+0x26>
 8008056:	3301      	adds	r3, #1
 8008058:	6033      	str	r3, [r6, #0]
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	0699      	lsls	r1, r3, #26
 800805e:	bf42      	ittt	mi
 8008060:	6833      	ldrmi	r3, [r6, #0]
 8008062:	3302      	addmi	r3, #2
 8008064:	6033      	strmi	r3, [r6, #0]
 8008066:	6825      	ldr	r5, [r4, #0]
 8008068:	f015 0506 	ands.w	r5, r5, #6
 800806c:	d106      	bne.n	800807c <_printf_common+0x48>
 800806e:	f104 0a19 	add.w	sl, r4, #25
 8008072:	68e3      	ldr	r3, [r4, #12]
 8008074:	6832      	ldr	r2, [r6, #0]
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	42ab      	cmp	r3, r5
 800807a:	dc26      	bgt.n	80080ca <_printf_common+0x96>
 800807c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008080:	1e13      	subs	r3, r2, #0
 8008082:	6822      	ldr	r2, [r4, #0]
 8008084:	bf18      	it	ne
 8008086:	2301      	movne	r3, #1
 8008088:	0692      	lsls	r2, r2, #26
 800808a:	d42b      	bmi.n	80080e4 <_printf_common+0xb0>
 800808c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008090:	4649      	mov	r1, r9
 8008092:	4638      	mov	r0, r7
 8008094:	47c0      	blx	r8
 8008096:	3001      	adds	r0, #1
 8008098:	d01e      	beq.n	80080d8 <_printf_common+0xa4>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	68e5      	ldr	r5, [r4, #12]
 800809e:	6832      	ldr	r2, [r6, #0]
 80080a0:	f003 0306 	and.w	r3, r3, #6
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	bf08      	it	eq
 80080a8:	1aad      	subeq	r5, r5, r2
 80080aa:	68a3      	ldr	r3, [r4, #8]
 80080ac:	6922      	ldr	r2, [r4, #16]
 80080ae:	bf0c      	ite	eq
 80080b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080b4:	2500      	movne	r5, #0
 80080b6:	4293      	cmp	r3, r2
 80080b8:	bfc4      	itt	gt
 80080ba:	1a9b      	subgt	r3, r3, r2
 80080bc:	18ed      	addgt	r5, r5, r3
 80080be:	2600      	movs	r6, #0
 80080c0:	341a      	adds	r4, #26
 80080c2:	42b5      	cmp	r5, r6
 80080c4:	d11a      	bne.n	80080fc <_printf_common+0xc8>
 80080c6:	2000      	movs	r0, #0
 80080c8:	e008      	b.n	80080dc <_printf_common+0xa8>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4652      	mov	r2, sl
 80080ce:	4649      	mov	r1, r9
 80080d0:	4638      	mov	r0, r7
 80080d2:	47c0      	blx	r8
 80080d4:	3001      	adds	r0, #1
 80080d6:	d103      	bne.n	80080e0 <_printf_common+0xac>
 80080d8:	f04f 30ff 	mov.w	r0, #4294967295
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e0:	3501      	adds	r5, #1
 80080e2:	e7c6      	b.n	8008072 <_printf_common+0x3e>
 80080e4:	18e1      	adds	r1, r4, r3
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	2030      	movs	r0, #48	; 0x30
 80080ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080ee:	4422      	add	r2, r4
 80080f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080f8:	3302      	adds	r3, #2
 80080fa:	e7c7      	b.n	800808c <_printf_common+0x58>
 80080fc:	2301      	movs	r3, #1
 80080fe:	4622      	mov	r2, r4
 8008100:	4649      	mov	r1, r9
 8008102:	4638      	mov	r0, r7
 8008104:	47c0      	blx	r8
 8008106:	3001      	adds	r0, #1
 8008108:	d0e6      	beq.n	80080d8 <_printf_common+0xa4>
 800810a:	3601      	adds	r6, #1
 800810c:	e7d9      	b.n	80080c2 <_printf_common+0x8e>
	...

08008110 <_printf_i>:
 8008110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	7e0f      	ldrb	r7, [r1, #24]
 8008116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008118:	2f78      	cmp	r7, #120	; 0x78
 800811a:	4691      	mov	r9, r2
 800811c:	4680      	mov	r8, r0
 800811e:	460c      	mov	r4, r1
 8008120:	469a      	mov	sl, r3
 8008122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008126:	d807      	bhi.n	8008138 <_printf_i+0x28>
 8008128:	2f62      	cmp	r7, #98	; 0x62
 800812a:	d80a      	bhi.n	8008142 <_printf_i+0x32>
 800812c:	2f00      	cmp	r7, #0
 800812e:	f000 80d8 	beq.w	80082e2 <_printf_i+0x1d2>
 8008132:	2f58      	cmp	r7, #88	; 0x58
 8008134:	f000 80a3 	beq.w	800827e <_printf_i+0x16e>
 8008138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800813c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008140:	e03a      	b.n	80081b8 <_printf_i+0xa8>
 8008142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008146:	2b15      	cmp	r3, #21
 8008148:	d8f6      	bhi.n	8008138 <_printf_i+0x28>
 800814a:	a101      	add	r1, pc, #4	; (adr r1, 8008150 <_printf_i+0x40>)
 800814c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008150:	080081a9 	.word	0x080081a9
 8008154:	080081bd 	.word	0x080081bd
 8008158:	08008139 	.word	0x08008139
 800815c:	08008139 	.word	0x08008139
 8008160:	08008139 	.word	0x08008139
 8008164:	08008139 	.word	0x08008139
 8008168:	080081bd 	.word	0x080081bd
 800816c:	08008139 	.word	0x08008139
 8008170:	08008139 	.word	0x08008139
 8008174:	08008139 	.word	0x08008139
 8008178:	08008139 	.word	0x08008139
 800817c:	080082c9 	.word	0x080082c9
 8008180:	080081ed 	.word	0x080081ed
 8008184:	080082ab 	.word	0x080082ab
 8008188:	08008139 	.word	0x08008139
 800818c:	08008139 	.word	0x08008139
 8008190:	080082eb 	.word	0x080082eb
 8008194:	08008139 	.word	0x08008139
 8008198:	080081ed 	.word	0x080081ed
 800819c:	08008139 	.word	0x08008139
 80081a0:	08008139 	.word	0x08008139
 80081a4:	080082b3 	.word	0x080082b3
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	1d1a      	adds	r2, r3, #4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	602a      	str	r2, [r5, #0]
 80081b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081b8:	2301      	movs	r3, #1
 80081ba:	e0a3      	b.n	8008304 <_printf_i+0x1f4>
 80081bc:	6820      	ldr	r0, [r4, #0]
 80081be:	6829      	ldr	r1, [r5, #0]
 80081c0:	0606      	lsls	r6, r0, #24
 80081c2:	f101 0304 	add.w	r3, r1, #4
 80081c6:	d50a      	bpl.n	80081de <_printf_i+0xce>
 80081c8:	680e      	ldr	r6, [r1, #0]
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	2e00      	cmp	r6, #0
 80081ce:	da03      	bge.n	80081d8 <_printf_i+0xc8>
 80081d0:	232d      	movs	r3, #45	; 0x2d
 80081d2:	4276      	negs	r6, r6
 80081d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081d8:	485e      	ldr	r0, [pc, #376]	; (8008354 <_printf_i+0x244>)
 80081da:	230a      	movs	r3, #10
 80081dc:	e019      	b.n	8008212 <_printf_i+0x102>
 80081de:	680e      	ldr	r6, [r1, #0]
 80081e0:	602b      	str	r3, [r5, #0]
 80081e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081e6:	bf18      	it	ne
 80081e8:	b236      	sxthne	r6, r6
 80081ea:	e7ef      	b.n	80081cc <_printf_i+0xbc>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	6820      	ldr	r0, [r4, #0]
 80081f0:	1d19      	adds	r1, r3, #4
 80081f2:	6029      	str	r1, [r5, #0]
 80081f4:	0601      	lsls	r1, r0, #24
 80081f6:	d501      	bpl.n	80081fc <_printf_i+0xec>
 80081f8:	681e      	ldr	r6, [r3, #0]
 80081fa:	e002      	b.n	8008202 <_printf_i+0xf2>
 80081fc:	0646      	lsls	r6, r0, #25
 80081fe:	d5fb      	bpl.n	80081f8 <_printf_i+0xe8>
 8008200:	881e      	ldrh	r6, [r3, #0]
 8008202:	4854      	ldr	r0, [pc, #336]	; (8008354 <_printf_i+0x244>)
 8008204:	2f6f      	cmp	r7, #111	; 0x6f
 8008206:	bf0c      	ite	eq
 8008208:	2308      	moveq	r3, #8
 800820a:	230a      	movne	r3, #10
 800820c:	2100      	movs	r1, #0
 800820e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008212:	6865      	ldr	r5, [r4, #4]
 8008214:	60a5      	str	r5, [r4, #8]
 8008216:	2d00      	cmp	r5, #0
 8008218:	bfa2      	ittt	ge
 800821a:	6821      	ldrge	r1, [r4, #0]
 800821c:	f021 0104 	bicge.w	r1, r1, #4
 8008220:	6021      	strge	r1, [r4, #0]
 8008222:	b90e      	cbnz	r6, 8008228 <_printf_i+0x118>
 8008224:	2d00      	cmp	r5, #0
 8008226:	d04d      	beq.n	80082c4 <_printf_i+0x1b4>
 8008228:	4615      	mov	r5, r2
 800822a:	fbb6 f1f3 	udiv	r1, r6, r3
 800822e:	fb03 6711 	mls	r7, r3, r1, r6
 8008232:	5dc7      	ldrb	r7, [r0, r7]
 8008234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008238:	4637      	mov	r7, r6
 800823a:	42bb      	cmp	r3, r7
 800823c:	460e      	mov	r6, r1
 800823e:	d9f4      	bls.n	800822a <_printf_i+0x11a>
 8008240:	2b08      	cmp	r3, #8
 8008242:	d10b      	bne.n	800825c <_printf_i+0x14c>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	07de      	lsls	r6, r3, #31
 8008248:	d508      	bpl.n	800825c <_printf_i+0x14c>
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	6861      	ldr	r1, [r4, #4]
 800824e:	4299      	cmp	r1, r3
 8008250:	bfde      	ittt	le
 8008252:	2330      	movle	r3, #48	; 0x30
 8008254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800825c:	1b52      	subs	r2, r2, r5
 800825e:	6122      	str	r2, [r4, #16]
 8008260:	f8cd a000 	str.w	sl, [sp]
 8008264:	464b      	mov	r3, r9
 8008266:	aa03      	add	r2, sp, #12
 8008268:	4621      	mov	r1, r4
 800826a:	4640      	mov	r0, r8
 800826c:	f7ff fee2 	bl	8008034 <_printf_common>
 8008270:	3001      	adds	r0, #1
 8008272:	d14c      	bne.n	800830e <_printf_i+0x1fe>
 8008274:	f04f 30ff 	mov.w	r0, #4294967295
 8008278:	b004      	add	sp, #16
 800827a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827e:	4835      	ldr	r0, [pc, #212]	; (8008354 <_printf_i+0x244>)
 8008280:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008284:	6829      	ldr	r1, [r5, #0]
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	f851 6b04 	ldr.w	r6, [r1], #4
 800828c:	6029      	str	r1, [r5, #0]
 800828e:	061d      	lsls	r5, r3, #24
 8008290:	d514      	bpl.n	80082bc <_printf_i+0x1ac>
 8008292:	07df      	lsls	r7, r3, #31
 8008294:	bf44      	itt	mi
 8008296:	f043 0320 	orrmi.w	r3, r3, #32
 800829a:	6023      	strmi	r3, [r4, #0]
 800829c:	b91e      	cbnz	r6, 80082a6 <_printf_i+0x196>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	f023 0320 	bic.w	r3, r3, #32
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	2310      	movs	r3, #16
 80082a8:	e7b0      	b.n	800820c <_printf_i+0xfc>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	f043 0320 	orr.w	r3, r3, #32
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	2378      	movs	r3, #120	; 0x78
 80082b4:	4828      	ldr	r0, [pc, #160]	; (8008358 <_printf_i+0x248>)
 80082b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082ba:	e7e3      	b.n	8008284 <_printf_i+0x174>
 80082bc:	0659      	lsls	r1, r3, #25
 80082be:	bf48      	it	mi
 80082c0:	b2b6      	uxthmi	r6, r6
 80082c2:	e7e6      	b.n	8008292 <_printf_i+0x182>
 80082c4:	4615      	mov	r5, r2
 80082c6:	e7bb      	b.n	8008240 <_printf_i+0x130>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	6826      	ldr	r6, [r4, #0]
 80082cc:	6961      	ldr	r1, [r4, #20]
 80082ce:	1d18      	adds	r0, r3, #4
 80082d0:	6028      	str	r0, [r5, #0]
 80082d2:	0635      	lsls	r5, r6, #24
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	d501      	bpl.n	80082dc <_printf_i+0x1cc>
 80082d8:	6019      	str	r1, [r3, #0]
 80082da:	e002      	b.n	80082e2 <_printf_i+0x1d2>
 80082dc:	0670      	lsls	r0, r6, #25
 80082de:	d5fb      	bpl.n	80082d8 <_printf_i+0x1c8>
 80082e0:	8019      	strh	r1, [r3, #0]
 80082e2:	2300      	movs	r3, #0
 80082e4:	6123      	str	r3, [r4, #16]
 80082e6:	4615      	mov	r5, r2
 80082e8:	e7ba      	b.n	8008260 <_printf_i+0x150>
 80082ea:	682b      	ldr	r3, [r5, #0]
 80082ec:	1d1a      	adds	r2, r3, #4
 80082ee:	602a      	str	r2, [r5, #0]
 80082f0:	681d      	ldr	r5, [r3, #0]
 80082f2:	6862      	ldr	r2, [r4, #4]
 80082f4:	2100      	movs	r1, #0
 80082f6:	4628      	mov	r0, r5
 80082f8:	f7f7 ff72 	bl	80001e0 <memchr>
 80082fc:	b108      	cbz	r0, 8008302 <_printf_i+0x1f2>
 80082fe:	1b40      	subs	r0, r0, r5
 8008300:	6060      	str	r0, [r4, #4]
 8008302:	6863      	ldr	r3, [r4, #4]
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	2300      	movs	r3, #0
 8008308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800830c:	e7a8      	b.n	8008260 <_printf_i+0x150>
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	462a      	mov	r2, r5
 8008312:	4649      	mov	r1, r9
 8008314:	4640      	mov	r0, r8
 8008316:	47d0      	blx	sl
 8008318:	3001      	adds	r0, #1
 800831a:	d0ab      	beq.n	8008274 <_printf_i+0x164>
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	079b      	lsls	r3, r3, #30
 8008320:	d413      	bmi.n	800834a <_printf_i+0x23a>
 8008322:	68e0      	ldr	r0, [r4, #12]
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	4298      	cmp	r0, r3
 8008328:	bfb8      	it	lt
 800832a:	4618      	movlt	r0, r3
 800832c:	e7a4      	b.n	8008278 <_printf_i+0x168>
 800832e:	2301      	movs	r3, #1
 8008330:	4632      	mov	r2, r6
 8008332:	4649      	mov	r1, r9
 8008334:	4640      	mov	r0, r8
 8008336:	47d0      	blx	sl
 8008338:	3001      	adds	r0, #1
 800833a:	d09b      	beq.n	8008274 <_printf_i+0x164>
 800833c:	3501      	adds	r5, #1
 800833e:	68e3      	ldr	r3, [r4, #12]
 8008340:	9903      	ldr	r1, [sp, #12]
 8008342:	1a5b      	subs	r3, r3, r1
 8008344:	42ab      	cmp	r3, r5
 8008346:	dcf2      	bgt.n	800832e <_printf_i+0x21e>
 8008348:	e7eb      	b.n	8008322 <_printf_i+0x212>
 800834a:	2500      	movs	r5, #0
 800834c:	f104 0619 	add.w	r6, r4, #25
 8008350:	e7f5      	b.n	800833e <_printf_i+0x22e>
 8008352:	bf00      	nop
 8008354:	0800b5f2 	.word	0x0800b5f2
 8008358:	0800b603 	.word	0x0800b603

0800835c <siprintf>:
 800835c:	b40e      	push	{r1, r2, r3}
 800835e:	b500      	push	{lr}
 8008360:	b09c      	sub	sp, #112	; 0x70
 8008362:	ab1d      	add	r3, sp, #116	; 0x74
 8008364:	9002      	str	r0, [sp, #8]
 8008366:	9006      	str	r0, [sp, #24]
 8008368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800836c:	4809      	ldr	r0, [pc, #36]	; (8008394 <siprintf+0x38>)
 800836e:	9107      	str	r1, [sp, #28]
 8008370:	9104      	str	r1, [sp, #16]
 8008372:	4909      	ldr	r1, [pc, #36]	; (8008398 <siprintf+0x3c>)
 8008374:	f853 2b04 	ldr.w	r2, [r3], #4
 8008378:	9105      	str	r1, [sp, #20]
 800837a:	6800      	ldr	r0, [r0, #0]
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	a902      	add	r1, sp, #8
 8008380:	f001 fb78 	bl	8009a74 <_svfiprintf_r>
 8008384:	9b02      	ldr	r3, [sp, #8]
 8008386:	2200      	movs	r2, #0
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	b01c      	add	sp, #112	; 0x70
 800838c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008390:	b003      	add	sp, #12
 8008392:	4770      	bx	lr
 8008394:	2000000c 	.word	0x2000000c
 8008398:	ffff0208 	.word	0xffff0208

0800839c <quorem>:
 800839c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	6903      	ldr	r3, [r0, #16]
 80083a2:	690c      	ldr	r4, [r1, #16]
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	4607      	mov	r7, r0
 80083a8:	f2c0 8081 	blt.w	80084ae <quorem+0x112>
 80083ac:	3c01      	subs	r4, #1
 80083ae:	f101 0814 	add.w	r8, r1, #20
 80083b2:	f100 0514 	add.w	r5, r0, #20
 80083b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083c4:	3301      	adds	r3, #1
 80083c6:	429a      	cmp	r2, r3
 80083c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80083cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80083d4:	d331      	bcc.n	800843a <quorem+0x9e>
 80083d6:	f04f 0e00 	mov.w	lr, #0
 80083da:	4640      	mov	r0, r8
 80083dc:	46ac      	mov	ip, r5
 80083de:	46f2      	mov	sl, lr
 80083e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80083e4:	b293      	uxth	r3, r2
 80083e6:	fb06 e303 	mla	r3, r6, r3, lr
 80083ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	ebaa 0303 	sub.w	r3, sl, r3
 80083f4:	f8dc a000 	ldr.w	sl, [ip]
 80083f8:	0c12      	lsrs	r2, r2, #16
 80083fa:	fa13 f38a 	uxtah	r3, r3, sl
 80083fe:	fb06 e202 	mla	r2, r6, r2, lr
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800840a:	b292      	uxth	r2, r2
 800840c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008414:	f8bd 3000 	ldrh.w	r3, [sp]
 8008418:	4581      	cmp	r9, r0
 800841a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800841e:	f84c 3b04 	str.w	r3, [ip], #4
 8008422:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008426:	d2db      	bcs.n	80083e0 <quorem+0x44>
 8008428:	f855 300b 	ldr.w	r3, [r5, fp]
 800842c:	b92b      	cbnz	r3, 800843a <quorem+0x9e>
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	3b04      	subs	r3, #4
 8008432:	429d      	cmp	r5, r3
 8008434:	461a      	mov	r2, r3
 8008436:	d32e      	bcc.n	8008496 <quorem+0xfa>
 8008438:	613c      	str	r4, [r7, #16]
 800843a:	4638      	mov	r0, r7
 800843c:	f001 f8c6 	bl	80095cc <__mcmp>
 8008440:	2800      	cmp	r0, #0
 8008442:	db24      	blt.n	800848e <quorem+0xf2>
 8008444:	3601      	adds	r6, #1
 8008446:	4628      	mov	r0, r5
 8008448:	f04f 0c00 	mov.w	ip, #0
 800844c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008450:	f8d0 e000 	ldr.w	lr, [r0]
 8008454:	b293      	uxth	r3, r2
 8008456:	ebac 0303 	sub.w	r3, ip, r3
 800845a:	0c12      	lsrs	r2, r2, #16
 800845c:	fa13 f38e 	uxtah	r3, r3, lr
 8008460:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008468:	b29b      	uxth	r3, r3
 800846a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800846e:	45c1      	cmp	r9, r8
 8008470:	f840 3b04 	str.w	r3, [r0], #4
 8008474:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008478:	d2e8      	bcs.n	800844c <quorem+0xb0>
 800847a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800847e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008482:	b922      	cbnz	r2, 800848e <quorem+0xf2>
 8008484:	3b04      	subs	r3, #4
 8008486:	429d      	cmp	r5, r3
 8008488:	461a      	mov	r2, r3
 800848a:	d30a      	bcc.n	80084a2 <quorem+0x106>
 800848c:	613c      	str	r4, [r7, #16]
 800848e:	4630      	mov	r0, r6
 8008490:	b003      	add	sp, #12
 8008492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	3b04      	subs	r3, #4
 800849a:	2a00      	cmp	r2, #0
 800849c:	d1cc      	bne.n	8008438 <quorem+0x9c>
 800849e:	3c01      	subs	r4, #1
 80084a0:	e7c7      	b.n	8008432 <quorem+0x96>
 80084a2:	6812      	ldr	r2, [r2, #0]
 80084a4:	3b04      	subs	r3, #4
 80084a6:	2a00      	cmp	r2, #0
 80084a8:	d1f0      	bne.n	800848c <quorem+0xf0>
 80084aa:	3c01      	subs	r4, #1
 80084ac:	e7eb      	b.n	8008486 <quorem+0xea>
 80084ae:	2000      	movs	r0, #0
 80084b0:	e7ee      	b.n	8008490 <quorem+0xf4>
 80084b2:	0000      	movs	r0, r0
 80084b4:	0000      	movs	r0, r0
	...

080084b8 <_dtoa_r>:
 80084b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084bc:	ed2d 8b04 	vpush	{d8-d9}
 80084c0:	ec57 6b10 	vmov	r6, r7, d0
 80084c4:	b093      	sub	sp, #76	; 0x4c
 80084c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80084cc:	9106      	str	r1, [sp, #24]
 80084ce:	ee10 aa10 	vmov	sl, s0
 80084d2:	4604      	mov	r4, r0
 80084d4:	9209      	str	r2, [sp, #36]	; 0x24
 80084d6:	930c      	str	r3, [sp, #48]	; 0x30
 80084d8:	46bb      	mov	fp, r7
 80084da:	b975      	cbnz	r5, 80084fa <_dtoa_r+0x42>
 80084dc:	2010      	movs	r0, #16
 80084de:	f000 fddd 	bl	800909c <malloc>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6260      	str	r0, [r4, #36]	; 0x24
 80084e6:	b920      	cbnz	r0, 80084f2 <_dtoa_r+0x3a>
 80084e8:	4ba7      	ldr	r3, [pc, #668]	; (8008788 <_dtoa_r+0x2d0>)
 80084ea:	21ea      	movs	r1, #234	; 0xea
 80084ec:	48a7      	ldr	r0, [pc, #668]	; (800878c <_dtoa_r+0x2d4>)
 80084ee:	f001 fbd1 	bl	8009c94 <__assert_func>
 80084f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084f6:	6005      	str	r5, [r0, #0]
 80084f8:	60c5      	str	r5, [r0, #12]
 80084fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084fc:	6819      	ldr	r1, [r3, #0]
 80084fe:	b151      	cbz	r1, 8008516 <_dtoa_r+0x5e>
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	604a      	str	r2, [r1, #4]
 8008504:	2301      	movs	r3, #1
 8008506:	4093      	lsls	r3, r2
 8008508:	608b      	str	r3, [r1, #8]
 800850a:	4620      	mov	r0, r4
 800850c:	f000 fe1c 	bl	8009148 <_Bfree>
 8008510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]
 8008516:	1e3b      	subs	r3, r7, #0
 8008518:	bfaa      	itet	ge
 800851a:	2300      	movge	r3, #0
 800851c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008520:	f8c8 3000 	strge.w	r3, [r8]
 8008524:	4b9a      	ldr	r3, [pc, #616]	; (8008790 <_dtoa_r+0x2d8>)
 8008526:	bfbc      	itt	lt
 8008528:	2201      	movlt	r2, #1
 800852a:	f8c8 2000 	strlt.w	r2, [r8]
 800852e:	ea33 030b 	bics.w	r3, r3, fp
 8008532:	d11b      	bne.n	800856c <_dtoa_r+0xb4>
 8008534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008536:	f242 730f 	movw	r3, #9999	; 0x270f
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008540:	4333      	orrs	r3, r6
 8008542:	f000 8592 	beq.w	800906a <_dtoa_r+0xbb2>
 8008546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008548:	b963      	cbnz	r3, 8008564 <_dtoa_r+0xac>
 800854a:	4b92      	ldr	r3, [pc, #584]	; (8008794 <_dtoa_r+0x2dc>)
 800854c:	e022      	b.n	8008594 <_dtoa_r+0xdc>
 800854e:	4b92      	ldr	r3, [pc, #584]	; (8008798 <_dtoa_r+0x2e0>)
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	3308      	adds	r3, #8
 8008554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	9801      	ldr	r0, [sp, #4]
 800855a:	b013      	add	sp, #76	; 0x4c
 800855c:	ecbd 8b04 	vpop	{d8-d9}
 8008560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008564:	4b8b      	ldr	r3, [pc, #556]	; (8008794 <_dtoa_r+0x2dc>)
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	3303      	adds	r3, #3
 800856a:	e7f3      	b.n	8008554 <_dtoa_r+0x9c>
 800856c:	2200      	movs	r2, #0
 800856e:	2300      	movs	r3, #0
 8008570:	4650      	mov	r0, sl
 8008572:	4659      	mov	r1, fp
 8008574:	f7f8 faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008578:	ec4b ab19 	vmov	d9, sl, fp
 800857c:	4680      	mov	r8, r0
 800857e:	b158      	cbz	r0, 8008598 <_dtoa_r+0xe0>
 8008580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008582:	2301      	movs	r3, #1
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 856b 	beq.w	8009064 <_dtoa_r+0xbac>
 800858e:	4883      	ldr	r0, [pc, #524]	; (800879c <_dtoa_r+0x2e4>)
 8008590:	6018      	str	r0, [r3, #0]
 8008592:	1e43      	subs	r3, r0, #1
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	e7df      	b.n	8008558 <_dtoa_r+0xa0>
 8008598:	ec4b ab10 	vmov	d0, sl, fp
 800859c:	aa10      	add	r2, sp, #64	; 0x40
 800859e:	a911      	add	r1, sp, #68	; 0x44
 80085a0:	4620      	mov	r0, r4
 80085a2:	f001 f8b9 	bl	8009718 <__d2b>
 80085a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80085aa:	ee08 0a10 	vmov	s16, r0
 80085ae:	2d00      	cmp	r5, #0
 80085b0:	f000 8084 	beq.w	80086bc <_dtoa_r+0x204>
 80085b4:	ee19 3a90 	vmov	r3, s19
 80085b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80085c0:	4656      	mov	r6, sl
 80085c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80085c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80085ce:	4b74      	ldr	r3, [pc, #464]	; (80087a0 <_dtoa_r+0x2e8>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f7 fe57 	bl	8000288 <__aeabi_dsub>
 80085da:	a365      	add	r3, pc, #404	; (adr r3, 8008770 <_dtoa_r+0x2b8>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f8 f80a 	bl	80005f8 <__aeabi_dmul>
 80085e4:	a364      	add	r3, pc, #400	; (adr r3, 8008778 <_dtoa_r+0x2c0>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f7f7 fe4f 	bl	800028c <__adddf3>
 80085ee:	4606      	mov	r6, r0
 80085f0:	4628      	mov	r0, r5
 80085f2:	460f      	mov	r7, r1
 80085f4:	f7f7 ff96 	bl	8000524 <__aeabi_i2d>
 80085f8:	a361      	add	r3, pc, #388	; (adr r3, 8008780 <_dtoa_r+0x2c8>)
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	f7f7 fffb 	bl	80005f8 <__aeabi_dmul>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	4630      	mov	r0, r6
 8008608:	4639      	mov	r1, r7
 800860a:	f7f7 fe3f 	bl	800028c <__adddf3>
 800860e:	4606      	mov	r6, r0
 8008610:	460f      	mov	r7, r1
 8008612:	f7f8 faa1 	bl	8000b58 <__aeabi_d2iz>
 8008616:	2200      	movs	r2, #0
 8008618:	9000      	str	r0, [sp, #0]
 800861a:	2300      	movs	r3, #0
 800861c:	4630      	mov	r0, r6
 800861e:	4639      	mov	r1, r7
 8008620:	f7f8 fa5c 	bl	8000adc <__aeabi_dcmplt>
 8008624:	b150      	cbz	r0, 800863c <_dtoa_r+0x184>
 8008626:	9800      	ldr	r0, [sp, #0]
 8008628:	f7f7 ff7c 	bl	8000524 <__aeabi_i2d>
 800862c:	4632      	mov	r2, r6
 800862e:	463b      	mov	r3, r7
 8008630:	f7f8 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008634:	b910      	cbnz	r0, 800863c <_dtoa_r+0x184>
 8008636:	9b00      	ldr	r3, [sp, #0]
 8008638:	3b01      	subs	r3, #1
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	9b00      	ldr	r3, [sp, #0]
 800863e:	2b16      	cmp	r3, #22
 8008640:	d85a      	bhi.n	80086f8 <_dtoa_r+0x240>
 8008642:	9a00      	ldr	r2, [sp, #0]
 8008644:	4b57      	ldr	r3, [pc, #348]	; (80087a4 <_dtoa_r+0x2ec>)
 8008646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	ec51 0b19 	vmov	r0, r1, d9
 8008652:	f7f8 fa43 	bl	8000adc <__aeabi_dcmplt>
 8008656:	2800      	cmp	r0, #0
 8008658:	d050      	beq.n	80086fc <_dtoa_r+0x244>
 800865a:	9b00      	ldr	r3, [sp, #0]
 800865c:	3b01      	subs	r3, #1
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	2300      	movs	r3, #0
 8008662:	930b      	str	r3, [sp, #44]	; 0x2c
 8008664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008666:	1b5d      	subs	r5, r3, r5
 8008668:	1e6b      	subs	r3, r5, #1
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	bf45      	ittet	mi
 800866e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008672:	9304      	strmi	r3, [sp, #16]
 8008674:	2300      	movpl	r3, #0
 8008676:	2300      	movmi	r3, #0
 8008678:	bf4c      	ite	mi
 800867a:	9305      	strmi	r3, [sp, #20]
 800867c:	9304      	strpl	r3, [sp, #16]
 800867e:	9b00      	ldr	r3, [sp, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	db3d      	blt.n	8008700 <_dtoa_r+0x248>
 8008684:	9b05      	ldr	r3, [sp, #20]
 8008686:	9a00      	ldr	r2, [sp, #0]
 8008688:	920a      	str	r2, [sp, #40]	; 0x28
 800868a:	4413      	add	r3, r2
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	2300      	movs	r3, #0
 8008690:	9307      	str	r3, [sp, #28]
 8008692:	9b06      	ldr	r3, [sp, #24]
 8008694:	2b09      	cmp	r3, #9
 8008696:	f200 8089 	bhi.w	80087ac <_dtoa_r+0x2f4>
 800869a:	2b05      	cmp	r3, #5
 800869c:	bfc4      	itt	gt
 800869e:	3b04      	subgt	r3, #4
 80086a0:	9306      	strgt	r3, [sp, #24]
 80086a2:	9b06      	ldr	r3, [sp, #24]
 80086a4:	f1a3 0302 	sub.w	r3, r3, #2
 80086a8:	bfcc      	ite	gt
 80086aa:	2500      	movgt	r5, #0
 80086ac:	2501      	movle	r5, #1
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	f200 8087 	bhi.w	80087c2 <_dtoa_r+0x30a>
 80086b4:	e8df f003 	tbb	[pc, r3]
 80086b8:	59383a2d 	.word	0x59383a2d
 80086bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80086c0:	441d      	add	r5, r3
 80086c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80086c6:	2b20      	cmp	r3, #32
 80086c8:	bfc1      	itttt	gt
 80086ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80086ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80086d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80086d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80086da:	bfda      	itte	le
 80086dc:	f1c3 0320 	rsble	r3, r3, #32
 80086e0:	fa06 f003 	lslle.w	r0, r6, r3
 80086e4:	4318      	orrgt	r0, r3
 80086e6:	f7f7 ff0d 	bl	8000504 <__aeabi_ui2d>
 80086ea:	2301      	movs	r3, #1
 80086ec:	4606      	mov	r6, r0
 80086ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80086f2:	3d01      	subs	r5, #1
 80086f4:	930e      	str	r3, [sp, #56]	; 0x38
 80086f6:	e76a      	b.n	80085ce <_dtoa_r+0x116>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e7b2      	b.n	8008662 <_dtoa_r+0x1aa>
 80086fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80086fe:	e7b1      	b.n	8008664 <_dtoa_r+0x1ac>
 8008700:	9b04      	ldr	r3, [sp, #16]
 8008702:	9a00      	ldr	r2, [sp, #0]
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	4253      	negs	r3, r2
 800870a:	9307      	str	r3, [sp, #28]
 800870c:	2300      	movs	r3, #0
 800870e:	930a      	str	r3, [sp, #40]	; 0x28
 8008710:	e7bf      	b.n	8008692 <_dtoa_r+0x1da>
 8008712:	2300      	movs	r3, #0
 8008714:	9308      	str	r3, [sp, #32]
 8008716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	dc55      	bgt.n	80087c8 <_dtoa_r+0x310>
 800871c:	2301      	movs	r3, #1
 800871e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008722:	461a      	mov	r2, r3
 8008724:	9209      	str	r2, [sp, #36]	; 0x24
 8008726:	e00c      	b.n	8008742 <_dtoa_r+0x28a>
 8008728:	2301      	movs	r3, #1
 800872a:	e7f3      	b.n	8008714 <_dtoa_r+0x25c>
 800872c:	2300      	movs	r3, #0
 800872e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008730:	9308      	str	r3, [sp, #32]
 8008732:	9b00      	ldr	r3, [sp, #0]
 8008734:	4413      	add	r3, r2
 8008736:	9302      	str	r3, [sp, #8]
 8008738:	3301      	adds	r3, #1
 800873a:	2b01      	cmp	r3, #1
 800873c:	9303      	str	r3, [sp, #12]
 800873e:	bfb8      	it	lt
 8008740:	2301      	movlt	r3, #1
 8008742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008744:	2200      	movs	r2, #0
 8008746:	6042      	str	r2, [r0, #4]
 8008748:	2204      	movs	r2, #4
 800874a:	f102 0614 	add.w	r6, r2, #20
 800874e:	429e      	cmp	r6, r3
 8008750:	6841      	ldr	r1, [r0, #4]
 8008752:	d93d      	bls.n	80087d0 <_dtoa_r+0x318>
 8008754:	4620      	mov	r0, r4
 8008756:	f000 fcb7 	bl	80090c8 <_Balloc>
 800875a:	9001      	str	r0, [sp, #4]
 800875c:	2800      	cmp	r0, #0
 800875e:	d13b      	bne.n	80087d8 <_dtoa_r+0x320>
 8008760:	4b11      	ldr	r3, [pc, #68]	; (80087a8 <_dtoa_r+0x2f0>)
 8008762:	4602      	mov	r2, r0
 8008764:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008768:	e6c0      	b.n	80084ec <_dtoa_r+0x34>
 800876a:	2301      	movs	r3, #1
 800876c:	e7df      	b.n	800872e <_dtoa_r+0x276>
 800876e:	bf00      	nop
 8008770:	636f4361 	.word	0x636f4361
 8008774:	3fd287a7 	.word	0x3fd287a7
 8008778:	8b60c8b3 	.word	0x8b60c8b3
 800877c:	3fc68a28 	.word	0x3fc68a28
 8008780:	509f79fb 	.word	0x509f79fb
 8008784:	3fd34413 	.word	0x3fd34413
 8008788:	0800b621 	.word	0x0800b621
 800878c:	0800b638 	.word	0x0800b638
 8008790:	7ff00000 	.word	0x7ff00000
 8008794:	0800b61d 	.word	0x0800b61d
 8008798:	0800b614 	.word	0x0800b614
 800879c:	0800b5f1 	.word	0x0800b5f1
 80087a0:	3ff80000 	.word	0x3ff80000
 80087a4:	0800b728 	.word	0x0800b728
 80087a8:	0800b693 	.word	0x0800b693
 80087ac:	2501      	movs	r5, #1
 80087ae:	2300      	movs	r3, #0
 80087b0:	9306      	str	r3, [sp, #24]
 80087b2:	9508      	str	r5, [sp, #32]
 80087b4:	f04f 33ff 	mov.w	r3, #4294967295
 80087b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087bc:	2200      	movs	r2, #0
 80087be:	2312      	movs	r3, #18
 80087c0:	e7b0      	b.n	8008724 <_dtoa_r+0x26c>
 80087c2:	2301      	movs	r3, #1
 80087c4:	9308      	str	r3, [sp, #32]
 80087c6:	e7f5      	b.n	80087b4 <_dtoa_r+0x2fc>
 80087c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087ce:	e7b8      	b.n	8008742 <_dtoa_r+0x28a>
 80087d0:	3101      	adds	r1, #1
 80087d2:	6041      	str	r1, [r0, #4]
 80087d4:	0052      	lsls	r2, r2, #1
 80087d6:	e7b8      	b.n	800874a <_dtoa_r+0x292>
 80087d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087da:	9a01      	ldr	r2, [sp, #4]
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	2b0e      	cmp	r3, #14
 80087e2:	f200 809d 	bhi.w	8008920 <_dtoa_r+0x468>
 80087e6:	2d00      	cmp	r5, #0
 80087e8:	f000 809a 	beq.w	8008920 <_dtoa_r+0x468>
 80087ec:	9b00      	ldr	r3, [sp, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dd32      	ble.n	8008858 <_dtoa_r+0x3a0>
 80087f2:	4ab7      	ldr	r2, [pc, #732]	; (8008ad0 <_dtoa_r+0x618>)
 80087f4:	f003 030f 	and.w	r3, r3, #15
 80087f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008800:	9b00      	ldr	r3, [sp, #0]
 8008802:	05d8      	lsls	r0, r3, #23
 8008804:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008808:	d516      	bpl.n	8008838 <_dtoa_r+0x380>
 800880a:	4bb2      	ldr	r3, [pc, #712]	; (8008ad4 <_dtoa_r+0x61c>)
 800880c:	ec51 0b19 	vmov	r0, r1, d9
 8008810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008814:	f7f8 f81a 	bl	800084c <__aeabi_ddiv>
 8008818:	f007 070f 	and.w	r7, r7, #15
 800881c:	4682      	mov	sl, r0
 800881e:	468b      	mov	fp, r1
 8008820:	2503      	movs	r5, #3
 8008822:	4eac      	ldr	r6, [pc, #688]	; (8008ad4 <_dtoa_r+0x61c>)
 8008824:	b957      	cbnz	r7, 800883c <_dtoa_r+0x384>
 8008826:	4642      	mov	r2, r8
 8008828:	464b      	mov	r3, r9
 800882a:	4650      	mov	r0, sl
 800882c:	4659      	mov	r1, fp
 800882e:	f7f8 f80d 	bl	800084c <__aeabi_ddiv>
 8008832:	4682      	mov	sl, r0
 8008834:	468b      	mov	fp, r1
 8008836:	e028      	b.n	800888a <_dtoa_r+0x3d2>
 8008838:	2502      	movs	r5, #2
 800883a:	e7f2      	b.n	8008822 <_dtoa_r+0x36a>
 800883c:	07f9      	lsls	r1, r7, #31
 800883e:	d508      	bpl.n	8008852 <_dtoa_r+0x39a>
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008848:	f7f7 fed6 	bl	80005f8 <__aeabi_dmul>
 800884c:	3501      	adds	r5, #1
 800884e:	4680      	mov	r8, r0
 8008850:	4689      	mov	r9, r1
 8008852:	107f      	asrs	r7, r7, #1
 8008854:	3608      	adds	r6, #8
 8008856:	e7e5      	b.n	8008824 <_dtoa_r+0x36c>
 8008858:	f000 809b 	beq.w	8008992 <_dtoa_r+0x4da>
 800885c:	9b00      	ldr	r3, [sp, #0]
 800885e:	4f9d      	ldr	r7, [pc, #628]	; (8008ad4 <_dtoa_r+0x61c>)
 8008860:	425e      	negs	r6, r3
 8008862:	4b9b      	ldr	r3, [pc, #620]	; (8008ad0 <_dtoa_r+0x618>)
 8008864:	f006 020f 	and.w	r2, r6, #15
 8008868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008870:	ec51 0b19 	vmov	r0, r1, d9
 8008874:	f7f7 fec0 	bl	80005f8 <__aeabi_dmul>
 8008878:	1136      	asrs	r6, r6, #4
 800887a:	4682      	mov	sl, r0
 800887c:	468b      	mov	fp, r1
 800887e:	2300      	movs	r3, #0
 8008880:	2502      	movs	r5, #2
 8008882:	2e00      	cmp	r6, #0
 8008884:	d17a      	bne.n	800897c <_dtoa_r+0x4c4>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1d3      	bne.n	8008832 <_dtoa_r+0x37a>
 800888a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 8082 	beq.w	8008996 <_dtoa_r+0x4de>
 8008892:	4b91      	ldr	r3, [pc, #580]	; (8008ad8 <_dtoa_r+0x620>)
 8008894:	2200      	movs	r2, #0
 8008896:	4650      	mov	r0, sl
 8008898:	4659      	mov	r1, fp
 800889a:	f7f8 f91f 	bl	8000adc <__aeabi_dcmplt>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d079      	beq.n	8008996 <_dtoa_r+0x4de>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d076      	beq.n	8008996 <_dtoa_r+0x4de>
 80088a8:	9b02      	ldr	r3, [sp, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dd36      	ble.n	800891c <_dtoa_r+0x464>
 80088ae:	9b00      	ldr	r3, [sp, #0]
 80088b0:	4650      	mov	r0, sl
 80088b2:	4659      	mov	r1, fp
 80088b4:	1e5f      	subs	r7, r3, #1
 80088b6:	2200      	movs	r2, #0
 80088b8:	4b88      	ldr	r3, [pc, #544]	; (8008adc <_dtoa_r+0x624>)
 80088ba:	f7f7 fe9d 	bl	80005f8 <__aeabi_dmul>
 80088be:	9e02      	ldr	r6, [sp, #8]
 80088c0:	4682      	mov	sl, r0
 80088c2:	468b      	mov	fp, r1
 80088c4:	3501      	adds	r5, #1
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7f7 fe2c 	bl	8000524 <__aeabi_i2d>
 80088cc:	4652      	mov	r2, sl
 80088ce:	465b      	mov	r3, fp
 80088d0:	f7f7 fe92 	bl	80005f8 <__aeabi_dmul>
 80088d4:	4b82      	ldr	r3, [pc, #520]	; (8008ae0 <_dtoa_r+0x628>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	f7f7 fcd8 	bl	800028c <__adddf3>
 80088dc:	46d0      	mov	r8, sl
 80088de:	46d9      	mov	r9, fp
 80088e0:	4682      	mov	sl, r0
 80088e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	d158      	bne.n	800899c <_dtoa_r+0x4e4>
 80088ea:	4b7e      	ldr	r3, [pc, #504]	; (8008ae4 <_dtoa_r+0x62c>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	4640      	mov	r0, r8
 80088f0:	4649      	mov	r1, r9
 80088f2:	f7f7 fcc9 	bl	8000288 <__aeabi_dsub>
 80088f6:	4652      	mov	r2, sl
 80088f8:	465b      	mov	r3, fp
 80088fa:	4680      	mov	r8, r0
 80088fc:	4689      	mov	r9, r1
 80088fe:	f7f8 f90b 	bl	8000b18 <__aeabi_dcmpgt>
 8008902:	2800      	cmp	r0, #0
 8008904:	f040 8295 	bne.w	8008e32 <_dtoa_r+0x97a>
 8008908:	4652      	mov	r2, sl
 800890a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800890e:	4640      	mov	r0, r8
 8008910:	4649      	mov	r1, r9
 8008912:	f7f8 f8e3 	bl	8000adc <__aeabi_dcmplt>
 8008916:	2800      	cmp	r0, #0
 8008918:	f040 8289 	bne.w	8008e2e <_dtoa_r+0x976>
 800891c:	ec5b ab19 	vmov	sl, fp, d9
 8008920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008922:	2b00      	cmp	r3, #0
 8008924:	f2c0 8148 	blt.w	8008bb8 <_dtoa_r+0x700>
 8008928:	9a00      	ldr	r2, [sp, #0]
 800892a:	2a0e      	cmp	r2, #14
 800892c:	f300 8144 	bgt.w	8008bb8 <_dtoa_r+0x700>
 8008930:	4b67      	ldr	r3, [pc, #412]	; (8008ad0 <_dtoa_r+0x618>)
 8008932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008936:	e9d3 8900 	ldrd	r8, r9, [r3]
 800893a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893c:	2b00      	cmp	r3, #0
 800893e:	f280 80d5 	bge.w	8008aec <_dtoa_r+0x634>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f300 80d1 	bgt.w	8008aec <_dtoa_r+0x634>
 800894a:	f040 826f 	bne.w	8008e2c <_dtoa_r+0x974>
 800894e:	4b65      	ldr	r3, [pc, #404]	; (8008ae4 <_dtoa_r+0x62c>)
 8008950:	2200      	movs	r2, #0
 8008952:	4640      	mov	r0, r8
 8008954:	4649      	mov	r1, r9
 8008956:	f7f7 fe4f 	bl	80005f8 <__aeabi_dmul>
 800895a:	4652      	mov	r2, sl
 800895c:	465b      	mov	r3, fp
 800895e:	f7f8 f8d1 	bl	8000b04 <__aeabi_dcmpge>
 8008962:	9e03      	ldr	r6, [sp, #12]
 8008964:	4637      	mov	r7, r6
 8008966:	2800      	cmp	r0, #0
 8008968:	f040 8245 	bne.w	8008df6 <_dtoa_r+0x93e>
 800896c:	9d01      	ldr	r5, [sp, #4]
 800896e:	2331      	movs	r3, #49	; 0x31
 8008970:	f805 3b01 	strb.w	r3, [r5], #1
 8008974:	9b00      	ldr	r3, [sp, #0]
 8008976:	3301      	adds	r3, #1
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	e240      	b.n	8008dfe <_dtoa_r+0x946>
 800897c:	07f2      	lsls	r2, r6, #31
 800897e:	d505      	bpl.n	800898c <_dtoa_r+0x4d4>
 8008980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008984:	f7f7 fe38 	bl	80005f8 <__aeabi_dmul>
 8008988:	3501      	adds	r5, #1
 800898a:	2301      	movs	r3, #1
 800898c:	1076      	asrs	r6, r6, #1
 800898e:	3708      	adds	r7, #8
 8008990:	e777      	b.n	8008882 <_dtoa_r+0x3ca>
 8008992:	2502      	movs	r5, #2
 8008994:	e779      	b.n	800888a <_dtoa_r+0x3d2>
 8008996:	9f00      	ldr	r7, [sp, #0]
 8008998:	9e03      	ldr	r6, [sp, #12]
 800899a:	e794      	b.n	80088c6 <_dtoa_r+0x40e>
 800899c:	9901      	ldr	r1, [sp, #4]
 800899e:	4b4c      	ldr	r3, [pc, #304]	; (8008ad0 <_dtoa_r+0x618>)
 80089a0:	4431      	add	r1, r6
 80089a2:	910d      	str	r1, [sp, #52]	; 0x34
 80089a4:	9908      	ldr	r1, [sp, #32]
 80089a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80089aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089ae:	2900      	cmp	r1, #0
 80089b0:	d043      	beq.n	8008a3a <_dtoa_r+0x582>
 80089b2:	494d      	ldr	r1, [pc, #308]	; (8008ae8 <_dtoa_r+0x630>)
 80089b4:	2000      	movs	r0, #0
 80089b6:	f7f7 ff49 	bl	800084c <__aeabi_ddiv>
 80089ba:	4652      	mov	r2, sl
 80089bc:	465b      	mov	r3, fp
 80089be:	f7f7 fc63 	bl	8000288 <__aeabi_dsub>
 80089c2:	9d01      	ldr	r5, [sp, #4]
 80089c4:	4682      	mov	sl, r0
 80089c6:	468b      	mov	fp, r1
 80089c8:	4649      	mov	r1, r9
 80089ca:	4640      	mov	r0, r8
 80089cc:	f7f8 f8c4 	bl	8000b58 <__aeabi_d2iz>
 80089d0:	4606      	mov	r6, r0
 80089d2:	f7f7 fda7 	bl	8000524 <__aeabi_i2d>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4640      	mov	r0, r8
 80089dc:	4649      	mov	r1, r9
 80089de:	f7f7 fc53 	bl	8000288 <__aeabi_dsub>
 80089e2:	3630      	adds	r6, #48	; 0x30
 80089e4:	f805 6b01 	strb.w	r6, [r5], #1
 80089e8:	4652      	mov	r2, sl
 80089ea:	465b      	mov	r3, fp
 80089ec:	4680      	mov	r8, r0
 80089ee:	4689      	mov	r9, r1
 80089f0:	f7f8 f874 	bl	8000adc <__aeabi_dcmplt>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d163      	bne.n	8008ac0 <_dtoa_r+0x608>
 80089f8:	4642      	mov	r2, r8
 80089fa:	464b      	mov	r3, r9
 80089fc:	4936      	ldr	r1, [pc, #216]	; (8008ad8 <_dtoa_r+0x620>)
 80089fe:	2000      	movs	r0, #0
 8008a00:	f7f7 fc42 	bl	8000288 <__aeabi_dsub>
 8008a04:	4652      	mov	r2, sl
 8008a06:	465b      	mov	r3, fp
 8008a08:	f7f8 f868 	bl	8000adc <__aeabi_dcmplt>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f040 80b5 	bne.w	8008b7c <_dtoa_r+0x6c4>
 8008a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a14:	429d      	cmp	r5, r3
 8008a16:	d081      	beq.n	800891c <_dtoa_r+0x464>
 8008a18:	4b30      	ldr	r3, [pc, #192]	; (8008adc <_dtoa_r+0x624>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	4659      	mov	r1, fp
 8008a20:	f7f7 fdea 	bl	80005f8 <__aeabi_dmul>
 8008a24:	4b2d      	ldr	r3, [pc, #180]	; (8008adc <_dtoa_r+0x624>)
 8008a26:	4682      	mov	sl, r0
 8008a28:	468b      	mov	fp, r1
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f7f7 fde2 	bl	80005f8 <__aeabi_dmul>
 8008a34:	4680      	mov	r8, r0
 8008a36:	4689      	mov	r9, r1
 8008a38:	e7c6      	b.n	80089c8 <_dtoa_r+0x510>
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	4659      	mov	r1, fp
 8008a3e:	f7f7 fddb 	bl	80005f8 <__aeabi_dmul>
 8008a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a44:	9d01      	ldr	r5, [sp, #4]
 8008a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a48:	4682      	mov	sl, r0
 8008a4a:	468b      	mov	fp, r1
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7f8 f882 	bl	8000b58 <__aeabi_d2iz>
 8008a54:	4606      	mov	r6, r0
 8008a56:	f7f7 fd65 	bl	8000524 <__aeabi_i2d>
 8008a5a:	3630      	adds	r6, #48	; 0x30
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f7 fc10 	bl	8000288 <__aeabi_dsub>
 8008a68:	f805 6b01 	strb.w	r6, [r5], #1
 8008a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a6e:	429d      	cmp	r5, r3
 8008a70:	4680      	mov	r8, r0
 8008a72:	4689      	mov	r9, r1
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	d124      	bne.n	8008ac4 <_dtoa_r+0x60c>
 8008a7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <_dtoa_r+0x630>)
 8008a7c:	4650      	mov	r0, sl
 8008a7e:	4659      	mov	r1, fp
 8008a80:	f7f7 fc04 	bl	800028c <__adddf3>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f7f8 f844 	bl	8000b18 <__aeabi_dcmpgt>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d173      	bne.n	8008b7c <_dtoa_r+0x6c4>
 8008a94:	4652      	mov	r2, sl
 8008a96:	465b      	mov	r3, fp
 8008a98:	4913      	ldr	r1, [pc, #76]	; (8008ae8 <_dtoa_r+0x630>)
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f7f7 fbf4 	bl	8000288 <__aeabi_dsub>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	f7f8 f818 	bl	8000adc <__aeabi_dcmplt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f43f af35 	beq.w	800891c <_dtoa_r+0x464>
 8008ab2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ab4:	1e6b      	subs	r3, r5, #1
 8008ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ab8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008abc:	2b30      	cmp	r3, #48	; 0x30
 8008abe:	d0f8      	beq.n	8008ab2 <_dtoa_r+0x5fa>
 8008ac0:	9700      	str	r7, [sp, #0]
 8008ac2:	e049      	b.n	8008b58 <_dtoa_r+0x6a0>
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <_dtoa_r+0x624>)
 8008ac6:	f7f7 fd97 	bl	80005f8 <__aeabi_dmul>
 8008aca:	4680      	mov	r8, r0
 8008acc:	4689      	mov	r9, r1
 8008ace:	e7bd      	b.n	8008a4c <_dtoa_r+0x594>
 8008ad0:	0800b728 	.word	0x0800b728
 8008ad4:	0800b700 	.word	0x0800b700
 8008ad8:	3ff00000 	.word	0x3ff00000
 8008adc:	40240000 	.word	0x40240000
 8008ae0:	401c0000 	.word	0x401c0000
 8008ae4:	40140000 	.word	0x40140000
 8008ae8:	3fe00000 	.word	0x3fe00000
 8008aec:	9d01      	ldr	r5, [sp, #4]
 8008aee:	4656      	mov	r6, sl
 8008af0:	465f      	mov	r7, fp
 8008af2:	4642      	mov	r2, r8
 8008af4:	464b      	mov	r3, r9
 8008af6:	4630      	mov	r0, r6
 8008af8:	4639      	mov	r1, r7
 8008afa:	f7f7 fea7 	bl	800084c <__aeabi_ddiv>
 8008afe:	f7f8 f82b 	bl	8000b58 <__aeabi_d2iz>
 8008b02:	4682      	mov	sl, r0
 8008b04:	f7f7 fd0e 	bl	8000524 <__aeabi_i2d>
 8008b08:	4642      	mov	r2, r8
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	f7f7 fd74 	bl	80005f8 <__aeabi_dmul>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4630      	mov	r0, r6
 8008b16:	4639      	mov	r1, r7
 8008b18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008b1c:	f7f7 fbb4 	bl	8000288 <__aeabi_dsub>
 8008b20:	f805 6b01 	strb.w	r6, [r5], #1
 8008b24:	9e01      	ldr	r6, [sp, #4]
 8008b26:	9f03      	ldr	r7, [sp, #12]
 8008b28:	1bae      	subs	r6, r5, r6
 8008b2a:	42b7      	cmp	r7, r6
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	d135      	bne.n	8008b9e <_dtoa_r+0x6e6>
 8008b32:	f7f7 fbab 	bl	800028c <__adddf3>
 8008b36:	4642      	mov	r2, r8
 8008b38:	464b      	mov	r3, r9
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	f7f7 ffeb 	bl	8000b18 <__aeabi_dcmpgt>
 8008b42:	b9d0      	cbnz	r0, 8008b7a <_dtoa_r+0x6c2>
 8008b44:	4642      	mov	r2, r8
 8008b46:	464b      	mov	r3, r9
 8008b48:	4630      	mov	r0, r6
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	f7f7 ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b50:	b110      	cbz	r0, 8008b58 <_dtoa_r+0x6a0>
 8008b52:	f01a 0f01 	tst.w	sl, #1
 8008b56:	d110      	bne.n	8008b7a <_dtoa_r+0x6c2>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	ee18 1a10 	vmov	r1, s16
 8008b5e:	f000 faf3 	bl	8009148 <_Bfree>
 8008b62:	2300      	movs	r3, #0
 8008b64:	9800      	ldr	r0, [sp, #0]
 8008b66:	702b      	strb	r3, [r5, #0]
 8008b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	6018      	str	r0, [r3, #0]
 8008b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f43f acf1 	beq.w	8008558 <_dtoa_r+0xa0>
 8008b76:	601d      	str	r5, [r3, #0]
 8008b78:	e4ee      	b.n	8008558 <_dtoa_r+0xa0>
 8008b7a:	9f00      	ldr	r7, [sp, #0]
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	461d      	mov	r5, r3
 8008b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b84:	2a39      	cmp	r2, #57	; 0x39
 8008b86:	d106      	bne.n	8008b96 <_dtoa_r+0x6de>
 8008b88:	9a01      	ldr	r2, [sp, #4]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d1f7      	bne.n	8008b7e <_dtoa_r+0x6c6>
 8008b8e:	9901      	ldr	r1, [sp, #4]
 8008b90:	2230      	movs	r2, #48	; 0x30
 8008b92:	3701      	adds	r7, #1
 8008b94:	700a      	strb	r2, [r1, #0]
 8008b96:	781a      	ldrb	r2, [r3, #0]
 8008b98:	3201      	adds	r2, #1
 8008b9a:	701a      	strb	r2, [r3, #0]
 8008b9c:	e790      	b.n	8008ac0 <_dtoa_r+0x608>
 8008b9e:	4ba6      	ldr	r3, [pc, #664]	; (8008e38 <_dtoa_r+0x980>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f7f7 fd29 	bl	80005f8 <__aeabi_dmul>
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4606      	mov	r6, r0
 8008bac:	460f      	mov	r7, r1
 8008bae:	f7f7 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d09d      	beq.n	8008af2 <_dtoa_r+0x63a>
 8008bb6:	e7cf      	b.n	8008b58 <_dtoa_r+0x6a0>
 8008bb8:	9a08      	ldr	r2, [sp, #32]
 8008bba:	2a00      	cmp	r2, #0
 8008bbc:	f000 80d7 	beq.w	8008d6e <_dtoa_r+0x8b6>
 8008bc0:	9a06      	ldr	r2, [sp, #24]
 8008bc2:	2a01      	cmp	r2, #1
 8008bc4:	f300 80ba 	bgt.w	8008d3c <_dtoa_r+0x884>
 8008bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	f000 80b2 	beq.w	8008d34 <_dtoa_r+0x87c>
 8008bd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bd4:	9e07      	ldr	r6, [sp, #28]
 8008bd6:	9d04      	ldr	r5, [sp, #16]
 8008bd8:	9a04      	ldr	r2, [sp, #16]
 8008bda:	441a      	add	r2, r3
 8008bdc:	9204      	str	r2, [sp, #16]
 8008bde:	9a05      	ldr	r2, [sp, #20]
 8008be0:	2101      	movs	r1, #1
 8008be2:	441a      	add	r2, r3
 8008be4:	4620      	mov	r0, r4
 8008be6:	9205      	str	r2, [sp, #20]
 8008be8:	f000 fb66 	bl	80092b8 <__i2b>
 8008bec:	4607      	mov	r7, r0
 8008bee:	2d00      	cmp	r5, #0
 8008bf0:	dd0c      	ble.n	8008c0c <_dtoa_r+0x754>
 8008bf2:	9b05      	ldr	r3, [sp, #20]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd09      	ble.n	8008c0c <_dtoa_r+0x754>
 8008bf8:	42ab      	cmp	r3, r5
 8008bfa:	9a04      	ldr	r2, [sp, #16]
 8008bfc:	bfa8      	it	ge
 8008bfe:	462b      	movge	r3, r5
 8008c00:	1ad2      	subs	r2, r2, r3
 8008c02:	9204      	str	r2, [sp, #16]
 8008c04:	9a05      	ldr	r2, [sp, #20]
 8008c06:	1aed      	subs	r5, r5, r3
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	9305      	str	r3, [sp, #20]
 8008c0c:	9b07      	ldr	r3, [sp, #28]
 8008c0e:	b31b      	cbz	r3, 8008c58 <_dtoa_r+0x7a0>
 8008c10:	9b08      	ldr	r3, [sp, #32]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 80af 	beq.w	8008d76 <_dtoa_r+0x8be>
 8008c18:	2e00      	cmp	r6, #0
 8008c1a:	dd13      	ble.n	8008c44 <_dtoa_r+0x78c>
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	4632      	mov	r2, r6
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 fc09 	bl	8009438 <__pow5mult>
 8008c26:	ee18 2a10 	vmov	r2, s16
 8008c2a:	4601      	mov	r1, r0
 8008c2c:	4607      	mov	r7, r0
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 fb58 	bl	80092e4 <__multiply>
 8008c34:	ee18 1a10 	vmov	r1, s16
 8008c38:	4680      	mov	r8, r0
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fa84 	bl	8009148 <_Bfree>
 8008c40:	ee08 8a10 	vmov	s16, r8
 8008c44:	9b07      	ldr	r3, [sp, #28]
 8008c46:	1b9a      	subs	r2, r3, r6
 8008c48:	d006      	beq.n	8008c58 <_dtoa_r+0x7a0>
 8008c4a:	ee18 1a10 	vmov	r1, s16
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fbf2 	bl	8009438 <__pow5mult>
 8008c54:	ee08 0a10 	vmov	s16, r0
 8008c58:	2101      	movs	r1, #1
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 fb2c 	bl	80092b8 <__i2b>
 8008c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	4606      	mov	r6, r0
 8008c66:	f340 8088 	ble.w	8008d7a <_dtoa_r+0x8c2>
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	4601      	mov	r1, r0
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f000 fbe2 	bl	8009438 <__pow5mult>
 8008c74:	9b06      	ldr	r3, [sp, #24]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	4606      	mov	r6, r0
 8008c7a:	f340 8081 	ble.w	8008d80 <_dtoa_r+0x8c8>
 8008c7e:	f04f 0800 	mov.w	r8, #0
 8008c82:	6933      	ldr	r3, [r6, #16]
 8008c84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c88:	6918      	ldr	r0, [r3, #16]
 8008c8a:	f000 fac5 	bl	8009218 <__hi0bits>
 8008c8e:	f1c0 0020 	rsb	r0, r0, #32
 8008c92:	9b05      	ldr	r3, [sp, #20]
 8008c94:	4418      	add	r0, r3
 8008c96:	f010 001f 	ands.w	r0, r0, #31
 8008c9a:	f000 8092 	beq.w	8008dc2 <_dtoa_r+0x90a>
 8008c9e:	f1c0 0320 	rsb	r3, r0, #32
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	f340 808a 	ble.w	8008dbc <_dtoa_r+0x904>
 8008ca8:	f1c0 001c 	rsb	r0, r0, #28
 8008cac:	9b04      	ldr	r3, [sp, #16]
 8008cae:	4403      	add	r3, r0
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	9b05      	ldr	r3, [sp, #20]
 8008cb4:	4403      	add	r3, r0
 8008cb6:	4405      	add	r5, r0
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	9b04      	ldr	r3, [sp, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dd07      	ble.n	8008cd0 <_dtoa_r+0x818>
 8008cc0:	ee18 1a10 	vmov	r1, s16
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 fc10 	bl	80094ec <__lshift>
 8008ccc:	ee08 0a10 	vmov	s16, r0
 8008cd0:	9b05      	ldr	r3, [sp, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dd05      	ble.n	8008ce2 <_dtoa_r+0x82a>
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	461a      	mov	r2, r3
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 fc06 	bl	80094ec <__lshift>
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d06e      	beq.n	8008dc6 <_dtoa_r+0x90e>
 8008ce8:	ee18 0a10 	vmov	r0, s16
 8008cec:	4631      	mov	r1, r6
 8008cee:	f000 fc6d 	bl	80095cc <__mcmp>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	da67      	bge.n	8008dc6 <_dtoa_r+0x90e>
 8008cf6:	9b00      	ldr	r3, [sp, #0]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	ee18 1a10 	vmov	r1, s16
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	220a      	movs	r2, #10
 8008d02:	2300      	movs	r3, #0
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 fa41 	bl	800918c <__multadd>
 8008d0a:	9b08      	ldr	r3, [sp, #32]
 8008d0c:	ee08 0a10 	vmov	s16, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 81b1 	beq.w	8009078 <_dtoa_r+0xbc0>
 8008d16:	2300      	movs	r3, #0
 8008d18:	4639      	mov	r1, r7
 8008d1a:	220a      	movs	r2, #10
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 fa35 	bl	800918c <__multadd>
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	4607      	mov	r7, r0
 8008d28:	f300 808e 	bgt.w	8008e48 <_dtoa_r+0x990>
 8008d2c:	9b06      	ldr	r3, [sp, #24]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	dc51      	bgt.n	8008dd6 <_dtoa_r+0x91e>
 8008d32:	e089      	b.n	8008e48 <_dtoa_r+0x990>
 8008d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d3a:	e74b      	b.n	8008bd4 <_dtoa_r+0x71c>
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	1e5e      	subs	r6, r3, #1
 8008d40:	9b07      	ldr	r3, [sp, #28]
 8008d42:	42b3      	cmp	r3, r6
 8008d44:	bfbf      	itttt	lt
 8008d46:	9b07      	ldrlt	r3, [sp, #28]
 8008d48:	9607      	strlt	r6, [sp, #28]
 8008d4a:	1af2      	sublt	r2, r6, r3
 8008d4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008d4e:	bfb6      	itet	lt
 8008d50:	189b      	addlt	r3, r3, r2
 8008d52:	1b9e      	subge	r6, r3, r6
 8008d54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	bfb8      	it	lt
 8008d5a:	2600      	movlt	r6, #0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bfb7      	itett	lt
 8008d60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008d64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008d68:	1a9d      	sublt	r5, r3, r2
 8008d6a:	2300      	movlt	r3, #0
 8008d6c:	e734      	b.n	8008bd8 <_dtoa_r+0x720>
 8008d6e:	9e07      	ldr	r6, [sp, #28]
 8008d70:	9d04      	ldr	r5, [sp, #16]
 8008d72:	9f08      	ldr	r7, [sp, #32]
 8008d74:	e73b      	b.n	8008bee <_dtoa_r+0x736>
 8008d76:	9a07      	ldr	r2, [sp, #28]
 8008d78:	e767      	b.n	8008c4a <_dtoa_r+0x792>
 8008d7a:	9b06      	ldr	r3, [sp, #24]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	dc18      	bgt.n	8008db2 <_dtoa_r+0x8fa>
 8008d80:	f1ba 0f00 	cmp.w	sl, #0
 8008d84:	d115      	bne.n	8008db2 <_dtoa_r+0x8fa>
 8008d86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d8a:	b993      	cbnz	r3, 8008db2 <_dtoa_r+0x8fa>
 8008d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d90:	0d1b      	lsrs	r3, r3, #20
 8008d92:	051b      	lsls	r3, r3, #20
 8008d94:	b183      	cbz	r3, 8008db8 <_dtoa_r+0x900>
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	9b05      	ldr	r3, [sp, #20]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	9305      	str	r3, [sp, #20]
 8008da2:	f04f 0801 	mov.w	r8, #1
 8008da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f47f af6a 	bne.w	8008c82 <_dtoa_r+0x7ca>
 8008dae:	2001      	movs	r0, #1
 8008db0:	e76f      	b.n	8008c92 <_dtoa_r+0x7da>
 8008db2:	f04f 0800 	mov.w	r8, #0
 8008db6:	e7f6      	b.n	8008da6 <_dtoa_r+0x8ee>
 8008db8:	4698      	mov	r8, r3
 8008dba:	e7f4      	b.n	8008da6 <_dtoa_r+0x8ee>
 8008dbc:	f43f af7d 	beq.w	8008cba <_dtoa_r+0x802>
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	301c      	adds	r0, #28
 8008dc4:	e772      	b.n	8008cac <_dtoa_r+0x7f4>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dc37      	bgt.n	8008e3c <_dtoa_r+0x984>
 8008dcc:	9b06      	ldr	r3, [sp, #24]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	dd34      	ble.n	8008e3c <_dtoa_r+0x984>
 8008dd2:	9b03      	ldr	r3, [sp, #12]
 8008dd4:	9302      	str	r3, [sp, #8]
 8008dd6:	9b02      	ldr	r3, [sp, #8]
 8008dd8:	b96b      	cbnz	r3, 8008df6 <_dtoa_r+0x93e>
 8008dda:	4631      	mov	r1, r6
 8008ddc:	2205      	movs	r2, #5
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 f9d4 	bl	800918c <__multadd>
 8008de4:	4601      	mov	r1, r0
 8008de6:	4606      	mov	r6, r0
 8008de8:	ee18 0a10 	vmov	r0, s16
 8008dec:	f000 fbee 	bl	80095cc <__mcmp>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	f73f adbb 	bgt.w	800896c <_dtoa_r+0x4b4>
 8008df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df8:	9d01      	ldr	r5, [sp, #4]
 8008dfa:	43db      	mvns	r3, r3
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	f04f 0800 	mov.w	r8, #0
 8008e02:	4631      	mov	r1, r6
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 f99f 	bl	8009148 <_Bfree>
 8008e0a:	2f00      	cmp	r7, #0
 8008e0c:	f43f aea4 	beq.w	8008b58 <_dtoa_r+0x6a0>
 8008e10:	f1b8 0f00 	cmp.w	r8, #0
 8008e14:	d005      	beq.n	8008e22 <_dtoa_r+0x96a>
 8008e16:	45b8      	cmp	r8, r7
 8008e18:	d003      	beq.n	8008e22 <_dtoa_r+0x96a>
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f000 f993 	bl	8009148 <_Bfree>
 8008e22:	4639      	mov	r1, r7
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 f98f 	bl	8009148 <_Bfree>
 8008e2a:	e695      	b.n	8008b58 <_dtoa_r+0x6a0>
 8008e2c:	2600      	movs	r6, #0
 8008e2e:	4637      	mov	r7, r6
 8008e30:	e7e1      	b.n	8008df6 <_dtoa_r+0x93e>
 8008e32:	9700      	str	r7, [sp, #0]
 8008e34:	4637      	mov	r7, r6
 8008e36:	e599      	b.n	800896c <_dtoa_r+0x4b4>
 8008e38:	40240000 	.word	0x40240000
 8008e3c:	9b08      	ldr	r3, [sp, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 80ca 	beq.w	8008fd8 <_dtoa_r+0xb20>
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	9302      	str	r3, [sp, #8]
 8008e48:	2d00      	cmp	r5, #0
 8008e4a:	dd05      	ble.n	8008e58 <_dtoa_r+0x9a0>
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	462a      	mov	r2, r5
 8008e50:	4620      	mov	r0, r4
 8008e52:	f000 fb4b 	bl	80094ec <__lshift>
 8008e56:	4607      	mov	r7, r0
 8008e58:	f1b8 0f00 	cmp.w	r8, #0
 8008e5c:	d05b      	beq.n	8008f16 <_dtoa_r+0xa5e>
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	4620      	mov	r0, r4
 8008e62:	f000 f931 	bl	80090c8 <_Balloc>
 8008e66:	4605      	mov	r5, r0
 8008e68:	b928      	cbnz	r0, 8008e76 <_dtoa_r+0x9be>
 8008e6a:	4b87      	ldr	r3, [pc, #540]	; (8009088 <_dtoa_r+0xbd0>)
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e72:	f7ff bb3b 	b.w	80084ec <_dtoa_r+0x34>
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	3202      	adds	r2, #2
 8008e7a:	0092      	lsls	r2, r2, #2
 8008e7c:	f107 010c 	add.w	r1, r7, #12
 8008e80:	300c      	adds	r0, #12
 8008e82:	f000 f913 	bl	80090ac <memcpy>
 8008e86:	2201      	movs	r2, #1
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 fb2e 	bl	80094ec <__lshift>
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	f103 0901 	add.w	r9, r3, #1
 8008e96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	9305      	str	r3, [sp, #20]
 8008e9e:	f00a 0301 	and.w	r3, sl, #1
 8008ea2:	46b8      	mov	r8, r7
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	4607      	mov	r7, r0
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	ee18 0a10 	vmov	r0, s16
 8008eae:	f7ff fa75 	bl	800839c <quorem>
 8008eb2:	4641      	mov	r1, r8
 8008eb4:	9002      	str	r0, [sp, #8]
 8008eb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008eba:	ee18 0a10 	vmov	r0, s16
 8008ebe:	f000 fb85 	bl	80095cc <__mcmp>
 8008ec2:	463a      	mov	r2, r7
 8008ec4:	9003      	str	r0, [sp, #12]
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f000 fb9b 	bl	8009604 <__mdiff>
 8008ece:	68c2      	ldr	r2, [r0, #12]
 8008ed0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	bb02      	cbnz	r2, 8008f1a <_dtoa_r+0xa62>
 8008ed8:	4601      	mov	r1, r0
 8008eda:	ee18 0a10 	vmov	r0, s16
 8008ede:	f000 fb75 	bl	80095cc <__mcmp>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	9207      	str	r2, [sp, #28]
 8008eea:	f000 f92d 	bl	8009148 <_Bfree>
 8008eee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008ef2:	ea43 0102 	orr.w	r1, r3, r2
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	464d      	mov	r5, r9
 8008efc:	d10f      	bne.n	8008f1e <_dtoa_r+0xa66>
 8008efe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f02:	d02a      	beq.n	8008f5a <_dtoa_r+0xaa2>
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dd02      	ble.n	8008f10 <_dtoa_r+0xa58>
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008f10:	f88b a000 	strb.w	sl, [fp]
 8008f14:	e775      	b.n	8008e02 <_dtoa_r+0x94a>
 8008f16:	4638      	mov	r0, r7
 8008f18:	e7ba      	b.n	8008e90 <_dtoa_r+0x9d8>
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	e7e2      	b.n	8008ee4 <_dtoa_r+0xa2c>
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	db04      	blt.n	8008f2e <_dtoa_r+0xa76>
 8008f24:	9906      	ldr	r1, [sp, #24]
 8008f26:	430b      	orrs	r3, r1
 8008f28:	9904      	ldr	r1, [sp, #16]
 8008f2a:	430b      	orrs	r3, r1
 8008f2c:	d122      	bne.n	8008f74 <_dtoa_r+0xabc>
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	ddee      	ble.n	8008f10 <_dtoa_r+0xa58>
 8008f32:	ee18 1a10 	vmov	r1, s16
 8008f36:	2201      	movs	r2, #1
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 fad7 	bl	80094ec <__lshift>
 8008f3e:	4631      	mov	r1, r6
 8008f40:	ee08 0a10 	vmov	s16, r0
 8008f44:	f000 fb42 	bl	80095cc <__mcmp>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	dc03      	bgt.n	8008f54 <_dtoa_r+0xa9c>
 8008f4c:	d1e0      	bne.n	8008f10 <_dtoa_r+0xa58>
 8008f4e:	f01a 0f01 	tst.w	sl, #1
 8008f52:	d0dd      	beq.n	8008f10 <_dtoa_r+0xa58>
 8008f54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f58:	d1d7      	bne.n	8008f0a <_dtoa_r+0xa52>
 8008f5a:	2339      	movs	r3, #57	; 0x39
 8008f5c:	f88b 3000 	strb.w	r3, [fp]
 8008f60:	462b      	mov	r3, r5
 8008f62:	461d      	mov	r5, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f6a:	2a39      	cmp	r2, #57	; 0x39
 8008f6c:	d071      	beq.n	8009052 <_dtoa_r+0xb9a>
 8008f6e:	3201      	adds	r2, #1
 8008f70:	701a      	strb	r2, [r3, #0]
 8008f72:	e746      	b.n	8008e02 <_dtoa_r+0x94a>
 8008f74:	2a00      	cmp	r2, #0
 8008f76:	dd07      	ble.n	8008f88 <_dtoa_r+0xad0>
 8008f78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f7c:	d0ed      	beq.n	8008f5a <_dtoa_r+0xaa2>
 8008f7e:	f10a 0301 	add.w	r3, sl, #1
 8008f82:	f88b 3000 	strb.w	r3, [fp]
 8008f86:	e73c      	b.n	8008e02 <_dtoa_r+0x94a>
 8008f88:	9b05      	ldr	r3, [sp, #20]
 8008f8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008f8e:	4599      	cmp	r9, r3
 8008f90:	d047      	beq.n	8009022 <_dtoa_r+0xb6a>
 8008f92:	ee18 1a10 	vmov	r1, s16
 8008f96:	2300      	movs	r3, #0
 8008f98:	220a      	movs	r2, #10
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 f8f6 	bl	800918c <__multadd>
 8008fa0:	45b8      	cmp	r8, r7
 8008fa2:	ee08 0a10 	vmov	s16, r0
 8008fa6:	f04f 0300 	mov.w	r3, #0
 8008faa:	f04f 020a 	mov.w	r2, #10
 8008fae:	4641      	mov	r1, r8
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	d106      	bne.n	8008fc2 <_dtoa_r+0xb0a>
 8008fb4:	f000 f8ea 	bl	800918c <__multadd>
 8008fb8:	4680      	mov	r8, r0
 8008fba:	4607      	mov	r7, r0
 8008fbc:	f109 0901 	add.w	r9, r9, #1
 8008fc0:	e772      	b.n	8008ea8 <_dtoa_r+0x9f0>
 8008fc2:	f000 f8e3 	bl	800918c <__multadd>
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	4680      	mov	r8, r0
 8008fca:	2300      	movs	r3, #0
 8008fcc:	220a      	movs	r2, #10
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 f8dc 	bl	800918c <__multadd>
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	e7f1      	b.n	8008fbc <_dtoa_r+0xb04>
 8008fd8:	9b03      	ldr	r3, [sp, #12]
 8008fda:	9302      	str	r3, [sp, #8]
 8008fdc:	9d01      	ldr	r5, [sp, #4]
 8008fde:	ee18 0a10 	vmov	r0, s16
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	f7ff f9da 	bl	800839c <quorem>
 8008fe8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	f805 ab01 	strb.w	sl, [r5], #1
 8008ff2:	1aea      	subs	r2, r5, r3
 8008ff4:	9b02      	ldr	r3, [sp, #8]
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	dd09      	ble.n	800900e <_dtoa_r+0xb56>
 8008ffa:	ee18 1a10 	vmov	r1, s16
 8008ffe:	2300      	movs	r3, #0
 8009000:	220a      	movs	r2, #10
 8009002:	4620      	mov	r0, r4
 8009004:	f000 f8c2 	bl	800918c <__multadd>
 8009008:	ee08 0a10 	vmov	s16, r0
 800900c:	e7e7      	b.n	8008fde <_dtoa_r+0xb26>
 800900e:	9b02      	ldr	r3, [sp, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfc8      	it	gt
 8009014:	461d      	movgt	r5, r3
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	bfd8      	it	le
 800901a:	2501      	movle	r5, #1
 800901c:	441d      	add	r5, r3
 800901e:	f04f 0800 	mov.w	r8, #0
 8009022:	ee18 1a10 	vmov	r1, s16
 8009026:	2201      	movs	r2, #1
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fa5f 	bl	80094ec <__lshift>
 800902e:	4631      	mov	r1, r6
 8009030:	ee08 0a10 	vmov	s16, r0
 8009034:	f000 faca 	bl	80095cc <__mcmp>
 8009038:	2800      	cmp	r0, #0
 800903a:	dc91      	bgt.n	8008f60 <_dtoa_r+0xaa8>
 800903c:	d102      	bne.n	8009044 <_dtoa_r+0xb8c>
 800903e:	f01a 0f01 	tst.w	sl, #1
 8009042:	d18d      	bne.n	8008f60 <_dtoa_r+0xaa8>
 8009044:	462b      	mov	r3, r5
 8009046:	461d      	mov	r5, r3
 8009048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800904c:	2a30      	cmp	r2, #48	; 0x30
 800904e:	d0fa      	beq.n	8009046 <_dtoa_r+0xb8e>
 8009050:	e6d7      	b.n	8008e02 <_dtoa_r+0x94a>
 8009052:	9a01      	ldr	r2, [sp, #4]
 8009054:	429a      	cmp	r2, r3
 8009056:	d184      	bne.n	8008f62 <_dtoa_r+0xaaa>
 8009058:	9b00      	ldr	r3, [sp, #0]
 800905a:	3301      	adds	r3, #1
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	2331      	movs	r3, #49	; 0x31
 8009060:	7013      	strb	r3, [r2, #0]
 8009062:	e6ce      	b.n	8008e02 <_dtoa_r+0x94a>
 8009064:	4b09      	ldr	r3, [pc, #36]	; (800908c <_dtoa_r+0xbd4>)
 8009066:	f7ff ba95 	b.w	8008594 <_dtoa_r+0xdc>
 800906a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800906c:	2b00      	cmp	r3, #0
 800906e:	f47f aa6e 	bne.w	800854e <_dtoa_r+0x96>
 8009072:	4b07      	ldr	r3, [pc, #28]	; (8009090 <_dtoa_r+0xbd8>)
 8009074:	f7ff ba8e 	b.w	8008594 <_dtoa_r+0xdc>
 8009078:	9b02      	ldr	r3, [sp, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	dcae      	bgt.n	8008fdc <_dtoa_r+0xb24>
 800907e:	9b06      	ldr	r3, [sp, #24]
 8009080:	2b02      	cmp	r3, #2
 8009082:	f73f aea8 	bgt.w	8008dd6 <_dtoa_r+0x91e>
 8009086:	e7a9      	b.n	8008fdc <_dtoa_r+0xb24>
 8009088:	0800b693 	.word	0x0800b693
 800908c:	0800b5f0 	.word	0x0800b5f0
 8009090:	0800b614 	.word	0x0800b614

08009094 <_localeconv_r>:
 8009094:	4800      	ldr	r0, [pc, #0]	; (8009098 <_localeconv_r+0x4>)
 8009096:	4770      	bx	lr
 8009098:	20000160 	.word	0x20000160

0800909c <malloc>:
 800909c:	4b02      	ldr	r3, [pc, #8]	; (80090a8 <malloc+0xc>)
 800909e:	4601      	mov	r1, r0
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	f000 bc17 	b.w	80098d4 <_malloc_r>
 80090a6:	bf00      	nop
 80090a8:	2000000c 	.word	0x2000000c

080090ac <memcpy>:
 80090ac:	440a      	add	r2, r1
 80090ae:	4291      	cmp	r1, r2
 80090b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090b4:	d100      	bne.n	80090b8 <memcpy+0xc>
 80090b6:	4770      	bx	lr
 80090b8:	b510      	push	{r4, lr}
 80090ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090c2:	4291      	cmp	r1, r2
 80090c4:	d1f9      	bne.n	80090ba <memcpy+0xe>
 80090c6:	bd10      	pop	{r4, pc}

080090c8 <_Balloc>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090cc:	4604      	mov	r4, r0
 80090ce:	460d      	mov	r5, r1
 80090d0:	b976      	cbnz	r6, 80090f0 <_Balloc+0x28>
 80090d2:	2010      	movs	r0, #16
 80090d4:	f7ff ffe2 	bl	800909c <malloc>
 80090d8:	4602      	mov	r2, r0
 80090da:	6260      	str	r0, [r4, #36]	; 0x24
 80090dc:	b920      	cbnz	r0, 80090e8 <_Balloc+0x20>
 80090de:	4b18      	ldr	r3, [pc, #96]	; (8009140 <_Balloc+0x78>)
 80090e0:	4818      	ldr	r0, [pc, #96]	; (8009144 <_Balloc+0x7c>)
 80090e2:	2166      	movs	r1, #102	; 0x66
 80090e4:	f000 fdd6 	bl	8009c94 <__assert_func>
 80090e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090ec:	6006      	str	r6, [r0, #0]
 80090ee:	60c6      	str	r6, [r0, #12]
 80090f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090f2:	68f3      	ldr	r3, [r6, #12]
 80090f4:	b183      	cbz	r3, 8009118 <_Balloc+0x50>
 80090f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090fe:	b9b8      	cbnz	r0, 8009130 <_Balloc+0x68>
 8009100:	2101      	movs	r1, #1
 8009102:	fa01 f605 	lsl.w	r6, r1, r5
 8009106:	1d72      	adds	r2, r6, #5
 8009108:	0092      	lsls	r2, r2, #2
 800910a:	4620      	mov	r0, r4
 800910c:	f000 fb60 	bl	80097d0 <_calloc_r>
 8009110:	b160      	cbz	r0, 800912c <_Balloc+0x64>
 8009112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009116:	e00e      	b.n	8009136 <_Balloc+0x6e>
 8009118:	2221      	movs	r2, #33	; 0x21
 800911a:	2104      	movs	r1, #4
 800911c:	4620      	mov	r0, r4
 800911e:	f000 fb57 	bl	80097d0 <_calloc_r>
 8009122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009124:	60f0      	str	r0, [r6, #12]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e4      	bne.n	80090f6 <_Balloc+0x2e>
 800912c:	2000      	movs	r0, #0
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	6802      	ldr	r2, [r0, #0]
 8009132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009136:	2300      	movs	r3, #0
 8009138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800913c:	e7f7      	b.n	800912e <_Balloc+0x66>
 800913e:	bf00      	nop
 8009140:	0800b621 	.word	0x0800b621
 8009144:	0800b6a4 	.word	0x0800b6a4

08009148 <_Bfree>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800914c:	4605      	mov	r5, r0
 800914e:	460c      	mov	r4, r1
 8009150:	b976      	cbnz	r6, 8009170 <_Bfree+0x28>
 8009152:	2010      	movs	r0, #16
 8009154:	f7ff ffa2 	bl	800909c <malloc>
 8009158:	4602      	mov	r2, r0
 800915a:	6268      	str	r0, [r5, #36]	; 0x24
 800915c:	b920      	cbnz	r0, 8009168 <_Bfree+0x20>
 800915e:	4b09      	ldr	r3, [pc, #36]	; (8009184 <_Bfree+0x3c>)
 8009160:	4809      	ldr	r0, [pc, #36]	; (8009188 <_Bfree+0x40>)
 8009162:	218a      	movs	r1, #138	; 0x8a
 8009164:	f000 fd96 	bl	8009c94 <__assert_func>
 8009168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800916c:	6006      	str	r6, [r0, #0]
 800916e:	60c6      	str	r6, [r0, #12]
 8009170:	b13c      	cbz	r4, 8009182 <_Bfree+0x3a>
 8009172:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009174:	6862      	ldr	r2, [r4, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800917c:	6021      	str	r1, [r4, #0]
 800917e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009182:	bd70      	pop	{r4, r5, r6, pc}
 8009184:	0800b621 	.word	0x0800b621
 8009188:	0800b6a4 	.word	0x0800b6a4

0800918c <__multadd>:
 800918c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009190:	690d      	ldr	r5, [r1, #16]
 8009192:	4607      	mov	r7, r0
 8009194:	460c      	mov	r4, r1
 8009196:	461e      	mov	r6, r3
 8009198:	f101 0c14 	add.w	ip, r1, #20
 800919c:	2000      	movs	r0, #0
 800919e:	f8dc 3000 	ldr.w	r3, [ip]
 80091a2:	b299      	uxth	r1, r3
 80091a4:	fb02 6101 	mla	r1, r2, r1, r6
 80091a8:	0c1e      	lsrs	r6, r3, #16
 80091aa:	0c0b      	lsrs	r3, r1, #16
 80091ac:	fb02 3306 	mla	r3, r2, r6, r3
 80091b0:	b289      	uxth	r1, r1
 80091b2:	3001      	adds	r0, #1
 80091b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091b8:	4285      	cmp	r5, r0
 80091ba:	f84c 1b04 	str.w	r1, [ip], #4
 80091be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091c2:	dcec      	bgt.n	800919e <__multadd+0x12>
 80091c4:	b30e      	cbz	r6, 800920a <__multadd+0x7e>
 80091c6:	68a3      	ldr	r3, [r4, #8]
 80091c8:	42ab      	cmp	r3, r5
 80091ca:	dc19      	bgt.n	8009200 <__multadd+0x74>
 80091cc:	6861      	ldr	r1, [r4, #4]
 80091ce:	4638      	mov	r0, r7
 80091d0:	3101      	adds	r1, #1
 80091d2:	f7ff ff79 	bl	80090c8 <_Balloc>
 80091d6:	4680      	mov	r8, r0
 80091d8:	b928      	cbnz	r0, 80091e6 <__multadd+0x5a>
 80091da:	4602      	mov	r2, r0
 80091dc:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <__multadd+0x84>)
 80091de:	480d      	ldr	r0, [pc, #52]	; (8009214 <__multadd+0x88>)
 80091e0:	21b5      	movs	r1, #181	; 0xb5
 80091e2:	f000 fd57 	bl	8009c94 <__assert_func>
 80091e6:	6922      	ldr	r2, [r4, #16]
 80091e8:	3202      	adds	r2, #2
 80091ea:	f104 010c 	add.w	r1, r4, #12
 80091ee:	0092      	lsls	r2, r2, #2
 80091f0:	300c      	adds	r0, #12
 80091f2:	f7ff ff5b 	bl	80090ac <memcpy>
 80091f6:	4621      	mov	r1, r4
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7ff ffa5 	bl	8009148 <_Bfree>
 80091fe:	4644      	mov	r4, r8
 8009200:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009204:	3501      	adds	r5, #1
 8009206:	615e      	str	r6, [r3, #20]
 8009208:	6125      	str	r5, [r4, #16]
 800920a:	4620      	mov	r0, r4
 800920c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009210:	0800b693 	.word	0x0800b693
 8009214:	0800b6a4 	.word	0x0800b6a4

08009218 <__hi0bits>:
 8009218:	0c03      	lsrs	r3, r0, #16
 800921a:	041b      	lsls	r3, r3, #16
 800921c:	b9d3      	cbnz	r3, 8009254 <__hi0bits+0x3c>
 800921e:	0400      	lsls	r0, r0, #16
 8009220:	2310      	movs	r3, #16
 8009222:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009226:	bf04      	itt	eq
 8009228:	0200      	lsleq	r0, r0, #8
 800922a:	3308      	addeq	r3, #8
 800922c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009230:	bf04      	itt	eq
 8009232:	0100      	lsleq	r0, r0, #4
 8009234:	3304      	addeq	r3, #4
 8009236:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800923a:	bf04      	itt	eq
 800923c:	0080      	lsleq	r0, r0, #2
 800923e:	3302      	addeq	r3, #2
 8009240:	2800      	cmp	r0, #0
 8009242:	db05      	blt.n	8009250 <__hi0bits+0x38>
 8009244:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009248:	f103 0301 	add.w	r3, r3, #1
 800924c:	bf08      	it	eq
 800924e:	2320      	moveq	r3, #32
 8009250:	4618      	mov	r0, r3
 8009252:	4770      	bx	lr
 8009254:	2300      	movs	r3, #0
 8009256:	e7e4      	b.n	8009222 <__hi0bits+0xa>

08009258 <__lo0bits>:
 8009258:	6803      	ldr	r3, [r0, #0]
 800925a:	f013 0207 	ands.w	r2, r3, #7
 800925e:	4601      	mov	r1, r0
 8009260:	d00b      	beq.n	800927a <__lo0bits+0x22>
 8009262:	07da      	lsls	r2, r3, #31
 8009264:	d423      	bmi.n	80092ae <__lo0bits+0x56>
 8009266:	0798      	lsls	r0, r3, #30
 8009268:	bf49      	itett	mi
 800926a:	085b      	lsrmi	r3, r3, #1
 800926c:	089b      	lsrpl	r3, r3, #2
 800926e:	2001      	movmi	r0, #1
 8009270:	600b      	strmi	r3, [r1, #0]
 8009272:	bf5c      	itt	pl
 8009274:	600b      	strpl	r3, [r1, #0]
 8009276:	2002      	movpl	r0, #2
 8009278:	4770      	bx	lr
 800927a:	b298      	uxth	r0, r3
 800927c:	b9a8      	cbnz	r0, 80092aa <__lo0bits+0x52>
 800927e:	0c1b      	lsrs	r3, r3, #16
 8009280:	2010      	movs	r0, #16
 8009282:	b2da      	uxtb	r2, r3
 8009284:	b90a      	cbnz	r2, 800928a <__lo0bits+0x32>
 8009286:	3008      	adds	r0, #8
 8009288:	0a1b      	lsrs	r3, r3, #8
 800928a:	071a      	lsls	r2, r3, #28
 800928c:	bf04      	itt	eq
 800928e:	091b      	lsreq	r3, r3, #4
 8009290:	3004      	addeq	r0, #4
 8009292:	079a      	lsls	r2, r3, #30
 8009294:	bf04      	itt	eq
 8009296:	089b      	lsreq	r3, r3, #2
 8009298:	3002      	addeq	r0, #2
 800929a:	07da      	lsls	r2, r3, #31
 800929c:	d403      	bmi.n	80092a6 <__lo0bits+0x4e>
 800929e:	085b      	lsrs	r3, r3, #1
 80092a0:	f100 0001 	add.w	r0, r0, #1
 80092a4:	d005      	beq.n	80092b2 <__lo0bits+0x5a>
 80092a6:	600b      	str	r3, [r1, #0]
 80092a8:	4770      	bx	lr
 80092aa:	4610      	mov	r0, r2
 80092ac:	e7e9      	b.n	8009282 <__lo0bits+0x2a>
 80092ae:	2000      	movs	r0, #0
 80092b0:	4770      	bx	lr
 80092b2:	2020      	movs	r0, #32
 80092b4:	4770      	bx	lr
	...

080092b8 <__i2b>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	460c      	mov	r4, r1
 80092bc:	2101      	movs	r1, #1
 80092be:	f7ff ff03 	bl	80090c8 <_Balloc>
 80092c2:	4602      	mov	r2, r0
 80092c4:	b928      	cbnz	r0, 80092d2 <__i2b+0x1a>
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <__i2b+0x24>)
 80092c8:	4805      	ldr	r0, [pc, #20]	; (80092e0 <__i2b+0x28>)
 80092ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092ce:	f000 fce1 	bl	8009c94 <__assert_func>
 80092d2:	2301      	movs	r3, #1
 80092d4:	6144      	str	r4, [r0, #20]
 80092d6:	6103      	str	r3, [r0, #16]
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	bf00      	nop
 80092dc:	0800b693 	.word	0x0800b693
 80092e0:	0800b6a4 	.word	0x0800b6a4

080092e4 <__multiply>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	4691      	mov	r9, r2
 80092ea:	690a      	ldr	r2, [r1, #16]
 80092ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	bfb8      	it	lt
 80092f4:	460b      	movlt	r3, r1
 80092f6:	460c      	mov	r4, r1
 80092f8:	bfbc      	itt	lt
 80092fa:	464c      	movlt	r4, r9
 80092fc:	4699      	movlt	r9, r3
 80092fe:	6927      	ldr	r7, [r4, #16]
 8009300:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009304:	68a3      	ldr	r3, [r4, #8]
 8009306:	6861      	ldr	r1, [r4, #4]
 8009308:	eb07 060a 	add.w	r6, r7, sl
 800930c:	42b3      	cmp	r3, r6
 800930e:	b085      	sub	sp, #20
 8009310:	bfb8      	it	lt
 8009312:	3101      	addlt	r1, #1
 8009314:	f7ff fed8 	bl	80090c8 <_Balloc>
 8009318:	b930      	cbnz	r0, 8009328 <__multiply+0x44>
 800931a:	4602      	mov	r2, r0
 800931c:	4b44      	ldr	r3, [pc, #272]	; (8009430 <__multiply+0x14c>)
 800931e:	4845      	ldr	r0, [pc, #276]	; (8009434 <__multiply+0x150>)
 8009320:	f240 115d 	movw	r1, #349	; 0x15d
 8009324:	f000 fcb6 	bl	8009c94 <__assert_func>
 8009328:	f100 0514 	add.w	r5, r0, #20
 800932c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009330:	462b      	mov	r3, r5
 8009332:	2200      	movs	r2, #0
 8009334:	4543      	cmp	r3, r8
 8009336:	d321      	bcc.n	800937c <__multiply+0x98>
 8009338:	f104 0314 	add.w	r3, r4, #20
 800933c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009340:	f109 0314 	add.w	r3, r9, #20
 8009344:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009348:	9202      	str	r2, [sp, #8]
 800934a:	1b3a      	subs	r2, r7, r4
 800934c:	3a15      	subs	r2, #21
 800934e:	f022 0203 	bic.w	r2, r2, #3
 8009352:	3204      	adds	r2, #4
 8009354:	f104 0115 	add.w	r1, r4, #21
 8009358:	428f      	cmp	r7, r1
 800935a:	bf38      	it	cc
 800935c:	2204      	movcc	r2, #4
 800935e:	9201      	str	r2, [sp, #4]
 8009360:	9a02      	ldr	r2, [sp, #8]
 8009362:	9303      	str	r3, [sp, #12]
 8009364:	429a      	cmp	r2, r3
 8009366:	d80c      	bhi.n	8009382 <__multiply+0x9e>
 8009368:	2e00      	cmp	r6, #0
 800936a:	dd03      	ble.n	8009374 <__multiply+0x90>
 800936c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009370:	2b00      	cmp	r3, #0
 8009372:	d05a      	beq.n	800942a <__multiply+0x146>
 8009374:	6106      	str	r6, [r0, #16]
 8009376:	b005      	add	sp, #20
 8009378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937c:	f843 2b04 	str.w	r2, [r3], #4
 8009380:	e7d8      	b.n	8009334 <__multiply+0x50>
 8009382:	f8b3 a000 	ldrh.w	sl, [r3]
 8009386:	f1ba 0f00 	cmp.w	sl, #0
 800938a:	d024      	beq.n	80093d6 <__multiply+0xf2>
 800938c:	f104 0e14 	add.w	lr, r4, #20
 8009390:	46a9      	mov	r9, r5
 8009392:	f04f 0c00 	mov.w	ip, #0
 8009396:	f85e 2b04 	ldr.w	r2, [lr], #4
 800939a:	f8d9 1000 	ldr.w	r1, [r9]
 800939e:	fa1f fb82 	uxth.w	fp, r2
 80093a2:	b289      	uxth	r1, r1
 80093a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80093a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80093ac:	f8d9 2000 	ldr.w	r2, [r9]
 80093b0:	4461      	add	r1, ip
 80093b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80093ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093be:	b289      	uxth	r1, r1
 80093c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093c4:	4577      	cmp	r7, lr
 80093c6:	f849 1b04 	str.w	r1, [r9], #4
 80093ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093ce:	d8e2      	bhi.n	8009396 <__multiply+0xb2>
 80093d0:	9a01      	ldr	r2, [sp, #4]
 80093d2:	f845 c002 	str.w	ip, [r5, r2]
 80093d6:	9a03      	ldr	r2, [sp, #12]
 80093d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093dc:	3304      	adds	r3, #4
 80093de:	f1b9 0f00 	cmp.w	r9, #0
 80093e2:	d020      	beq.n	8009426 <__multiply+0x142>
 80093e4:	6829      	ldr	r1, [r5, #0]
 80093e6:	f104 0c14 	add.w	ip, r4, #20
 80093ea:	46ae      	mov	lr, r5
 80093ec:	f04f 0a00 	mov.w	sl, #0
 80093f0:	f8bc b000 	ldrh.w	fp, [ip]
 80093f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093f8:	fb09 220b 	mla	r2, r9, fp, r2
 80093fc:	4492      	add	sl, r2
 80093fe:	b289      	uxth	r1, r1
 8009400:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009404:	f84e 1b04 	str.w	r1, [lr], #4
 8009408:	f85c 2b04 	ldr.w	r2, [ip], #4
 800940c:	f8be 1000 	ldrh.w	r1, [lr]
 8009410:	0c12      	lsrs	r2, r2, #16
 8009412:	fb09 1102 	mla	r1, r9, r2, r1
 8009416:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800941a:	4567      	cmp	r7, ip
 800941c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009420:	d8e6      	bhi.n	80093f0 <__multiply+0x10c>
 8009422:	9a01      	ldr	r2, [sp, #4]
 8009424:	50a9      	str	r1, [r5, r2]
 8009426:	3504      	adds	r5, #4
 8009428:	e79a      	b.n	8009360 <__multiply+0x7c>
 800942a:	3e01      	subs	r6, #1
 800942c:	e79c      	b.n	8009368 <__multiply+0x84>
 800942e:	bf00      	nop
 8009430:	0800b693 	.word	0x0800b693
 8009434:	0800b6a4 	.word	0x0800b6a4

08009438 <__pow5mult>:
 8009438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800943c:	4615      	mov	r5, r2
 800943e:	f012 0203 	ands.w	r2, r2, #3
 8009442:	4606      	mov	r6, r0
 8009444:	460f      	mov	r7, r1
 8009446:	d007      	beq.n	8009458 <__pow5mult+0x20>
 8009448:	4c25      	ldr	r4, [pc, #148]	; (80094e0 <__pow5mult+0xa8>)
 800944a:	3a01      	subs	r2, #1
 800944c:	2300      	movs	r3, #0
 800944e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009452:	f7ff fe9b 	bl	800918c <__multadd>
 8009456:	4607      	mov	r7, r0
 8009458:	10ad      	asrs	r5, r5, #2
 800945a:	d03d      	beq.n	80094d8 <__pow5mult+0xa0>
 800945c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800945e:	b97c      	cbnz	r4, 8009480 <__pow5mult+0x48>
 8009460:	2010      	movs	r0, #16
 8009462:	f7ff fe1b 	bl	800909c <malloc>
 8009466:	4602      	mov	r2, r0
 8009468:	6270      	str	r0, [r6, #36]	; 0x24
 800946a:	b928      	cbnz	r0, 8009478 <__pow5mult+0x40>
 800946c:	4b1d      	ldr	r3, [pc, #116]	; (80094e4 <__pow5mult+0xac>)
 800946e:	481e      	ldr	r0, [pc, #120]	; (80094e8 <__pow5mult+0xb0>)
 8009470:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009474:	f000 fc0e 	bl	8009c94 <__assert_func>
 8009478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800947c:	6004      	str	r4, [r0, #0]
 800947e:	60c4      	str	r4, [r0, #12]
 8009480:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009488:	b94c      	cbnz	r4, 800949e <__pow5mult+0x66>
 800948a:	f240 2171 	movw	r1, #625	; 0x271
 800948e:	4630      	mov	r0, r6
 8009490:	f7ff ff12 	bl	80092b8 <__i2b>
 8009494:	2300      	movs	r3, #0
 8009496:	f8c8 0008 	str.w	r0, [r8, #8]
 800949a:	4604      	mov	r4, r0
 800949c:	6003      	str	r3, [r0, #0]
 800949e:	f04f 0900 	mov.w	r9, #0
 80094a2:	07eb      	lsls	r3, r5, #31
 80094a4:	d50a      	bpl.n	80094bc <__pow5mult+0x84>
 80094a6:	4639      	mov	r1, r7
 80094a8:	4622      	mov	r2, r4
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7ff ff1a 	bl	80092e4 <__multiply>
 80094b0:	4639      	mov	r1, r7
 80094b2:	4680      	mov	r8, r0
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7ff fe47 	bl	8009148 <_Bfree>
 80094ba:	4647      	mov	r7, r8
 80094bc:	106d      	asrs	r5, r5, #1
 80094be:	d00b      	beq.n	80094d8 <__pow5mult+0xa0>
 80094c0:	6820      	ldr	r0, [r4, #0]
 80094c2:	b938      	cbnz	r0, 80094d4 <__pow5mult+0x9c>
 80094c4:	4622      	mov	r2, r4
 80094c6:	4621      	mov	r1, r4
 80094c8:	4630      	mov	r0, r6
 80094ca:	f7ff ff0b 	bl	80092e4 <__multiply>
 80094ce:	6020      	str	r0, [r4, #0]
 80094d0:	f8c0 9000 	str.w	r9, [r0]
 80094d4:	4604      	mov	r4, r0
 80094d6:	e7e4      	b.n	80094a2 <__pow5mult+0x6a>
 80094d8:	4638      	mov	r0, r7
 80094da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094de:	bf00      	nop
 80094e0:	0800b7f0 	.word	0x0800b7f0
 80094e4:	0800b621 	.word	0x0800b621
 80094e8:	0800b6a4 	.word	0x0800b6a4

080094ec <__lshift>:
 80094ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f0:	460c      	mov	r4, r1
 80094f2:	6849      	ldr	r1, [r1, #4]
 80094f4:	6923      	ldr	r3, [r4, #16]
 80094f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	4607      	mov	r7, r0
 80094fe:	4691      	mov	r9, r2
 8009500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009504:	f108 0601 	add.w	r6, r8, #1
 8009508:	42b3      	cmp	r3, r6
 800950a:	db0b      	blt.n	8009524 <__lshift+0x38>
 800950c:	4638      	mov	r0, r7
 800950e:	f7ff fddb 	bl	80090c8 <_Balloc>
 8009512:	4605      	mov	r5, r0
 8009514:	b948      	cbnz	r0, 800952a <__lshift+0x3e>
 8009516:	4602      	mov	r2, r0
 8009518:	4b2a      	ldr	r3, [pc, #168]	; (80095c4 <__lshift+0xd8>)
 800951a:	482b      	ldr	r0, [pc, #172]	; (80095c8 <__lshift+0xdc>)
 800951c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009520:	f000 fbb8 	bl	8009c94 <__assert_func>
 8009524:	3101      	adds	r1, #1
 8009526:	005b      	lsls	r3, r3, #1
 8009528:	e7ee      	b.n	8009508 <__lshift+0x1c>
 800952a:	2300      	movs	r3, #0
 800952c:	f100 0114 	add.w	r1, r0, #20
 8009530:	f100 0210 	add.w	r2, r0, #16
 8009534:	4618      	mov	r0, r3
 8009536:	4553      	cmp	r3, sl
 8009538:	db37      	blt.n	80095aa <__lshift+0xbe>
 800953a:	6920      	ldr	r0, [r4, #16]
 800953c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009540:	f104 0314 	add.w	r3, r4, #20
 8009544:	f019 091f 	ands.w	r9, r9, #31
 8009548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800954c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009550:	d02f      	beq.n	80095b2 <__lshift+0xc6>
 8009552:	f1c9 0e20 	rsb	lr, r9, #32
 8009556:	468a      	mov	sl, r1
 8009558:	f04f 0c00 	mov.w	ip, #0
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	fa02 f209 	lsl.w	r2, r2, r9
 8009562:	ea42 020c 	orr.w	r2, r2, ip
 8009566:	f84a 2b04 	str.w	r2, [sl], #4
 800956a:	f853 2b04 	ldr.w	r2, [r3], #4
 800956e:	4298      	cmp	r0, r3
 8009570:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009574:	d8f2      	bhi.n	800955c <__lshift+0x70>
 8009576:	1b03      	subs	r3, r0, r4
 8009578:	3b15      	subs	r3, #21
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	3304      	adds	r3, #4
 8009580:	f104 0215 	add.w	r2, r4, #21
 8009584:	4290      	cmp	r0, r2
 8009586:	bf38      	it	cc
 8009588:	2304      	movcc	r3, #4
 800958a:	f841 c003 	str.w	ip, [r1, r3]
 800958e:	f1bc 0f00 	cmp.w	ip, #0
 8009592:	d001      	beq.n	8009598 <__lshift+0xac>
 8009594:	f108 0602 	add.w	r6, r8, #2
 8009598:	3e01      	subs	r6, #1
 800959a:	4638      	mov	r0, r7
 800959c:	612e      	str	r6, [r5, #16]
 800959e:	4621      	mov	r1, r4
 80095a0:	f7ff fdd2 	bl	8009148 <_Bfree>
 80095a4:	4628      	mov	r0, r5
 80095a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80095ae:	3301      	adds	r3, #1
 80095b0:	e7c1      	b.n	8009536 <__lshift+0x4a>
 80095b2:	3904      	subs	r1, #4
 80095b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80095bc:	4298      	cmp	r0, r3
 80095be:	d8f9      	bhi.n	80095b4 <__lshift+0xc8>
 80095c0:	e7ea      	b.n	8009598 <__lshift+0xac>
 80095c2:	bf00      	nop
 80095c4:	0800b693 	.word	0x0800b693
 80095c8:	0800b6a4 	.word	0x0800b6a4

080095cc <__mcmp>:
 80095cc:	b530      	push	{r4, r5, lr}
 80095ce:	6902      	ldr	r2, [r0, #16]
 80095d0:	690c      	ldr	r4, [r1, #16]
 80095d2:	1b12      	subs	r2, r2, r4
 80095d4:	d10e      	bne.n	80095f4 <__mcmp+0x28>
 80095d6:	f100 0314 	add.w	r3, r0, #20
 80095da:	3114      	adds	r1, #20
 80095dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095ec:	42a5      	cmp	r5, r4
 80095ee:	d003      	beq.n	80095f8 <__mcmp+0x2c>
 80095f0:	d305      	bcc.n	80095fe <__mcmp+0x32>
 80095f2:	2201      	movs	r2, #1
 80095f4:	4610      	mov	r0, r2
 80095f6:	bd30      	pop	{r4, r5, pc}
 80095f8:	4283      	cmp	r3, r0
 80095fa:	d3f3      	bcc.n	80095e4 <__mcmp+0x18>
 80095fc:	e7fa      	b.n	80095f4 <__mcmp+0x28>
 80095fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009602:	e7f7      	b.n	80095f4 <__mcmp+0x28>

08009604 <__mdiff>:
 8009604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	460c      	mov	r4, r1
 800960a:	4606      	mov	r6, r0
 800960c:	4611      	mov	r1, r2
 800960e:	4620      	mov	r0, r4
 8009610:	4690      	mov	r8, r2
 8009612:	f7ff ffdb 	bl	80095cc <__mcmp>
 8009616:	1e05      	subs	r5, r0, #0
 8009618:	d110      	bne.n	800963c <__mdiff+0x38>
 800961a:	4629      	mov	r1, r5
 800961c:	4630      	mov	r0, r6
 800961e:	f7ff fd53 	bl	80090c8 <_Balloc>
 8009622:	b930      	cbnz	r0, 8009632 <__mdiff+0x2e>
 8009624:	4b3a      	ldr	r3, [pc, #232]	; (8009710 <__mdiff+0x10c>)
 8009626:	4602      	mov	r2, r0
 8009628:	f240 2132 	movw	r1, #562	; 0x232
 800962c:	4839      	ldr	r0, [pc, #228]	; (8009714 <__mdiff+0x110>)
 800962e:	f000 fb31 	bl	8009c94 <__assert_func>
 8009632:	2301      	movs	r3, #1
 8009634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963c:	bfa4      	itt	ge
 800963e:	4643      	movge	r3, r8
 8009640:	46a0      	movge	r8, r4
 8009642:	4630      	mov	r0, r6
 8009644:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009648:	bfa6      	itte	ge
 800964a:	461c      	movge	r4, r3
 800964c:	2500      	movge	r5, #0
 800964e:	2501      	movlt	r5, #1
 8009650:	f7ff fd3a 	bl	80090c8 <_Balloc>
 8009654:	b920      	cbnz	r0, 8009660 <__mdiff+0x5c>
 8009656:	4b2e      	ldr	r3, [pc, #184]	; (8009710 <__mdiff+0x10c>)
 8009658:	4602      	mov	r2, r0
 800965a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800965e:	e7e5      	b.n	800962c <__mdiff+0x28>
 8009660:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009664:	6926      	ldr	r6, [r4, #16]
 8009666:	60c5      	str	r5, [r0, #12]
 8009668:	f104 0914 	add.w	r9, r4, #20
 800966c:	f108 0514 	add.w	r5, r8, #20
 8009670:	f100 0e14 	add.w	lr, r0, #20
 8009674:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009678:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800967c:	f108 0210 	add.w	r2, r8, #16
 8009680:	46f2      	mov	sl, lr
 8009682:	2100      	movs	r1, #0
 8009684:	f859 3b04 	ldr.w	r3, [r9], #4
 8009688:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800968c:	fa1f f883 	uxth.w	r8, r3
 8009690:	fa11 f18b 	uxtah	r1, r1, fp
 8009694:	0c1b      	lsrs	r3, r3, #16
 8009696:	eba1 0808 	sub.w	r8, r1, r8
 800969a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800969e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80096a2:	fa1f f888 	uxth.w	r8, r8
 80096a6:	1419      	asrs	r1, r3, #16
 80096a8:	454e      	cmp	r6, r9
 80096aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096ae:	f84a 3b04 	str.w	r3, [sl], #4
 80096b2:	d8e7      	bhi.n	8009684 <__mdiff+0x80>
 80096b4:	1b33      	subs	r3, r6, r4
 80096b6:	3b15      	subs	r3, #21
 80096b8:	f023 0303 	bic.w	r3, r3, #3
 80096bc:	3304      	adds	r3, #4
 80096be:	3415      	adds	r4, #21
 80096c0:	42a6      	cmp	r6, r4
 80096c2:	bf38      	it	cc
 80096c4:	2304      	movcc	r3, #4
 80096c6:	441d      	add	r5, r3
 80096c8:	4473      	add	r3, lr
 80096ca:	469e      	mov	lr, r3
 80096cc:	462e      	mov	r6, r5
 80096ce:	4566      	cmp	r6, ip
 80096d0:	d30e      	bcc.n	80096f0 <__mdiff+0xec>
 80096d2:	f10c 0203 	add.w	r2, ip, #3
 80096d6:	1b52      	subs	r2, r2, r5
 80096d8:	f022 0203 	bic.w	r2, r2, #3
 80096dc:	3d03      	subs	r5, #3
 80096de:	45ac      	cmp	ip, r5
 80096e0:	bf38      	it	cc
 80096e2:	2200      	movcc	r2, #0
 80096e4:	441a      	add	r2, r3
 80096e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096ea:	b17b      	cbz	r3, 800970c <__mdiff+0x108>
 80096ec:	6107      	str	r7, [r0, #16]
 80096ee:	e7a3      	b.n	8009638 <__mdiff+0x34>
 80096f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80096f4:	fa11 f288 	uxtah	r2, r1, r8
 80096f8:	1414      	asrs	r4, r2, #16
 80096fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096fe:	b292      	uxth	r2, r2
 8009700:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009704:	f84e 2b04 	str.w	r2, [lr], #4
 8009708:	1421      	asrs	r1, r4, #16
 800970a:	e7e0      	b.n	80096ce <__mdiff+0xca>
 800970c:	3f01      	subs	r7, #1
 800970e:	e7ea      	b.n	80096e6 <__mdiff+0xe2>
 8009710:	0800b693 	.word	0x0800b693
 8009714:	0800b6a4 	.word	0x0800b6a4

08009718 <__d2b>:
 8009718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800971c:	4689      	mov	r9, r1
 800971e:	2101      	movs	r1, #1
 8009720:	ec57 6b10 	vmov	r6, r7, d0
 8009724:	4690      	mov	r8, r2
 8009726:	f7ff fccf 	bl	80090c8 <_Balloc>
 800972a:	4604      	mov	r4, r0
 800972c:	b930      	cbnz	r0, 800973c <__d2b+0x24>
 800972e:	4602      	mov	r2, r0
 8009730:	4b25      	ldr	r3, [pc, #148]	; (80097c8 <__d2b+0xb0>)
 8009732:	4826      	ldr	r0, [pc, #152]	; (80097cc <__d2b+0xb4>)
 8009734:	f240 310a 	movw	r1, #778	; 0x30a
 8009738:	f000 faac 	bl	8009c94 <__assert_func>
 800973c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009744:	bb35      	cbnz	r5, 8009794 <__d2b+0x7c>
 8009746:	2e00      	cmp	r6, #0
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	d028      	beq.n	800979e <__d2b+0x86>
 800974c:	4668      	mov	r0, sp
 800974e:	9600      	str	r6, [sp, #0]
 8009750:	f7ff fd82 	bl	8009258 <__lo0bits>
 8009754:	9900      	ldr	r1, [sp, #0]
 8009756:	b300      	cbz	r0, 800979a <__d2b+0x82>
 8009758:	9a01      	ldr	r2, [sp, #4]
 800975a:	f1c0 0320 	rsb	r3, r0, #32
 800975e:	fa02 f303 	lsl.w	r3, r2, r3
 8009762:	430b      	orrs	r3, r1
 8009764:	40c2      	lsrs	r2, r0
 8009766:	6163      	str	r3, [r4, #20]
 8009768:	9201      	str	r2, [sp, #4]
 800976a:	9b01      	ldr	r3, [sp, #4]
 800976c:	61a3      	str	r3, [r4, #24]
 800976e:	2b00      	cmp	r3, #0
 8009770:	bf14      	ite	ne
 8009772:	2202      	movne	r2, #2
 8009774:	2201      	moveq	r2, #1
 8009776:	6122      	str	r2, [r4, #16]
 8009778:	b1d5      	cbz	r5, 80097b0 <__d2b+0x98>
 800977a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800977e:	4405      	add	r5, r0
 8009780:	f8c9 5000 	str.w	r5, [r9]
 8009784:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009788:	f8c8 0000 	str.w	r0, [r8]
 800978c:	4620      	mov	r0, r4
 800978e:	b003      	add	sp, #12
 8009790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009798:	e7d5      	b.n	8009746 <__d2b+0x2e>
 800979a:	6161      	str	r1, [r4, #20]
 800979c:	e7e5      	b.n	800976a <__d2b+0x52>
 800979e:	a801      	add	r0, sp, #4
 80097a0:	f7ff fd5a 	bl	8009258 <__lo0bits>
 80097a4:	9b01      	ldr	r3, [sp, #4]
 80097a6:	6163      	str	r3, [r4, #20]
 80097a8:	2201      	movs	r2, #1
 80097aa:	6122      	str	r2, [r4, #16]
 80097ac:	3020      	adds	r0, #32
 80097ae:	e7e3      	b.n	8009778 <__d2b+0x60>
 80097b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097b8:	f8c9 0000 	str.w	r0, [r9]
 80097bc:	6918      	ldr	r0, [r3, #16]
 80097be:	f7ff fd2b 	bl	8009218 <__hi0bits>
 80097c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097c6:	e7df      	b.n	8009788 <__d2b+0x70>
 80097c8:	0800b693 	.word	0x0800b693
 80097cc:	0800b6a4 	.word	0x0800b6a4

080097d0 <_calloc_r>:
 80097d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097d2:	fba1 2402 	umull	r2, r4, r1, r2
 80097d6:	b94c      	cbnz	r4, 80097ec <_calloc_r+0x1c>
 80097d8:	4611      	mov	r1, r2
 80097da:	9201      	str	r2, [sp, #4]
 80097dc:	f000 f87a 	bl	80098d4 <_malloc_r>
 80097e0:	9a01      	ldr	r2, [sp, #4]
 80097e2:	4605      	mov	r5, r0
 80097e4:	b930      	cbnz	r0, 80097f4 <_calloc_r+0x24>
 80097e6:	4628      	mov	r0, r5
 80097e8:	b003      	add	sp, #12
 80097ea:	bd30      	pop	{r4, r5, pc}
 80097ec:	220c      	movs	r2, #12
 80097ee:	6002      	str	r2, [r0, #0]
 80097f0:	2500      	movs	r5, #0
 80097f2:	e7f8      	b.n	80097e6 <_calloc_r+0x16>
 80097f4:	4621      	mov	r1, r4
 80097f6:	f7fe f93f 	bl	8007a78 <memset>
 80097fa:	e7f4      	b.n	80097e6 <_calloc_r+0x16>

080097fc <_free_r>:
 80097fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097fe:	2900      	cmp	r1, #0
 8009800:	d044      	beq.n	800988c <_free_r+0x90>
 8009802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009806:	9001      	str	r0, [sp, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f1a1 0404 	sub.w	r4, r1, #4
 800980e:	bfb8      	it	lt
 8009810:	18e4      	addlt	r4, r4, r3
 8009812:	f000 fa9b 	bl	8009d4c <__malloc_lock>
 8009816:	4a1e      	ldr	r2, [pc, #120]	; (8009890 <_free_r+0x94>)
 8009818:	9801      	ldr	r0, [sp, #4]
 800981a:	6813      	ldr	r3, [r2, #0]
 800981c:	b933      	cbnz	r3, 800982c <_free_r+0x30>
 800981e:	6063      	str	r3, [r4, #4]
 8009820:	6014      	str	r4, [r2, #0]
 8009822:	b003      	add	sp, #12
 8009824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009828:	f000 ba96 	b.w	8009d58 <__malloc_unlock>
 800982c:	42a3      	cmp	r3, r4
 800982e:	d908      	bls.n	8009842 <_free_r+0x46>
 8009830:	6825      	ldr	r5, [r4, #0]
 8009832:	1961      	adds	r1, r4, r5
 8009834:	428b      	cmp	r3, r1
 8009836:	bf01      	itttt	eq
 8009838:	6819      	ldreq	r1, [r3, #0]
 800983a:	685b      	ldreq	r3, [r3, #4]
 800983c:	1949      	addeq	r1, r1, r5
 800983e:	6021      	streq	r1, [r4, #0]
 8009840:	e7ed      	b.n	800981e <_free_r+0x22>
 8009842:	461a      	mov	r2, r3
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	b10b      	cbz	r3, 800984c <_free_r+0x50>
 8009848:	42a3      	cmp	r3, r4
 800984a:	d9fa      	bls.n	8009842 <_free_r+0x46>
 800984c:	6811      	ldr	r1, [r2, #0]
 800984e:	1855      	adds	r5, r2, r1
 8009850:	42a5      	cmp	r5, r4
 8009852:	d10b      	bne.n	800986c <_free_r+0x70>
 8009854:	6824      	ldr	r4, [r4, #0]
 8009856:	4421      	add	r1, r4
 8009858:	1854      	adds	r4, r2, r1
 800985a:	42a3      	cmp	r3, r4
 800985c:	6011      	str	r1, [r2, #0]
 800985e:	d1e0      	bne.n	8009822 <_free_r+0x26>
 8009860:	681c      	ldr	r4, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	6053      	str	r3, [r2, #4]
 8009866:	4421      	add	r1, r4
 8009868:	6011      	str	r1, [r2, #0]
 800986a:	e7da      	b.n	8009822 <_free_r+0x26>
 800986c:	d902      	bls.n	8009874 <_free_r+0x78>
 800986e:	230c      	movs	r3, #12
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	e7d6      	b.n	8009822 <_free_r+0x26>
 8009874:	6825      	ldr	r5, [r4, #0]
 8009876:	1961      	adds	r1, r4, r5
 8009878:	428b      	cmp	r3, r1
 800987a:	bf04      	itt	eq
 800987c:	6819      	ldreq	r1, [r3, #0]
 800987e:	685b      	ldreq	r3, [r3, #4]
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	bf04      	itt	eq
 8009884:	1949      	addeq	r1, r1, r5
 8009886:	6021      	streq	r1, [r4, #0]
 8009888:	6054      	str	r4, [r2, #4]
 800988a:	e7ca      	b.n	8009822 <_free_r+0x26>
 800988c:	b003      	add	sp, #12
 800988e:	bd30      	pop	{r4, r5, pc}
 8009890:	200007f0 	.word	0x200007f0

08009894 <sbrk_aligned>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	4e0e      	ldr	r6, [pc, #56]	; (80098d0 <sbrk_aligned+0x3c>)
 8009898:	460c      	mov	r4, r1
 800989a:	6831      	ldr	r1, [r6, #0]
 800989c:	4605      	mov	r5, r0
 800989e:	b911      	cbnz	r1, 80098a6 <sbrk_aligned+0x12>
 80098a0:	f000 f9e8 	bl	8009c74 <_sbrk_r>
 80098a4:	6030      	str	r0, [r6, #0]
 80098a6:	4621      	mov	r1, r4
 80098a8:	4628      	mov	r0, r5
 80098aa:	f000 f9e3 	bl	8009c74 <_sbrk_r>
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	d00a      	beq.n	80098c8 <sbrk_aligned+0x34>
 80098b2:	1cc4      	adds	r4, r0, #3
 80098b4:	f024 0403 	bic.w	r4, r4, #3
 80098b8:	42a0      	cmp	r0, r4
 80098ba:	d007      	beq.n	80098cc <sbrk_aligned+0x38>
 80098bc:	1a21      	subs	r1, r4, r0
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f9d8 	bl	8009c74 <_sbrk_r>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d101      	bne.n	80098cc <sbrk_aligned+0x38>
 80098c8:	f04f 34ff 	mov.w	r4, #4294967295
 80098cc:	4620      	mov	r0, r4
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	200007f4 	.word	0x200007f4

080098d4 <_malloc_r>:
 80098d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d8:	1ccd      	adds	r5, r1, #3
 80098da:	f025 0503 	bic.w	r5, r5, #3
 80098de:	3508      	adds	r5, #8
 80098e0:	2d0c      	cmp	r5, #12
 80098e2:	bf38      	it	cc
 80098e4:	250c      	movcc	r5, #12
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	4607      	mov	r7, r0
 80098ea:	db01      	blt.n	80098f0 <_malloc_r+0x1c>
 80098ec:	42a9      	cmp	r1, r5
 80098ee:	d905      	bls.n	80098fc <_malloc_r+0x28>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	2600      	movs	r6, #0
 80098f6:	4630      	mov	r0, r6
 80098f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fc:	4e2e      	ldr	r6, [pc, #184]	; (80099b8 <_malloc_r+0xe4>)
 80098fe:	f000 fa25 	bl	8009d4c <__malloc_lock>
 8009902:	6833      	ldr	r3, [r6, #0]
 8009904:	461c      	mov	r4, r3
 8009906:	bb34      	cbnz	r4, 8009956 <_malloc_r+0x82>
 8009908:	4629      	mov	r1, r5
 800990a:	4638      	mov	r0, r7
 800990c:	f7ff ffc2 	bl	8009894 <sbrk_aligned>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	4604      	mov	r4, r0
 8009914:	d14d      	bne.n	80099b2 <_malloc_r+0xde>
 8009916:	6834      	ldr	r4, [r6, #0]
 8009918:	4626      	mov	r6, r4
 800991a:	2e00      	cmp	r6, #0
 800991c:	d140      	bne.n	80099a0 <_malloc_r+0xcc>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	4631      	mov	r1, r6
 8009922:	4638      	mov	r0, r7
 8009924:	eb04 0803 	add.w	r8, r4, r3
 8009928:	f000 f9a4 	bl	8009c74 <_sbrk_r>
 800992c:	4580      	cmp	r8, r0
 800992e:	d13a      	bne.n	80099a6 <_malloc_r+0xd2>
 8009930:	6821      	ldr	r1, [r4, #0]
 8009932:	3503      	adds	r5, #3
 8009934:	1a6d      	subs	r5, r5, r1
 8009936:	f025 0503 	bic.w	r5, r5, #3
 800993a:	3508      	adds	r5, #8
 800993c:	2d0c      	cmp	r5, #12
 800993e:	bf38      	it	cc
 8009940:	250c      	movcc	r5, #12
 8009942:	4629      	mov	r1, r5
 8009944:	4638      	mov	r0, r7
 8009946:	f7ff ffa5 	bl	8009894 <sbrk_aligned>
 800994a:	3001      	adds	r0, #1
 800994c:	d02b      	beq.n	80099a6 <_malloc_r+0xd2>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	442b      	add	r3, r5
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	e00e      	b.n	8009974 <_malloc_r+0xa0>
 8009956:	6822      	ldr	r2, [r4, #0]
 8009958:	1b52      	subs	r2, r2, r5
 800995a:	d41e      	bmi.n	800999a <_malloc_r+0xc6>
 800995c:	2a0b      	cmp	r2, #11
 800995e:	d916      	bls.n	800998e <_malloc_r+0xba>
 8009960:	1961      	adds	r1, r4, r5
 8009962:	42a3      	cmp	r3, r4
 8009964:	6025      	str	r5, [r4, #0]
 8009966:	bf18      	it	ne
 8009968:	6059      	strne	r1, [r3, #4]
 800996a:	6863      	ldr	r3, [r4, #4]
 800996c:	bf08      	it	eq
 800996e:	6031      	streq	r1, [r6, #0]
 8009970:	5162      	str	r2, [r4, r5]
 8009972:	604b      	str	r3, [r1, #4]
 8009974:	4638      	mov	r0, r7
 8009976:	f104 060b 	add.w	r6, r4, #11
 800997a:	f000 f9ed 	bl	8009d58 <__malloc_unlock>
 800997e:	f026 0607 	bic.w	r6, r6, #7
 8009982:	1d23      	adds	r3, r4, #4
 8009984:	1af2      	subs	r2, r6, r3
 8009986:	d0b6      	beq.n	80098f6 <_malloc_r+0x22>
 8009988:	1b9b      	subs	r3, r3, r6
 800998a:	50a3      	str	r3, [r4, r2]
 800998c:	e7b3      	b.n	80098f6 <_malloc_r+0x22>
 800998e:	6862      	ldr	r2, [r4, #4]
 8009990:	42a3      	cmp	r3, r4
 8009992:	bf0c      	ite	eq
 8009994:	6032      	streq	r2, [r6, #0]
 8009996:	605a      	strne	r2, [r3, #4]
 8009998:	e7ec      	b.n	8009974 <_malloc_r+0xa0>
 800999a:	4623      	mov	r3, r4
 800999c:	6864      	ldr	r4, [r4, #4]
 800999e:	e7b2      	b.n	8009906 <_malloc_r+0x32>
 80099a0:	4634      	mov	r4, r6
 80099a2:	6876      	ldr	r6, [r6, #4]
 80099a4:	e7b9      	b.n	800991a <_malloc_r+0x46>
 80099a6:	230c      	movs	r3, #12
 80099a8:	603b      	str	r3, [r7, #0]
 80099aa:	4638      	mov	r0, r7
 80099ac:	f000 f9d4 	bl	8009d58 <__malloc_unlock>
 80099b0:	e7a1      	b.n	80098f6 <_malloc_r+0x22>
 80099b2:	6025      	str	r5, [r4, #0]
 80099b4:	e7de      	b.n	8009974 <_malloc_r+0xa0>
 80099b6:	bf00      	nop
 80099b8:	200007f0 	.word	0x200007f0

080099bc <__ssputs_r>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	688e      	ldr	r6, [r1, #8]
 80099c2:	429e      	cmp	r6, r3
 80099c4:	4682      	mov	sl, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	4690      	mov	r8, r2
 80099ca:	461f      	mov	r7, r3
 80099cc:	d838      	bhi.n	8009a40 <__ssputs_r+0x84>
 80099ce:	898a      	ldrh	r2, [r1, #12]
 80099d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099d4:	d032      	beq.n	8009a3c <__ssputs_r+0x80>
 80099d6:	6825      	ldr	r5, [r4, #0]
 80099d8:	6909      	ldr	r1, [r1, #16]
 80099da:	eba5 0901 	sub.w	r9, r5, r1
 80099de:	6965      	ldr	r5, [r4, #20]
 80099e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099e8:	3301      	adds	r3, #1
 80099ea:	444b      	add	r3, r9
 80099ec:	106d      	asrs	r5, r5, #1
 80099ee:	429d      	cmp	r5, r3
 80099f0:	bf38      	it	cc
 80099f2:	461d      	movcc	r5, r3
 80099f4:	0553      	lsls	r3, r2, #21
 80099f6:	d531      	bpl.n	8009a5c <__ssputs_r+0xa0>
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7ff ff6b 	bl	80098d4 <_malloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	b950      	cbnz	r0, 8009a18 <__ssputs_r+0x5c>
 8009a02:	230c      	movs	r3, #12
 8009a04:	f8ca 3000 	str.w	r3, [sl]
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a0e:	81a3      	strh	r3, [r4, #12]
 8009a10:	f04f 30ff 	mov.w	r0, #4294967295
 8009a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a18:	6921      	ldr	r1, [r4, #16]
 8009a1a:	464a      	mov	r2, r9
 8009a1c:	f7ff fb46 	bl	80090ac <memcpy>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	6126      	str	r6, [r4, #16]
 8009a2e:	6165      	str	r5, [r4, #20]
 8009a30:	444e      	add	r6, r9
 8009a32:	eba5 0509 	sub.w	r5, r5, r9
 8009a36:	6026      	str	r6, [r4, #0]
 8009a38:	60a5      	str	r5, [r4, #8]
 8009a3a:	463e      	mov	r6, r7
 8009a3c:	42be      	cmp	r6, r7
 8009a3e:	d900      	bls.n	8009a42 <__ssputs_r+0x86>
 8009a40:	463e      	mov	r6, r7
 8009a42:	6820      	ldr	r0, [r4, #0]
 8009a44:	4632      	mov	r2, r6
 8009a46:	4641      	mov	r1, r8
 8009a48:	f000 f966 	bl	8009d18 <memmove>
 8009a4c:	68a3      	ldr	r3, [r4, #8]
 8009a4e:	1b9b      	subs	r3, r3, r6
 8009a50:	60a3      	str	r3, [r4, #8]
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	4433      	add	r3, r6
 8009a56:	6023      	str	r3, [r4, #0]
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e7db      	b.n	8009a14 <__ssputs_r+0x58>
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	f000 f981 	bl	8009d64 <_realloc_r>
 8009a62:	4606      	mov	r6, r0
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d1e1      	bne.n	8009a2c <__ssputs_r+0x70>
 8009a68:	6921      	ldr	r1, [r4, #16]
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	f7ff fec6 	bl	80097fc <_free_r>
 8009a70:	e7c7      	b.n	8009a02 <__ssputs_r+0x46>
	...

08009a74 <_svfiprintf_r>:
 8009a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a78:	4698      	mov	r8, r3
 8009a7a:	898b      	ldrh	r3, [r1, #12]
 8009a7c:	061b      	lsls	r3, r3, #24
 8009a7e:	b09d      	sub	sp, #116	; 0x74
 8009a80:	4607      	mov	r7, r0
 8009a82:	460d      	mov	r5, r1
 8009a84:	4614      	mov	r4, r2
 8009a86:	d50e      	bpl.n	8009aa6 <_svfiprintf_r+0x32>
 8009a88:	690b      	ldr	r3, [r1, #16]
 8009a8a:	b963      	cbnz	r3, 8009aa6 <_svfiprintf_r+0x32>
 8009a8c:	2140      	movs	r1, #64	; 0x40
 8009a8e:	f7ff ff21 	bl	80098d4 <_malloc_r>
 8009a92:	6028      	str	r0, [r5, #0]
 8009a94:	6128      	str	r0, [r5, #16]
 8009a96:	b920      	cbnz	r0, 8009aa2 <_svfiprintf_r+0x2e>
 8009a98:	230c      	movs	r3, #12
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	e0d1      	b.n	8009c46 <_svfiprintf_r+0x1d2>
 8009aa2:	2340      	movs	r3, #64	; 0x40
 8009aa4:	616b      	str	r3, [r5, #20]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aaa:	2320      	movs	r3, #32
 8009aac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ab4:	2330      	movs	r3, #48	; 0x30
 8009ab6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c60 <_svfiprintf_r+0x1ec>
 8009aba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009abe:	f04f 0901 	mov.w	r9, #1
 8009ac2:	4623      	mov	r3, r4
 8009ac4:	469a      	mov	sl, r3
 8009ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aca:	b10a      	cbz	r2, 8009ad0 <_svfiprintf_r+0x5c>
 8009acc:	2a25      	cmp	r2, #37	; 0x25
 8009ace:	d1f9      	bne.n	8009ac4 <_svfiprintf_r+0x50>
 8009ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad4:	d00b      	beq.n	8009aee <_svfiprintf_r+0x7a>
 8009ad6:	465b      	mov	r3, fp
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4629      	mov	r1, r5
 8009adc:	4638      	mov	r0, r7
 8009ade:	f7ff ff6d 	bl	80099bc <__ssputs_r>
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	f000 80aa 	beq.w	8009c3c <_svfiprintf_r+0x1c8>
 8009ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aea:	445a      	add	r2, fp
 8009aec:	9209      	str	r2, [sp, #36]	; 0x24
 8009aee:	f89a 3000 	ldrb.w	r3, [sl]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 80a2 	beq.w	8009c3c <_svfiprintf_r+0x1c8>
 8009af8:	2300      	movs	r3, #0
 8009afa:	f04f 32ff 	mov.w	r2, #4294967295
 8009afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b02:	f10a 0a01 	add.w	sl, sl, #1
 8009b06:	9304      	str	r3, [sp, #16]
 8009b08:	9307      	str	r3, [sp, #28]
 8009b0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b0e:	931a      	str	r3, [sp, #104]	; 0x68
 8009b10:	4654      	mov	r4, sl
 8009b12:	2205      	movs	r2, #5
 8009b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b18:	4851      	ldr	r0, [pc, #324]	; (8009c60 <_svfiprintf_r+0x1ec>)
 8009b1a:	f7f6 fb61 	bl	80001e0 <memchr>
 8009b1e:	9a04      	ldr	r2, [sp, #16]
 8009b20:	b9d8      	cbnz	r0, 8009b5a <_svfiprintf_r+0xe6>
 8009b22:	06d0      	lsls	r0, r2, #27
 8009b24:	bf44      	itt	mi
 8009b26:	2320      	movmi	r3, #32
 8009b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2c:	0711      	lsls	r1, r2, #28
 8009b2e:	bf44      	itt	mi
 8009b30:	232b      	movmi	r3, #43	; 0x2b
 8009b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b36:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3c:	d015      	beq.n	8009b6a <_svfiprintf_r+0xf6>
 8009b3e:	9a07      	ldr	r2, [sp, #28]
 8009b40:	4654      	mov	r4, sl
 8009b42:	2000      	movs	r0, #0
 8009b44:	f04f 0c0a 	mov.w	ip, #10
 8009b48:	4621      	mov	r1, r4
 8009b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b4e:	3b30      	subs	r3, #48	; 0x30
 8009b50:	2b09      	cmp	r3, #9
 8009b52:	d94e      	bls.n	8009bf2 <_svfiprintf_r+0x17e>
 8009b54:	b1b0      	cbz	r0, 8009b84 <_svfiprintf_r+0x110>
 8009b56:	9207      	str	r2, [sp, #28]
 8009b58:	e014      	b.n	8009b84 <_svfiprintf_r+0x110>
 8009b5a:	eba0 0308 	sub.w	r3, r0, r8
 8009b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009b62:	4313      	orrs	r3, r2
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	46a2      	mov	sl, r4
 8009b68:	e7d2      	b.n	8009b10 <_svfiprintf_r+0x9c>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	1d19      	adds	r1, r3, #4
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	9103      	str	r1, [sp, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bfbb      	ittet	lt
 8009b76:	425b      	neglt	r3, r3
 8009b78:	f042 0202 	orrlt.w	r2, r2, #2
 8009b7c:	9307      	strge	r3, [sp, #28]
 8009b7e:	9307      	strlt	r3, [sp, #28]
 8009b80:	bfb8      	it	lt
 8009b82:	9204      	strlt	r2, [sp, #16]
 8009b84:	7823      	ldrb	r3, [r4, #0]
 8009b86:	2b2e      	cmp	r3, #46	; 0x2e
 8009b88:	d10c      	bne.n	8009ba4 <_svfiprintf_r+0x130>
 8009b8a:	7863      	ldrb	r3, [r4, #1]
 8009b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b8e:	d135      	bne.n	8009bfc <_svfiprintf_r+0x188>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	1d1a      	adds	r2, r3, #4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	9203      	str	r2, [sp, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bfb8      	it	lt
 8009b9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ba0:	3402      	adds	r4, #2
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c70 <_svfiprintf_r+0x1fc>
 8009ba8:	7821      	ldrb	r1, [r4, #0]
 8009baa:	2203      	movs	r2, #3
 8009bac:	4650      	mov	r0, sl
 8009bae:	f7f6 fb17 	bl	80001e0 <memchr>
 8009bb2:	b140      	cbz	r0, 8009bc6 <_svfiprintf_r+0x152>
 8009bb4:	2340      	movs	r3, #64	; 0x40
 8009bb6:	eba0 000a 	sub.w	r0, r0, sl
 8009bba:	fa03 f000 	lsl.w	r0, r3, r0
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	4303      	orrs	r3, r0
 8009bc2:	3401      	adds	r4, #1
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bca:	4826      	ldr	r0, [pc, #152]	; (8009c64 <_svfiprintf_r+0x1f0>)
 8009bcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bd0:	2206      	movs	r2, #6
 8009bd2:	f7f6 fb05 	bl	80001e0 <memchr>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d038      	beq.n	8009c4c <_svfiprintf_r+0x1d8>
 8009bda:	4b23      	ldr	r3, [pc, #140]	; (8009c68 <_svfiprintf_r+0x1f4>)
 8009bdc:	bb1b      	cbnz	r3, 8009c26 <_svfiprintf_r+0x1b2>
 8009bde:	9b03      	ldr	r3, [sp, #12]
 8009be0:	3307      	adds	r3, #7
 8009be2:	f023 0307 	bic.w	r3, r3, #7
 8009be6:	3308      	adds	r3, #8
 8009be8:	9303      	str	r3, [sp, #12]
 8009bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bec:	4433      	add	r3, r6
 8009bee:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf0:	e767      	b.n	8009ac2 <_svfiprintf_r+0x4e>
 8009bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	e7a5      	b.n	8009b48 <_svfiprintf_r+0xd4>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	3401      	adds	r4, #1
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	4619      	mov	r1, r3
 8009c04:	f04f 0c0a 	mov.w	ip, #10
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c0e:	3a30      	subs	r2, #48	; 0x30
 8009c10:	2a09      	cmp	r2, #9
 8009c12:	d903      	bls.n	8009c1c <_svfiprintf_r+0x1a8>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0c5      	beq.n	8009ba4 <_svfiprintf_r+0x130>
 8009c18:	9105      	str	r1, [sp, #20]
 8009c1a:	e7c3      	b.n	8009ba4 <_svfiprintf_r+0x130>
 8009c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c20:	4604      	mov	r4, r0
 8009c22:	2301      	movs	r3, #1
 8009c24:	e7f0      	b.n	8009c08 <_svfiprintf_r+0x194>
 8009c26:	ab03      	add	r3, sp, #12
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	462a      	mov	r2, r5
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c2e:	a904      	add	r1, sp, #16
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7fd ffc9 	bl	8007bc8 <_printf_float>
 8009c36:	1c42      	adds	r2, r0, #1
 8009c38:	4606      	mov	r6, r0
 8009c3a:	d1d6      	bne.n	8009bea <_svfiprintf_r+0x176>
 8009c3c:	89ab      	ldrh	r3, [r5, #12]
 8009c3e:	065b      	lsls	r3, r3, #25
 8009c40:	f53f af2c 	bmi.w	8009a9c <_svfiprintf_r+0x28>
 8009c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c46:	b01d      	add	sp, #116	; 0x74
 8009c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	462a      	mov	r2, r5
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	4638      	mov	r0, r7
 8009c58:	f7fe fa5a 	bl	8008110 <_printf_i>
 8009c5c:	e7eb      	b.n	8009c36 <_svfiprintf_r+0x1c2>
 8009c5e:	bf00      	nop
 8009c60:	0800b7fc 	.word	0x0800b7fc
 8009c64:	0800b806 	.word	0x0800b806
 8009c68:	08007bc9 	.word	0x08007bc9
 8009c6c:	080099bd 	.word	0x080099bd
 8009c70:	0800b802 	.word	0x0800b802

08009c74 <_sbrk_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4d06      	ldr	r5, [pc, #24]	; (8009c90 <_sbrk_r+0x1c>)
 8009c78:	2300      	movs	r3, #0
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	602b      	str	r3, [r5, #0]
 8009c80:	f7f7 fd34 	bl	80016ec <_sbrk>
 8009c84:	1c43      	adds	r3, r0, #1
 8009c86:	d102      	bne.n	8009c8e <_sbrk_r+0x1a>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	b103      	cbz	r3, 8009c8e <_sbrk_r+0x1a>
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}
 8009c90:	200007f8 	.word	0x200007f8

08009c94 <__assert_func>:
 8009c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c96:	4614      	mov	r4, r2
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <__assert_func+0x2c>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	68d8      	ldr	r0, [r3, #12]
 8009ca2:	b14c      	cbz	r4, 8009cb8 <__assert_func+0x24>
 8009ca4:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <__assert_func+0x30>)
 8009ca6:	9100      	str	r1, [sp, #0]
 8009ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cac:	4906      	ldr	r1, [pc, #24]	; (8009cc8 <__assert_func+0x34>)
 8009cae:	462b      	mov	r3, r5
 8009cb0:	f000 f80e 	bl	8009cd0 <fiprintf>
 8009cb4:	f000 faac 	bl	800a210 <abort>
 8009cb8:	4b04      	ldr	r3, [pc, #16]	; (8009ccc <__assert_func+0x38>)
 8009cba:	461c      	mov	r4, r3
 8009cbc:	e7f3      	b.n	8009ca6 <__assert_func+0x12>
 8009cbe:	bf00      	nop
 8009cc0:	2000000c 	.word	0x2000000c
 8009cc4:	0800b80d 	.word	0x0800b80d
 8009cc8:	0800b81a 	.word	0x0800b81a
 8009ccc:	0800b848 	.word	0x0800b848

08009cd0 <fiprintf>:
 8009cd0:	b40e      	push	{r1, r2, r3}
 8009cd2:	b503      	push	{r0, r1, lr}
 8009cd4:	4601      	mov	r1, r0
 8009cd6:	ab03      	add	r3, sp, #12
 8009cd8:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <fiprintf+0x20>)
 8009cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cde:	6800      	ldr	r0, [r0, #0]
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	f000 f897 	bl	8009e14 <_vfiprintf_r>
 8009ce6:	b002      	add	sp, #8
 8009ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cec:	b003      	add	sp, #12
 8009cee:	4770      	bx	lr
 8009cf0:	2000000c 	.word	0x2000000c

08009cf4 <__ascii_mbtowc>:
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	b901      	cbnz	r1, 8009cfa <__ascii_mbtowc+0x6>
 8009cf8:	a901      	add	r1, sp, #4
 8009cfa:	b142      	cbz	r2, 8009d0e <__ascii_mbtowc+0x1a>
 8009cfc:	b14b      	cbz	r3, 8009d12 <__ascii_mbtowc+0x1e>
 8009cfe:	7813      	ldrb	r3, [r2, #0]
 8009d00:	600b      	str	r3, [r1, #0]
 8009d02:	7812      	ldrb	r2, [r2, #0]
 8009d04:	1e10      	subs	r0, r2, #0
 8009d06:	bf18      	it	ne
 8009d08:	2001      	movne	r0, #1
 8009d0a:	b002      	add	sp, #8
 8009d0c:	4770      	bx	lr
 8009d0e:	4610      	mov	r0, r2
 8009d10:	e7fb      	b.n	8009d0a <__ascii_mbtowc+0x16>
 8009d12:	f06f 0001 	mvn.w	r0, #1
 8009d16:	e7f8      	b.n	8009d0a <__ascii_mbtowc+0x16>

08009d18 <memmove>:
 8009d18:	4288      	cmp	r0, r1
 8009d1a:	b510      	push	{r4, lr}
 8009d1c:	eb01 0402 	add.w	r4, r1, r2
 8009d20:	d902      	bls.n	8009d28 <memmove+0x10>
 8009d22:	4284      	cmp	r4, r0
 8009d24:	4623      	mov	r3, r4
 8009d26:	d807      	bhi.n	8009d38 <memmove+0x20>
 8009d28:	1e43      	subs	r3, r0, #1
 8009d2a:	42a1      	cmp	r1, r4
 8009d2c:	d008      	beq.n	8009d40 <memmove+0x28>
 8009d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d36:	e7f8      	b.n	8009d2a <memmove+0x12>
 8009d38:	4402      	add	r2, r0
 8009d3a:	4601      	mov	r1, r0
 8009d3c:	428a      	cmp	r2, r1
 8009d3e:	d100      	bne.n	8009d42 <memmove+0x2a>
 8009d40:	bd10      	pop	{r4, pc}
 8009d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d4a:	e7f7      	b.n	8009d3c <memmove+0x24>

08009d4c <__malloc_lock>:
 8009d4c:	4801      	ldr	r0, [pc, #4]	; (8009d54 <__malloc_lock+0x8>)
 8009d4e:	f000 bc1f 	b.w	800a590 <__retarget_lock_acquire_recursive>
 8009d52:	bf00      	nop
 8009d54:	200007fc 	.word	0x200007fc

08009d58 <__malloc_unlock>:
 8009d58:	4801      	ldr	r0, [pc, #4]	; (8009d60 <__malloc_unlock+0x8>)
 8009d5a:	f000 bc1a 	b.w	800a592 <__retarget_lock_release_recursive>
 8009d5e:	bf00      	nop
 8009d60:	200007fc 	.word	0x200007fc

08009d64 <_realloc_r>:
 8009d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d68:	4680      	mov	r8, r0
 8009d6a:	4614      	mov	r4, r2
 8009d6c:	460e      	mov	r6, r1
 8009d6e:	b921      	cbnz	r1, 8009d7a <_realloc_r+0x16>
 8009d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	4611      	mov	r1, r2
 8009d76:	f7ff bdad 	b.w	80098d4 <_malloc_r>
 8009d7a:	b92a      	cbnz	r2, 8009d88 <_realloc_r+0x24>
 8009d7c:	f7ff fd3e 	bl	80097fc <_free_r>
 8009d80:	4625      	mov	r5, r4
 8009d82:	4628      	mov	r0, r5
 8009d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d88:	f000 fc6a 	bl	800a660 <_malloc_usable_size_r>
 8009d8c:	4284      	cmp	r4, r0
 8009d8e:	4607      	mov	r7, r0
 8009d90:	d802      	bhi.n	8009d98 <_realloc_r+0x34>
 8009d92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d96:	d812      	bhi.n	8009dbe <_realloc_r+0x5a>
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	f7ff fd9a 	bl	80098d4 <_malloc_r>
 8009da0:	4605      	mov	r5, r0
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d0ed      	beq.n	8009d82 <_realloc_r+0x1e>
 8009da6:	42bc      	cmp	r4, r7
 8009da8:	4622      	mov	r2, r4
 8009daa:	4631      	mov	r1, r6
 8009dac:	bf28      	it	cs
 8009dae:	463a      	movcs	r2, r7
 8009db0:	f7ff f97c 	bl	80090ac <memcpy>
 8009db4:	4631      	mov	r1, r6
 8009db6:	4640      	mov	r0, r8
 8009db8:	f7ff fd20 	bl	80097fc <_free_r>
 8009dbc:	e7e1      	b.n	8009d82 <_realloc_r+0x1e>
 8009dbe:	4635      	mov	r5, r6
 8009dc0:	e7df      	b.n	8009d82 <_realloc_r+0x1e>

08009dc2 <__sfputc_r>:
 8009dc2:	6893      	ldr	r3, [r2, #8]
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	b410      	push	{r4}
 8009dca:	6093      	str	r3, [r2, #8]
 8009dcc:	da08      	bge.n	8009de0 <__sfputc_r+0x1e>
 8009dce:	6994      	ldr	r4, [r2, #24]
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	db01      	blt.n	8009dd8 <__sfputc_r+0x16>
 8009dd4:	290a      	cmp	r1, #10
 8009dd6:	d103      	bne.n	8009de0 <__sfputc_r+0x1e>
 8009dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ddc:	f000 b94a 	b.w	800a074 <__swbuf_r>
 8009de0:	6813      	ldr	r3, [r2, #0]
 8009de2:	1c58      	adds	r0, r3, #1
 8009de4:	6010      	str	r0, [r2, #0]
 8009de6:	7019      	strb	r1, [r3, #0]
 8009de8:	4608      	mov	r0, r1
 8009dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <__sfputs_r>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	4606      	mov	r6, r0
 8009df4:	460f      	mov	r7, r1
 8009df6:	4614      	mov	r4, r2
 8009df8:	18d5      	adds	r5, r2, r3
 8009dfa:	42ac      	cmp	r4, r5
 8009dfc:	d101      	bne.n	8009e02 <__sfputs_r+0x12>
 8009dfe:	2000      	movs	r0, #0
 8009e00:	e007      	b.n	8009e12 <__sfputs_r+0x22>
 8009e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e06:	463a      	mov	r2, r7
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7ff ffda 	bl	8009dc2 <__sfputc_r>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d1f3      	bne.n	8009dfa <__sfputs_r+0xa>
 8009e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e14 <_vfiprintf_r>:
 8009e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	460d      	mov	r5, r1
 8009e1a:	b09d      	sub	sp, #116	; 0x74
 8009e1c:	4614      	mov	r4, r2
 8009e1e:	4698      	mov	r8, r3
 8009e20:	4606      	mov	r6, r0
 8009e22:	b118      	cbz	r0, 8009e2c <_vfiprintf_r+0x18>
 8009e24:	6983      	ldr	r3, [r0, #24]
 8009e26:	b90b      	cbnz	r3, 8009e2c <_vfiprintf_r+0x18>
 8009e28:	f000 fb14 	bl	800a454 <__sinit>
 8009e2c:	4b89      	ldr	r3, [pc, #548]	; (800a054 <_vfiprintf_r+0x240>)
 8009e2e:	429d      	cmp	r5, r3
 8009e30:	d11b      	bne.n	8009e6a <_vfiprintf_r+0x56>
 8009e32:	6875      	ldr	r5, [r6, #4]
 8009e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e36:	07d9      	lsls	r1, r3, #31
 8009e38:	d405      	bmi.n	8009e46 <_vfiprintf_r+0x32>
 8009e3a:	89ab      	ldrh	r3, [r5, #12]
 8009e3c:	059a      	lsls	r2, r3, #22
 8009e3e:	d402      	bmi.n	8009e46 <_vfiprintf_r+0x32>
 8009e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e42:	f000 fba5 	bl	800a590 <__retarget_lock_acquire_recursive>
 8009e46:	89ab      	ldrh	r3, [r5, #12]
 8009e48:	071b      	lsls	r3, r3, #28
 8009e4a:	d501      	bpl.n	8009e50 <_vfiprintf_r+0x3c>
 8009e4c:	692b      	ldr	r3, [r5, #16]
 8009e4e:	b9eb      	cbnz	r3, 8009e8c <_vfiprintf_r+0x78>
 8009e50:	4629      	mov	r1, r5
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 f96e 	bl	800a134 <__swsetup_r>
 8009e58:	b1c0      	cbz	r0, 8009e8c <_vfiprintf_r+0x78>
 8009e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e5c:	07dc      	lsls	r4, r3, #31
 8009e5e:	d50e      	bpl.n	8009e7e <_vfiprintf_r+0x6a>
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	b01d      	add	sp, #116	; 0x74
 8009e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6a:	4b7b      	ldr	r3, [pc, #492]	; (800a058 <_vfiprintf_r+0x244>)
 8009e6c:	429d      	cmp	r5, r3
 8009e6e:	d101      	bne.n	8009e74 <_vfiprintf_r+0x60>
 8009e70:	68b5      	ldr	r5, [r6, #8]
 8009e72:	e7df      	b.n	8009e34 <_vfiprintf_r+0x20>
 8009e74:	4b79      	ldr	r3, [pc, #484]	; (800a05c <_vfiprintf_r+0x248>)
 8009e76:	429d      	cmp	r5, r3
 8009e78:	bf08      	it	eq
 8009e7a:	68f5      	ldreq	r5, [r6, #12]
 8009e7c:	e7da      	b.n	8009e34 <_vfiprintf_r+0x20>
 8009e7e:	89ab      	ldrh	r3, [r5, #12]
 8009e80:	0598      	lsls	r0, r3, #22
 8009e82:	d4ed      	bmi.n	8009e60 <_vfiprintf_r+0x4c>
 8009e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e86:	f000 fb84 	bl	800a592 <__retarget_lock_release_recursive>
 8009e8a:	e7e9      	b.n	8009e60 <_vfiprintf_r+0x4c>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e90:	2320      	movs	r3, #32
 8009e92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e9a:	2330      	movs	r3, #48	; 0x30
 8009e9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a060 <_vfiprintf_r+0x24c>
 8009ea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ea4:	f04f 0901 	mov.w	r9, #1
 8009ea8:	4623      	mov	r3, r4
 8009eaa:	469a      	mov	sl, r3
 8009eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb0:	b10a      	cbz	r2, 8009eb6 <_vfiprintf_r+0xa2>
 8009eb2:	2a25      	cmp	r2, #37	; 0x25
 8009eb4:	d1f9      	bne.n	8009eaa <_vfiprintf_r+0x96>
 8009eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eba:	d00b      	beq.n	8009ed4 <_vfiprintf_r+0xc0>
 8009ebc:	465b      	mov	r3, fp
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7ff ff94 	bl	8009df0 <__sfputs_r>
 8009ec8:	3001      	adds	r0, #1
 8009eca:	f000 80aa 	beq.w	800a022 <_vfiprintf_r+0x20e>
 8009ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed0:	445a      	add	r2, fp
 8009ed2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 80a2 	beq.w	800a022 <_vfiprintf_r+0x20e>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ee8:	f10a 0a01 	add.w	sl, sl, #1
 8009eec:	9304      	str	r3, [sp, #16]
 8009eee:	9307      	str	r3, [sp, #28]
 8009ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ef6:	4654      	mov	r4, sl
 8009ef8:	2205      	movs	r2, #5
 8009efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009efe:	4858      	ldr	r0, [pc, #352]	; (800a060 <_vfiprintf_r+0x24c>)
 8009f00:	f7f6 f96e 	bl	80001e0 <memchr>
 8009f04:	9a04      	ldr	r2, [sp, #16]
 8009f06:	b9d8      	cbnz	r0, 8009f40 <_vfiprintf_r+0x12c>
 8009f08:	06d1      	lsls	r1, r2, #27
 8009f0a:	bf44      	itt	mi
 8009f0c:	2320      	movmi	r3, #32
 8009f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f12:	0713      	lsls	r3, r2, #28
 8009f14:	bf44      	itt	mi
 8009f16:	232b      	movmi	r3, #43	; 0x2b
 8009f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f20:	2b2a      	cmp	r3, #42	; 0x2a
 8009f22:	d015      	beq.n	8009f50 <_vfiprintf_r+0x13c>
 8009f24:	9a07      	ldr	r2, [sp, #28]
 8009f26:	4654      	mov	r4, sl
 8009f28:	2000      	movs	r0, #0
 8009f2a:	f04f 0c0a 	mov.w	ip, #10
 8009f2e:	4621      	mov	r1, r4
 8009f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f34:	3b30      	subs	r3, #48	; 0x30
 8009f36:	2b09      	cmp	r3, #9
 8009f38:	d94e      	bls.n	8009fd8 <_vfiprintf_r+0x1c4>
 8009f3a:	b1b0      	cbz	r0, 8009f6a <_vfiprintf_r+0x156>
 8009f3c:	9207      	str	r2, [sp, #28]
 8009f3e:	e014      	b.n	8009f6a <_vfiprintf_r+0x156>
 8009f40:	eba0 0308 	sub.w	r3, r0, r8
 8009f44:	fa09 f303 	lsl.w	r3, r9, r3
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	9304      	str	r3, [sp, #16]
 8009f4c:	46a2      	mov	sl, r4
 8009f4e:	e7d2      	b.n	8009ef6 <_vfiprintf_r+0xe2>
 8009f50:	9b03      	ldr	r3, [sp, #12]
 8009f52:	1d19      	adds	r1, r3, #4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	9103      	str	r1, [sp, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bfbb      	ittet	lt
 8009f5c:	425b      	neglt	r3, r3
 8009f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f62:	9307      	strge	r3, [sp, #28]
 8009f64:	9307      	strlt	r3, [sp, #28]
 8009f66:	bfb8      	it	lt
 8009f68:	9204      	strlt	r2, [sp, #16]
 8009f6a:	7823      	ldrb	r3, [r4, #0]
 8009f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f6e:	d10c      	bne.n	8009f8a <_vfiprintf_r+0x176>
 8009f70:	7863      	ldrb	r3, [r4, #1]
 8009f72:	2b2a      	cmp	r3, #42	; 0x2a
 8009f74:	d135      	bne.n	8009fe2 <_vfiprintf_r+0x1ce>
 8009f76:	9b03      	ldr	r3, [sp, #12]
 8009f78:	1d1a      	adds	r2, r3, #4
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	9203      	str	r2, [sp, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	bfb8      	it	lt
 8009f82:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f86:	3402      	adds	r4, #2
 8009f88:	9305      	str	r3, [sp, #20]
 8009f8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a070 <_vfiprintf_r+0x25c>
 8009f8e:	7821      	ldrb	r1, [r4, #0]
 8009f90:	2203      	movs	r2, #3
 8009f92:	4650      	mov	r0, sl
 8009f94:	f7f6 f924 	bl	80001e0 <memchr>
 8009f98:	b140      	cbz	r0, 8009fac <_vfiprintf_r+0x198>
 8009f9a:	2340      	movs	r3, #64	; 0x40
 8009f9c:	eba0 000a 	sub.w	r0, r0, sl
 8009fa0:	fa03 f000 	lsl.w	r0, r3, r0
 8009fa4:	9b04      	ldr	r3, [sp, #16]
 8009fa6:	4303      	orrs	r3, r0
 8009fa8:	3401      	adds	r4, #1
 8009faa:	9304      	str	r3, [sp, #16]
 8009fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb0:	482c      	ldr	r0, [pc, #176]	; (800a064 <_vfiprintf_r+0x250>)
 8009fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fb6:	2206      	movs	r2, #6
 8009fb8:	f7f6 f912 	bl	80001e0 <memchr>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d03f      	beq.n	800a040 <_vfiprintf_r+0x22c>
 8009fc0:	4b29      	ldr	r3, [pc, #164]	; (800a068 <_vfiprintf_r+0x254>)
 8009fc2:	bb1b      	cbnz	r3, 800a00c <_vfiprintf_r+0x1f8>
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	3307      	adds	r3, #7
 8009fc8:	f023 0307 	bic.w	r3, r3, #7
 8009fcc:	3308      	adds	r3, #8
 8009fce:	9303      	str	r3, [sp, #12]
 8009fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd2:	443b      	add	r3, r7
 8009fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd6:	e767      	b.n	8009ea8 <_vfiprintf_r+0x94>
 8009fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fdc:	460c      	mov	r4, r1
 8009fde:	2001      	movs	r0, #1
 8009fe0:	e7a5      	b.n	8009f2e <_vfiprintf_r+0x11a>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	3401      	adds	r4, #1
 8009fe6:	9305      	str	r3, [sp, #20]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	f04f 0c0a 	mov.w	ip, #10
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ff4:	3a30      	subs	r2, #48	; 0x30
 8009ff6:	2a09      	cmp	r2, #9
 8009ff8:	d903      	bls.n	800a002 <_vfiprintf_r+0x1ee>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0c5      	beq.n	8009f8a <_vfiprintf_r+0x176>
 8009ffe:	9105      	str	r1, [sp, #20]
 800a000:	e7c3      	b.n	8009f8a <_vfiprintf_r+0x176>
 800a002:	fb0c 2101 	mla	r1, ip, r1, r2
 800a006:	4604      	mov	r4, r0
 800a008:	2301      	movs	r3, #1
 800a00a:	e7f0      	b.n	8009fee <_vfiprintf_r+0x1da>
 800a00c:	ab03      	add	r3, sp, #12
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	462a      	mov	r2, r5
 800a012:	4b16      	ldr	r3, [pc, #88]	; (800a06c <_vfiprintf_r+0x258>)
 800a014:	a904      	add	r1, sp, #16
 800a016:	4630      	mov	r0, r6
 800a018:	f7fd fdd6 	bl	8007bc8 <_printf_float>
 800a01c:	4607      	mov	r7, r0
 800a01e:	1c78      	adds	r0, r7, #1
 800a020:	d1d6      	bne.n	8009fd0 <_vfiprintf_r+0x1bc>
 800a022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a024:	07d9      	lsls	r1, r3, #31
 800a026:	d405      	bmi.n	800a034 <_vfiprintf_r+0x220>
 800a028:	89ab      	ldrh	r3, [r5, #12]
 800a02a:	059a      	lsls	r2, r3, #22
 800a02c:	d402      	bmi.n	800a034 <_vfiprintf_r+0x220>
 800a02e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a030:	f000 faaf 	bl	800a592 <__retarget_lock_release_recursive>
 800a034:	89ab      	ldrh	r3, [r5, #12]
 800a036:	065b      	lsls	r3, r3, #25
 800a038:	f53f af12 	bmi.w	8009e60 <_vfiprintf_r+0x4c>
 800a03c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a03e:	e711      	b.n	8009e64 <_vfiprintf_r+0x50>
 800a040:	ab03      	add	r3, sp, #12
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	462a      	mov	r2, r5
 800a046:	4b09      	ldr	r3, [pc, #36]	; (800a06c <_vfiprintf_r+0x258>)
 800a048:	a904      	add	r1, sp, #16
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7fe f860 	bl	8008110 <_printf_i>
 800a050:	e7e4      	b.n	800a01c <_vfiprintf_r+0x208>
 800a052:	bf00      	nop
 800a054:	0800b974 	.word	0x0800b974
 800a058:	0800b994 	.word	0x0800b994
 800a05c:	0800b954 	.word	0x0800b954
 800a060:	0800b7fc 	.word	0x0800b7fc
 800a064:	0800b806 	.word	0x0800b806
 800a068:	08007bc9 	.word	0x08007bc9
 800a06c:	08009df1 	.word	0x08009df1
 800a070:	0800b802 	.word	0x0800b802

0800a074 <__swbuf_r>:
 800a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a076:	460e      	mov	r6, r1
 800a078:	4614      	mov	r4, r2
 800a07a:	4605      	mov	r5, r0
 800a07c:	b118      	cbz	r0, 800a086 <__swbuf_r+0x12>
 800a07e:	6983      	ldr	r3, [r0, #24]
 800a080:	b90b      	cbnz	r3, 800a086 <__swbuf_r+0x12>
 800a082:	f000 f9e7 	bl	800a454 <__sinit>
 800a086:	4b21      	ldr	r3, [pc, #132]	; (800a10c <__swbuf_r+0x98>)
 800a088:	429c      	cmp	r4, r3
 800a08a:	d12b      	bne.n	800a0e4 <__swbuf_r+0x70>
 800a08c:	686c      	ldr	r4, [r5, #4]
 800a08e:	69a3      	ldr	r3, [r4, #24]
 800a090:	60a3      	str	r3, [r4, #8]
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	071a      	lsls	r2, r3, #28
 800a096:	d52f      	bpl.n	800a0f8 <__swbuf_r+0x84>
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	b36b      	cbz	r3, 800a0f8 <__swbuf_r+0x84>
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	6820      	ldr	r0, [r4, #0]
 800a0a0:	1ac0      	subs	r0, r0, r3
 800a0a2:	6963      	ldr	r3, [r4, #20]
 800a0a4:	b2f6      	uxtb	r6, r6
 800a0a6:	4283      	cmp	r3, r0
 800a0a8:	4637      	mov	r7, r6
 800a0aa:	dc04      	bgt.n	800a0b6 <__swbuf_r+0x42>
 800a0ac:	4621      	mov	r1, r4
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	f000 f93c 	bl	800a32c <_fflush_r>
 800a0b4:	bb30      	cbnz	r0, 800a104 <__swbuf_r+0x90>
 800a0b6:	68a3      	ldr	r3, [r4, #8]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	60a3      	str	r3, [r4, #8]
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	1c5a      	adds	r2, r3, #1
 800a0c0:	6022      	str	r2, [r4, #0]
 800a0c2:	701e      	strb	r6, [r3, #0]
 800a0c4:	6963      	ldr	r3, [r4, #20]
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	4283      	cmp	r3, r0
 800a0ca:	d004      	beq.n	800a0d6 <__swbuf_r+0x62>
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	07db      	lsls	r3, r3, #31
 800a0d0:	d506      	bpl.n	800a0e0 <__swbuf_r+0x6c>
 800a0d2:	2e0a      	cmp	r6, #10
 800a0d4:	d104      	bne.n	800a0e0 <__swbuf_r+0x6c>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f000 f927 	bl	800a32c <_fflush_r>
 800a0de:	b988      	cbnz	r0, 800a104 <__swbuf_r+0x90>
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <__swbuf_r+0x9c>)
 800a0e6:	429c      	cmp	r4, r3
 800a0e8:	d101      	bne.n	800a0ee <__swbuf_r+0x7a>
 800a0ea:	68ac      	ldr	r4, [r5, #8]
 800a0ec:	e7cf      	b.n	800a08e <__swbuf_r+0x1a>
 800a0ee:	4b09      	ldr	r3, [pc, #36]	; (800a114 <__swbuf_r+0xa0>)
 800a0f0:	429c      	cmp	r4, r3
 800a0f2:	bf08      	it	eq
 800a0f4:	68ec      	ldreq	r4, [r5, #12]
 800a0f6:	e7ca      	b.n	800a08e <__swbuf_r+0x1a>
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	f000 f81a 	bl	800a134 <__swsetup_r>
 800a100:	2800      	cmp	r0, #0
 800a102:	d0cb      	beq.n	800a09c <__swbuf_r+0x28>
 800a104:	f04f 37ff 	mov.w	r7, #4294967295
 800a108:	e7ea      	b.n	800a0e0 <__swbuf_r+0x6c>
 800a10a:	bf00      	nop
 800a10c:	0800b974 	.word	0x0800b974
 800a110:	0800b994 	.word	0x0800b994
 800a114:	0800b954 	.word	0x0800b954

0800a118 <__ascii_wctomb>:
 800a118:	b149      	cbz	r1, 800a12e <__ascii_wctomb+0x16>
 800a11a:	2aff      	cmp	r2, #255	; 0xff
 800a11c:	bf85      	ittet	hi
 800a11e:	238a      	movhi	r3, #138	; 0x8a
 800a120:	6003      	strhi	r3, [r0, #0]
 800a122:	700a      	strbls	r2, [r1, #0]
 800a124:	f04f 30ff 	movhi.w	r0, #4294967295
 800a128:	bf98      	it	ls
 800a12a:	2001      	movls	r0, #1
 800a12c:	4770      	bx	lr
 800a12e:	4608      	mov	r0, r1
 800a130:	4770      	bx	lr
	...

0800a134 <__swsetup_r>:
 800a134:	4b32      	ldr	r3, [pc, #200]	; (800a200 <__swsetup_r+0xcc>)
 800a136:	b570      	push	{r4, r5, r6, lr}
 800a138:	681d      	ldr	r5, [r3, #0]
 800a13a:	4606      	mov	r6, r0
 800a13c:	460c      	mov	r4, r1
 800a13e:	b125      	cbz	r5, 800a14a <__swsetup_r+0x16>
 800a140:	69ab      	ldr	r3, [r5, #24]
 800a142:	b913      	cbnz	r3, 800a14a <__swsetup_r+0x16>
 800a144:	4628      	mov	r0, r5
 800a146:	f000 f985 	bl	800a454 <__sinit>
 800a14a:	4b2e      	ldr	r3, [pc, #184]	; (800a204 <__swsetup_r+0xd0>)
 800a14c:	429c      	cmp	r4, r3
 800a14e:	d10f      	bne.n	800a170 <__swsetup_r+0x3c>
 800a150:	686c      	ldr	r4, [r5, #4]
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a158:	0719      	lsls	r1, r3, #28
 800a15a:	d42c      	bmi.n	800a1b6 <__swsetup_r+0x82>
 800a15c:	06dd      	lsls	r5, r3, #27
 800a15e:	d411      	bmi.n	800a184 <__swsetup_r+0x50>
 800a160:	2309      	movs	r3, #9
 800a162:	6033      	str	r3, [r6, #0]
 800a164:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a168:	81a3      	strh	r3, [r4, #12]
 800a16a:	f04f 30ff 	mov.w	r0, #4294967295
 800a16e:	e03e      	b.n	800a1ee <__swsetup_r+0xba>
 800a170:	4b25      	ldr	r3, [pc, #148]	; (800a208 <__swsetup_r+0xd4>)
 800a172:	429c      	cmp	r4, r3
 800a174:	d101      	bne.n	800a17a <__swsetup_r+0x46>
 800a176:	68ac      	ldr	r4, [r5, #8]
 800a178:	e7eb      	b.n	800a152 <__swsetup_r+0x1e>
 800a17a:	4b24      	ldr	r3, [pc, #144]	; (800a20c <__swsetup_r+0xd8>)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	bf08      	it	eq
 800a180:	68ec      	ldreq	r4, [r5, #12]
 800a182:	e7e6      	b.n	800a152 <__swsetup_r+0x1e>
 800a184:	0758      	lsls	r0, r3, #29
 800a186:	d512      	bpl.n	800a1ae <__swsetup_r+0x7a>
 800a188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a18a:	b141      	cbz	r1, 800a19e <__swsetup_r+0x6a>
 800a18c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a190:	4299      	cmp	r1, r3
 800a192:	d002      	beq.n	800a19a <__swsetup_r+0x66>
 800a194:	4630      	mov	r0, r6
 800a196:	f7ff fb31 	bl	80097fc <_free_r>
 800a19a:	2300      	movs	r3, #0
 800a19c:	6363      	str	r3, [r4, #52]	; 0x34
 800a19e:	89a3      	ldrh	r3, [r4, #12]
 800a1a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1a4:	81a3      	strh	r3, [r4, #12]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6063      	str	r3, [r4, #4]
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	f043 0308 	orr.w	r3, r3, #8
 800a1b4:	81a3      	strh	r3, [r4, #12]
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	b94b      	cbnz	r3, 800a1ce <__swsetup_r+0x9a>
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1c4:	d003      	beq.n	800a1ce <__swsetup_r+0x9a>
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f000 fa09 	bl	800a5e0 <__smakebuf_r>
 800a1ce:	89a0      	ldrh	r0, [r4, #12]
 800a1d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1d4:	f010 0301 	ands.w	r3, r0, #1
 800a1d8:	d00a      	beq.n	800a1f0 <__swsetup_r+0xbc>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60a3      	str	r3, [r4, #8]
 800a1de:	6963      	ldr	r3, [r4, #20]
 800a1e0:	425b      	negs	r3, r3
 800a1e2:	61a3      	str	r3, [r4, #24]
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	b943      	cbnz	r3, 800a1fa <__swsetup_r+0xc6>
 800a1e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1ec:	d1ba      	bne.n	800a164 <__swsetup_r+0x30>
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	0781      	lsls	r1, r0, #30
 800a1f2:	bf58      	it	pl
 800a1f4:	6963      	ldrpl	r3, [r4, #20]
 800a1f6:	60a3      	str	r3, [r4, #8]
 800a1f8:	e7f4      	b.n	800a1e4 <__swsetup_r+0xb0>
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	e7f7      	b.n	800a1ee <__swsetup_r+0xba>
 800a1fe:	bf00      	nop
 800a200:	2000000c 	.word	0x2000000c
 800a204:	0800b974 	.word	0x0800b974
 800a208:	0800b994 	.word	0x0800b994
 800a20c:	0800b954 	.word	0x0800b954

0800a210 <abort>:
 800a210:	b508      	push	{r3, lr}
 800a212:	2006      	movs	r0, #6
 800a214:	f000 fa54 	bl	800a6c0 <raise>
 800a218:	2001      	movs	r0, #1
 800a21a:	f7f7 f9ef 	bl	80015fc <_exit>
	...

0800a220 <__sflush_r>:
 800a220:	898a      	ldrh	r2, [r1, #12]
 800a222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a226:	4605      	mov	r5, r0
 800a228:	0710      	lsls	r0, r2, #28
 800a22a:	460c      	mov	r4, r1
 800a22c:	d458      	bmi.n	800a2e0 <__sflush_r+0xc0>
 800a22e:	684b      	ldr	r3, [r1, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	dc05      	bgt.n	800a240 <__sflush_r+0x20>
 800a234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a236:	2b00      	cmp	r3, #0
 800a238:	dc02      	bgt.n	800a240 <__sflush_r+0x20>
 800a23a:	2000      	movs	r0, #0
 800a23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a242:	2e00      	cmp	r6, #0
 800a244:	d0f9      	beq.n	800a23a <__sflush_r+0x1a>
 800a246:	2300      	movs	r3, #0
 800a248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a24c:	682f      	ldr	r7, [r5, #0]
 800a24e:	602b      	str	r3, [r5, #0]
 800a250:	d032      	beq.n	800a2b8 <__sflush_r+0x98>
 800a252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	075a      	lsls	r2, r3, #29
 800a258:	d505      	bpl.n	800a266 <__sflush_r+0x46>
 800a25a:	6863      	ldr	r3, [r4, #4]
 800a25c:	1ac0      	subs	r0, r0, r3
 800a25e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a260:	b10b      	cbz	r3, 800a266 <__sflush_r+0x46>
 800a262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a264:	1ac0      	subs	r0, r0, r3
 800a266:	2300      	movs	r3, #0
 800a268:	4602      	mov	r2, r0
 800a26a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a26c:	6a21      	ldr	r1, [r4, #32]
 800a26e:	4628      	mov	r0, r5
 800a270:	47b0      	blx	r6
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	d106      	bne.n	800a286 <__sflush_r+0x66>
 800a278:	6829      	ldr	r1, [r5, #0]
 800a27a:	291d      	cmp	r1, #29
 800a27c:	d82c      	bhi.n	800a2d8 <__sflush_r+0xb8>
 800a27e:	4a2a      	ldr	r2, [pc, #168]	; (800a328 <__sflush_r+0x108>)
 800a280:	40ca      	lsrs	r2, r1
 800a282:	07d6      	lsls	r6, r2, #31
 800a284:	d528      	bpl.n	800a2d8 <__sflush_r+0xb8>
 800a286:	2200      	movs	r2, #0
 800a288:	6062      	str	r2, [r4, #4]
 800a28a:	04d9      	lsls	r1, r3, #19
 800a28c:	6922      	ldr	r2, [r4, #16]
 800a28e:	6022      	str	r2, [r4, #0]
 800a290:	d504      	bpl.n	800a29c <__sflush_r+0x7c>
 800a292:	1c42      	adds	r2, r0, #1
 800a294:	d101      	bne.n	800a29a <__sflush_r+0x7a>
 800a296:	682b      	ldr	r3, [r5, #0]
 800a298:	b903      	cbnz	r3, 800a29c <__sflush_r+0x7c>
 800a29a:	6560      	str	r0, [r4, #84]	; 0x54
 800a29c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a29e:	602f      	str	r7, [r5, #0]
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	d0ca      	beq.n	800a23a <__sflush_r+0x1a>
 800a2a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2a8:	4299      	cmp	r1, r3
 800a2aa:	d002      	beq.n	800a2b2 <__sflush_r+0x92>
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f7ff faa5 	bl	80097fc <_free_r>
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	6360      	str	r0, [r4, #52]	; 0x34
 800a2b6:	e7c1      	b.n	800a23c <__sflush_r+0x1c>
 800a2b8:	6a21      	ldr	r1, [r4, #32]
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4628      	mov	r0, r5
 800a2be:	47b0      	blx	r6
 800a2c0:	1c41      	adds	r1, r0, #1
 800a2c2:	d1c7      	bne.n	800a254 <__sflush_r+0x34>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0c4      	beq.n	800a254 <__sflush_r+0x34>
 800a2ca:	2b1d      	cmp	r3, #29
 800a2cc:	d001      	beq.n	800a2d2 <__sflush_r+0xb2>
 800a2ce:	2b16      	cmp	r3, #22
 800a2d0:	d101      	bne.n	800a2d6 <__sflush_r+0xb6>
 800a2d2:	602f      	str	r7, [r5, #0]
 800a2d4:	e7b1      	b.n	800a23a <__sflush_r+0x1a>
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2dc:	81a3      	strh	r3, [r4, #12]
 800a2de:	e7ad      	b.n	800a23c <__sflush_r+0x1c>
 800a2e0:	690f      	ldr	r7, [r1, #16]
 800a2e2:	2f00      	cmp	r7, #0
 800a2e4:	d0a9      	beq.n	800a23a <__sflush_r+0x1a>
 800a2e6:	0793      	lsls	r3, r2, #30
 800a2e8:	680e      	ldr	r6, [r1, #0]
 800a2ea:	bf08      	it	eq
 800a2ec:	694b      	ldreq	r3, [r1, #20]
 800a2ee:	600f      	str	r7, [r1, #0]
 800a2f0:	bf18      	it	ne
 800a2f2:	2300      	movne	r3, #0
 800a2f4:	eba6 0807 	sub.w	r8, r6, r7
 800a2f8:	608b      	str	r3, [r1, #8]
 800a2fa:	f1b8 0f00 	cmp.w	r8, #0
 800a2fe:	dd9c      	ble.n	800a23a <__sflush_r+0x1a>
 800a300:	6a21      	ldr	r1, [r4, #32]
 800a302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a304:	4643      	mov	r3, r8
 800a306:	463a      	mov	r2, r7
 800a308:	4628      	mov	r0, r5
 800a30a:	47b0      	blx	r6
 800a30c:	2800      	cmp	r0, #0
 800a30e:	dc06      	bgt.n	800a31e <__sflush_r+0xfe>
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a316:	81a3      	strh	r3, [r4, #12]
 800a318:	f04f 30ff 	mov.w	r0, #4294967295
 800a31c:	e78e      	b.n	800a23c <__sflush_r+0x1c>
 800a31e:	4407      	add	r7, r0
 800a320:	eba8 0800 	sub.w	r8, r8, r0
 800a324:	e7e9      	b.n	800a2fa <__sflush_r+0xda>
 800a326:	bf00      	nop
 800a328:	20400001 	.word	0x20400001

0800a32c <_fflush_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	690b      	ldr	r3, [r1, #16]
 800a330:	4605      	mov	r5, r0
 800a332:	460c      	mov	r4, r1
 800a334:	b913      	cbnz	r3, 800a33c <_fflush_r+0x10>
 800a336:	2500      	movs	r5, #0
 800a338:	4628      	mov	r0, r5
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	b118      	cbz	r0, 800a346 <_fflush_r+0x1a>
 800a33e:	6983      	ldr	r3, [r0, #24]
 800a340:	b90b      	cbnz	r3, 800a346 <_fflush_r+0x1a>
 800a342:	f000 f887 	bl	800a454 <__sinit>
 800a346:	4b14      	ldr	r3, [pc, #80]	; (800a398 <_fflush_r+0x6c>)
 800a348:	429c      	cmp	r4, r3
 800a34a:	d11b      	bne.n	800a384 <_fflush_r+0x58>
 800a34c:	686c      	ldr	r4, [r5, #4]
 800a34e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0ef      	beq.n	800a336 <_fflush_r+0xa>
 800a356:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a358:	07d0      	lsls	r0, r2, #31
 800a35a:	d404      	bmi.n	800a366 <_fflush_r+0x3a>
 800a35c:	0599      	lsls	r1, r3, #22
 800a35e:	d402      	bmi.n	800a366 <_fflush_r+0x3a>
 800a360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a362:	f000 f915 	bl	800a590 <__retarget_lock_acquire_recursive>
 800a366:	4628      	mov	r0, r5
 800a368:	4621      	mov	r1, r4
 800a36a:	f7ff ff59 	bl	800a220 <__sflush_r>
 800a36e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a370:	07da      	lsls	r2, r3, #31
 800a372:	4605      	mov	r5, r0
 800a374:	d4e0      	bmi.n	800a338 <_fflush_r+0xc>
 800a376:	89a3      	ldrh	r3, [r4, #12]
 800a378:	059b      	lsls	r3, r3, #22
 800a37a:	d4dd      	bmi.n	800a338 <_fflush_r+0xc>
 800a37c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a37e:	f000 f908 	bl	800a592 <__retarget_lock_release_recursive>
 800a382:	e7d9      	b.n	800a338 <_fflush_r+0xc>
 800a384:	4b05      	ldr	r3, [pc, #20]	; (800a39c <_fflush_r+0x70>)
 800a386:	429c      	cmp	r4, r3
 800a388:	d101      	bne.n	800a38e <_fflush_r+0x62>
 800a38a:	68ac      	ldr	r4, [r5, #8]
 800a38c:	e7df      	b.n	800a34e <_fflush_r+0x22>
 800a38e:	4b04      	ldr	r3, [pc, #16]	; (800a3a0 <_fflush_r+0x74>)
 800a390:	429c      	cmp	r4, r3
 800a392:	bf08      	it	eq
 800a394:	68ec      	ldreq	r4, [r5, #12]
 800a396:	e7da      	b.n	800a34e <_fflush_r+0x22>
 800a398:	0800b974 	.word	0x0800b974
 800a39c:	0800b994 	.word	0x0800b994
 800a3a0:	0800b954 	.word	0x0800b954

0800a3a4 <std>:
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	b510      	push	{r4, lr}
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a3ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3b2:	6083      	str	r3, [r0, #8]
 800a3b4:	8181      	strh	r1, [r0, #12]
 800a3b6:	6643      	str	r3, [r0, #100]	; 0x64
 800a3b8:	81c2      	strh	r2, [r0, #14]
 800a3ba:	6183      	str	r3, [r0, #24]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	2208      	movs	r2, #8
 800a3c0:	305c      	adds	r0, #92	; 0x5c
 800a3c2:	f7fd fb59 	bl	8007a78 <memset>
 800a3c6:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <std+0x38>)
 800a3c8:	6263      	str	r3, [r4, #36]	; 0x24
 800a3ca:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <std+0x3c>)
 800a3cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3ce:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <std+0x40>)
 800a3d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3d2:	4b05      	ldr	r3, [pc, #20]	; (800a3e8 <std+0x44>)
 800a3d4:	6224      	str	r4, [r4, #32]
 800a3d6:	6323      	str	r3, [r4, #48]	; 0x30
 800a3d8:	bd10      	pop	{r4, pc}
 800a3da:	bf00      	nop
 800a3dc:	0800a6f9 	.word	0x0800a6f9
 800a3e0:	0800a71b 	.word	0x0800a71b
 800a3e4:	0800a753 	.word	0x0800a753
 800a3e8:	0800a777 	.word	0x0800a777

0800a3ec <_cleanup_r>:
 800a3ec:	4901      	ldr	r1, [pc, #4]	; (800a3f4 <_cleanup_r+0x8>)
 800a3ee:	f000 b8af 	b.w	800a550 <_fwalk_reent>
 800a3f2:	bf00      	nop
 800a3f4:	0800a32d 	.word	0x0800a32d

0800a3f8 <__sfmoreglue>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	2268      	movs	r2, #104	; 0x68
 800a3fc:	1e4d      	subs	r5, r1, #1
 800a3fe:	4355      	muls	r5, r2
 800a400:	460e      	mov	r6, r1
 800a402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a406:	f7ff fa65 	bl	80098d4 <_malloc_r>
 800a40a:	4604      	mov	r4, r0
 800a40c:	b140      	cbz	r0, 800a420 <__sfmoreglue+0x28>
 800a40e:	2100      	movs	r1, #0
 800a410:	e9c0 1600 	strd	r1, r6, [r0]
 800a414:	300c      	adds	r0, #12
 800a416:	60a0      	str	r0, [r4, #8]
 800a418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a41c:	f7fd fb2c 	bl	8007a78 <memset>
 800a420:	4620      	mov	r0, r4
 800a422:	bd70      	pop	{r4, r5, r6, pc}

0800a424 <__sfp_lock_acquire>:
 800a424:	4801      	ldr	r0, [pc, #4]	; (800a42c <__sfp_lock_acquire+0x8>)
 800a426:	f000 b8b3 	b.w	800a590 <__retarget_lock_acquire_recursive>
 800a42a:	bf00      	nop
 800a42c:	200007fd 	.word	0x200007fd

0800a430 <__sfp_lock_release>:
 800a430:	4801      	ldr	r0, [pc, #4]	; (800a438 <__sfp_lock_release+0x8>)
 800a432:	f000 b8ae 	b.w	800a592 <__retarget_lock_release_recursive>
 800a436:	bf00      	nop
 800a438:	200007fd 	.word	0x200007fd

0800a43c <__sinit_lock_acquire>:
 800a43c:	4801      	ldr	r0, [pc, #4]	; (800a444 <__sinit_lock_acquire+0x8>)
 800a43e:	f000 b8a7 	b.w	800a590 <__retarget_lock_acquire_recursive>
 800a442:	bf00      	nop
 800a444:	200007fe 	.word	0x200007fe

0800a448 <__sinit_lock_release>:
 800a448:	4801      	ldr	r0, [pc, #4]	; (800a450 <__sinit_lock_release+0x8>)
 800a44a:	f000 b8a2 	b.w	800a592 <__retarget_lock_release_recursive>
 800a44e:	bf00      	nop
 800a450:	200007fe 	.word	0x200007fe

0800a454 <__sinit>:
 800a454:	b510      	push	{r4, lr}
 800a456:	4604      	mov	r4, r0
 800a458:	f7ff fff0 	bl	800a43c <__sinit_lock_acquire>
 800a45c:	69a3      	ldr	r3, [r4, #24]
 800a45e:	b11b      	cbz	r3, 800a468 <__sinit+0x14>
 800a460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a464:	f7ff bff0 	b.w	800a448 <__sinit_lock_release>
 800a468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a46c:	6523      	str	r3, [r4, #80]	; 0x50
 800a46e:	4b13      	ldr	r3, [pc, #76]	; (800a4bc <__sinit+0x68>)
 800a470:	4a13      	ldr	r2, [pc, #76]	; (800a4c0 <__sinit+0x6c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	62a2      	str	r2, [r4, #40]	; 0x28
 800a476:	42a3      	cmp	r3, r4
 800a478:	bf04      	itt	eq
 800a47a:	2301      	moveq	r3, #1
 800a47c:	61a3      	streq	r3, [r4, #24]
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 f820 	bl	800a4c4 <__sfp>
 800a484:	6060      	str	r0, [r4, #4]
 800a486:	4620      	mov	r0, r4
 800a488:	f000 f81c 	bl	800a4c4 <__sfp>
 800a48c:	60a0      	str	r0, [r4, #8]
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 f818 	bl	800a4c4 <__sfp>
 800a494:	2200      	movs	r2, #0
 800a496:	60e0      	str	r0, [r4, #12]
 800a498:	2104      	movs	r1, #4
 800a49a:	6860      	ldr	r0, [r4, #4]
 800a49c:	f7ff ff82 	bl	800a3a4 <std>
 800a4a0:	68a0      	ldr	r0, [r4, #8]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	2109      	movs	r1, #9
 800a4a6:	f7ff ff7d 	bl	800a3a4 <std>
 800a4aa:	68e0      	ldr	r0, [r4, #12]
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	2112      	movs	r1, #18
 800a4b0:	f7ff ff78 	bl	800a3a4 <std>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	61a3      	str	r3, [r4, #24]
 800a4b8:	e7d2      	b.n	800a460 <__sinit+0xc>
 800a4ba:	bf00      	nop
 800a4bc:	0800b5dc 	.word	0x0800b5dc
 800a4c0:	0800a3ed 	.word	0x0800a3ed

0800a4c4 <__sfp>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	f7ff ffac 	bl	800a424 <__sfp_lock_acquire>
 800a4cc:	4b1e      	ldr	r3, [pc, #120]	; (800a548 <__sfp+0x84>)
 800a4ce:	681e      	ldr	r6, [r3, #0]
 800a4d0:	69b3      	ldr	r3, [r6, #24]
 800a4d2:	b913      	cbnz	r3, 800a4da <__sfp+0x16>
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f7ff ffbd 	bl	800a454 <__sinit>
 800a4da:	3648      	adds	r6, #72	; 0x48
 800a4dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	d503      	bpl.n	800a4ec <__sfp+0x28>
 800a4e4:	6833      	ldr	r3, [r6, #0]
 800a4e6:	b30b      	cbz	r3, 800a52c <__sfp+0x68>
 800a4e8:	6836      	ldr	r6, [r6, #0]
 800a4ea:	e7f7      	b.n	800a4dc <__sfp+0x18>
 800a4ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4f0:	b9d5      	cbnz	r5, 800a528 <__sfp+0x64>
 800a4f2:	4b16      	ldr	r3, [pc, #88]	; (800a54c <__sfp+0x88>)
 800a4f4:	60e3      	str	r3, [r4, #12]
 800a4f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4fa:	6665      	str	r5, [r4, #100]	; 0x64
 800a4fc:	f000 f847 	bl	800a58e <__retarget_lock_init_recursive>
 800a500:	f7ff ff96 	bl	800a430 <__sfp_lock_release>
 800a504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a50c:	6025      	str	r5, [r4, #0]
 800a50e:	61a5      	str	r5, [r4, #24]
 800a510:	2208      	movs	r2, #8
 800a512:	4629      	mov	r1, r5
 800a514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a518:	f7fd faae 	bl	8007a78 <memset>
 800a51c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a524:	4620      	mov	r0, r4
 800a526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a528:	3468      	adds	r4, #104	; 0x68
 800a52a:	e7d9      	b.n	800a4e0 <__sfp+0x1c>
 800a52c:	2104      	movs	r1, #4
 800a52e:	4638      	mov	r0, r7
 800a530:	f7ff ff62 	bl	800a3f8 <__sfmoreglue>
 800a534:	4604      	mov	r4, r0
 800a536:	6030      	str	r0, [r6, #0]
 800a538:	2800      	cmp	r0, #0
 800a53a:	d1d5      	bne.n	800a4e8 <__sfp+0x24>
 800a53c:	f7ff ff78 	bl	800a430 <__sfp_lock_release>
 800a540:	230c      	movs	r3, #12
 800a542:	603b      	str	r3, [r7, #0]
 800a544:	e7ee      	b.n	800a524 <__sfp+0x60>
 800a546:	bf00      	nop
 800a548:	0800b5dc 	.word	0x0800b5dc
 800a54c:	ffff0001 	.word	0xffff0001

0800a550 <_fwalk_reent>:
 800a550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a554:	4606      	mov	r6, r0
 800a556:	4688      	mov	r8, r1
 800a558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a55c:	2700      	movs	r7, #0
 800a55e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a562:	f1b9 0901 	subs.w	r9, r9, #1
 800a566:	d505      	bpl.n	800a574 <_fwalk_reent+0x24>
 800a568:	6824      	ldr	r4, [r4, #0]
 800a56a:	2c00      	cmp	r4, #0
 800a56c:	d1f7      	bne.n	800a55e <_fwalk_reent+0xe>
 800a56e:	4638      	mov	r0, r7
 800a570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a574:	89ab      	ldrh	r3, [r5, #12]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d907      	bls.n	800a58a <_fwalk_reent+0x3a>
 800a57a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a57e:	3301      	adds	r3, #1
 800a580:	d003      	beq.n	800a58a <_fwalk_reent+0x3a>
 800a582:	4629      	mov	r1, r5
 800a584:	4630      	mov	r0, r6
 800a586:	47c0      	blx	r8
 800a588:	4307      	orrs	r7, r0
 800a58a:	3568      	adds	r5, #104	; 0x68
 800a58c:	e7e9      	b.n	800a562 <_fwalk_reent+0x12>

0800a58e <__retarget_lock_init_recursive>:
 800a58e:	4770      	bx	lr

0800a590 <__retarget_lock_acquire_recursive>:
 800a590:	4770      	bx	lr

0800a592 <__retarget_lock_release_recursive>:
 800a592:	4770      	bx	lr

0800a594 <__swhatbuf_r>:
 800a594:	b570      	push	{r4, r5, r6, lr}
 800a596:	460e      	mov	r6, r1
 800a598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59c:	2900      	cmp	r1, #0
 800a59e:	b096      	sub	sp, #88	; 0x58
 800a5a0:	4614      	mov	r4, r2
 800a5a2:	461d      	mov	r5, r3
 800a5a4:	da08      	bge.n	800a5b8 <__swhatbuf_r+0x24>
 800a5a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	602a      	str	r2, [r5, #0]
 800a5ae:	061a      	lsls	r2, r3, #24
 800a5b0:	d410      	bmi.n	800a5d4 <__swhatbuf_r+0x40>
 800a5b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5b6:	e00e      	b.n	800a5d6 <__swhatbuf_r+0x42>
 800a5b8:	466a      	mov	r2, sp
 800a5ba:	f000 f903 	bl	800a7c4 <_fstat_r>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	dbf1      	blt.n	800a5a6 <__swhatbuf_r+0x12>
 800a5c2:	9a01      	ldr	r2, [sp, #4]
 800a5c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5cc:	425a      	negs	r2, r3
 800a5ce:	415a      	adcs	r2, r3
 800a5d0:	602a      	str	r2, [r5, #0]
 800a5d2:	e7ee      	b.n	800a5b2 <__swhatbuf_r+0x1e>
 800a5d4:	2340      	movs	r3, #64	; 0x40
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	b016      	add	sp, #88	; 0x58
 800a5dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a5e0 <__smakebuf_r>:
 800a5e0:	898b      	ldrh	r3, [r1, #12]
 800a5e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5e4:	079d      	lsls	r5, r3, #30
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	d507      	bpl.n	800a5fc <__smakebuf_r+0x1c>
 800a5ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	6123      	str	r3, [r4, #16]
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	6163      	str	r3, [r4, #20]
 800a5f8:	b002      	add	sp, #8
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	ab01      	add	r3, sp, #4
 800a5fe:	466a      	mov	r2, sp
 800a600:	f7ff ffc8 	bl	800a594 <__swhatbuf_r>
 800a604:	9900      	ldr	r1, [sp, #0]
 800a606:	4605      	mov	r5, r0
 800a608:	4630      	mov	r0, r6
 800a60a:	f7ff f963 	bl	80098d4 <_malloc_r>
 800a60e:	b948      	cbnz	r0, 800a624 <__smakebuf_r+0x44>
 800a610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a614:	059a      	lsls	r2, r3, #22
 800a616:	d4ef      	bmi.n	800a5f8 <__smakebuf_r+0x18>
 800a618:	f023 0303 	bic.w	r3, r3, #3
 800a61c:	f043 0302 	orr.w	r3, r3, #2
 800a620:	81a3      	strh	r3, [r4, #12]
 800a622:	e7e3      	b.n	800a5ec <__smakebuf_r+0xc>
 800a624:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <__smakebuf_r+0x7c>)
 800a626:	62b3      	str	r3, [r6, #40]	; 0x28
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	6020      	str	r0, [r4, #0]
 800a62c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	9b00      	ldr	r3, [sp, #0]
 800a634:	6163      	str	r3, [r4, #20]
 800a636:	9b01      	ldr	r3, [sp, #4]
 800a638:	6120      	str	r0, [r4, #16]
 800a63a:	b15b      	cbz	r3, 800a654 <__smakebuf_r+0x74>
 800a63c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a640:	4630      	mov	r0, r6
 800a642:	f000 f8d1 	bl	800a7e8 <_isatty_r>
 800a646:	b128      	cbz	r0, 800a654 <__smakebuf_r+0x74>
 800a648:	89a3      	ldrh	r3, [r4, #12]
 800a64a:	f023 0303 	bic.w	r3, r3, #3
 800a64e:	f043 0301 	orr.w	r3, r3, #1
 800a652:	81a3      	strh	r3, [r4, #12]
 800a654:	89a0      	ldrh	r0, [r4, #12]
 800a656:	4305      	orrs	r5, r0
 800a658:	81a5      	strh	r5, [r4, #12]
 800a65a:	e7cd      	b.n	800a5f8 <__smakebuf_r+0x18>
 800a65c:	0800a3ed 	.word	0x0800a3ed

0800a660 <_malloc_usable_size_r>:
 800a660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a664:	1f18      	subs	r0, r3, #4
 800a666:	2b00      	cmp	r3, #0
 800a668:	bfbc      	itt	lt
 800a66a:	580b      	ldrlt	r3, [r1, r0]
 800a66c:	18c0      	addlt	r0, r0, r3
 800a66e:	4770      	bx	lr

0800a670 <_raise_r>:
 800a670:	291f      	cmp	r1, #31
 800a672:	b538      	push	{r3, r4, r5, lr}
 800a674:	4604      	mov	r4, r0
 800a676:	460d      	mov	r5, r1
 800a678:	d904      	bls.n	800a684 <_raise_r+0x14>
 800a67a:	2316      	movs	r3, #22
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	f04f 30ff 	mov.w	r0, #4294967295
 800a682:	bd38      	pop	{r3, r4, r5, pc}
 800a684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a686:	b112      	cbz	r2, 800a68e <_raise_r+0x1e>
 800a688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a68c:	b94b      	cbnz	r3, 800a6a2 <_raise_r+0x32>
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 f830 	bl	800a6f4 <_getpid_r>
 800a694:	462a      	mov	r2, r5
 800a696:	4601      	mov	r1, r0
 800a698:	4620      	mov	r0, r4
 800a69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a69e:	f000 b817 	b.w	800a6d0 <_kill_r>
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d00a      	beq.n	800a6bc <_raise_r+0x4c>
 800a6a6:	1c59      	adds	r1, r3, #1
 800a6a8:	d103      	bne.n	800a6b2 <_raise_r+0x42>
 800a6aa:	2316      	movs	r3, #22
 800a6ac:	6003      	str	r3, [r0, #0]
 800a6ae:	2001      	movs	r0, #1
 800a6b0:	e7e7      	b.n	800a682 <_raise_r+0x12>
 800a6b2:	2400      	movs	r4, #0
 800a6b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	4798      	blx	r3
 800a6bc:	2000      	movs	r0, #0
 800a6be:	e7e0      	b.n	800a682 <_raise_r+0x12>

0800a6c0 <raise>:
 800a6c0:	4b02      	ldr	r3, [pc, #8]	; (800a6cc <raise+0xc>)
 800a6c2:	4601      	mov	r1, r0
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	f7ff bfd3 	b.w	800a670 <_raise_r>
 800a6ca:	bf00      	nop
 800a6cc:	2000000c 	.word	0x2000000c

0800a6d0 <_kill_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4d07      	ldr	r5, [pc, #28]	; (800a6f0 <_kill_r+0x20>)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	4611      	mov	r1, r2
 800a6dc:	602b      	str	r3, [r5, #0]
 800a6de:	f7f6 ff7d 	bl	80015dc <_kill>
 800a6e2:	1c43      	adds	r3, r0, #1
 800a6e4:	d102      	bne.n	800a6ec <_kill_r+0x1c>
 800a6e6:	682b      	ldr	r3, [r5, #0]
 800a6e8:	b103      	cbz	r3, 800a6ec <_kill_r+0x1c>
 800a6ea:	6023      	str	r3, [r4, #0]
 800a6ec:	bd38      	pop	{r3, r4, r5, pc}
 800a6ee:	bf00      	nop
 800a6f0:	200007f8 	.word	0x200007f8

0800a6f4 <_getpid_r>:
 800a6f4:	f7f6 bf6a 	b.w	80015cc <_getpid>

0800a6f8 <__sread>:
 800a6f8:	b510      	push	{r4, lr}
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a700:	f000 f894 	bl	800a82c <_read_r>
 800a704:	2800      	cmp	r0, #0
 800a706:	bfab      	itete	ge
 800a708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a70a:	89a3      	ldrhlt	r3, [r4, #12]
 800a70c:	181b      	addge	r3, r3, r0
 800a70e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a712:	bfac      	ite	ge
 800a714:	6563      	strge	r3, [r4, #84]	; 0x54
 800a716:	81a3      	strhlt	r3, [r4, #12]
 800a718:	bd10      	pop	{r4, pc}

0800a71a <__swrite>:
 800a71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71e:	461f      	mov	r7, r3
 800a720:	898b      	ldrh	r3, [r1, #12]
 800a722:	05db      	lsls	r3, r3, #23
 800a724:	4605      	mov	r5, r0
 800a726:	460c      	mov	r4, r1
 800a728:	4616      	mov	r6, r2
 800a72a:	d505      	bpl.n	800a738 <__swrite+0x1e>
 800a72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a730:	2302      	movs	r3, #2
 800a732:	2200      	movs	r2, #0
 800a734:	f000 f868 	bl	800a808 <_lseek_r>
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a73e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a742:	81a3      	strh	r3, [r4, #12]
 800a744:	4632      	mov	r2, r6
 800a746:	463b      	mov	r3, r7
 800a748:	4628      	mov	r0, r5
 800a74a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a74e:	f000 b817 	b.w	800a780 <_write_r>

0800a752 <__sseek>:
 800a752:	b510      	push	{r4, lr}
 800a754:	460c      	mov	r4, r1
 800a756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a75a:	f000 f855 	bl	800a808 <_lseek_r>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	89a3      	ldrh	r3, [r4, #12]
 800a762:	bf15      	itete	ne
 800a764:	6560      	strne	r0, [r4, #84]	; 0x54
 800a766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a76a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a76e:	81a3      	strheq	r3, [r4, #12]
 800a770:	bf18      	it	ne
 800a772:	81a3      	strhne	r3, [r4, #12]
 800a774:	bd10      	pop	{r4, pc}

0800a776 <__sclose>:
 800a776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a77a:	f000 b813 	b.w	800a7a4 <_close_r>
	...

0800a780 <_write_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4d07      	ldr	r5, [pc, #28]	; (800a7a0 <_write_r+0x20>)
 800a784:	4604      	mov	r4, r0
 800a786:	4608      	mov	r0, r1
 800a788:	4611      	mov	r1, r2
 800a78a:	2200      	movs	r2, #0
 800a78c:	602a      	str	r2, [r5, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	f7f6 ff5b 	bl	800164a <_write>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d102      	bne.n	800a79e <_write_r+0x1e>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	b103      	cbz	r3, 800a79e <_write_r+0x1e>
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	bd38      	pop	{r3, r4, r5, pc}
 800a7a0:	200007f8 	.word	0x200007f8

0800a7a4 <_close_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4d06      	ldr	r5, [pc, #24]	; (800a7c0 <_close_r+0x1c>)
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	602b      	str	r3, [r5, #0]
 800a7b0:	f7f6 ff67 	bl	8001682 <_close>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_close_r+0x1a>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_close_r+0x1a>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	200007f8 	.word	0x200007f8

0800a7c4 <_fstat_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d07      	ldr	r5, [pc, #28]	; (800a7e4 <_fstat_r+0x20>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	602b      	str	r3, [r5, #0]
 800a7d2:	f7f6 ff62 	bl	800169a <_fstat>
 800a7d6:	1c43      	adds	r3, r0, #1
 800a7d8:	d102      	bne.n	800a7e0 <_fstat_r+0x1c>
 800a7da:	682b      	ldr	r3, [r5, #0]
 800a7dc:	b103      	cbz	r3, 800a7e0 <_fstat_r+0x1c>
 800a7de:	6023      	str	r3, [r4, #0]
 800a7e0:	bd38      	pop	{r3, r4, r5, pc}
 800a7e2:	bf00      	nop
 800a7e4:	200007f8 	.word	0x200007f8

0800a7e8 <_isatty_r>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	4d06      	ldr	r5, [pc, #24]	; (800a804 <_isatty_r+0x1c>)
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	602b      	str	r3, [r5, #0]
 800a7f4:	f7f6 ff61 	bl	80016ba <_isatty>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_isatty_r+0x1a>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_isatty_r+0x1a>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	200007f8 	.word	0x200007f8

0800a808 <_lseek_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d07      	ldr	r5, [pc, #28]	; (800a828 <_lseek_r+0x20>)
 800a80c:	4604      	mov	r4, r0
 800a80e:	4608      	mov	r0, r1
 800a810:	4611      	mov	r1, r2
 800a812:	2200      	movs	r2, #0
 800a814:	602a      	str	r2, [r5, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	f7f6 ff5a 	bl	80016d0 <_lseek>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_lseek_r+0x1e>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_lseek_r+0x1e>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	200007f8 	.word	0x200007f8

0800a82c <_read_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4d07      	ldr	r5, [pc, #28]	; (800a84c <_read_r+0x20>)
 800a830:	4604      	mov	r4, r0
 800a832:	4608      	mov	r0, r1
 800a834:	4611      	mov	r1, r2
 800a836:	2200      	movs	r2, #0
 800a838:	602a      	str	r2, [r5, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	f7f6 fee8 	bl	8001610 <_read>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	d102      	bne.n	800a84a <_read_r+0x1e>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	b103      	cbz	r3, 800a84a <_read_r+0x1e>
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	200007f8 	.word	0x200007f8

0800a850 <_init>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	bf00      	nop
 800a854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a856:	bc08      	pop	{r3}
 800a858:	469e      	mov	lr, r3
 800a85a:	4770      	bx	lr

0800a85c <_fini>:
 800a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85e:	bf00      	nop
 800a860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a862:	bc08      	pop	{r3}
 800a864:	469e      	mov	lr, r3
 800a866:	4770      	bx	lr
