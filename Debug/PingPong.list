
PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000128c  0800cc38  0800cc38  0001cc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dec4  0800dec4  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800dec4  0800dec4  0001dec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800decc  0800decc  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800decc  0800decc  0001decc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ded0  0800ded0  0001ded0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800ded4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020230  2**0
                  CONTENTS
 10 .bss          000006f0  20000230  20000230  00020230  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000920  20000920  00020230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015977  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000349f  00000000  00000000  00035bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  00039078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  0003a368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243c1  00000000  00000000  0003b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183c9  00000000  00000000  0005f8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1a82  00000000  00000000  00077c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001496ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f40  00000000  00000000  0014973c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc1c 	.word	0x0800cc1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	0800cc1c 	.word	0x0800cc1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_DMA_Init+0x3c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <MX_DMA_Init+0x3c>)
 8000f9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_DMA_Init+0x3c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f001 fbad 	bl	8002712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fb8:	200f      	movs	r0, #15
 8000fba:	f001 fbc6 	bl	800274a <HAL_NVIC_EnableIRQ>

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	4b80      	ldr	r3, [pc, #512]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a7f      	ldr	r2, [pc, #508]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b7d      	ldr	r3, [pc, #500]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	4b79      	ldr	r3, [pc, #484]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a78      	ldr	r2, [pc, #480]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b76      	ldr	r3, [pc, #472]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b72      	ldr	r3, [pc, #456]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a71      	ldr	r2, [pc, #452]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b6f      	ldr	r3, [pc, #444]	; (80011e8 <MX_GPIO_Init+0x21c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b6b      	ldr	r3, [pc, #428]	; (80011e8 <MX_GPIO_Init+0x21c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a6a      	ldr	r2, [pc, #424]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b68      	ldr	r3, [pc, #416]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b64      	ldr	r3, [pc, #400]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a63      	ldr	r2, [pc, #396]	; (80011e8 <MX_GPIO_Init+0x21c>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b61      	ldr	r3, [pc, #388]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b5d      	ldr	r3, [pc, #372]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a5c      	ldr	r2, [pc, #368]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b5a      	ldr	r3, [pc, #360]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2101      	movs	r1, #1
 800108e:	4857      	ldr	r0, [pc, #348]	; (80011ec <MX_GPIO_Init+0x220>)
 8001090:	f002 f8ca 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RES_Pin|LCD_CMD_Pin|SPI2_CS_Pin|SENSOR_TRIG_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 41b4 	mov.w	r1, #23040	; 0x5a00
 800109a:	4855      	ldr	r0, [pc, #340]	; (80011f0 <MX_GPIO_Init+0x224>)
 800109c:	f002 f8c4 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010a6:	4853      	ldr	r0, [pc, #332]	; (80011f4 <MX_GPIO_Init+0x228>)
 80010a8:	f002 f8be 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	484a      	ldr	r0, [pc, #296]	; (80011ec <MX_GPIO_Init+0x220>)
 80010c4:	f001 fefc 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	4846      	ldr	r0, [pc, #280]	; (80011f8 <MX_GPIO_Init+0x22c>)
 80010de:	f001 feef 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B_NEXT_Pin|B_PREV_Pin;
 80010e2:	2306      	movs	r3, #6
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010e6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4840      	ldr	r0, [pc, #256]	; (80011f8 <MX_GPIO_Init+0x22c>)
 80010f8:	f001 fee2 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_ENC_Pin;
 80010fc:	2308      	movs	r3, #8
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001100:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B_ENC_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	4839      	ldr	r0, [pc, #228]	; (80011f8 <MX_GPIO_Init+0x22c>)
 8001112:	f001 fed5 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001116:	2304      	movs	r3, #4
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4831      	ldr	r0, [pc, #196]	; (80011f0 <MX_GPIO_Init+0x224>)
 800112a:	f001 fec9 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_CMD_Pin|SPI2_CS_Pin|SENSOR_TRIG_Pin;
 800112e:	f44f 43b4 	mov.w	r3, #23040	; 0x5a00
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	482a      	ldr	r0, [pc, #168]	; (80011f0 <MX_GPIO_Init+0x224>)
 8001148:	f001 feba 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800114c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4823      	ldr	r0, [pc, #140]	; (80011f4 <MX_GPIO_Init+0x228>)
 8001166:	f001 feab 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800116a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	481e      	ldr	r0, [pc, #120]	; (80011f8 <MX_GPIO_Init+0x22c>)
 8001180:	f001 fe9e 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001184:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001196:	230a      	movs	r3, #10
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4815      	ldr	r0, [pc, #84]	; (80011f8 <MX_GPIO_Init+0x22c>)
 80011a2:	f001 fe8d 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011a6:	2320      	movs	r3, #32
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	480e      	ldr	r0, [pc, #56]	; (80011f4 <MX_GPIO_Init+0x228>)
 80011ba:	f001 fe81 	bl	8002ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2007      	movs	r0, #7
 80011c4:	f001 faa5 	bl	8002712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011c8:	2007      	movs	r0, #7
 80011ca:	f001 fabe 	bl	800274a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2008      	movs	r0, #8
 80011d4:	f001 fa9d 	bl	8002712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011d8:	2008      	movs	r0, #8
 80011da:	f001 fab6 	bl	800274a <HAL_NVIC_EnableIRQ>

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40020000 	.word	0x40020000

080011fc <HAL_I2C_MspInit>:
  /* USER CODE END I2C1_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a21      	ldr	r2, [pc, #132]	; (80012a0 <HAL_I2C_MspInit+0xa4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d13b      	bne.n	8001296 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800123a:	23c0      	movs	r3, #192	; 0xc0
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123e:	2312      	movs	r3, #18
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800124a:	2304      	movs	r3, #4
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <HAL_I2C_MspInit+0xac>)
 8001256:	f001 fe33 	bl	8002ec0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 8001264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_I2C_MspInit+0xa8>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	201f      	movs	r0, #31
 800127c:	f001 fa49 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001280:	201f      	movs	r0, #31
 8001282:	f001 fa62 	bl	800274a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2020      	movs	r0, #32
 800128c:	f001 fa41 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001290:	2020      	movs	r0, #32
 8001292:	f001 fa5a 	bl	800274a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	; 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40005400 	.word	0x40005400
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f001 f8be 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f82a 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f7ff fe88 	bl	8000fcc <MX_GPIO_Init>
  MX_DMA_Init();
 80012bc:	f7ff fe66 	bl	8000f8c <MX_DMA_Init>
  MX_TIM3_Init();
 80012c0:	f000 ff44 	bl	800214c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SM.dstState = ST_INIT;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <main+0x58>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	709a      	strb	r2, [r3, #2]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  SM.srcState = SM.dstState;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <main+0x58>)
 80012cc:	789a      	ldrb	r2, [r3, #2]
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <main+0x58>)
 80012d0:	701a      	strb	r2, [r3, #0]
	  if(StateHandler[SM.srcState] != NULL)
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <main+0x58>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <main+0x5c>)
 80012da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <main+0x4e>
	  {
		  SM.dstState = (StateHandler[SM.srcState])();
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <main+0x58>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <main+0x5c>)
 80012ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ee:	4798      	blx	r3
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <main+0x58>)
 80012f6:	709a      	strb	r2, [r3, #2]
	  SM.srcState = SM.dstState;
 80012f8:	e7e7      	b.n	80012ca <main+0x1e>
	  }
	  else
	  {
		  // Invalid code
		  break;
 80012fa:	bf00      	nop
 80012fc:	2300      	movs	r3, #0



  }
  /* USER CODE END 3 */
}
 80012fe:	4618      	mov	r0, r3
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200002e8 	.word	0x200002e8
 8001308:	0800cd8c 	.word	0x0800cd8c

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b094      	sub	sp, #80	; 0x50
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	2230      	movs	r2, #48	; 0x30
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f008 fda2 	bl	8009e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <SystemClock_Config+0xcc>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <SystemClock_Config+0xcc>)
 800133a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133e:	6413      	str	r3, [r2, #64]	; 0x40
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <SystemClock_Config+0xcc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <SystemClock_Config+0xd0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a21      	ldr	r2, [pc, #132]	; (80013dc <SystemClock_Config+0xd0>)
 8001356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <SystemClock_Config+0xd0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001368:	2301      	movs	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001376:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800137c:	2308      	movs	r3, #8
 800137e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001380:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001384:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800138a:	2307      	movs	r3, #7
 800138c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	4618      	mov	r0, r3
 8001394:	f004 fc04 	bl	8005ba0 <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800139e:	f000 fcd1 	bl	8001d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2302      	movs	r3, #2
 80013a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	2105      	movs	r1, #5
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 fe65 	bl	8006090 <HAL_RCC_ClockConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013cc:	f000 fcba 	bl	8001d44 <Error_Handler>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3750      	adds	r7, #80	; 0x50
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <f_sm_Error>:

/* USER CODE BEGIN 4 */

e_sm_State f_sm_Error()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	f_lcd_ClearAll();
 80013e4:	f007 fdb2 	bl	8008f4c <f_lcd_ClearAll>
	f_gui_DrawHeading(SM.srcState, LCD_ERROR);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <f_sm_Error+0x34>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 fc04 	bl	8008bfc <f_gui_DrawHeading>
	f_lcd_WriteTxt(0, 32, "ERROR!", &font_msSansSerif_14);
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <f_sm_Error+0x38>)
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <f_sm_Error+0x3c>)
 80013f8:	2120      	movs	r1, #32
 80013fa:	2000      	movs	r0, #0
 80013fc:	f007 fdbd 	bl	8008f7a <f_lcd_WriteTxt>

	while(1)
	{
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001404:	4806      	ldr	r0, [pc, #24]	; (8001420 <f_sm_Error+0x40>)
 8001406:	f001 ff28 	bl	800325a <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800140a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800140e:	f001 f881 	bl	8002514 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001412:	e7f5      	b.n	8001400 <f_sm_Error+0x20>
 8001414:	200002e8 	.word	0x200002e8
 8001418:	0800dae0 	.word	0x0800dae0
 800141c:	0800cc38 	.word	0x0800cc38
 8001420:	40020c00 	.word	0x40020c00

08001424 <f_sm_Init>:

	return ST_ERROR;
}

e_sm_State f_sm_Init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
		"Init test",
		"Test ok",
		"Test failure"
	};
	e_sm_State nextState;
	uint8_t isOkCounter = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	71bb      	strb	r3, [r7, #6]
	//TODO:: WATCHDOG ENABLE;
	//enable all basic peripherals
	f_lcd_Init();
 800142e:	f007 fd35 	bl	8008e9c <f_lcd_Init>
	f_work_MotorInitTimer();
 8001432:	f008 fa57 	bl	80098e4 <f_work_MotorInitTimer>
	f_work_SensorInitTimer();
 8001436:	f008 fbd7 	bl	8009be8 <f_work_SensorInitTimer>
	f_ina219_Init();
 800143a:	f007 fca0 	bl	8008d7e <f_ina219_Init>
	//enable encoder timer
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <f_sm_Init+0x104>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
	//HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
	HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 8001446:	2100      	movs	r1, #0
 8001448:	4837      	ldr	r0, [pc, #220]	; (8001528 <f_sm_Init+0x104>)
 800144a:	f006 f865 	bl	8007518 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 800144e:	2104      	movs	r1, #4
 8001450:	4835      	ldr	r0, [pc, #212]	; (8001528 <f_sm_Init+0x104>)
 8001452:	f006 f861 	bl	8007518 <HAL_TIM_IC_Start>


	f_lcd_ClearAll();
 8001456:	f007 fd79 	bl	8008f4c <f_lcd_ClearAll>
	f_gui_DrawHeading(SM.dstState, LCD_NOPAGE);
 800145a:	4b34      	ldr	r3, [pc, #208]	; (800152c <f_sm_Init+0x108>)
 800145c:	789b      	ldrb	r3, [r3, #2]
 800145e:	2106      	movs	r1, #6
 8001460:	4618      	mov	r0, r3
 8001462:	f007 fbcb 	bl	8008bfc <f_gui_DrawHeading>
	f_lcd_WriteTxt(0, 32, infoTxt[0], &font_msSansSerif_14);
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <f_sm_Init+0x10c>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <f_sm_Init+0x110>)
 800146c:	2120      	movs	r1, #32
 800146e:	2000      	movs	r0, #0
 8001470:	f007 fd83 	bl	8008f7a <f_lcd_WriteTxt>
	HAL_Delay(500);
 8001474:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001478:	f001 f84c 	bl	8002514 <HAL_Delay>

	//check motor on idle
	f_work_MotorSet(0);
 800147c:	2000      	movs	r0, #0
 800147e:	f008 fa77 	bl	8009970 <f_work_MotorSet>
	isOkCounter += f_work_MotorTest(0);
 8001482:	2000      	movs	r0, #0
 8001484:	f008 faac 	bl	80099e0 <f_work_MotorTest>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	4413      	add	r3, r2
 8001490:	71bb      	strb	r3, [r7, #6]

	//check motor on 50%
	f_work_MotorSetVelocity(MAX_MOTOR_PWM/2);
 8001492:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001496:	f008 fa83 	bl	80099a0 <f_work_MotorSetVelocity>
	f_work_MotorSet(1);
 800149a:	2001      	movs	r0, #1
 800149c:	f008 fa68 	bl	8009970 <f_work_MotorSet>
	HAL_Delay(2000);
 80014a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014a4:	f001 f836 	bl	8002514 <HAL_Delay>
	isOkCounter += f_work_MotorTest(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f008 fa99 	bl	80099e0 <f_work_MotorTest>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	79bb      	ldrb	r3, [r7, #6]
 80014b4:	4413      	add	r3, r2
 80014b6:	71bb      	strb	r3, [r7, #6]
	f_work_MotorSet(0);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f008 fa59 	bl	8009970 <f_work_MotorSet>

	//check is distance is not 0
	f_work_sensorTriggerMeasure();
 80014be:	f008 fbbf 	bl	8009c40 <f_work_sensorTriggerMeasure>
	while(!sensorMeasureDone)
 80014c2:	bf00      	nop
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <f_sm_Init+0x114>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	f083 0301 	eor.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f8      	bne.n	80014c4 <f_sm_Init+0xa0>
		;
	uint16_t distance = f_work_sensorGetLastMeasure();
 80014d2:	f008 fbdf 	bl	8009c94 <f_work_sensorGetLastMeasure>
 80014d6:	4603      	mov	r3, r0
 80014d8:	80bb      	strh	r3, [r7, #4]
	if(distance > 0) isOkCounter++;
 80014da:	88bb      	ldrh	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <f_sm_Init+0xc2>
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	3301      	adds	r3, #1
 80014e4:	71bb      	strb	r3, [r7, #6]

	f_lcd_ClearAll();
 80014e6:	f007 fd31 	bl	8008f4c <f_lcd_ClearAll>
	if(isOkCounter == 3)
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d109      	bne.n	8001504 <f_sm_Init+0xe0>
	{
		f_lcd_WriteTxt(0, 32, infoTxt[1], &font_msSansSerif_14);
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <f_sm_Init+0x10c>)
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <f_sm_Init+0x110>)
 80014f6:	2120      	movs	r1, #32
 80014f8:	2000      	movs	r0, #0
 80014fa:	f007 fd3e 	bl	8008f7a <f_lcd_WriteTxt>
		nextState = ST_IDLE;
 80014fe:	2302      	movs	r3, #2
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	e008      	b.n	8001516 <f_sm_Init+0xf2>
	}
	else
	{
		f_lcd_WriteTxt(0, 32, infoTxt[2], &font_msSansSerif_14);
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <f_sm_Init+0x10c>)
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <f_sm_Init+0x110>)
 800150a:	2120      	movs	r1, #32
 800150c:	2000      	movs	r0, #0
 800150e:	f007 fd34 	bl	8008f7a <f_lcd_WriteTxt>
		nextState = ST_ERROR;
 8001512:	2300      	movs	r3, #0
 8001514:	71fb      	strb	r3, [r7, #7]
	}
	HAL_Delay(1500);
 8001516:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800151a:	f000 fffb 	bl	8002514 <HAL_Delay>

	return nextState;
 800151e:	79fb      	ldrb	r3, [r7, #7]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000428 	.word	0x20000428
 800152c:	200002e8 	.word	0x200002e8
 8001530:	20000000 	.word	0x20000000
 8001534:	0800dae0 	.word	0x0800dae0
 8001538:	2000090e 	.word	0x2000090e

0800153c <f_idle_GetEncoderInput>:

static uint16_t f_idle_GetEncoderInput()
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
	char txt[20];
	uint16_t lastVal;
	uint16_t *timerCounter = (uint16_t*)&htim3.Instance->CNT;
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <f_idle_GetEncoderInput+0x98>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3324      	adds	r3, #36	; 0x24
 8001548:	61bb      	str	r3, [r7, #24]
	*timerCounter = 0;
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	2200      	movs	r2, #0
 800154e:	801a      	strh	r2, [r3, #0]

	while(!eventFlag)
 8001550:	e031      	b.n	80015b6 <f_idle_GetEncoderInput+0x7a>
	{
		if(lastVal != *timerCounter)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	8bfa      	ldrh	r2, [r7, #30]
 8001558:	429a      	cmp	r2, r3
 800155a:	d02c      	beq.n	80015b6 <f_idle_GetEncoderInput+0x7a>
		{
			uint16_t tmpVal = *timerCounter/2;
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	82fb      	strh	r3, [r7, #22]
			sprintf(txt, "%2d.%02d", tmpVal/100, tmpVal%100);
 8001564:	8afb      	ldrh	r3, [r7, #22]
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <f_idle_GetEncoderInput+0x9c>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	b29b      	uxth	r3, r3
 8001570:	461c      	mov	r4, r3
 8001572:	8afb      	ldrh	r3, [r7, #22]
 8001574:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <f_idle_GetEncoderInput+0x9c>)
 8001576:	fba2 1203 	umull	r1, r2, r2, r3
 800157a:	0952      	lsrs	r2, r2, #5
 800157c:	2164      	movs	r1, #100	; 0x64
 800157e:	fb01 f202 	mul.w	r2, r1, r2
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	b29b      	uxth	r3, r3
 8001586:	4638      	mov	r0, r7
 8001588:	4622      	mov	r2, r4
 800158a:	4914      	ldr	r1, [pc, #80]	; (80015dc <f_idle_GetEncoderInput+0xa0>)
 800158c:	f009 f8dc 	bl	800a748 <siprintf>
			f_lcd_Clear(0, 128, 6);
 8001590:	2206      	movs	r2, #6
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	2000      	movs	r0, #0
 8001596:	f007 fca5 	bl	8008ee4 <f_lcd_Clear>
			f_lcd_Clear(0, 128, 7);
 800159a:	2207      	movs	r2, #7
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	2000      	movs	r0, #0
 80015a0:	f007 fca0 	bl	8008ee4 <f_lcd_Clear>
			f_lcd_WriteTxt(0, 48, txt, &font_msSansSerif_14);
 80015a4:	463a      	mov	r2, r7
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <f_idle_GetEncoderInput+0xa4>)
 80015a8:	2130      	movs	r1, #48	; 0x30
 80015aa:	2000      	movs	r0, #0
 80015ac:	f007 fce5 	bl	8008f7a <f_lcd_WriteTxt>
			lastVal = *timerCounter;
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	83fb      	strh	r3, [r7, #30]
	while(!eventFlag)
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <f_idle_GetEncoderInput+0xa8>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	f083 0301 	eor.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1c6      	bne.n	8001552 <f_idle_GetEncoderInput+0x16>
		}
	}
	return *timerCounter/2;
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	b29b      	uxth	r3, r3
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	20000428 	.word	0x20000428
 80015d8:	51eb851f 	.word	0x51eb851f
 80015dc:	0800cc40 	.word	0x0800cc40
 80015e0:	0800dae0 	.word	0x0800dae0
 80015e4:	200002ac 	.word	0x200002ac

080015e8 <f_sm_Idle>:

e_sm_State f_sm_Idle()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
		"Set P value:\0",
		"Set I value:\0",
		"Set D value:\0"
	};

	f_lcd_Clear(0, 128, 4);
 80015ee:	2204      	movs	r2, #4
 80015f0:	2180      	movs	r1, #128	; 0x80
 80015f2:	2000      	movs	r0, #0
 80015f4:	f007 fc76 	bl	8008ee4 <f_lcd_Clear>
	f_lcd_Clear(0, 128, 5);
 80015f8:	2205      	movs	r2, #5
 80015fa:	2180      	movs	r1, #128	; 0x80
 80015fc:	2000      	movs	r0, #0
 80015fe:	f007 fc71 	bl	8008ee4 <f_lcd_Clear>

	switch (Substate)
 8001602:	4b54      	ldr	r3, [pc, #336]	; (8001754 <f_sm_Idle+0x16c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d86e      	bhi.n	80016e8 <f_sm_Idle+0x100>
 800160a:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <f_sm_Idle+0x28>)
 800160c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001610:	08001621 	.word	0x08001621
 8001614:	0800164d 	.word	0x0800164d
 8001618:	08001679 	.word	0x08001679
 800161c:	080016a5 	.word	0x080016a5
	{
		case PREPARE:
			f_lcd_ClearAll();
 8001620:	f007 fc94 	bl	8008f4c <f_lcd_ClearAll>
			f_gui_DrawHeading(SM.srcState, LCD_INPUT);
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <f_sm_Idle+0x170>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2102      	movs	r1, #2
 800162a:	4618      	mov	r0, r3
 800162c:	f007 fae6 	bl	8008bfc <f_gui_DrawHeading>
			f_lcd_WriteTxt(0, 16, infoTxt[0], &font_msSansSerif_14);
 8001630:	4b4a      	ldr	r3, [pc, #296]	; (800175c <f_sm_Idle+0x174>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <f_sm_Idle+0x178>)
 8001636:	2110      	movs	r1, #16
 8001638:	2000      	movs	r0, #0
 800163a:	f007 fc9e 	bl	8008f7a <f_lcd_WriteTxt>
			Substate = SET_P;
 800163e:	4b45      	ldr	r3, [pc, #276]	; (8001754 <f_sm_Idle+0x16c>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
			SM.event = EV_NO_EVENT;
 8001644:	4b44      	ldr	r3, [pc, #272]	; (8001758 <f_sm_Idle+0x170>)
 8001646:	2201      	movs	r2, #1
 8001648:	705a      	strb	r2, [r3, #1]
			break;
 800164a:	e050      	b.n	80016ee <f_sm_Idle+0x106>

		case SET_P:
			f_lcd_WriteTxt(0, 32, infoTxt[1], &font_msSansSerif_14);
 800164c:	4b43      	ldr	r3, [pc, #268]	; (800175c <f_sm_Idle+0x174>)
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <f_sm_Idle+0x178>)
 8001652:	2120      	movs	r1, #32
 8001654:	2000      	movs	r0, #0
 8001656:	f007 fc90 	bl	8008f7a <f_lcd_WriteTxt>
			PidParam.Kp = (float)f_idle_GetEncoderInput()/100;
 800165a:	f7ff ff6f 	bl	800153c <f_idle_GetEncoderInput>
 800165e:	4603      	mov	r3, r0
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001668:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001764 <f_sm_Idle+0x17c>
 800166c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001670:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <f_sm_Idle+0x180>)
 8001672:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001676:	e03a      	b.n	80016ee <f_sm_Idle+0x106>

		case SET_I:
			f_lcd_WriteTxt(0, 32, infoTxt[2], &font_msSansSerif_14);
 8001678:	4b38      	ldr	r3, [pc, #224]	; (800175c <f_sm_Idle+0x174>)
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	4b38      	ldr	r3, [pc, #224]	; (8001760 <f_sm_Idle+0x178>)
 800167e:	2120      	movs	r1, #32
 8001680:	2000      	movs	r0, #0
 8001682:	f007 fc7a 	bl	8008f7a <f_lcd_WriteTxt>
			PidParam.Ki = (float)f_idle_GetEncoderInput()/100;
 8001686:	f7ff ff59 	bl	800153c <f_idle_GetEncoderInput>
 800168a:	4603      	mov	r3, r0
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001694:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001764 <f_sm_Idle+0x17c>
 8001698:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <f_sm_Idle+0x180>)
 800169e:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 80016a2:	e024      	b.n	80016ee <f_sm_Idle+0x106>

		case SET_D:
			f_lcd_WriteTxt(0, 32, infoTxt[3], &font_msSansSerif_14);
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <f_sm_Idle+0x174>)
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <f_sm_Idle+0x178>)
 80016aa:	2120      	movs	r1, #32
 80016ac:	2000      	movs	r0, #0
 80016ae:	f007 fc64 	bl	8008f7a <f_lcd_WriteTxt>
			PidParam.Kd = (float)f_idle_GetEncoderInput()/100;
 80016b2:	f7ff ff43 	bl	800153c <f_idle_GetEncoderInput>
 80016b6:	4603      	mov	r3, r0
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016c0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001764 <f_sm_Idle+0x17c>
 80016c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <f_sm_Idle+0x180>)
 80016ca:	edc3 7a02 	vstr	s15, [r3, #8]

			PidParam.I_maxRange = 1000;
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <f_sm_Idle+0x180>)
 80016d0:	4a26      	ldr	r2, [pc, #152]	; (800176c <f_sm_Idle+0x184>)
 80016d2:	611a      	str	r2, [r3, #16]
			PidParam.I_minRange = -1000;
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <f_sm_Idle+0x180>)
 80016d6:	4a26      	ldr	r2, [pc, #152]	; (8001770 <f_sm_Idle+0x188>)
 80016d8:	60da      	str	r2, [r3, #12]
			PidParam.maxRange = MAX_MOTOR_PWM/2;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <f_sm_Idle+0x180>)
 80016dc:	4a25      	ldr	r2, [pc, #148]	; (8001774 <f_sm_Idle+0x18c>)
 80016de:	619a      	str	r2, [r3, #24]
			PidParam.minRange = -(MAX_MOTOR_PWM/2);
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <f_sm_Idle+0x180>)
 80016e2:	4a25      	ldr	r2, [pc, #148]	; (8001778 <f_sm_Idle+0x190>)
 80016e4:	615a      	str	r2, [r3, #20]

			break;
 80016e6:	e002      	b.n	80016ee <f_sm_Idle+0x106>

		default:
			nextState = ST_ERROR;
 80016e8:	2300      	movs	r3, #0
 80016ea:	71fb      	strb	r3, [r7, #7]
			break;
 80016ec:	bf00      	nop
	}

	nextState = ST_IDLE;
 80016ee:	2302      	movs	r3, #2
 80016f0:	71fb      	strb	r3, [r7, #7]
	eventFlag = false;
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <f_sm_Idle+0x194>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
	if(SM.event == EV_BUTTON_A) Substate++;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <f_sm_Idle+0x170>)
 80016fa:	785b      	ldrb	r3, [r3, #1]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d106      	bne.n	800170e <f_sm_Idle+0x126>
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <f_sm_Idle+0x16c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <f_sm_Idle+0x16c>)
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e010      	b.n	8001730 <f_sm_Idle+0x148>
	else if(SM.event == EV_BUTTON_B) Substate--;
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <f_sm_Idle+0x170>)
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d106      	bne.n	8001724 <f_sm_Idle+0x13c>
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <f_sm_Idle+0x16c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	3b01      	subs	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <f_sm_Idle+0x16c>)
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e005      	b.n	8001730 <f_sm_Idle+0x148>
	else if(SM.event == EV_ERROR) nextState = ST_ERROR;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <f_sm_Idle+0x170>)
 8001726:	785b      	ldrb	r3, [r3, #1]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <f_sm_Idle+0x148>
 800172c:	2300      	movs	r3, #0
 800172e:	71fb      	strb	r3, [r7, #7]
	SM.event = EV_NO_EVENT;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <f_sm_Idle+0x170>)
 8001732:	2201      	movs	r2, #1
 8001734:	705a      	strb	r2, [r3, #1]
	if(Substate > SET_D)
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <f_sm_Idle+0x16c>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d904      	bls.n	8001748 <f_sm_Idle+0x160>
		{
			nextState = ST_WORK;
 800173e:	2303      	movs	r3, #3
 8001740:	71fb      	strb	r3, [r7, #7]
			Substate = PREPARE;
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <f_sm_Idle+0x16c>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
		}

	return nextState;
 8001748:	79fb      	ldrb	r3, [r7, #7]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200002eb 	.word	0x200002eb
 8001758:	200002e8 	.word	0x200002e8
 800175c:	2000000c 	.word	0x2000000c
 8001760:	0800dae0 	.word	0x0800dae0
 8001764:	42c80000 	.word	0x42c80000
 8001768:	200002cc 	.word	0x200002cc
 800176c:	447a0000 	.word	0x447a0000
 8001770:	c47a0000 	.word	0xc47a0000
 8001774:	44ffe000 	.word	0x44ffe000
 8001778:	c4ffe000 	.word	0xc4ffe000
 800177c:	200002ac 	.word	0x200002ac

08001780 <f_work_drawPage>:

static void f_work_drawPage(e_gui_lcdPage page, t_pid_Parameter *Param, uint16_t pwmOutput, uint16_t distanceSet, uint16_t distanceGet)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	4611      	mov	r1, r2
 800178a:	461a      	mov	r2, r3
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	460b      	mov	r3, r1
 8001792:	81bb      	strh	r3, [r7, #12]
 8001794:	4613      	mov	r3, r2
 8001796:	80fb      	strh	r3, [r7, #6]
	static uint8_t chartData[120];
	static uint8_t chartIterator, chartLength;

	switch (page)
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b05      	cmp	r3, #5
 800179c:	d02f      	beq.n	80017fe <f_work_drawPage+0x7e>
 800179e:	2b05      	cmp	r3, #5
 80017a0:	dc65      	bgt.n	800186e <f_work_drawPage+0xee>
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d002      	beq.n	80017ac <f_work_drawPage+0x2c>
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d005      	beq.n	80017b6 <f_work_drawPage+0x36>
 80017aa:	e060      	b.n	800186e <f_work_drawPage+0xee>
	{
		case LCD_PARAM:
			f_gui_DrawParamPage(Param, &PidCtrl);
 80017ac:	4933      	ldr	r1, [pc, #204]	; (800187c <f_work_drawPage+0xfc>)
 80017ae:	68b8      	ldr	r0, [r7, #8]
 80017b0:	f007 f96c 	bl	8008a8c <f_gui_DrawParamPage>
			break;
 80017b4:	e05e      	b.n	8001874 <f_work_drawPage+0xf4>

		case LCD_CTRL:
			f_gui_DrawCtrlPage((float)distanceSet/10, (float)distanceGet/10, (float)pwmOutput/41);
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017c8:	8b3b      	ldrh	r3, [r7, #24]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017d2:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80017d6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80017da:	89bb      	ldrh	r3, [r7, #12]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e4:	eddf 5a26 	vldr	s11, [pc, #152]	; 8001880 <f_work_drawPage+0x100>
 80017e8:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80017ec:	eeb0 1a46 	vmov.f32	s2, s12
 80017f0:	eef0 0a66 	vmov.f32	s1, s13
 80017f4:	eeb0 0a47 	vmov.f32	s0, s14
 80017f8:	f007 f9b6 	bl	8008b68 <f_gui_DrawCtrlPage>
			break;
 80017fc:	e03a      	b.n	8001874 <f_work_drawPage+0xf4>

		case LCD_CHART:
			chartData[chartIterator] = (uint32_t)(pwmOutput*44)/4096; //max value is 44px
 80017fe:	89bb      	ldrh	r3, [r7, #12]
 8001800:	222c      	movs	r2, #44	; 0x2c
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	0b19      	lsrs	r1, r3, #12
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <f_work_drawPage+0x104>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	b2c9      	uxtb	r1, r1
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <f_work_drawPage+0x108>)
 8001812:	5499      	strb	r1, [r3, r2]
			chartIterator = (chartIterator + 1) % 120;
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <f_work_drawPage+0x104>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <f_work_drawPage+0x10c>)
 800181c:	fb83 1302 	smull	r1, r3, r3, r2
 8001820:	4413      	add	r3, r2
 8001822:	1199      	asrs	r1, r3, #6
 8001824:	17d3      	asrs	r3, r2, #31
 8001826:	1ac9      	subs	r1, r1, r3
 8001828:	460b      	mov	r3, r1
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	1a5b      	subs	r3, r3, r1
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	1ad1      	subs	r1, r2, r3
 8001832:	b2ca      	uxtb	r2, r1
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <f_work_drawPage+0x104>)
 8001836:	701a      	strb	r2, [r3, #0]

			if(chartLength < 120)
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <f_work_drawPage+0x110>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b77      	cmp	r3, #119	; 0x77
 800183e:	d80d      	bhi.n	800185c <f_work_drawPage+0xdc>
			{
				f_gui_DrawChartPage(chartData, chartLength, 0);
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <f_work_drawPage+0x110>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2200      	movs	r2, #0
 8001846:	4619      	mov	r1, r3
 8001848:	480f      	ldr	r0, [pc, #60]	; (8001888 <f_work_drawPage+0x108>)
 800184a:	f007 f8da 	bl	8008a02 <f_gui_DrawChartPage>
				chartLength++;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <f_work_drawPage+0x110>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <f_work_drawPage+0x110>)
 8001858:	701a      	strb	r2, [r3, #0]
			else
			{
				f_gui_DrawChartPage(chartData, chartLength, chartIterator);
			}

			break;
 800185a:	e00b      	b.n	8001874 <f_work_drawPage+0xf4>
				f_gui_DrawChartPage(chartData, chartLength, chartIterator);
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <f_work_drawPage+0x110>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4a08      	ldr	r2, [pc, #32]	; (8001884 <f_work_drawPage+0x104>)
 8001862:	7812      	ldrb	r2, [r2, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4808      	ldr	r0, [pc, #32]	; (8001888 <f_work_drawPage+0x108>)
 8001868:	f007 f8cb 	bl	8008a02 <f_gui_DrawChartPage>
			break;
 800186c:	e002      	b.n	8001874 <f_work_drawPage+0xf4>

		default:
			f_lcd_ClearAll();
 800186e:	f007 fb6d 	bl	8008f4c <f_lcd_ClearAll>
			break;
 8001872:	bf00      	nop
	}
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200002b0 	.word	0x200002b0
 8001880:	42240000 	.word	0x42240000
 8001884:	200002ec 	.word	0x200002ec
 8001888:	200002f0 	.word	0x200002f0
 800188c:	88888889 	.word	0x88888889
 8001890:	20000368 	.word	0x20000368

08001894 <f_sm_Work>:

e_sm_State f_sm_Work()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08e      	sub	sp, #56	; 0x38
 8001898:	af02      	add	r7, sp, #8
	e_sm_State nextState;
	static enum {PREPARE, WORK, POSTPARE, EXIT} Substate;
	uint32_t timerLcdInput, timerLcdHeading, timerMotor, timerMotorTest;
	uint16_t *distanceSet = (uint16_t*)&htim3.Instance->CNT;
 800189a:	4ba1      	ldr	r3, [pc, #644]	; (8001b20 <f_sm_Work+0x28c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3324      	adds	r3, #36	; 0x24
 80018a0:	60bb      	str	r3, [r7, #8]
	uint16_t motorPwm;
	uint32_t motorPwmDelta;
	static e_gui_lcdPage currentLcdPage = LCD_NOPAGE;
	bool changePage;

	f_work_sensorTriggerMeasure();
 80018a2:	f008 f9cd 	bl	8009c40 <f_work_sensorTriggerMeasure>
	*distanceSet = (PINGPONG_MAX_DISTANCE-PINGPONG_MIN_DISTANCE)/2;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	22c8      	movs	r2, #200	; 0xc8
 80018aa:	801a      	strh	r2, [r3, #0]


	switch (Substate)
 80018ac:	4b9d      	ldr	r3, [pc, #628]	; (8001b24 <f_sm_Work+0x290>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	f000 8130 	beq.w	8001b16 <f_sm_Work+0x282>
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	f300 8146 	bgt.w	8001b48 <f_sm_Work+0x2b4>
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <f_sm_Work+0x32>
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d01e      	beq.n	8001902 <f_sm_Work+0x6e>
		case POSTPARE:
			f_work_MotorSet(0);
			break;

		default:
			break;
 80018c4:	e140      	b.n	8001b48 <f_sm_Work+0x2b4>
			isMotorPowerOk = f_work_MotorTest(0);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f008 f88a 	bl	80099e0 <f_work_MotorTest>
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
			if(isMotorPowerOk)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d011      	beq.n	80018fa <f_sm_Work+0x66>
				f_lcd_ClearAll();
 80018d6:	f007 fb39 	bl	8008f4c <f_lcd_ClearAll>
				f_lcd_WriteTxt(0, 32, "Press OK", &font_msSansSerif_14);
 80018da:	4b93      	ldr	r3, [pc, #588]	; (8001b28 <f_sm_Work+0x294>)
 80018dc:	4a93      	ldr	r2, [pc, #588]	; (8001b2c <f_sm_Work+0x298>)
 80018de:	2120      	movs	r1, #32
 80018e0:	2000      	movs	r0, #0
 80018e2:	f007 fb4a 	bl	8008f7a <f_lcd_WriteTxt>
					if(SM.event == EV_BUTTON_A) break;
 80018e6:	4b92      	ldr	r3, [pc, #584]	; (8001b30 <f_sm_Work+0x29c>)
 80018e8:	785b      	ldrb	r3, [r3, #1]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d000      	beq.n	80018f0 <f_sm_Work+0x5c>
 80018ee:	e7fa      	b.n	80018e6 <f_sm_Work+0x52>
 80018f0:	bf00      	nop
				currentLcdPage = LCD_PARAM;
 80018f2:	4b90      	ldr	r3, [pc, #576]	; (8001b34 <f_sm_Work+0x2a0>)
 80018f4:	2203      	movs	r2, #3
 80018f6:	701a      	strb	r2, [r3, #0]
			break;
 80018f8:	e127      	b.n	8001b4a <f_sm_Work+0x2b6>
			else nextState = ST_ERROR;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8001900:	e123      	b.n	8001b4a <f_sm_Work+0x2b6>
			f_gui_DrawHeading(ST_WORK, currentLcdPage);
 8001902:	4b8c      	ldr	r3, [pc, #560]	; (8001b34 <f_sm_Work+0x2a0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	2003      	movs	r0, #3
 800190a:	f007 f977 	bl	8008bfc <f_gui_DrawHeading>
			f_work_MotorSet(1);
 800190e:	2001      	movs	r0, #1
 8001910:	f008 f82e 	bl	8009970 <f_work_MotorSet>
			timerLcdInput = timerMotor = timerLcdHeading = timerMotorTest = HAL_GetTick();
 8001914:	f000 fdf2 	bl	80024fc <HAL_GetTick>
 8001918:	61f8      	str	r0, [r7, #28]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	623b      	str	r3, [r7, #32]
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
				if(((HAL_GetTick() - timerLcdInput) > 200) || (distanceLastSet != *distanceSet/2)) //if timer or input changed
 8001926:	f000 fde9 	bl	80024fc <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2bc8      	cmp	r3, #200	; 0xc8
 8001932:	d806      	bhi.n	8001942 <f_sm_Work+0xae>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	085b      	lsrs	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	8b3a      	ldrh	r2, [r7, #24]
 800193e:	429a      	cmp	r2, r3
 8001940:	d034      	beq.n	80019ac <f_sm_Work+0x118>
					if(changePage)
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00e      	beq.n	8001966 <f_sm_Work+0xd2>
						currentLcdPage++;
 8001948:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <f_sm_Work+0x2a0>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b78      	ldr	r3, [pc, #480]	; (8001b34 <f_sm_Work+0x2a0>)
 8001952:	701a      	strb	r2, [r3, #0]
						if(currentLcdPage == LCD_NOPAGE) currentLcdPage = LCD_PARAM;
 8001954:	4b77      	ldr	r3, [pc, #476]	; (8001b34 <f_sm_Work+0x2a0>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b06      	cmp	r3, #6
 800195a:	d102      	bne.n	8001962 <f_sm_Work+0xce>
 800195c:	4b75      	ldr	r3, [pc, #468]	; (8001b34 <f_sm_Work+0x2a0>)
 800195e:	2203      	movs	r2, #3
 8001960:	701a      	strb	r2, [r3, #0]
						changePage = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
					f_work_drawPage(currentLcdPage, &PidParam, motorPwm, *distanceSet, distanceGet);
 8001966:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <f_sm_Work+0x2a0>)
 8001968:	7818      	ldrb	r0, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	8819      	ldrh	r1, [r3, #0]
 800196e:	8afa      	ldrh	r2, [r7, #22]
 8001970:	8b7b      	ldrh	r3, [r7, #26]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	460b      	mov	r3, r1
 8001976:	4970      	ldr	r1, [pc, #448]	; (8001b38 <f_sm_Work+0x2a4>)
 8001978:	f7ff ff02 	bl	8001780 <f_work_drawPage>
					if(*distanceSet > PINGPONG_MAX_DISTANCE) *distanceSet = PINGPONG_MAX_DISTANCE;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001984:	d904      	bls.n	8001990 <f_sm_Work+0xfc>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	e006      	b.n	800199e <f_sm_Work+0x10a>
					else if(*distanceSet < PINGPONG_MIN_DISTANCE) *distanceSet = PINGPONG_MIN_DISTANCE;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	2b31      	cmp	r3, #49	; 0x31
 8001996:	d802      	bhi.n	800199e <f_sm_Work+0x10a>
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2232      	movs	r2, #50	; 0x32
 800199c:	801a      	strh	r2, [r3, #0]
					distanceLastSet = *distanceSet/2;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	085b      	lsrs	r3, r3, #1
 80019a4:	833b      	strh	r3, [r7, #24]
					timerLcdInput = HAL_GetTick();
 80019a6:	f000 fda9 	bl	80024fc <HAL_GetTick>
 80019aa:	62b8      	str	r0, [r7, #40]	; 0x28
				if(( HAL_GetTick() - timerLcdHeading) > 500)
 80019ac:	f000 fda6 	bl	80024fc <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019ba:	d90a      	bls.n	80019d2 <f_sm_Work+0x13e>
					f_gui_DrawHeading(SM.dstState, currentLcdPage);
 80019bc:	4b5c      	ldr	r3, [pc, #368]	; (8001b30 <f_sm_Work+0x29c>)
 80019be:	789b      	ldrb	r3, [r3, #2]
 80019c0:	4a5c      	ldr	r2, [pc, #368]	; (8001b34 <f_sm_Work+0x2a0>)
 80019c2:	7812      	ldrb	r2, [r2, #0]
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f007 f918 	bl	8008bfc <f_gui_DrawHeading>
					timerLcdHeading = HAL_GetTick();
 80019cc:	f000 fd96 	bl	80024fc <HAL_GetTick>
 80019d0:	6278      	str	r0, [r7, #36]	; 0x24
				if((HAL_GetTick() - timerMotor) > 20)
 80019d2:	f000 fd93 	bl	80024fc <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b14      	cmp	r3, #20
 80019de:	d94e      	bls.n	8001a7e <f_sm_Work+0x1ea>
					uint16_t timeout = 20;
 80019e0:	2314      	movs	r3, #20
 80019e2:	81bb      	strh	r3, [r7, #12]
					while(!sensorMeasureDone && timeout)
 80019e4:	e005      	b.n	80019f2 <f_sm_Work+0x15e>
						HAL_Delay(1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f000 fd94 	bl	8002514 <HAL_Delay>
						timeout--;
 80019ec:	89bb      	ldrh	r3, [r7, #12]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	81bb      	strh	r3, [r7, #12]
					while(!sensorMeasureDone && timeout)
 80019f2:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <f_sm_Work+0x2a8>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f083 0301 	eor.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <f_sm_Work+0x172>
 8001a00:	89bb      	ldrh	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ef      	bne.n	80019e6 <f_sm_Work+0x152>
					distanceGet = f_work_sensorGetLastMeasure(); //in mm
 8001a06:	f008 f945 	bl	8009c94 <f_work_sensorGetLastMeasure>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	837b      	strh	r3, [r7, #26]
					f_pid_calculateThrottle(*distanceSet, distanceGet, &PidCtrl, &PidParam);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1a:	8b7b      	ldrh	r3, [r7, #26]
 8001a1c:	ee07 3a10 	vmov	s14, r3
 8001a20:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001a24:	4944      	ldr	r1, [pc, #272]	; (8001b38 <f_sm_Work+0x2a4>)
 8001a26:	4846      	ldr	r0, [pc, #280]	; (8001b40 <f_sm_Work+0x2ac>)
 8001a28:	eef0 0a47 	vmov.f32	s1, s14
 8001a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a30:	f007 fd10 	bl	8009454 <f_pid_calculateThrottle>
					motorPwm = MAX_MOTOR_PWM/2 - (int16_t)PidCtrl.output;
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <f_sm_Work+0x2ac>)
 8001a36:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3e:	ee17 3a90 	vmov	r3, s15
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001a4a:	3307      	adds	r3, #7
 8001a4c:	82fb      	strh	r3, [r7, #22]
					if(motorPwm > MAX_MOTOR_PWM) motorPwm = MAX_MOTOR_PWM;
 8001a4e:	8afb      	ldrh	r3, [r7, #22]
 8001a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a54:	d302      	bcc.n	8001a5c <f_sm_Work+0x1c8>
 8001a56:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001a5a:	82fb      	strh	r3, [r7, #22]
					f_work_MotorSetVelocity(motorPwm);
 8001a5c:	8afb      	ldrh	r3, [r7, #22]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f007 ff9e 	bl	80099a0 <f_work_MotorSetVelocity>
					motorPwmDelta = (15*motorPwmDelta + motorPwm)/16;
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4613      	mov	r3, r2
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	1a9a      	subs	r2, r3, r2
 8001a6c:	8afb      	ldrh	r3, [r7, #22]
 8001a6e:	4413      	add	r3, r2
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	613b      	str	r3, [r7, #16]
					f_work_sensorTriggerMeasure();
 8001a74:	f008 f8e4 	bl	8009c40 <f_work_sensorTriggerMeasure>
					timerMotor = HAL_GetTick();
 8001a78:	f000 fd40 	bl	80024fc <HAL_GetTick>
 8001a7c:	6238      	str	r0, [r7, #32]
				if((HAL_GetTick() - timerMotorTest) > 500)
 8001a7e:	f000 fd3d 	bl	80024fc <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a8c:	d922      	bls.n	8001ad4 <f_sm_Work+0x240>
					if(abs(motorPwmDelta - motorPwm) < (MAX_MOTOR_PWM/100)) // if motorPwm is stabilized
 8001a8e:	8afb      	ldrh	r3, [r7, #22]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8001a98:	db19      	blt.n	8001ace <f_sm_Work+0x23a>
 8001a9a:	8afb      	ldrh	r3, [r7, #22]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b27      	cmp	r3, #39	; 0x27
 8001aa2:	dc14      	bgt.n	8001ace <f_sm_Work+0x23a>
						isMotorPowerOk = f_work_MotorTest(1);
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f007 ff9b 	bl	80099e0 <f_work_MotorTest>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
						if((distanceGet == 0) || !isMotorPowerOk)
 8001aae:	8b7b      	ldrh	r3, [r7, #26]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <f_sm_Work+0x22c>
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f083 0301 	eor.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <f_sm_Work+0x23a>
							f_work_MotorSet(0);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f007 ff55 	bl	8009970 <f_work_MotorSet>
							nextState = ST_ERROR;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
 8001acc:	e022      	b.n	8001b14 <f_sm_Work+0x280>
					timerMotorTest = HAL_GetTick();
 8001ace:	f000 fd15 	bl	80024fc <HAL_GetTick>
 8001ad2:	61f8      	str	r0, [r7, #28]
				if(eventFlag)
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <f_sm_Work+0x2b0>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f43f af24 	beq.w	8001926 <f_sm_Work+0x92>
					if(SM.event == EV_BUTTON_B)	break;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <f_sm_Work+0x29c>)
 8001ae0:	785b      	ldrb	r3, [r3, #1]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d015      	beq.n	8001b12 <f_sm_Work+0x27e>
					else if(SM.event == EV_BUTTON_A) changePage = 1;
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <f_sm_Work+0x29c>)
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d102      	bne.n	8001af4 <f_sm_Work+0x260>
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	e007      	b.n	8001b04 <f_sm_Work+0x270>
					else if(SM.event == EV_ERROR)
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <f_sm_Work+0x29c>)
 8001af6:	785b      	ldrb	r3, [r3, #1]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d103      	bne.n	8001b04 <f_sm_Work+0x270>
						nextState = ST_ERROR;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						break;
 8001b02:	e007      	b.n	8001b14 <f_sm_Work+0x280>
					SM.event = EV_NO_EVENT;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <f_sm_Work+0x29c>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	705a      	strb	r2, [r3, #1]
					eventFlag = 0;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <f_sm_Work+0x2b0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
				if(((HAL_GetTick() - timerLcdInput) > 200) || (distanceLastSet != *distanceSet/2)) //if timer or input changed
 8001b10:	e709      	b.n	8001926 <f_sm_Work+0x92>
					if(SM.event == EV_BUTTON_B)	break;
 8001b12:	bf00      	nop
			break;
 8001b14:	e019      	b.n	8001b4a <f_sm_Work+0x2b6>
			f_work_MotorSet(0);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f007 ff2a 	bl	8009970 <f_work_MotorSet>
			break;
 8001b1c:	e015      	b.n	8001b4a <f_sm_Work+0x2b6>
 8001b1e:	bf00      	nop
 8001b20:	20000428 	.word	0x20000428
 8001b24:	20000369 	.word	0x20000369
 8001b28:	0800dae0 	.word	0x0800dae0
 8001b2c:	0800cc4c 	.word	0x0800cc4c
 8001b30:	200002e8 	.word	0x200002e8
 8001b34:	2000001c 	.word	0x2000001c
 8001b38:	200002cc 	.word	0x200002cc
 8001b3c:	2000090e 	.word	0x2000090e
 8001b40:	200002b0 	.word	0x200002b0
 8001b44:	200002ac 	.word	0x200002ac
			break;
 8001b48:	bf00      	nop
	}

	eventFlag = 0;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <f_sm_Work+0x2e8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
	Substate++;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <f_sm_Work+0x2ec>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <f_sm_Work+0x2ec>)
 8001b5a:	701a      	strb	r2, [r3, #0]
	SM.event = EV_NO_EVENT;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <f_sm_Work+0x2f0>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	705a      	strb	r2, [r3, #1]
	if(Substate == EXIT) nextState = ST_REPLAY;
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <f_sm_Work+0x2ec>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d102      	bne.n	8001b70 <f_sm_Work+0x2dc>
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	return nextState;
 8001b70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3730      	adds	r7, #48	; 0x30
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200002ac 	.word	0x200002ac
 8001b80:	20000369 	.word	0x20000369
 8001b84:	200002e8 	.word	0x200002e8

08001b88 <f_sm_Replay>:

e_sm_State f_sm_Replay()
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
	e_sm_State nextState;

	f_lcd_ClearAll();
 8001b8e:	f007 f9dd 	bl	8008f4c <f_lcd_ClearAll>
	f_gui_DrawHeading(SM.srcState, LCD_NOPAGE);
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <f_sm_Replay+0x70>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2106      	movs	r1, #6
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f007 f82f 	bl	8008bfc <f_gui_DrawHeading>
	f_lcd_WriteTxt(0, 32, "Replay?", &font_msSansSerif_14);
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <f_sm_Replay+0x74>)
 8001ba0:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <f_sm_Replay+0x78>)
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f007 f9e8 	bl	8008f7a <f_lcd_WriteTxt>

	while(!eventFlag)
 8001baa:	bf00      	nop
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <f_sm_Replay+0x7c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f083 0301 	eor.w	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f8      	bne.n	8001bac <f_sm_Replay+0x24>
		;

	eventFlag = 0;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <f_sm_Replay+0x7c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
	if(SM.event == EV_BUTTON_A)	nextState = ST_IDLE;
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <f_sm_Replay+0x70>)
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d102      	bne.n	8001bce <f_sm_Replay+0x46>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	71fb      	strb	r3, [r7, #7]
 8001bcc:	e00c      	b.n	8001be8 <f_sm_Replay+0x60>
	else if(SM.event == EV_BUTTON_B) nextState = ST_EXIT;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <f_sm_Replay+0x70>)
 8001bd0:	785b      	ldrb	r3, [r3, #1]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d102      	bne.n	8001bdc <f_sm_Replay+0x54>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	e005      	b.n	8001be8 <f_sm_Replay+0x60>
	else if(SM.event == EV_ERROR) nextState = ST_ERROR;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <f_sm_Replay+0x70>)
 8001bde:	785b      	ldrb	r3, [r3, #1]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <f_sm_Replay+0x60>
 8001be4:	2300      	movs	r3, #0
 8001be6:	71fb      	strb	r3, [r7, #7]
	SM.event = EV_NO_EVENT;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <f_sm_Replay+0x70>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	705a      	strb	r2, [r3, #1]

	return nextState;
 8001bee:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200002e8 	.word	0x200002e8
 8001bfc:	0800dae0 	.word	0x0800dae0
 8001c00:	0800cc58 	.word	0x0800cc58
 8001c04:	200002ac 	.word	0x200002ac

08001c08 <f_sm_Exit>:

e_sm_State f_sm_Exit()
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	f_lcd_ClearAll();
 8001c0c:	f007 f99e 	bl	8008f4c <f_lcd_ClearAll>
	f_lcd_WriteTxt(0, 32, "EXIT", &font_msSansSerif_14);
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <f_sm_Exit+0x18>)
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <f_sm_Exit+0x1c>)
 8001c14:	2120      	movs	r1, #32
 8001c16:	2000      	movs	r0, #0
 8001c18:	f007 f9af 	bl	8008f7a <f_lcd_WriteTxt>

	while(1)
 8001c1c:	e7fe      	b.n	8001c1c <f_sm_Exit+0x14>
 8001c1e:	bf00      	nop
 8001c20:	0800dae0 	.word	0x0800dae0
 8001c24:	0800cc60 	.word	0x0800cc60

08001c28 <f_CheckButtonsCallback>:
		dwtSamples = 0;
	}
}

void f_CheckButtonsCallback()
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	if(Button.counterEnableA && HAL_GPIO_ReadPin(B_NEXT_GPIO_Port, B_NEXT_Pin))
 8001c2c:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <f_CheckButtonsCallback+0x8c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d018      	beq.n	8001c66 <f_CheckButtonsCallback+0x3e>
 8001c34:	2102      	movs	r1, #2
 8001c36:	4820      	ldr	r0, [pc, #128]	; (8001cb8 <f_CheckButtonsCallback+0x90>)
 8001c38:	f001 fade 	bl	80031f8 <HAL_GPIO_ReadPin>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d011      	beq.n	8001c66 <f_CheckButtonsCallback+0x3e>
	{
		if((HAL_GetTick() - Button.counterA) >= BUTTON_PRESSED_CHECKOUT_TIME)
 8001c42:	f000 fc5b 	bl	80024fc <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <f_CheckButtonsCallback+0x8c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b63      	cmp	r3, #99	; 0x63
 8001c50:	d90c      	bls.n	8001c6c <f_CheckButtonsCallback+0x44>
		{
			eventFlag = true;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <f_CheckButtonsCallback+0x94>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
			SM.event = EV_BUTTON_A;
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <f_CheckButtonsCallback+0x98>)
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	705a      	strb	r2, [r3, #1]
			Button.counterEnableA = false;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <f_CheckButtonsCallback+0x8c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
		if((HAL_GetTick() - Button.counterA) >= BUTTON_PRESSED_CHECKOUT_TIME)
 8001c64:	e002      	b.n	8001c6c <f_CheckButtonsCallback+0x44>
		}
	}
	else Button.counterEnableA = false;
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <f_CheckButtonsCallback+0x8c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]

	if(Button.counterEnableB && HAL_GPIO_ReadPin(B_PREV_GPIO_Port, B_PREV_Pin))
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <f_CheckButtonsCallback+0x8c>)
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d018      	beq.n	8001ca6 <f_CheckButtonsCallback+0x7e>
 8001c74:	2104      	movs	r1, #4
 8001c76:	4810      	ldr	r0, [pc, #64]	; (8001cb8 <f_CheckButtonsCallback+0x90>)
 8001c78:	f001 fabe 	bl	80031f8 <HAL_GPIO_ReadPin>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d011      	beq.n	8001ca6 <f_CheckButtonsCallback+0x7e>
	{
		if((HAL_GetTick() - Button.counterB) >= BUTTON_PRESSED_CHECKOUT_TIME)
 8001c82:	f000 fc3b 	bl	80024fc <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <f_CheckButtonsCallback+0x8c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b63      	cmp	r3, #99	; 0x63
 8001c90:	d90d      	bls.n	8001cae <f_CheckButtonsCallback+0x86>
		{
			eventFlag = true;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <f_CheckButtonsCallback+0x94>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
			SM.event = EV_BUTTON_B;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <f_CheckButtonsCallback+0x98>)
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	705a      	strb	r2, [r3, #1]
			Button.counterEnableB = false;
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <f_CheckButtonsCallback+0x8c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	705a      	strb	r2, [r3, #1]
		if((HAL_GetTick() - Button.counterB) >= BUTTON_PRESSED_CHECKOUT_TIME)
 8001ca4:	e003      	b.n	8001cae <f_CheckButtonsCallback+0x86>
		}
	}
	else Button.counterEnableB = false;
 8001ca6:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <f_CheckButtonsCallback+0x8c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	705a      	strb	r2, [r3, #1]
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200002a0 	.word	0x200002a0
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	200002ac 	.word	0x200002ac
 8001cc0:	200002e8 	.word	0x200002e8

08001cc4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd2:	4819      	ldr	r0, [pc, #100]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x74>)
 8001cd4:	f001 fac1 	bl	800325a <HAL_GPIO_TogglePin>

	if((GPIO_Pin == B_NEXT_Pin) && HAL_GPIO_ReadPin(B_NEXT_GPIO_Port, B_NEXT_Pin))
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d115      	bne.n	8001d0a <HAL_GPIO_EXTI_Callback+0x46>
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4816      	ldr	r0, [pc, #88]	; (8001d3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001ce2:	f001 fa89 	bl	80031f8 <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00e      	beq.n	8001d0a <HAL_GPIO_EXTI_Callback+0x46>
	{
		Button.counterEnableA = true;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
		Button.counterA = HAL_GetTick();
 8001cf2:	f000 fc03 	bl	80024fc <HAL_GetTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001cfa:	6053      	str	r3, [r2, #4]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d02:	480d      	ldr	r0, [pc, #52]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x74>)
 8001d04:	f001 fa90 	bl	8003228 <HAL_GPIO_WritePin>
	else if((GPIO_Pin == B_PREV_Pin) && HAL_GPIO_ReadPin(B_PREV_GPIO_Port, B_PREV_Pin))
	{
		Button.counterEnableB = true;
		Button.counterB = HAL_GetTick();
	}
}
 8001d08:	e011      	b.n	8001d2e <HAL_GPIO_EXTI_Callback+0x6a>
	else if((GPIO_Pin == B_PREV_Pin) && HAL_GPIO_ReadPin(B_PREV_GPIO_Port, B_PREV_Pin))
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d10e      	bne.n	8001d2e <HAL_GPIO_EXTI_Callback+0x6a>
 8001d10:	2104      	movs	r1, #4
 8001d12:	480a      	ldr	r0, [pc, #40]	; (8001d3c <HAL_GPIO_EXTI_Callback+0x78>)
 8001d14:	f001 fa70 	bl	80031f8 <HAL_GPIO_ReadPin>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <HAL_GPIO_EXTI_Callback+0x6a>
		Button.counterEnableB = true;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	705a      	strb	r2, [r3, #1]
		Button.counterB = HAL_GetTick();
 8001d24:	f000 fbea 	bl	80024fc <HAL_GetTick>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001d2c:	6093      	str	r3, [r2, #8]
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	200002a0 	.word	0x200002a0

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <Error_Handler+0x8>
	...

08001d50 <HAL_SPI_MspInit>:
  /* USER CODE END SPI2_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a3f      	ldr	r2, [pc, #252]	; (8001e6c <HAL_SPI_MspInit+0x11c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d177      	bne.n	8001e62 <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b3e      	ldr	r3, [pc, #248]	; (8001e70 <HAL_SPI_MspInit+0x120>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a3d      	ldr	r2, [pc, #244]	; (8001e70 <HAL_SPI_MspInit+0x120>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_SPI_MspInit+0x120>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <HAL_SPI_MspInit+0x120>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a36      	ldr	r2, [pc, #216]	; (8001e70 <HAL_SPI_MspInit+0x120>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <HAL_SPI_MspInit+0x120>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_SPI_MspInit+0x120>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a2f      	ldr	r2, [pc, #188]	; (8001e70 <HAL_SPI_MspInit+0x120>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_SPI_MspInit+0x120>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	4824      	ldr	r0, [pc, #144]	; (8001e74 <HAL_SPI_MspInit+0x124>)
 8001de2:	f001 f86d 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001df8:	2305      	movs	r3, #5
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	481d      	ldr	r0, [pc, #116]	; (8001e78 <HAL_SPI_MspInit+0x128>)
 8001e04:	f001 f85c 	bl	8002ec0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_SPI_MspInit+0x130>)
 8001e0c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e26:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001e46:	480d      	ldr	r0, [pc, #52]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e48:	f000 fc9a 	bl	8002780 <HAL_DMA_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001e52:	f7ff ff77 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e5a:	649a      	str	r2, [r3, #72]	; 0x48
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_SPI_MspInit+0x12c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40003800 	.word	0x40003800
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	200003c4 	.word	0x200003c4
 8001e80:	40026070 	.word	0x40026070

08001e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ec2:	2007      	movs	r0, #7
 8001ec4:	f000 fc1a 	bl	80026fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f20:	f000 fad8 	bl	80024d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  f_lcd_SendFrameCallback();
 8001f24:	f007 fa50 	bl	80093c8 <f_lcd_SendFrameCallback>
  f_CheckButtonsCallback();
 8001f28:	f7ff fe7e 	bl	8001c28 <f_CheckButtonsCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_NEXT_Pin);
 8001f34:	2002      	movs	r0, #2
 8001f36:	f001 f9ab 	bl	8003290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_PREV_Pin);
 8001f42:	2004      	movs	r0, #4
 8001f44:	f001 f9a4 	bl	8003290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <DMA1_Stream4_IRQHandler+0x10>)
 8001f52:	f000 fd3d 	bl	80029d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200003c4 	.word	0x200003c4

08001f60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f66:	f005 fe2f 	bl	8007bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200004b8 	.word	0x200004b8

08001f74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <I2C1_EV_IRQHandler+0x10>)
 8001f7a:	f001 fe09 	bl	8003b90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000024c 	.word	0x2000024c

08001f88 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <I2C1_ER_IRQHandler+0x10>)
 8001f8e:	f001 ff70 	bl	8003e72 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000024c 	.word	0x2000024c

08001f9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
	return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_kill>:

int _kill(int pid, int sig)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fb6:	f007 ff1d 	bl	8009df4 <__errno>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2216      	movs	r2, #22
 8001fbe:	601a      	str	r2, [r3, #0]
	return -1;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_exit>:

void _exit (int status)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ffe7 	bl	8001fac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fde:	e7fe      	b.n	8001fde <_exit+0x12>

08001fe0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e00a      	b.n	8002008 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ff2:	f3af 8000 	nop.w
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbf0      	blt.n	8001ff2 <_read+0x12>
	}

return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e009      	b.n	8002040 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	60ba      	str	r2, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf1      	blt.n	800202c <_write+0x12>
	}
	return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_close>:

int _close(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
	return -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800207a:	605a      	str	r2, [r3, #4]
	return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_isatty>:

int _isatty(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
	return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <_sbrk+0x5c>)
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <_sbrk+0x60>)
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <_sbrk+0x64>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <_sbrk+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d207      	bcs.n	80020fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ec:	f007 fe82 	bl	8009df4 <__errno>
 80020f0:	4603      	mov	r3, r0
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	e009      	b.n	8002110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <_sbrk+0x64>)
 800210c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20020000 	.word	0x20020000
 800211c:	00000400 	.word	0x00000400
 8002120:	20000424 	.word	0x20000424
 8002124:	20000920 	.word	0x20000920

08002128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <SystemInit+0x20>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <SystemInit+0x20>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <MX_TIM3_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	; 0x30
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f007 fe82 	bl	8009e64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002168:	4b20      	ldr	r3, [pc, #128]	; (80021ec <MX_TIM3_Init+0xa0>)
 800216a:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <MX_TIM3_Init+0xa4>)
 800216c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <MX_TIM3_Init+0xa0>)
 8002170:	2200      	movs	r2, #0
 8002172:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <MX_TIM3_Init+0xa0>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <MX_TIM3_Init+0xa0>)
 800217c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002180:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <MX_TIM3_Init+0xa0>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002188:	4b18      	ldr	r3, [pc, #96]	; (80021ec <MX_TIM3_Init+0xa0>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800218e:	2301      	movs	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002196:	2301      	movs	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021a6:	2301      	movs	r3, #1
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	4619      	mov	r1, r3
 80021b8:	480c      	ldr	r0, [pc, #48]	; (80021ec <MX_TIM3_Init+0xa0>)
 80021ba:	f005 fc5f 	bl	8007a7c <HAL_TIM_Encoder_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80021c4:	f7ff fdbe 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c8:	2300      	movs	r3, #0
 80021ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_TIM3_Init+0xa0>)
 80021d6:	f006 fb6d 	bl	80088b4 <HAL_TIMEx_MasterConfigSynchronization>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80021e0:	f7ff fdb0 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	3730      	adds	r7, #48	; 0x30
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000428 	.word	0x20000428
 80021f0:	40000400 	.word	0x40000400

080021f4 <HAL_TIM_Encoder_MspInit>:
  /* USER CODE END TIM10_Init 2 */

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_TIM_Encoder_MspInit+0x84>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d12b      	bne.n	800226e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <HAL_TIM_Encoder_MspInit+0x88>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a17      	ldr	r2, [pc, #92]	; (800227c <HAL_TIM_Encoder_MspInit+0x88>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_TIM_Encoder_MspInit+0x88>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_TIM_Encoder_MspInit+0x88>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_TIM_Encoder_MspInit+0x88>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_TIM_Encoder_MspInit+0x88>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_P_Pin|ENC_M_Pin;
 800224e:	23c0      	movs	r3, #192	; 0xc0
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800225e:	2302      	movs	r3, #2
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <HAL_TIM_Encoder_MspInit+0x8c>)
 800226a:	f000 fe29 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800226e:	bf00      	nop
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40000400 	.word	0x40000400
 800227c:	40023800 	.word	0x40023800
 8002280:	40020800 	.word	0x40020800

08002284 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10d      	bne.n	80022b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_TIM_PWM_MspInit+0x40>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <HAL_TIM_PWM_MspInit+0x40>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <HAL_TIM_PWM_MspInit+0x40>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40014000 	.word	0x40014000
 80022c4:	40023800 	.word	0x40023800

080022c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM10)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <HAL_TIM_Base_MspInit+0x94>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d134      	bne.n	8002354 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_TIM_Base_MspInit+0x98>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_TIM_Base_MspInit+0x98>)
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_TIM_Base_MspInit+0x98>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_TIM_Base_MspInit+0x98>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_TIM_Base_MspInit+0x98>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_TIM_Base_MspInit+0x98>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002334:	2303      	movs	r3, #3
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	4809      	ldr	r0, [pc, #36]	; (8002364 <HAL_TIM_Base_MspInit+0x9c>)
 8002340:	f000 fdbe 	bl	8002ec0 <HAL_GPIO_Init>

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2019      	movs	r0, #25
 800234a:	f000 f9e2 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800234e:	2019      	movs	r0, #25
 8002350:	f000 f9fb 	bl	800274a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40014400 	.word	0x40014400
 8002360:	40023800 	.word	0x40023800
 8002364:	40020400 	.word	0x40020400

08002368 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <HAL_TIM_MspPostInit+0x68>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d11d      	bne.n	80023c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 8002394:	f043 0310 	orr.w	r3, r3, #16
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023a6:	2320      	movs	r3, #32
 80023a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80023b6:	2303      	movs	r3, #3
 80023b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <HAL_TIM_MspPostInit+0x70>)
 80023c2:	f000 fd7d 	bl	8002ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80023c6:	bf00      	nop
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40014000 	.word	0x40014000
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40021000 	.word	0x40021000

080023dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002414 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023e2:	490e      	ldr	r1, [pc, #56]	; (800241c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e8:	e002      	b.n	80023f0 <LoopCopyDataInit>

080023ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ee:	3304      	adds	r3, #4

080023f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f4:	d3f9      	bcc.n	80023ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f6:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023f8:	4c0b      	ldr	r4, [pc, #44]	; (8002428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023fc:	e001      	b.n	8002402 <LoopFillZerobss>

080023fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002400:	3204      	adds	r2, #4

08002402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002404:	d3fb      	bcc.n	80023fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002406:	f7ff fe8f 	bl	8002128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240a:	f007 fcf9 	bl	8009e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240e:	f7fe ff4d 	bl	80012ac <main>
  bx  lr    
 8002412:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8002420:	0800ded4 	.word	0x0800ded4
  ldr r2, =_sbss
 8002424:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8002428:	20000920 	.word	0x20000920

0800242c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <HAL_Init+0x40>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <HAL_Init+0x40>)
 8002446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <HAL_Init+0x40>)
 8002452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f000 f94f 	bl	80026fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245e:	2000      	movs	r0, #0
 8002460:	f000 f808 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002464:	f7ff fd0e 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_InitTick+0x54>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_InitTick+0x58>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248a:	fbb3 f3f1 	udiv	r3, r3, r1
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f967 	bl	8002766 <HAL_SYSTICK_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00e      	b.n	80024c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d80a      	bhi.n	80024be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f000 f92f 	bl	8002712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b4:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <HAL_InitTick+0x5c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000020 	.word	0x20000020
 80024cc:	20000028 	.word	0x20000028
 80024d0:	20000024 	.word	0x20000024

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000028 	.word	0x20000028
 80024f8:	20000500 	.word	0x20000500

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000500 	.word	0x20000500

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d005      	beq.n	800253a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_Delay+0x44>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800253a:	bf00      	nop
 800253c:	f7ff ffde 	bl	80024fc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8f7      	bhi.n	800253c <HAL_Delay+0x28>
  {
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000028 	.word	0x20000028

0800255c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258e:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	60d3      	str	r3, [r2, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <__NVIC_GetPriorityGrouping+0x18>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 0307 	and.w	r3, r3, #7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	db0b      	blt.n	80025ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4907      	ldr	r1, [pc, #28]	; (80025f8 <__NVIC_EnableIRQ+0x38>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2001      	movs	r0, #1
 80025e2:	fa00 f202 	lsl.w	r2, r0, r2
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000e100 	.word	0xe000e100

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	; (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c8:	d301      	bcc.n	80026ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ca:	2301      	movs	r3, #1
 80026cc:	e00f      	b.n	80026ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <SysTick_Config+0x40>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d6:	210f      	movs	r1, #15
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295
 80026dc:	f7ff ff8e 	bl	80025fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <SysTick_Config+0x40>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <SysTick_Config+0x40>)
 80026e8:	2207      	movs	r2, #7
 80026ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	e000e010 	.word	0xe000e010

080026fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff29 	bl	800255c <__NVIC_SetPriorityGrouping>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002724:	f7ff ff3e 	bl	80025a4 <__NVIC_GetPriorityGrouping>
 8002728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	6978      	ldr	r0, [r7, #20]
 8002730:	f7ff ff8e 	bl	8002650 <NVIC_EncodePriority>
 8002734:	4602      	mov	r2, r0
 8002736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff5d 	bl	80025fc <__NVIC_SetPriority>
}
 8002742:	bf00      	nop
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff31 	bl	80025c0 <__NVIC_EnableIRQ>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ffa2 	bl	80026b8 <SysTick_Config>
 8002774:	4603      	mov	r3, r0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7ff feb6 	bl	80024fc <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e099      	b.n	80028d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027bc:	e00f      	b.n	80027de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027be:	f7ff fe9d 	bl	80024fc <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d908      	bls.n	80027de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2203      	movs	r2, #3
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e078      	b.n	80028d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e8      	bne.n	80027be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4b38      	ldr	r3, [pc, #224]	; (80028d8 <HAL_DMA_Init+0x158>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2b04      	cmp	r3, #4
 8002836:	d107      	bne.n	8002848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	4313      	orrs	r3, r2
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f023 0307 	bic.w	r3, r3, #7
 800285e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b04      	cmp	r3, #4
 8002870:	d117      	bne.n	80028a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00e      	beq.n	80028a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fa9f 	bl	8002dc8 <DMA_CheckFifoParam>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2240      	movs	r2, #64	; 0x40
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800289e:	2301      	movs	r3, #1
 80028a0:	e016      	b.n	80028d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fa56 	bl	8002d5c <DMA_CalcBaseAndBitshift>
 80028b0:	4603      	mov	r3, r0
 80028b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	223f      	movs	r2, #63	; 0x3f
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	f010803f 	.word	0xf010803f

080028dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_DMA_Start_IT+0x26>
 80028fe:	2302      	movs	r3, #2
 8002900:	e040      	b.n	8002984 <HAL_DMA_Start_IT+0xa8>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d12f      	bne.n	8002976 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2202      	movs	r2, #2
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f9e8 	bl	8002d00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	223f      	movs	r2, #63	; 0x3f
 8002936:	409a      	lsls	r2, r3
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0216 	orr.w	r2, r2, #22
 800294a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0208 	orr.w	r2, r2, #8
 8002962:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e005      	b.n	8002982 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800297e:	2302      	movs	r3, #2
 8002980:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002982:	7dfb      	ldrb	r3, [r7, #23]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d004      	beq.n	80029aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00c      	b.n	80029c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2205      	movs	r2, #5
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029dc:	4b8e      	ldr	r3, [pc, #568]	; (8002c18 <HAL_DMA_IRQHandler+0x248>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a8e      	ldr	r2, [pc, #568]	; (8002c1c <HAL_DMA_IRQHandler+0x24c>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	0a9b      	lsrs	r3, r3, #10
 80029e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	2208      	movs	r2, #8
 80029fc:	409a      	lsls	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01a      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	2208      	movs	r2, #8
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2201      	movs	r2, #1
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d012      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	2201      	movs	r2, #1
 8002a60:	409a      	lsls	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	f043 0202 	orr.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	2204      	movs	r2, #4
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d012      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	2204      	movs	r2, #4
 8002a96:	409a      	lsls	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	f043 0204 	orr.w	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	2210      	movs	r2, #16
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d043      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d03c      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	2210      	movs	r2, #16
 8002acc:	409a      	lsls	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d018      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d108      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d024      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
 8002afe:	e01f      	b.n	8002b40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01b      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
 8002b10:	e016      	b.n	8002b40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0208 	bic.w	r2, r2, #8
 8002b2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	2220      	movs	r2, #32
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 808f 	beq.w	8002c70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8087 	beq.w	8002c70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	2220      	movs	r2, #32
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b05      	cmp	r3, #5
 8002b78:	d136      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0216 	bic.w	r2, r2, #22
 8002b88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d103      	bne.n	8002baa <HAL_DMA_IRQHandler+0x1da>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0208 	bic.w	r2, r2, #8
 8002bb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbe:	223f      	movs	r2, #63	; 0x3f
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d07e      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
        }
        return;
 8002be6:	e079      	b.n	8002cdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01d      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10d      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d031      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
 8002c14:	e02c      	b.n	8002c70 <HAL_DMA_IRQHandler+0x2a0>
 8002c16:	bf00      	nop
 8002c18:	20000020 	.word	0x20000020
 8002c1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d023      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
 8002c30:	e01e      	b.n	8002c70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10f      	bne.n	8002c60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0210 	bic.w	r2, r2, #16
 8002c4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d032      	beq.n	8002cde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2205      	movs	r2, #5
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d307      	bcc.n	8002cb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f2      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x2cc>
 8002cb6:	e000      	b.n	8002cba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
 8002cda:	e000      	b.n	8002cde <HAL_DMA_IRQHandler+0x30e>
        return;
 8002cdc:	bf00      	nop
    }
  }
}
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf2:	b2db      	uxtb	r3, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d108      	bne.n	8002d40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d3e:	e007      	b.n	8002d50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3b10      	subs	r3, #16
 8002d6c:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d909      	bls.n	8002d9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d92:	f023 0303 	bic.w	r3, r3, #3
 8002d96:	1d1a      	adds	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d9c:	e007      	b.n	8002dae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	aaaaaaab 	.word	0xaaaaaaab
 8002dc4:	0800cdbc 	.word	0x0800cdbc

08002dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11f      	bne.n	8002e22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d856      	bhi.n	8002e96 <DMA_CheckFifoParam+0xce>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <DMA_CheckFifoParam+0x28>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e13 	.word	0x08002e13
 8002df8:	08002e01 	.word	0x08002e01
 8002dfc:	08002e97 	.word	0x08002e97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d046      	beq.n	8002e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e10:	e043      	b.n	8002e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e1a:	d140      	bne.n	8002e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e20:	e03d      	b.n	8002e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2a:	d121      	bne.n	8002e70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d837      	bhi.n	8002ea2 <DMA_CheckFifoParam+0xda>
 8002e32:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <DMA_CheckFifoParam+0x70>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	08002e49 	.word	0x08002e49
 8002e3c:	08002e4f 	.word	0x08002e4f
 8002e40:	08002e49 	.word	0x08002e49
 8002e44:	08002e61 	.word	0x08002e61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4c:	e030      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d025      	beq.n	8002ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5e:	e022      	b.n	8002ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e68:	d11f      	bne.n	8002eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e6e:	e01c      	b.n	8002eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d903      	bls.n	8002e7e <DMA_CheckFifoParam+0xb6>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d003      	beq.n	8002e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e7c:	e018      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
      break;
 8002e82:	e015      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      break;
 8002e94:	e00b      	b.n	8002eae <DMA_CheckFifoParam+0xe6>
      break;
 8002e96:	bf00      	nop
 8002e98:	e00a      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e008      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e006      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e004      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eae:	bf00      	nop
    }
  } 
  
  return status; 
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	e16b      	b.n	80031b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002edc:	2201      	movs	r2, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	f040 815a 	bne.w	80031ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d005      	beq.n	8002f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d130      	bne.n	8002f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 0201 	and.w	r2, r3, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d017      	beq.n	8002fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d123      	bne.n	8003004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	08da      	lsrs	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3208      	adds	r2, #8
 8002ffe:	69b9      	ldr	r1, [r7, #24]
 8003000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0203 	and.w	r2, r3, #3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80b4 	beq.w	80031ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b60      	ldr	r3, [pc, #384]	; (80031cc <HAL_GPIO_Init+0x30c>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a5f      	ldr	r2, [pc, #380]	; (80031cc <HAL_GPIO_Init+0x30c>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b5d      	ldr	r3, [pc, #372]	; (80031cc <HAL_GPIO_Init+0x30c>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003062:	4a5b      	ldr	r2, [pc, #364]	; (80031d0 <HAL_GPIO_Init+0x310>)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	3302      	adds	r3, #2
 800306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a52      	ldr	r2, [pc, #328]	; (80031d4 <HAL_GPIO_Init+0x314>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d02b      	beq.n	80030e6 <HAL_GPIO_Init+0x226>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a51      	ldr	r2, [pc, #324]	; (80031d8 <HAL_GPIO_Init+0x318>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d025      	beq.n	80030e2 <HAL_GPIO_Init+0x222>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a50      	ldr	r2, [pc, #320]	; (80031dc <HAL_GPIO_Init+0x31c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01f      	beq.n	80030de <HAL_GPIO_Init+0x21e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4f      	ldr	r2, [pc, #316]	; (80031e0 <HAL_GPIO_Init+0x320>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d019      	beq.n	80030da <HAL_GPIO_Init+0x21a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4e      	ldr	r2, [pc, #312]	; (80031e4 <HAL_GPIO_Init+0x324>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x216>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4d      	ldr	r2, [pc, #308]	; (80031e8 <HAL_GPIO_Init+0x328>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x212>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4c      	ldr	r2, [pc, #304]	; (80031ec <HAL_GPIO_Init+0x32c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x20e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4b      	ldr	r2, [pc, #300]	; (80031f0 <HAL_GPIO_Init+0x330>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x20a>
 80030c6:	2307      	movs	r3, #7
 80030c8:	e00e      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030ca:	2308      	movs	r3, #8
 80030cc:	e00c      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030ce:	2306      	movs	r3, #6
 80030d0:	e00a      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030d2:	2305      	movs	r3, #5
 80030d4:	e008      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030d6:	2304      	movs	r3, #4
 80030d8:	e006      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030da:	2303      	movs	r3, #3
 80030dc:	e004      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030de:	2302      	movs	r3, #2
 80030e0:	e002      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <HAL_GPIO_Init+0x228>
 80030e6:	2300      	movs	r3, #0
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	f002 0203 	and.w	r2, r2, #3
 80030ee:	0092      	lsls	r2, r2, #2
 80030f0:	4093      	lsls	r3, r2
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030f8:	4935      	ldr	r1, [pc, #212]	; (80031d0 <HAL_GPIO_Init+0x310>)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3302      	adds	r3, #2
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003106:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <HAL_GPIO_Init+0x334>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800312a:	4a32      	ldr	r2, [pc, #200]	; (80031f4 <HAL_GPIO_Init+0x334>)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003130:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <HAL_GPIO_Init+0x334>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003154:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <HAL_GPIO_Init+0x334>)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800315a:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <HAL_GPIO_Init+0x334>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800317e:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_GPIO_Init+0x334>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_GPIO_Init+0x334>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031a8:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <HAL_GPIO_Init+0x334>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3301      	adds	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	f67f ae90 	bls.w	8002edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40013800 	.word	0x40013800
 80031d4:	40020000 	.word	0x40020000
 80031d8:	40020400 	.word	0x40020400
 80031dc:	40020800 	.word	0x40020800
 80031e0:	40020c00 	.word	0x40020c00
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40021400 	.word	0x40021400
 80031ec:	40021800 	.word	0x40021800
 80031f0:	40021c00 	.word	0x40021c00
 80031f4:	40013c00 	.word	0x40013c00

080031f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	887b      	ldrh	r3, [r7, #2]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
 8003214:	e001      	b.n	800321a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003244:	e003      	b.n	800324e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	619a      	str	r2, [r3, #24]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800326c:	887a      	ldrh	r2, [r7, #2]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	041a      	lsls	r2, r3, #16
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43d9      	mvns	r1, r3
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	400b      	ands	r3, r1
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	619a      	str	r2, [r3, #24]
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d006      	beq.n	80032b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032a6:	4a05      	ldr	r2, [pc, #20]	; (80032bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fd08 	bl	8001cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40013c00 	.word	0x40013c00

080032c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e12b      	b.n	800352a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd ff88 	bl	80011fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	; 0x24
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003324:	f003 f8ac 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 8003328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4a81      	ldr	r2, [pc, #516]	; (8003534 <HAL_I2C_Init+0x274>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d807      	bhi.n	8003344 <HAL_I2C_Init+0x84>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a80      	ldr	r2, [pc, #512]	; (8003538 <HAL_I2C_Init+0x278>)
 8003338:	4293      	cmp	r3, r2
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e006      	b.n	8003352 <HAL_I2C_Init+0x92>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a7d      	ldr	r2, [pc, #500]	; (800353c <HAL_I2C_Init+0x27c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	bf94      	ite	ls
 800334c:	2301      	movls	r3, #1
 800334e:	2300      	movhi	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0e7      	b.n	800352a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a78      	ldr	r2, [pc, #480]	; (8003540 <HAL_I2C_Init+0x280>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	0c9b      	lsrs	r3, r3, #18
 8003364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a6a      	ldr	r2, [pc, #424]	; (8003534 <HAL_I2C_Init+0x274>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d802      	bhi.n	8003394 <HAL_I2C_Init+0xd4>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	3301      	adds	r3, #1
 8003392:	e009      	b.n	80033a8 <HAL_I2C_Init+0xe8>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	4a69      	ldr	r2, [pc, #420]	; (8003544 <HAL_I2C_Init+0x284>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	3301      	adds	r3, #1
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	495c      	ldr	r1, [pc, #368]	; (8003534 <HAL_I2C_Init+0x274>)
 80033c4:	428b      	cmp	r3, r1
 80033c6:	d819      	bhi.n	80033fc <HAL_I2C_Init+0x13c>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e59      	subs	r1, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d6:	1c59      	adds	r1, r3, #1
 80033d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033dc:	400b      	ands	r3, r1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_I2C_Init+0x138>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1e59      	subs	r1, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f6:	e051      	b.n	800349c <HAL_I2C_Init+0x1dc>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e04f      	b.n	800349c <HAL_I2C_Init+0x1dc>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d111      	bne.n	8003428 <HAL_I2C_Init+0x168>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	440b      	add	r3, r1
 8003412:	fbb0 f3f3 	udiv	r3, r0, r3
 8003416:	3301      	adds	r3, #1
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e012      	b.n	800344e <HAL_I2C_Init+0x18e>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1e58      	subs	r0, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	0099      	lsls	r1, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	fbb0 f3f3 	udiv	r3, r0, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Init+0x196>
 8003452:	2301      	movs	r3, #1
 8003454:	e022      	b.n	800349c <HAL_I2C_Init+0x1dc>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10e      	bne.n	800347c <HAL_I2C_Init+0x1bc>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1e58      	subs	r0, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	440b      	add	r3, r1
 800346c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003470:	3301      	adds	r3, #1
 8003472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800347a:	e00f      	b.n	800349c <HAL_I2C_Init+0x1dc>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e58      	subs	r0, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	0099      	lsls	r1, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003492:	3301      	adds	r3, #1
 8003494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	6809      	ldr	r1, [r1, #0]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6911      	ldr	r1, [r2, #16]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68d2      	ldr	r2, [r2, #12]
 80034d6:	4311      	orrs	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	430b      	orrs	r3, r1
 80034de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	000186a0 	.word	0x000186a0
 8003538:	001e847f 	.word	0x001e847f
 800353c:	003d08ff 	.word	0x003d08ff
 8003540:	431bde83 	.word	0x431bde83
 8003544:	10624dd3 	.word	0x10624dd3

08003548 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	461a      	mov	r2, r3
 8003554:	460b      	mov	r3, r1
 8003556:	817b      	strh	r3, [r7, #10]
 8003558:	4613      	mov	r3, r2
 800355a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7fe ffce 	bl	80024fc <HAL_GetTick>
 8003560:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b20      	cmp	r3, #32
 800356c:	f040 80e0 	bne.w	8003730 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	2319      	movs	r3, #25
 8003576:	2201      	movs	r2, #1
 8003578:	4970      	ldr	r1, [pc, #448]	; (800373c <HAL_I2C_Master_Transmit+0x1f4>)
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f002 f8e6 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
 8003588:	e0d3      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_I2C_Master_Transmit+0x50>
 8003594:	2302      	movs	r3, #2
 8003596:	e0cc      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d007      	beq.n	80035be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2221      	movs	r2, #33	; 0x21
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2210      	movs	r2, #16
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	893a      	ldrh	r2, [r7, #8]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a50      	ldr	r2, [pc, #320]	; (8003740 <HAL_I2C_Master_Transmit+0x1f8>)
 80035fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003600:	8979      	ldrh	r1, [r7, #10]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f001 fea8 	bl	800535c <I2C_MasterRequestWrite>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e08d      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800362c:	e066      	b.n	80036fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	6a39      	ldr	r1, [r7, #32]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f002 f960 	bl	80058f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b04      	cmp	r3, #4
 8003644:	d107      	bne.n	8003656 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06b      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d11b      	bne.n	80036d0 <HAL_I2C_Master_Transmit+0x188>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	2b00      	cmp	r3, #0
 800369e:	d017      	beq.n	80036d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	6a39      	ldr	r1, [r7, #32]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f002 f950 	bl	800597a <I2C_WaitOnBTFFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00d      	beq.n	80036fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d107      	bne.n	80036f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e01a      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	2b00      	cmp	r3, #0
 8003702:	d194      	bne.n	800362e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	00100002 	.word	0x00100002
 8003740:	ffff0000 	.word	0xffff0000

08003744 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	461a      	mov	r2, r3
 8003750:	460b      	mov	r3, r1
 8003752:	817b      	strh	r3, [r7, #10]
 8003754:	4613      	mov	r3, r2
 8003756:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003758:	f7fe fed0 	bl	80024fc <HAL_GetTick>
 800375c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b20      	cmp	r3, #32
 8003768:	f040 820b 	bne.w	8003b82 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2319      	movs	r3, #25
 8003772:	2201      	movs	r2, #1
 8003774:	497c      	ldr	r1, [pc, #496]	; (8003968 <HAL_I2C_Master_Receive+0x224>)
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f001 ffe8 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	e1fe      	b.n	8003b84 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_I2C_Master_Receive+0x50>
 8003790:	2302      	movs	r3, #2
 8003792:	e1f7      	b.n	8003b84 <HAL_I2C_Master_Receive+0x440>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d007      	beq.n	80037ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2222      	movs	r2, #34	; 0x22
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2210      	movs	r2, #16
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	893a      	ldrh	r2, [r7, #8]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a5c      	ldr	r2, [pc, #368]	; (800396c <HAL_I2C_Master_Receive+0x228>)
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037fc:	8979      	ldrh	r1, [r7, #10]
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f001 fe2c 	bl	8005460 <I2C_MasterRequestRead>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e1b8      	b.n	8003b84 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	2b00      	cmp	r3, #0
 8003818:	d113      	bne.n	8003842 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381a:	2300      	movs	r3, #0
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e18c      	b.n	8003b5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	2b01      	cmp	r3, #1
 8003848:	d11b      	bne.n	8003882 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e16c      	b.n	8003b5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	2b02      	cmp	r3, #2
 8003888:	d11b      	bne.n	80038c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003898:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	e14c      	b.n	8003b5c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038e8:	e138      	b.n	8003b5c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	f200 80f1 	bhi.w	8003ad6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d123      	bne.n	8003944 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f002 f8ad 	bl	8005a60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e139      	b.n	8003b84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003942:	e10b      	b.n	8003b5c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	2b02      	cmp	r3, #2
 800394a:	d14e      	bne.n	80039ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	2200      	movs	r2, #0
 8003954:	4906      	ldr	r1, [pc, #24]	; (8003970 <HAL_I2C_Master_Receive+0x22c>)
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f001 fef8 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e10e      	b.n	8003b84 <HAL_I2C_Master_Receive+0x440>
 8003966:	bf00      	nop
 8003968:	00100002 	.word	0x00100002
 800396c:	ffff0000 	.word	0xffff0000
 8003970:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039e8:	e0b8      	b.n	8003b5c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	2200      	movs	r2, #0
 80039f2:	4966      	ldr	r1, [pc, #408]	; (8003b8c <HAL_I2C_Master_Receive+0x448>)
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f001 fea9 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0bf      	b.n	8003b84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	494f      	ldr	r1, [pc, #316]	; (8003b8c <HAL_I2C_Master_Receive+0x448>)
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f001 fe7b 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e091      	b.n	8003b84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ad4:	e042      	b.n	8003b5c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f001 ffc0 	bl	8005a60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e04c      	b.n	8003b84 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d118      	bne.n	8003b5c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f47f aec2 	bne.w	80038ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e000      	b.n	8003b84 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b82:	2302      	movs	r3, #2
  }
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	00010004 	.word	0x00010004

08003b90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b10      	cmp	r3, #16
 8003bbe:	d003      	beq.n	8003bc8 <HAL_I2C_EV_IRQHandler+0x38>
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	f040 80c1 	bne.w	8003d4a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <HAL_I2C_EV_IRQHandler+0x6e>
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003be8:	d003      	beq.n	8003bf2 <HAL_I2C_EV_IRQHandler+0x62>
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x66>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x68>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f000 8132 	beq.w	8003e62 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00c      	beq.n	8003c22 <HAL_I2C_EV_IRQHandler+0x92>
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	0a5b      	lsrs	r3, r3, #9
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d006      	beq.n	8003c22 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f001 ffa8 	bl	8005b6a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fd83 	bl	8004726 <I2C_Master_SB>
 8003c20:	e092      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	08db      	lsrs	r3, r3, #3
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_I2C_EV_IRQHandler+0xb2>
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	0a5b      	lsrs	r3, r3, #9
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fdf9 	bl	8004832 <I2C_Master_ADD10>
 8003c40:	e082      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_I2C_EV_IRQHandler+0xd2>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	0a5b      	lsrs	r3, r3, #9
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fe13 	bl	8004886 <I2C_Master_ADDR>
 8003c60:	e072      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d03b      	beq.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7c:	f000 80f3 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	09db      	lsrs	r3, r3, #7
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00f      	beq.n	8003cac <HAL_I2C_EV_IRQHandler+0x11c>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	0a9b      	lsrs	r3, r3, #10
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d009      	beq.n	8003cac <HAL_I2C_EV_IRQHandler+0x11c>
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f9f3 	bl	8004090 <I2C_MasterTransmit_TXE>
 8003caa:	e04d      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	089b      	lsrs	r3, r3, #2
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80d6 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	0a5b      	lsrs	r3, r3, #9
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80cf 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cc8:	7bbb      	ldrb	r3, [r7, #14]
 8003cca:	2b21      	cmp	r3, #33	; 0x21
 8003ccc:	d103      	bne.n	8003cd6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa7a 	bl	80041c8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd4:	e0c7      	b.n	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	f040 80c4 	bne.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fae8 	bl	80042b4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce4:	e0bf      	b.n	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf4:	f000 80b7 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	099b      	lsrs	r3, r3, #6
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00f      	beq.n	8003d24 <HAL_I2C_EV_IRQHandler+0x194>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	0a9b      	lsrs	r3, r3, #10
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d009      	beq.n	8003d24 <HAL_I2C_EV_IRQHandler+0x194>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	089b      	lsrs	r3, r3, #2
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fb5d 	bl	80043dc <I2C_MasterReceive_RXNE>
 8003d22:	e011      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 809a 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	0a5b      	lsrs	r3, r3, #9
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8093 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fc06 	bl	8004552 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d46:	e08e      	b.n	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d48:	e08d      	b.n	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	e007      	b.n	8003d6c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d012      	beq.n	8003d9e <HAL_I2C_EV_IRQHandler+0x20e>
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	0a5b      	lsrs	r3, r3, #9
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00c      	beq.n	8003d9e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d94:	69b9      	ldr	r1, [r7, #24]
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 ffc4 	bl	8004d24 <I2C_Slave_ADDR>
 8003d9c:	e066      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_I2C_EV_IRQHandler+0x22e>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	0a5b      	lsrs	r3, r3, #9
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fffe 	bl	8004db8 <I2C_Slave_STOPF>
 8003dbc:	e056      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003dbe:	7bbb      	ldrb	r3, [r7, #14]
 8003dc0:	2b21      	cmp	r3, #33	; 0x21
 8003dc2:	d002      	beq.n	8003dca <HAL_I2C_EV_IRQHandler+0x23a>
 8003dc4:	7bbb      	ldrb	r3, [r7, #14]
 8003dc6:	2b29      	cmp	r3, #41	; 0x29
 8003dc8:	d125      	bne.n	8003e16 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	09db      	lsrs	r3, r3, #7
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00f      	beq.n	8003df6 <HAL_I2C_EV_IRQHandler+0x266>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	0a9b      	lsrs	r3, r3, #10
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_I2C_EV_IRQHandler+0x266>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d103      	bne.n	8003df6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 feda 	bl	8004ba8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003df4:	e039      	b.n	8003e6a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d033      	beq.n	8003e6a <HAL_I2C_EV_IRQHandler+0x2da>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	0a5b      	lsrs	r3, r3, #9
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02d      	beq.n	8003e6a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 ff07 	bl	8004c22 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e14:	e029      	b.n	8003e6a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	099b      	lsrs	r3, r3, #6
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00f      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	0a9b      	lsrs	r3, r3, #10
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 ff12 	bl	8004c64 <I2C_SlaveReceive_RXNE>
 8003e40:	e014      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00e      	beq.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	0a5b      	lsrs	r3, r3, #9
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 ff40 	bl	8004ce0 <I2C_SlaveReceive_BTF>
 8003e60:	e004      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003e62:	bf00      	nop
 8003e64:	e002      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e6a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003e6c:	3720      	adds	r7, #32
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b08a      	sub	sp, #40	; 0x28
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e94:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00e      	beq.n	8003ec0 <HAL_I2C_ER_IRQHandler+0x4e>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	0a1b      	lsrs	r3, r3, #8
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ebe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	0a5b      	lsrs	r3, r3, #9
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00e      	beq.n	8003eea <HAL_I2C_ER_IRQHandler+0x78>
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	f043 0302 	orr.w	r3, r3, #2
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003ee8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	0a9b      	lsrs	r3, r3, #10
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d03f      	beq.n	8003f76 <HAL_I2C_ER_IRQHandler+0x104>
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d039      	beq.n	8003f76 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003f02:	7efb      	ldrb	r3, [r7, #27]
 8003f04:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f1c:	7ebb      	ldrb	r3, [r7, #26]
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d112      	bne.n	8003f48 <HAL_I2C_ER_IRQHandler+0xd6>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10f      	bne.n	8003f48 <HAL_I2C_ER_IRQHandler+0xd6>
 8003f28:	7cfb      	ldrb	r3, [r7, #19]
 8003f2a:	2b21      	cmp	r3, #33	; 0x21
 8003f2c:	d008      	beq.n	8003f40 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	2b29      	cmp	r3, #41	; 0x29
 8003f32:	d005      	beq.n	8003f40 <HAL_I2C_ER_IRQHandler+0xce>
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	2b28      	cmp	r3, #40	; 0x28
 8003f38:	d106      	bne.n	8003f48 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b21      	cmp	r3, #33	; 0x21
 8003f3e:	d103      	bne.n	8003f48 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f001 f869 	bl	8005018 <I2C_Slave_AF>
 8003f46:	e016      	b.n	8003f76 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f50:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	f043 0304 	orr.w	r3, r3, #4
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f5a:	7efb      	ldrb	r3, [r7, #27]
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d002      	beq.n	8003f66 <HAL_I2C_ER_IRQHandler+0xf4>
 8003f60:	7efb      	ldrb	r3, [r7, #27]
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d107      	bne.n	8003f76 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f74:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	0adb      	lsrs	r3, r3, #11
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00e      	beq.n	8003fa0 <HAL_I2C_ER_IRQHandler+0x12e>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	f043 0308 	orr.w	r3, r3, #8
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f9e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f001 f8a0 	bl	80050f8 <I2C_ITError>
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3728      	adds	r7, #40	; 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	70fb      	strb	r3, [r7, #3]
 800401c:	4613      	mov	r3, r2
 800401e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d150      	bne.n	8004158 <I2C_MasterTransmit_TXE+0xc8>
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b21      	cmp	r3, #33	; 0x21
 80040ba:	d14d      	bne.n	8004158 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d01d      	beq.n	80040fe <I2C_MasterTransmit_TXE+0x6e>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d01a      	beq.n	80040fe <I2C_MasterTransmit_TXE+0x6e>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040ce:	d016      	beq.n	80040fe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040de:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2211      	movs	r2, #17
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff ff62 	bl	8003fc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040fc:	e060      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800410c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b40      	cmp	r3, #64	; 0x40
 8004136:	d107      	bne.n	8004148 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff7d 	bl	8004040 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004146:	e03b      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff ff35 	bl	8003fc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004156:	e033      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b21      	cmp	r3, #33	; 0x21
 800415c:	d005      	beq.n	800416a <I2C_MasterTransmit_TXE+0xda>
 800415e:	7bbb      	ldrb	r3, [r7, #14]
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d12d      	bne.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b22      	cmp	r3, #34	; 0x22
 8004168:	d12a      	bne.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d108      	bne.n	8004186 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004182:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004184:	e01c      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d103      	bne.n	800419a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f88e 	bl	80042b4 <I2C_MemoryTransmit_TXE_BTF>
}
 8004198:	e012      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041be:	e7ff      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b21      	cmp	r3, #33	; 0x21
 80041e0:	d164      	bne.n	80042ac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d012      	beq.n	8004212 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004210:	e04c      	b.n	80042ac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d01d      	beq.n	8004254 <I2C_MasterTransmit_BTF+0x8c>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b20      	cmp	r3, #32
 800421c:	d01a      	beq.n	8004254 <I2C_MasterTransmit_BTF+0x8c>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004224:	d016      	beq.n	8004254 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004234:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2211      	movs	r2, #17
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff feb7 	bl	8003fc0 <HAL_I2C_MasterTxCpltCallback>
}
 8004252:	e02b      	b.n	80042ac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004262:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004272:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d107      	bne.n	800429e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fed2 	bl	8004040 <HAL_I2C_MemTxCpltCallback>
}
 800429c:	e006      	b.n	80042ac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fe8a 	bl	8003fc0 <HAL_I2C_MasterTxCpltCallback>
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d11d      	bne.n	8004308 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d10b      	bne.n	80042ec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	1c9a      	adds	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80042ea:	e073      	b.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	121b      	asrs	r3, r3, #8
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004306:	e065      	b.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10b      	bne.n	8004328 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004314:	b2da      	uxtb	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004326:	e055      	b.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432c:	2b02      	cmp	r3, #2
 800432e:	d151      	bne.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b22      	cmp	r3, #34	; 0x22
 8004334:	d10d      	bne.n	8004352 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004344:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004350:	e040      	b.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d015      	beq.n	8004388 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b21      	cmp	r3, #33	; 0x21
 8004360:	d112      	bne.n	8004388 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004386:	e025      	b.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d120      	bne.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	2b21      	cmp	r3, #33	; 0x21
 8004396:	d11d      	bne.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043a6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff fe36 	bl	8004040 <HAL_I2C_MemTxCpltCallback>
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b22      	cmp	r3, #34	; 0x22
 80043ee:	f040 80ac 	bne.w	800454a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d921      	bls.n	8004444 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b03      	cmp	r3, #3
 800442e:	f040 808c 	bne.w	800454a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004440:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004442:	e082      	b.n	800454a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	2b02      	cmp	r3, #2
 800444a:	d075      	beq.n	8004538 <I2C_MasterReceive_RXNE+0x15c>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d002      	beq.n	8004458 <I2C_MasterReceive_RXNE+0x7c>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d16f      	bne.n	8004538 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f001 facf 	bl	80059fc <I2C_WaitOnSTOPRequestThroughIT>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d142      	bne.n	80044ea <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004482:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b40      	cmp	r3, #64	; 0x40
 80044bc:	d10a      	bne.n	80044d4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff fdc1 	bl	8004054 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044d2:	e03a      	b.n	800454a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2212      	movs	r2, #18
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff fd76 	bl	8003fd4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044e8:	e02f      	b.n	800454a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044f8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fd99 	bl	8004068 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004536:	e008      	b.n	800454a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004546:	605a      	str	r2, [r3, #4]
}
 8004548:	e7ff      	b.n	800454a <I2C_MasterReceive_RXNE+0x16e>
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b04      	cmp	r3, #4
 8004568:	d11b      	bne.n	80045a2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80045a0:	e0bd      	b.n	800471e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d129      	bne.n	8004600 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ba:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d00a      	beq.n	80045d8 <I2C_MasterReceive_BTF+0x86>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d007      	beq.n	80045d8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045fe:	e08e      	b.n	800471e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d176      	bne.n	80046f8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d002      	beq.n	8004616 <I2C_MasterReceive_BTF+0xc4>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b10      	cmp	r3, #16
 8004614:	d108      	bne.n	8004628 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e019      	b.n	800465c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b04      	cmp	r3, #4
 800462c:	d002      	beq.n	8004634 <I2C_MasterReceive_BTF+0xe2>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d108      	bne.n	8004646 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e00a      	b.n	800465c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b10      	cmp	r3, #16
 800464a:	d007      	beq.n	800465c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800465a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80046b6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d10a      	bne.n	80046e2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff fcba 	bl	8004054 <HAL_I2C_MemRxCpltCallback>
}
 80046e0:	e01d      	b.n	800471e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2212      	movs	r2, #18
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff fc6f 	bl	8003fd4 <HAL_I2C_MasterRxCpltCallback>
}
 80046f6:	e012      	b.n	800471e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d117      	bne.n	800476a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004752:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004754:	e067      	b.n	8004826 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	b2da      	uxtb	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	611a      	str	r2, [r3, #16]
}
 8004768:	e05d      	b.n	8004826 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004772:	d133      	bne.n	80047dc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b21      	cmp	r3, #33	; 0x21
 800477e:	d109      	bne.n	8004794 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	b2db      	uxtb	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004790:	611a      	str	r2, [r3, #16]
 8004792:	e008      	b.n	80047a6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <I2C_Master_SB+0x92>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d108      	bne.n	80047ca <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d032      	beq.n	8004826 <I2C_Master_SB+0x100>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d02d      	beq.n	8004826 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d8:	605a      	str	r2, [r3, #4]
}
 80047da:	e024      	b.n	8004826 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10e      	bne.n	8004802 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	11db      	asrs	r3, r3, #7
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 0306 	and.w	r3, r3, #6
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f063 030f 	orn	r3, r3, #15
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	611a      	str	r2, [r3, #16]
}
 8004800:	e011      	b.n	8004826 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004806:	2b01      	cmp	r3, #1
 8004808:	d10d      	bne.n	8004826 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	b29b      	uxth	r3, r3
 8004810:	11db      	asrs	r3, r3, #7
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f003 0306 	and.w	r3, r3, #6
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f063 030e 	orn	r3, r3, #14
 800481e:	b2da      	uxtb	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	611a      	str	r2, [r3, #16]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	b2da      	uxtb	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	2b00      	cmp	r3, #0
 800484c:	d004      	beq.n	8004858 <I2C_Master_ADD10+0x26>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d108      	bne.n	800486a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00c      	beq.n	800487a <I2C_Master_ADD10+0x48>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004878:	605a      	str	r2, [r3, #4]
  }
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004886:	b480      	push	{r7}
 8004888:	b091      	sub	sp, #68	; 0x44
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004894:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b22      	cmp	r3, #34	; 0x22
 80048ae:	f040 8169 	bne.w	8004b84 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10f      	bne.n	80048da <I2C_Master_ADDR+0x54>
 80048ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d10b      	bne.n	80048da <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c2:	2300      	movs	r3, #0
 80048c4:	633b      	str	r3, [r7, #48]	; 0x30
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	633b      	str	r3, [r7, #48]	; 0x30
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	e160      	b.n	8004b9c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d11d      	bne.n	800491e <I2C_Master_ADDR+0x98>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048ea:	d118      	bne.n	800491e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ec:	2300      	movs	r3, #0
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004910:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	651a      	str	r2, [r3, #80]	; 0x50
 800491c:	e13e      	b.n	8004b9c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d113      	bne.n	8004950 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004928:	2300      	movs	r3, #0
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e115      	b.n	8004b7c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	f040 808a 	bne.w	8004a70 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004962:	d137      	bne.n	80049d4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004972:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800497e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004982:	d113      	bne.n	80049ac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004992:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004994:	2300      	movs	r3, #0
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	e0e7      	b.n	8004b7c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ac:	2300      	movs	r3, #0
 80049ae:	623b      	str	r3, [r7, #32]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	623b      	str	r3, [r7, #32]
 80049c0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e0d3      	b.n	8004b7c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d02e      	beq.n	8004a38 <I2C_Master_ADDR+0x1b2>
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d02b      	beq.n	8004a38 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	2b12      	cmp	r3, #18
 80049e4:	d102      	bne.n	80049ec <I2C_Master_ADDR+0x166>
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d125      	bne.n	8004a38 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d00e      	beq.n	8004a10 <I2C_Master_ADDR+0x18a>
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d00b      	beq.n	8004a10 <I2C_Master_ADDR+0x18a>
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d008      	beq.n	8004a10 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	e007      	b.n	8004a20 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a1e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	e0a1      	b.n	8004b7c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a46:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e085      	b.n	8004b7c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d14d      	bne.n	8004b16 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d016      	beq.n	8004aae <I2C_Master_ADDR+0x228>
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d013      	beq.n	8004aae <I2C_Master_ADDR+0x228>
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d010      	beq.n	8004aae <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e007      	b.n	8004abe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004abc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004acc:	d117      	bne.n	8004afe <I2C_Master_ADDR+0x278>
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ad4:	d00b      	beq.n	8004aee <I2C_Master_ADDR+0x268>
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d008      	beq.n	8004aee <I2C_Master_ADDR+0x268>
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d005      	beq.n	8004aee <I2C_Master_ADDR+0x268>
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d002      	beq.n	8004aee <I2C_Master_ADDR+0x268>
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d107      	bne.n	8004afe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004afc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	e032      	b.n	8004b7c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b24:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b34:	d117      	bne.n	8004b66 <I2C_Master_ADDR+0x2e0>
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b3c:	d00b      	beq.n	8004b56 <I2C_Master_ADDR+0x2d0>
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d008      	beq.n	8004b56 <I2C_Master_ADDR+0x2d0>
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d005      	beq.n	8004b56 <I2C_Master_ADDR+0x2d0>
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d002      	beq.n	8004b56 <I2C_Master_ADDR+0x2d0>
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d107      	bne.n	8004b66 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b82:	e00b      	b.n	8004b9c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
}
 8004b9a:	e7ff      	b.n	8004b9c <I2C_Master_ADDR+0x316>
 8004b9c:	bf00      	nop
 8004b9e:	3744      	adds	r7, #68	; 0x44
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d02b      	beq.n	8004c1a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	781a      	ldrb	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d114      	bne.n	8004c1a <I2C_SlaveTransmit_TXE+0x72>
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	2b29      	cmp	r3, #41	; 0x29
 8004bf4:	d111      	bne.n	8004c1a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2221      	movs	r2, #33	; 0x21
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2228      	movs	r2, #40	; 0x28
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff f9e7 	bl	8003fe8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d011      	beq.n	8004c58 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	781a      	ldrb	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d02c      	beq.n	8004cd8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d114      	bne.n	8004cd8 <I2C_SlaveReceive_RXNE+0x74>
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8004cb2:	d111      	bne.n	8004cd8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2222      	movs	r2, #34	; 0x22
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2228      	movs	r2, #40	; 0x28
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff f992 	bl	8003ffc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d012      	beq.n	8004d18 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d3e:	2b28      	cmp	r3, #40	; 0x28
 8004d40:	d127      	bne.n	8004d92 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	09db      	lsrs	r3, r3, #7
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	81bb      	strh	r3, [r7, #12]
 8004d74:	e002      	b.n	8004d7c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d84:	89ba      	ldrh	r2, [r7, #12]
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff f940 	bl	8004010 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d90:	e00e      	b.n	8004db0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dd6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	60bb      	str	r3, [r7, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e04:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e14:	d172      	bne.n	8004efc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	2b22      	cmp	r3, #34	; 0x22
 8004e1a:	d002      	beq.n	8004e22 <I2C_Slave_STOPF+0x6a>
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e20:	d135      	bne.n	8004e8e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f043 0204 	orr.w	r2, r3, #4
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e54:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fd ff42 	bl	8002ce4 <HAL_DMA_GetState>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d049      	beq.n	8004efa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	4a69      	ldr	r2, [pc, #420]	; (8005010 <I2C_Slave_STOPF+0x258>)
 8004e6c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fd fd8a 	bl	800298c <HAL_DMA_Abort_IT>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d03d      	beq.n	8004efa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e8c:	e035      	b.n	8004efa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f043 0204 	orr.w	r2, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ec0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fd ff0c 	bl	8002ce4 <HAL_DMA_GetState>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d014      	beq.n	8004efc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	4a4e      	ldr	r2, [pc, #312]	; (8005010 <I2C_Slave_STOPF+0x258>)
 8004ed8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fd fd54 	bl	800298c <HAL_DMA_Abort_IT>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4798      	blx	r3
 8004ef8:	e000      	b.n	8004efc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004efa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d03e      	beq.n	8004f84 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d112      	bne.n	8004f3a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d112      	bne.n	8004f6e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	f043 0204 	orr.w	r2, r3, #4
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f8b3 	bl	80050f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f92:	e039      	b.n	8005008 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b2a      	cmp	r3, #42	; 0x2a
 8004f98:	d109      	bne.n	8004fae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2228      	movs	r2, #40	; 0x28
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff f827 	bl	8003ffc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b28      	cmp	r3, #40	; 0x28
 8004fb8:	d111      	bne.n	8004fde <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a15      	ldr	r2, [pc, #84]	; (8005014 <I2C_Slave_STOPF+0x25c>)
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff f828 	bl	800402c <HAL_I2C_ListenCpltCallback>
}
 8004fdc:	e014      	b.n	8005008 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	2b22      	cmp	r3, #34	; 0x22
 8004fe4:	d002      	beq.n	8004fec <I2C_Slave_STOPF+0x234>
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	2b22      	cmp	r3, #34	; 0x22
 8004fea:	d10d      	bne.n	8005008 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fe fffa 	bl	8003ffc <HAL_I2C_SlaveRxCpltCallback>
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	080055fd 	.word	0x080055fd
 8005014:	ffff0000 	.word	0xffff0000

08005018 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005026:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d002      	beq.n	800503a <I2C_Slave_AF+0x22>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b20      	cmp	r3, #32
 8005038:	d129      	bne.n	800508e <I2C_Slave_AF+0x76>
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2b28      	cmp	r3, #40	; 0x28
 800503e:	d126      	bne.n	800508e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a2c      	ldr	r2, [pc, #176]	; (80050f4 <I2C_Slave_AF+0xdc>)
 8005044:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005054:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800505e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fe ffd0 	bl	800402c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800508c:	e02e      	b.n	80050ec <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	2b21      	cmp	r3, #33	; 0x21
 8005092:	d126      	bne.n	80050e2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a17      	ldr	r2, [pc, #92]	; (80050f4 <I2C_Slave_AF+0xdc>)
 8005098:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2221      	movs	r2, #33	; 0x21
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050be:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050c8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fe ff84 	bl	8003fe8 <HAL_I2C_SlaveTxCpltCallback>
}
 80050e0:	e004      	b.n	80050ec <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050ea:	615a      	str	r2, [r3, #20]
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	ffff0000 	.word	0xffff0000

080050f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005106:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005110:	7bbb      	ldrb	r3, [r7, #14]
 8005112:	2b10      	cmp	r3, #16
 8005114:	d002      	beq.n	800511c <I2C_ITError+0x24>
 8005116:	7bbb      	ldrb	r3, [r7, #14]
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	d10a      	bne.n	8005132 <I2C_ITError+0x3a>
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b22      	cmp	r3, #34	; 0x22
 8005120:	d107      	bne.n	8005132 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005130:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005138:	2b28      	cmp	r3, #40	; 0x28
 800513a:	d107      	bne.n	800514c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2228      	movs	r2, #40	; 0x28
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800514a:	e015      	b.n	8005178 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515a:	d00a      	beq.n	8005172 <I2C_ITError+0x7a>
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b60      	cmp	r3, #96	; 0x60
 8005160:	d007      	beq.n	8005172 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005186:	d162      	bne.n	800524e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005196:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d020      	beq.n	80051e8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051aa:	4a6a      	ldr	r2, [pc, #424]	; (8005354 <I2C_ITError+0x25c>)
 80051ac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fd fbea 	bl	800298c <HAL_DMA_Abort_IT>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8089 	beq.w	80052d2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051e2:	4610      	mov	r0, r2
 80051e4:	4798      	blx	r3
 80051e6:	e074      	b.n	80052d2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	4a59      	ldr	r2, [pc, #356]	; (8005354 <I2C_ITError+0x25c>)
 80051ee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fd fbc9 	bl	800298c <HAL_DMA_Abort_IT>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d068      	beq.n	80052d2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d10b      	bne.n	8005226 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0201 	bic.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005248:	4610      	mov	r0, r2
 800524a:	4798      	blx	r3
 800524c:	e041      	b.n	80052d2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b60      	cmp	r3, #96	; 0x60
 8005258:	d125      	bne.n	80052a6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b40      	cmp	r3, #64	; 0x40
 8005274:	d10b      	bne.n	800528e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fe feec 	bl	800407c <HAL_I2C_AbortCpltCallback>
 80052a4:	e015      	b.n	80052d2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d10b      	bne.n	80052cc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7fe fecb 	bl	8004068 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10e      	bne.n	8005300 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d104      	bne.n	8005300 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800530e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005316:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b04      	cmp	r3, #4
 8005322:	d113      	bne.n	800534c <I2C_ITError+0x254>
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b28      	cmp	r3, #40	; 0x28
 8005328:	d110      	bne.n	800534c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <I2C_ITError+0x260>)
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fe fe70 	bl	800402c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	080055fd 	.word	0x080055fd
 8005358:	ffff0000 	.word	0xffff0000

0800535c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	607a      	str	r2, [r7, #4]
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	460b      	mov	r3, r1
 800536a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d006      	beq.n	8005386 <I2C_MasterRequestWrite+0x2a>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d003      	beq.n	8005386 <I2C_MasterRequestWrite+0x2a>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005384:	d108      	bne.n	8005398 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e00b      	b.n	80053b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	2b12      	cmp	r3, #18
 800539e:	d107      	bne.n	80053b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f9c5 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d6:	d103      	bne.n	80053e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e035      	b.n	8005450 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ec:	d108      	bne.n	8005400 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ee:	897b      	ldrh	r3, [r7, #10]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053fc:	611a      	str	r2, [r3, #16]
 80053fe:	e01b      	b.n	8005438 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005400:	897b      	ldrh	r3, [r7, #10]
 8005402:	11db      	asrs	r3, r3, #7
 8005404:	b2db      	uxtb	r3, r3
 8005406:	f003 0306 	and.w	r3, r3, #6
 800540a:	b2db      	uxtb	r3, r3
 800540c:	f063 030f 	orn	r3, r3, #15
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	490e      	ldr	r1, [pc, #56]	; (8005458 <I2C_MasterRequestWrite+0xfc>)
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f9eb 	bl	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e010      	b.n	8005450 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	4907      	ldr	r1, [pc, #28]	; (800545c <I2C_MasterRequestWrite+0x100>)
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f9db 	bl	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	00010008 	.word	0x00010008
 800545c:	00010002 	.word	0x00010002

08005460 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	460b      	mov	r3, r1
 800546e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005484:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b08      	cmp	r3, #8
 800548a:	d006      	beq.n	800549a <I2C_MasterRequestRead+0x3a>
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d003      	beq.n	800549a <I2C_MasterRequestRead+0x3a>
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005498:	d108      	bne.n	80054ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e00b      	b.n	80054c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	2b11      	cmp	r3, #17
 80054b2:	d107      	bne.n	80054c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f93b 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ea:	d103      	bne.n	80054f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e079      	b.n	80055ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005500:	d108      	bne.n	8005514 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005502:	897b      	ldrh	r3, [r7, #10]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	611a      	str	r2, [r3, #16]
 8005512:	e05f      	b.n	80055d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005514:	897b      	ldrh	r3, [r7, #10]
 8005516:	11db      	asrs	r3, r3, #7
 8005518:	b2db      	uxtb	r3, r3
 800551a:	f003 0306 	and.w	r3, r3, #6
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f063 030f 	orn	r3, r3, #15
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4930      	ldr	r1, [pc, #192]	; (80055f4 <I2C_MasterRequestRead+0x194>)
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f961 	bl	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e054      	b.n	80055ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005542:	897b      	ldrh	r3, [r7, #10]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4929      	ldr	r1, [pc, #164]	; (80055f8 <I2C_MasterRequestRead+0x198>)
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 f951 	bl	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e044      	b.n	80055ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005586:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f8d9 	bl	800574c <I2C_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ae:	d103      	bne.n	80055b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e017      	b.n	80055ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80055bc:	897b      	ldrh	r3, [r7, #10]
 80055be:	11db      	asrs	r3, r3, #7
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f003 0306 	and.w	r3, r3, #6
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f063 030e 	orn	r3, r3, #14
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4907      	ldr	r1, [pc, #28]	; (80055f8 <I2C_MasterRequestRead+0x198>)
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 f90d 	bl	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	00010008 	.word	0x00010008
 80055f8:	00010002 	.word	0x00010002

080055fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005614:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005616:	4b4b      	ldr	r3, [pc, #300]	; (8005744 <I2C_DMAAbort+0x148>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	08db      	lsrs	r3, r3, #3
 800561c:	4a4a      	ldr	r2, [pc, #296]	; (8005748 <I2C_DMAAbort+0x14c>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	0a1a      	lsrs	r2, r3, #8
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	00da      	lsls	r2, r3, #3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005642:	e00a      	b.n	800565a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3b01      	subs	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005658:	d0ea      	beq.n	8005630 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005666:	2200      	movs	r2, #0
 8005668:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	2200      	movs	r2, #0
 8005678:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005688:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2200      	movs	r2, #0
 800568e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	2200      	movs	r2, #0
 800569e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	2200      	movs	r2, #0
 80056ae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0201 	bic.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b60      	cmp	r3, #96	; 0x60
 80056ca:	d10e      	bne.n	80056ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2200      	movs	r2, #0
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056e2:	6978      	ldr	r0, [r7, #20]
 80056e4:	f7fe fcca 	bl	800407c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056e8:	e027      	b.n	800573a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ea:	7cfb      	ldrb	r3, [r7, #19]
 80056ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056f0:	2b28      	cmp	r3, #40	; 0x28
 80056f2:	d117      	bne.n	8005724 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005712:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2228      	movs	r2, #40	; 0x28
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005722:	e007      	b.n	8005734 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005734:	6978      	ldr	r0, [r7, #20]
 8005736:	f7fe fc97 	bl	8004068 <HAL_I2C_ErrorCallback>
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000020 	.word	0x20000020
 8005748:	14f8b589 	.word	0x14f8b589

0800574c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800575c:	e025      	b.n	80057aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d021      	beq.n	80057aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005766:	f7fc fec9 	bl	80024fc <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d116      	bne.n	80057aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f043 0220 	orr.w	r2, r3, #32
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e023      	b.n	80057f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	0c1b      	lsrs	r3, r3, #16
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d10d      	bne.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	43da      	mvns	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4013      	ands	r3, r2
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bf0c      	ite	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	2300      	movne	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	e00c      	b.n	80057ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	43da      	mvns	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4013      	ands	r3, r2
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bf0c      	ite	eq
 80057e2:	2301      	moveq	r3, #1
 80057e4:	2300      	movne	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d0b6      	beq.n	800575e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005808:	e051      	b.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005818:	d123      	bne.n	8005862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005828:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005832:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f043 0204 	orr.w	r2, r3, #4
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e046      	b.n	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d021      	beq.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586a:	f7fc fe47 	bl	80024fc <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d116      	bne.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e020      	b.n	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d10c      	bne.n	80058d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	43da      	mvns	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4013      	ands	r3, r2
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bf14      	ite	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	2300      	moveq	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	e00b      	b.n	80058ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	43da      	mvns	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4013      	ands	r3, r2
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d18d      	bne.n	800580a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005904:	e02d      	b.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 f900 	bl	8005b0c <I2C_IsAcknowledgeFailed>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e02d      	b.n	8005972 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d021      	beq.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591e:	f7fc fded 	bl	80024fc <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d116      	bne.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f043 0220 	orr.w	r2, r3, #32
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e007      	b.n	8005972 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b80      	cmp	r3, #128	; 0x80
 800596e:	d1ca      	bne.n	8005906 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005986:	e02d      	b.n	80059e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f8bf 	bl	8005b0c <I2C_IsAcknowledgeFailed>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e02d      	b.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d021      	beq.n	80059e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a0:	f7fc fdac 	bl	80024fc <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d302      	bcc.n	80059b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d116      	bne.n	80059e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	f043 0220 	orr.w	r2, r3, #32
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e007      	b.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d1ca      	bne.n	8005988 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a08:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	08db      	lsrs	r3, r3, #3
 8005a0e:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	0a1a      	lsrs	r2, r3, #8
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d107      	bne.n	8005a3a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f043 0220 	orr.w	r2, r3, #32
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e008      	b.n	8005a4c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a48:	d0e9      	beq.n	8005a1e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	20000020 	.word	0x20000020
 8005a5c:	14f8b589 	.word	0x14f8b589

08005a60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a6c:	e042      	b.n	8005af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2b10      	cmp	r3, #16
 8005a7a:	d119      	bne.n	8005ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0210 	mvn.w	r2, #16
 8005a84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e029      	b.n	8005b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab0:	f7fc fd24 	bl	80024fc <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d302      	bcc.n	8005ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d116      	bne.n	8005af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f043 0220 	orr.w	r2, r3, #32
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e007      	b.n	8005b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d1b5      	bne.n	8005a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b22:	d11b      	bne.n	8005b5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	f043 0204 	orr.w	r2, r3, #4
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b7a:	d103      	bne.n	8005b84 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b82:	e007      	b.n	8005b94 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b8c:	d102      	bne.n	8005b94 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2208      	movs	r2, #8
 8005b92:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e267      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d075      	beq.n	8005caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bbe:	4b88      	ldr	r3, [pc, #544]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d00c      	beq.n	8005be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bca:	4b85      	ldr	r3, [pc, #532]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d112      	bne.n	8005bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bd6:	4b82      	ldr	r3, [pc, #520]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005be2:	d10b      	bne.n	8005bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be4:	4b7e      	ldr	r3, [pc, #504]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d05b      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x108>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d157      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e242      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c04:	d106      	bne.n	8005c14 <HAL_RCC_OscConfig+0x74>
 8005c06:	4b76      	ldr	r3, [pc, #472]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a75      	ldr	r2, [pc, #468]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	e01d      	b.n	8005c50 <HAL_RCC_OscConfig+0xb0>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c1c:	d10c      	bne.n	8005c38 <HAL_RCC_OscConfig+0x98>
 8005c1e:	4b70      	ldr	r3, [pc, #448]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a6f      	ldr	r2, [pc, #444]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	4b6d      	ldr	r3, [pc, #436]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a6c      	ldr	r2, [pc, #432]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	e00b      	b.n	8005c50 <HAL_RCC_OscConfig+0xb0>
 8005c38:	4b69      	ldr	r3, [pc, #420]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a68      	ldr	r2, [pc, #416]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	4b66      	ldr	r3, [pc, #408]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a65      	ldr	r2, [pc, #404]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d013      	beq.n	8005c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c58:	f7fc fc50 	bl	80024fc <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c60:	f7fc fc4c 	bl	80024fc <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b64      	cmp	r3, #100	; 0x64
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e207      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c72:	4b5b      	ldr	r3, [pc, #364]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0f0      	beq.n	8005c60 <HAL_RCC_OscConfig+0xc0>
 8005c7e:	e014      	b.n	8005caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c80:	f7fc fc3c 	bl	80024fc <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c88:	f7fc fc38 	bl	80024fc <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b64      	cmp	r3, #100	; 0x64
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e1f3      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c9a:	4b51      	ldr	r3, [pc, #324]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f0      	bne.n	8005c88 <HAL_RCC_OscConfig+0xe8>
 8005ca6:	e000      	b.n	8005caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d063      	beq.n	8005d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cb6:	4b4a      	ldr	r3, [pc, #296]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cc2:	4b47      	ldr	r3, [pc, #284]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d11c      	bne.n	8005d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cce:	4b44      	ldr	r3, [pc, #272]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d116      	bne.n	8005d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cda:	4b41      	ldr	r3, [pc, #260]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x152>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d001      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e1c7      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf2:	4b3b      	ldr	r3, [pc, #236]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	4937      	ldr	r1, [pc, #220]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d06:	e03a      	b.n	8005d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d020      	beq.n	8005d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d10:	4b34      	ldr	r3, [pc, #208]	; (8005de4 <HAL_RCC_OscConfig+0x244>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d16:	f7fc fbf1 	bl	80024fc <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d1e:	f7fc fbed 	bl	80024fc <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e1a8      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d30:	4b2b      	ldr	r3, [pc, #172]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0f0      	beq.n	8005d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d3c:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	4925      	ldr	r1, [pc, #148]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	600b      	str	r3, [r1, #0]
 8005d50:	e015      	b.n	8005d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d52:	4b24      	ldr	r3, [pc, #144]	; (8005de4 <HAL_RCC_OscConfig+0x244>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d58:	f7fc fbd0 	bl	80024fc <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d60:	f7fc fbcc 	bl	80024fc <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e187      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d72:	4b1b      	ldr	r3, [pc, #108]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d036      	beq.n	8005df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d016      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <HAL_RCC_OscConfig+0x248>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d98:	f7fc fbb0 	bl	80024fc <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005da0:	f7fc fbac 	bl	80024fc <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e167      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <HAL_RCC_OscConfig+0x240>)
 8005db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0x200>
 8005dbe:	e01b      	b.n	8005df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dc0:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <HAL_RCC_OscConfig+0x248>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dc6:	f7fc fb99 	bl	80024fc <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dcc:	e00e      	b.n	8005dec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dce:	f7fc fb95 	bl	80024fc <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d907      	bls.n	8005dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e150      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
 8005de0:	40023800 	.word	0x40023800
 8005de4:	42470000 	.word	0x42470000
 8005de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dec:	4b88      	ldr	r3, [pc, #544]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1ea      	bne.n	8005dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 8097 	beq.w	8005f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e06:	2300      	movs	r3, #0
 8005e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e0a:	4b81      	ldr	r3, [pc, #516]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10f      	bne.n	8005e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	4b7d      	ldr	r3, [pc, #500]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	4a7c      	ldr	r2, [pc, #496]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e24:	6413      	str	r3, [r2, #64]	; 0x40
 8005e26:	4b7a      	ldr	r3, [pc, #488]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2e:	60bb      	str	r3, [r7, #8]
 8005e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e32:	2301      	movs	r3, #1
 8005e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e36:	4b77      	ldr	r3, [pc, #476]	; (8006014 <HAL_RCC_OscConfig+0x474>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d118      	bne.n	8005e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e42:	4b74      	ldr	r3, [pc, #464]	; (8006014 <HAL_RCC_OscConfig+0x474>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a73      	ldr	r2, [pc, #460]	; (8006014 <HAL_RCC_OscConfig+0x474>)
 8005e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e4e:	f7fc fb55 	bl	80024fc <HAL_GetTick>
 8005e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e54:	e008      	b.n	8005e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e56:	f7fc fb51 	bl	80024fc <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e10c      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e68:	4b6a      	ldr	r3, [pc, #424]	; (8006014 <HAL_RCC_OscConfig+0x474>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0f0      	beq.n	8005e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d106      	bne.n	8005e8a <HAL_RCC_OscConfig+0x2ea>
 8005e7c:	4b64      	ldr	r3, [pc, #400]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e80:	4a63      	ldr	r2, [pc, #396]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	6713      	str	r3, [r2, #112]	; 0x70
 8005e88:	e01c      	b.n	8005ec4 <HAL_RCC_OscConfig+0x324>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d10c      	bne.n	8005eac <HAL_RCC_OscConfig+0x30c>
 8005e92:	4b5f      	ldr	r3, [pc, #380]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e96:	4a5e      	ldr	r2, [pc, #376]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005e98:	f043 0304 	orr.w	r3, r3, #4
 8005e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e9e:	4b5c      	ldr	r3, [pc, #368]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	4a5b      	ldr	r2, [pc, #364]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005ea4:	f043 0301 	orr.w	r3, r3, #1
 8005ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eaa:	e00b      	b.n	8005ec4 <HAL_RCC_OscConfig+0x324>
 8005eac:	4b58      	ldr	r3, [pc, #352]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb0:	4a57      	ldr	r2, [pc, #348]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005eb2:	f023 0301 	bic.w	r3, r3, #1
 8005eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb8:	4b55      	ldr	r3, [pc, #340]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4a54      	ldr	r2, [pc, #336]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005ebe:	f023 0304 	bic.w	r3, r3, #4
 8005ec2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d015      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ecc:	f7fc fb16 	bl	80024fc <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed4:	f7fc fb12 	bl	80024fc <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e0cb      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eea:	4b49      	ldr	r3, [pc, #292]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0ee      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x334>
 8005ef6:	e014      	b.n	8005f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef8:	f7fc fb00 	bl	80024fc <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005efe:	e00a      	b.n	8005f16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f00:	f7fc fafc 	bl	80024fc <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e0b5      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f16:	4b3e      	ldr	r3, [pc, #248]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1ee      	bne.n	8005f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d105      	bne.n	8005f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f28:	4b39      	ldr	r3, [pc, #228]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	4a38      	ldr	r2, [pc, #224]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80a1 	beq.w	8006080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f3e:	4b34      	ldr	r3, [pc, #208]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d05c      	beq.n	8006004 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d141      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f52:	4b31      	ldr	r3, [pc, #196]	; (8006018 <HAL_RCC_OscConfig+0x478>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f58:	f7fc fad0 	bl	80024fc <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f60:	f7fc facc 	bl	80024fc <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e087      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f72:	4b27      	ldr	r3, [pc, #156]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1f0      	bne.n	8005f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69da      	ldr	r2, [r3, #28]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	019b      	lsls	r3, r3, #6
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	085b      	lsrs	r3, r3, #1
 8005f96:	3b01      	subs	r3, #1
 8005f98:	041b      	lsls	r3, r3, #16
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	061b      	lsls	r3, r3, #24
 8005fa2:	491b      	ldr	r1, [pc, #108]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fa8:	4b1b      	ldr	r3, [pc, #108]	; (8006018 <HAL_RCC_OscConfig+0x478>)
 8005faa:	2201      	movs	r2, #1
 8005fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fae:	f7fc faa5 	bl	80024fc <HAL_GetTick>
 8005fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb6:	f7fc faa1 	bl	80024fc <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e05c      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc8:	4b11      	ldr	r3, [pc, #68]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0f0      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x416>
 8005fd4:	e054      	b.n	8006080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd6:	4b10      	ldr	r3, [pc, #64]	; (8006018 <HAL_RCC_OscConfig+0x478>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fdc:	f7fc fa8e 	bl	80024fc <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe4:	f7fc fa8a 	bl	80024fc <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e045      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff6:	4b06      	ldr	r3, [pc, #24]	; (8006010 <HAL_RCC_OscConfig+0x470>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x444>
 8006002:	e03d      	b.n	8006080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d107      	bne.n	800601c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e038      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
 8006010:	40023800 	.word	0x40023800
 8006014:	40007000 	.word	0x40007000
 8006018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800601c:	4b1b      	ldr	r3, [pc, #108]	; (800608c <HAL_RCC_OscConfig+0x4ec>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d028      	beq.n	800607c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006034:	429a      	cmp	r2, r3
 8006036:	d121      	bne.n	800607c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006042:	429a      	cmp	r2, r3
 8006044:	d11a      	bne.n	800607c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800604c:	4013      	ands	r3, r2
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006054:	4293      	cmp	r3, r2
 8006056:	d111      	bne.n	800607c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	085b      	lsrs	r3, r3, #1
 8006064:	3b01      	subs	r3, #1
 8006066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006068:	429a      	cmp	r2, r3
 800606a:	d107      	bne.n	800607c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006078:	429a      	cmp	r2, r3
 800607a:	d001      	beq.n	8006080 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	40023800 	.word	0x40023800

08006090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0cc      	b.n	800623e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060a4:	4b68      	ldr	r3, [pc, #416]	; (8006248 <HAL_RCC_ClockConfig+0x1b8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d90c      	bls.n	80060cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060b2:	4b65      	ldr	r3, [pc, #404]	; (8006248 <HAL_RCC_ClockConfig+0x1b8>)
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ba:	4b63      	ldr	r3, [pc, #396]	; (8006248 <HAL_RCC_ClockConfig+0x1b8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d001      	beq.n	80060cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0b8      	b.n	800623e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d020      	beq.n	800611a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060e4:	4b59      	ldr	r3, [pc, #356]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	4a58      	ldr	r2, [pc, #352]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0308 	and.w	r3, r3, #8
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060fc:	4b53      	ldr	r3, [pc, #332]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	4a52      	ldr	r2, [pc, #328]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006108:	4b50      	ldr	r3, [pc, #320]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	494d      	ldr	r1, [pc, #308]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	4313      	orrs	r3, r2
 8006118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d044      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d107      	bne.n	800613e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612e:	4b47      	ldr	r3, [pc, #284]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d119      	bne.n	800616e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e07f      	b.n	800623e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d003      	beq.n	800614e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800614a:	2b03      	cmp	r3, #3
 800614c:	d107      	bne.n	800615e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800614e:	4b3f      	ldr	r3, [pc, #252]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e06f      	b.n	800623e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800615e:	4b3b      	ldr	r3, [pc, #236]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e067      	b.n	800623e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800616e:	4b37      	ldr	r3, [pc, #220]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f023 0203 	bic.w	r2, r3, #3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	4934      	ldr	r1, [pc, #208]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 800617c:	4313      	orrs	r3, r2
 800617e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006180:	f7fc f9bc 	bl	80024fc <HAL_GetTick>
 8006184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006186:	e00a      	b.n	800619e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006188:	f7fc f9b8 	bl	80024fc <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	f241 3288 	movw	r2, #5000	; 0x1388
 8006196:	4293      	cmp	r3, r2
 8006198:	d901      	bls.n	800619e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e04f      	b.n	800623e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800619e:	4b2b      	ldr	r3, [pc, #172]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 020c 	and.w	r2, r3, #12
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d1eb      	bne.n	8006188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061b0:	4b25      	ldr	r3, [pc, #148]	; (8006248 <HAL_RCC_ClockConfig+0x1b8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d20c      	bcs.n	80061d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061be:	4b22      	ldr	r3, [pc, #136]	; (8006248 <HAL_RCC_ClockConfig+0x1b8>)
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <HAL_RCC_ClockConfig+0x1b8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d001      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e032      	b.n	800623e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061e4:	4b19      	ldr	r3, [pc, #100]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	4916      	ldr	r1, [pc, #88]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d009      	beq.n	8006216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006202:	4b12      	ldr	r3, [pc, #72]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	490e      	ldr	r1, [pc, #56]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	4313      	orrs	r3, r2
 8006214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006216:	f000 f821 	bl	800625c <HAL_RCC_GetSysClockFreq>
 800621a:	4602      	mov	r2, r0
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	091b      	lsrs	r3, r3, #4
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	490a      	ldr	r1, [pc, #40]	; (8006250 <HAL_RCC_ClockConfig+0x1c0>)
 8006228:	5ccb      	ldrb	r3, [r1, r3]
 800622a:	fa22 f303 	lsr.w	r3, r2, r3
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <HAL_RCC_ClockConfig+0x1c4>)
 8006230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <HAL_RCC_ClockConfig+0x1c8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f7fc f91c 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40023c00 	.word	0x40023c00
 800624c:	40023800 	.word	0x40023800
 8006250:	0800cda4 	.word	0x0800cda4
 8006254:	20000020 	.word	0x20000020
 8006258:	20000024 	.word	0x20000024

0800625c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800625c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006260:	b094      	sub	sp, #80	; 0x50
 8006262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	647b      	str	r3, [r7, #68]	; 0x44
 8006268:	2300      	movs	r3, #0
 800626a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800626c:	2300      	movs	r3, #0
 800626e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006274:	4b79      	ldr	r3, [pc, #484]	; (800645c <HAL_RCC_GetSysClockFreq+0x200>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 030c 	and.w	r3, r3, #12
 800627c:	2b08      	cmp	r3, #8
 800627e:	d00d      	beq.n	800629c <HAL_RCC_GetSysClockFreq+0x40>
 8006280:	2b08      	cmp	r3, #8
 8006282:	f200 80e1 	bhi.w	8006448 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_RCC_GetSysClockFreq+0x34>
 800628a:	2b04      	cmp	r3, #4
 800628c:	d003      	beq.n	8006296 <HAL_RCC_GetSysClockFreq+0x3a>
 800628e:	e0db      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006290:	4b73      	ldr	r3, [pc, #460]	; (8006460 <HAL_RCC_GetSysClockFreq+0x204>)
 8006292:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006294:	e0db      	b.n	800644e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006296:	4b73      	ldr	r3, [pc, #460]	; (8006464 <HAL_RCC_GetSysClockFreq+0x208>)
 8006298:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800629a:	e0d8      	b.n	800644e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800629c:	4b6f      	ldr	r3, [pc, #444]	; (800645c <HAL_RCC_GetSysClockFreq+0x200>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062a6:	4b6d      	ldr	r3, [pc, #436]	; (800645c <HAL_RCC_GetSysClockFreq+0x200>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d063      	beq.n	800637a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062b2:	4b6a      	ldr	r3, [pc, #424]	; (800645c <HAL_RCC_GetSysClockFreq+0x200>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	099b      	lsrs	r3, r3, #6
 80062b8:	2200      	movs	r2, #0
 80062ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80062bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c4:	633b      	str	r3, [r7, #48]	; 0x30
 80062c6:	2300      	movs	r3, #0
 80062c8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062ce:	4622      	mov	r2, r4
 80062d0:	462b      	mov	r3, r5
 80062d2:	f04f 0000 	mov.w	r0, #0
 80062d6:	f04f 0100 	mov.w	r1, #0
 80062da:	0159      	lsls	r1, r3, #5
 80062dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062e0:	0150      	lsls	r0, r2, #5
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4621      	mov	r1, r4
 80062e8:	1a51      	subs	r1, r2, r1
 80062ea:	6139      	str	r1, [r7, #16]
 80062ec:	4629      	mov	r1, r5
 80062ee:	eb63 0301 	sbc.w	r3, r3, r1
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006300:	4659      	mov	r1, fp
 8006302:	018b      	lsls	r3, r1, #6
 8006304:	4651      	mov	r1, sl
 8006306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800630a:	4651      	mov	r1, sl
 800630c:	018a      	lsls	r2, r1, #6
 800630e:	4651      	mov	r1, sl
 8006310:	ebb2 0801 	subs.w	r8, r2, r1
 8006314:	4659      	mov	r1, fp
 8006316:	eb63 0901 	sbc.w	r9, r3, r1
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800632a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800632e:	4690      	mov	r8, r2
 8006330:	4699      	mov	r9, r3
 8006332:	4623      	mov	r3, r4
 8006334:	eb18 0303 	adds.w	r3, r8, r3
 8006338:	60bb      	str	r3, [r7, #8]
 800633a:	462b      	mov	r3, r5
 800633c:	eb49 0303 	adc.w	r3, r9, r3
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800634e:	4629      	mov	r1, r5
 8006350:	024b      	lsls	r3, r1, #9
 8006352:	4621      	mov	r1, r4
 8006354:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006358:	4621      	mov	r1, r4
 800635a:	024a      	lsls	r2, r1, #9
 800635c:	4610      	mov	r0, r2
 800635e:	4619      	mov	r1, r3
 8006360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006362:	2200      	movs	r2, #0
 8006364:	62bb      	str	r3, [r7, #40]	; 0x28
 8006366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800636c:	f7fa fc8c 	bl	8000c88 <__aeabi_uldivmod>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4613      	mov	r3, r2
 8006376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006378:	e058      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800637a:	4b38      	ldr	r3, [pc, #224]	; (800645c <HAL_RCC_GetSysClockFreq+0x200>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	099b      	lsrs	r3, r3, #6
 8006380:	2200      	movs	r2, #0
 8006382:	4618      	mov	r0, r3
 8006384:	4611      	mov	r1, r2
 8006386:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800638a:	623b      	str	r3, [r7, #32]
 800638c:	2300      	movs	r3, #0
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
 8006390:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006394:	4642      	mov	r2, r8
 8006396:	464b      	mov	r3, r9
 8006398:	f04f 0000 	mov.w	r0, #0
 800639c:	f04f 0100 	mov.w	r1, #0
 80063a0:	0159      	lsls	r1, r3, #5
 80063a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063a6:	0150      	lsls	r0, r2, #5
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4641      	mov	r1, r8
 80063ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80063b2:	4649      	mov	r1, r9
 80063b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063cc:	ebb2 040a 	subs.w	r4, r2, sl
 80063d0:	eb63 050b 	sbc.w	r5, r3, fp
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	00eb      	lsls	r3, r5, #3
 80063de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063e2:	00e2      	lsls	r2, r4, #3
 80063e4:	4614      	mov	r4, r2
 80063e6:	461d      	mov	r5, r3
 80063e8:	4643      	mov	r3, r8
 80063ea:	18e3      	adds	r3, r4, r3
 80063ec:	603b      	str	r3, [r7, #0]
 80063ee:	464b      	mov	r3, r9
 80063f0:	eb45 0303 	adc.w	r3, r5, r3
 80063f4:	607b      	str	r3, [r7, #4]
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006402:	4629      	mov	r1, r5
 8006404:	028b      	lsls	r3, r1, #10
 8006406:	4621      	mov	r1, r4
 8006408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800640c:	4621      	mov	r1, r4
 800640e:	028a      	lsls	r2, r1, #10
 8006410:	4610      	mov	r0, r2
 8006412:	4619      	mov	r1, r3
 8006414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006416:	2200      	movs	r2, #0
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	61fa      	str	r2, [r7, #28]
 800641c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006420:	f7fa fc32 	bl	8000c88 <__aeabi_uldivmod>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4613      	mov	r3, r2
 800642a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <HAL_RCC_GetSysClockFreq+0x200>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	0c1b      	lsrs	r3, r3, #16
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	3301      	adds	r3, #1
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800643c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800643e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006446:	e002      	b.n	800644e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <HAL_RCC_GetSysClockFreq+0x204>)
 800644a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800644c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800644e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006450:	4618      	mov	r0, r3
 8006452:	3750      	adds	r7, #80	; 0x50
 8006454:	46bd      	mov	sp, r7
 8006456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800645a:	bf00      	nop
 800645c:	40023800 	.word	0x40023800
 8006460:	00f42400 	.word	0x00f42400
 8006464:	007a1200 	.word	0x007a1200

08006468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <HAL_RCC_GetHCLKFreq+0x14>)
 800646e:	681b      	ldr	r3, [r3, #0]
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20000020 	.word	0x20000020

08006480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006484:	f7ff fff0 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 8006488:	4602      	mov	r2, r0
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	0a9b      	lsrs	r3, r3, #10
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	4903      	ldr	r1, [pc, #12]	; (80064a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006496:	5ccb      	ldrb	r3, [r1, r3]
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40023800 	.word	0x40023800
 80064a4:	0800cdb4 	.word	0x0800cdb4

080064a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e07b      	b.n	80065b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d108      	bne.n	80064d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ca:	d009      	beq.n	80064e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	61da      	str	r2, [r3, #28]
 80064d2:	e005      	b.n	80064e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fb fc28 	bl	8001d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006516:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	ea42 0103 	orr.w	r1, r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	f003 0104 	and.w	r1, r3, #4
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	f003 0210 	and.w	r2, r3, #16
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b088      	sub	sp, #32
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	603b      	str	r3, [r7, #0]
 80065c6:	4613      	mov	r3, r2
 80065c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_SPI_Transmit+0x22>
 80065d8:	2302      	movs	r3, #2
 80065da:	e126      	b.n	800682a <HAL_SPI_Transmit+0x270>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065e4:	f7fb ff8a 	bl	80024fc <HAL_GetTick>
 80065e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80065ea:	88fb      	ldrh	r3, [r7, #6]
 80065ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d002      	beq.n	8006600 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80065fa:	2302      	movs	r3, #2
 80065fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065fe:	e10b      	b.n	8006818 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <HAL_SPI_Transmit+0x52>
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d102      	bne.n	8006612 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006610:	e102      	b.n	8006818 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2203      	movs	r2, #3
 8006616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	88fa      	ldrh	r2, [r7, #6]
 800662a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	88fa      	ldrh	r2, [r7, #6]
 8006630:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006658:	d10f      	bne.n	800667a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006668:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006678:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d007      	beq.n	8006698 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a0:	d14b      	bne.n	800673a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_SPI_Transmit+0xf6>
 80066aa:	8afb      	ldrh	r3, [r7, #22]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d13e      	bne.n	800672e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	881a      	ldrh	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	1c9a      	adds	r2, r3, #2
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066d4:	e02b      	b.n	800672e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d112      	bne.n	800670a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	881a      	ldrh	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	1c9a      	adds	r2, r3, #2
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	86da      	strh	r2, [r3, #54]	; 0x36
 8006708:	e011      	b.n	800672e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800670a:	f7fb fef7 	bl	80024fc <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d803      	bhi.n	8006722 <HAL_SPI_Transmit+0x168>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006720:	d102      	bne.n	8006728 <HAL_SPI_Transmit+0x16e>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800672c:	e074      	b.n	8006818 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1ce      	bne.n	80066d6 <HAL_SPI_Transmit+0x11c>
 8006738:	e04c      	b.n	80067d4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <HAL_SPI_Transmit+0x18e>
 8006742:	8afb      	ldrh	r3, [r7, #22]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d140      	bne.n	80067ca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	330c      	adds	r3, #12
 8006752:	7812      	ldrb	r2, [r2, #0]
 8006754:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006764:	b29b      	uxth	r3, r3
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800676e:	e02c      	b.n	80067ca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b02      	cmp	r3, #2
 800677c:	d113      	bne.n	80067a6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	330c      	adds	r3, #12
 8006788:	7812      	ldrb	r2, [r2, #0]
 800678a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80067a4:	e011      	b.n	80067ca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067a6:	f7fb fea9 	bl	80024fc <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d803      	bhi.n	80067be <HAL_SPI_Transmit+0x204>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067bc:	d102      	bne.n	80067c4 <HAL_SPI_Transmit+0x20a>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067c8:	e026      	b.n	8006818 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1cd      	bne.n	8006770 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f9ff 	bl	8006bdc <SPI_EndRxTxTransaction>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2220      	movs	r2, #32
 80067e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067f2:	2300      	movs	r3, #0
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	77fb      	strb	r3, [r7, #31]
 8006814:	e000      	b.n	8006818 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006816:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006828:	7ffb      	ldrb	r3, [r7, #31]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3720      	adds	r7, #32
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_SPI_Transmit_DMA+0x20>
 8006850:	2302      	movs	r3, #2
 8006852:	e09b      	b.n	800698c <HAL_SPI_Transmit_DMA+0x158>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d002      	beq.n	800686e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006868:	2302      	movs	r3, #2
 800686a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800686c:	e089      	b.n	8006982 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <HAL_SPI_Transmit_DMA+0x46>
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800687e:	e080      	b.n	8006982 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2203      	movs	r2, #3
 8006884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	88fa      	ldrh	r2, [r7, #6]
 8006898:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	88fa      	ldrh	r2, [r7, #6]
 800689e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c6:	d10f      	bne.n	80068e8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ec:	4a29      	ldr	r2, [pc, #164]	; (8006994 <HAL_SPI_Transmit_DMA+0x160>)
 80068ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f4:	4a28      	ldr	r2, [pc, #160]	; (8006998 <HAL_SPI_Transmit_DMA+0x164>)
 80068f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fc:	4a27      	ldr	r2, [pc, #156]	; (800699c <HAL_SPI_Transmit_DMA+0x168>)
 80068fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006904:	2200      	movs	r2, #0
 8006906:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	4619      	mov	r1, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	330c      	adds	r3, #12
 8006918:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800691e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006920:	f7fb ffdc 	bl	80028dc <HAL_DMA_Start_IT>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00c      	beq.n	8006944 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692e:	f043 0210 	orr.w	r2, r3, #16
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006942:	e01e      	b.n	8006982 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d007      	beq.n	8006962 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006960:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0220 	orr.w	r2, r2, #32
 8006970:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0202 	orr.w	r2, r2, #2
 8006980:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800698a:	7dfb      	ldrb	r3, [r7, #23]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	08006a71 	.word	0x08006a71
 8006998:	080069c9 	.word	0x080069c9
 800699c:	08006a8d 	.word	0x08006a8d

080069a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069d6:	f7fb fd91 	bl	80024fc <HAL_GetTick>
 80069da:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ea:	d03b      	beq.n	8006a64 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0220 	bic.w	r2, r2, #32
 80069fa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0202 	bic.w	r2, r2, #2
 8006a0a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	2164      	movs	r1, #100	; 0x64
 8006a10:	6978      	ldr	r0, [r7, #20]
 8006a12:	f000 f8e3 	bl	8006bdc <SPI_EndRxTxTransaction>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	f043 0220 	orr.w	r2, r3, #32
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a5c:	6978      	ldr	r0, [r7, #20]
 8006a5e:	f7ff ffa9 	bl	80069b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a62:	e002      	b.n	8006a6a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006a64:	6978      	ldr	r0, [r7, #20]
 8006a66:	f002 ff2d 	bl	80098c4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff ff8e 	bl	80069a0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0203 	bic.w	r2, r2, #3
 8006aa8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aae:	f043 0210 	orr.w	r2, r3, #16
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f7ff ff78 	bl	80069b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006adc:	f7fb fd0e 	bl	80024fc <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	4413      	add	r3, r2
 8006aea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006aec:	f7fb fd06 	bl	80024fc <HAL_GetTick>
 8006af0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006af2:	4b39      	ldr	r3, [pc, #228]	; (8006bd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	015b      	lsls	r3, r3, #5
 8006af8:	0d1b      	lsrs	r3, r3, #20
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	fb02 f303 	mul.w	r3, r2, r3
 8006b00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b02:	e054      	b.n	8006bae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d050      	beq.n	8006bae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b0c:	f7fb fcf6 	bl	80024fc <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d902      	bls.n	8006b22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d13d      	bne.n	8006b9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b3a:	d111      	bne.n	8006b60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b44:	d004      	beq.n	8006b50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4e:	d107      	bne.n	8006b60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b68:	d10f      	bne.n	8006b8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e017      	b.n	8006bce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	bf0c      	ite	eq
 8006bbe:	2301      	moveq	r3, #1
 8006bc0:	2300      	movne	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d19b      	bne.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000020 	.word	0x20000020

08006bdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af02      	add	r7, sp, #8
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006be8:	4b1b      	ldr	r3, [pc, #108]	; (8006c58 <SPI_EndRxTxTransaction+0x7c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1b      	ldr	r2, [pc, #108]	; (8006c5c <SPI_EndRxTxTransaction+0x80>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	0d5b      	lsrs	r3, r3, #21
 8006bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bf8:	fb02 f303 	mul.w	r3, r2, r3
 8006bfc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c06:	d112      	bne.n	8006c2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2180      	movs	r1, #128	; 0x80
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7ff ff5a 	bl	8006acc <SPI_WaitFlagStateUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d016      	beq.n	8006c4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c22:	f043 0220 	orr.w	r2, r3, #32
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e00f      	b.n	8006c4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c44:	2b80      	cmp	r3, #128	; 0x80
 8006c46:	d0f2      	beq.n	8006c2e <SPI_EndRxTxTransaction+0x52>
 8006c48:	e000      	b.n	8006c4c <SPI_EndRxTxTransaction+0x70>
        break;
 8006c4a:	bf00      	nop
  }

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000020 	.word	0x20000020
 8006c5c:	165e9f81 	.word	0x165e9f81

08006c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e041      	b.n	8006cf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fb fb1e 	bl	80022c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	f001 fa68 	bl	8008174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e041      	b.n	8006d94 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f88d 	bl	8006e44 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f001 fa19 	bl	8008174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6a1a      	ldr	r2, [r3, #32]
 8006db2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10f      	bne.n	8006ddc <HAL_TIM_OC_DeInit+0x40>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6a1a      	ldr	r2, [r3, #32]
 8006dc2:	f240 4344 	movw	r3, #1092	; 0x444
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d107      	bne.n	8006ddc <HAL_TIM_OC_DeInit+0x40>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0201 	bic.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f83b 	bl	8006e58 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <HAL_TIM_OC_Start_IT+0x28>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	bf14      	ite	ne
 8006e8c:	2301      	movne	r3, #1
 8006e8e:	2300      	moveq	r3, #0
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	e022      	b.n	8006eda <HAL_TIM_OC_Start_IT+0x6e>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d109      	bne.n	8006eae <HAL_TIM_OC_Start_IT+0x42>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	bf14      	ite	ne
 8006ea6:	2301      	movne	r3, #1
 8006ea8:	2300      	moveq	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	e015      	b.n	8006eda <HAL_TIM_OC_Start_IT+0x6e>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d109      	bne.n	8006ec8 <HAL_TIM_OC_Start_IT+0x5c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e008      	b.n	8006eda <HAL_TIM_OC_Start_IT+0x6e>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	bf14      	ite	ne
 8006ed4:	2301      	movne	r3, #1
 8006ed6:	2300      	moveq	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e0c7      	b.n	8007072 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <HAL_TIM_OC_Start_IT+0x86>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ef0:	e013      	b.n	8006f1a <HAL_TIM_OC_Start_IT+0xae>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d104      	bne.n	8006f02 <HAL_TIM_OC_Start_IT+0x96>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f00:	e00b      	b.n	8006f1a <HAL_TIM_OC_Start_IT+0xae>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d104      	bne.n	8006f12 <HAL_TIM_OC_Start_IT+0xa6>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f10:	e003      	b.n	8006f1a <HAL_TIM_OC_Start_IT+0xae>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b0c      	cmp	r3, #12
 8006f1e:	d841      	bhi.n	8006fa4 <HAL_TIM_OC_Start_IT+0x138>
 8006f20:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <HAL_TIM_OC_Start_IT+0xbc>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006f5d 	.word	0x08006f5d
 8006f2c:	08006fa5 	.word	0x08006fa5
 8006f30:	08006fa5 	.word	0x08006fa5
 8006f34:	08006fa5 	.word	0x08006fa5
 8006f38:	08006f6f 	.word	0x08006f6f
 8006f3c:	08006fa5 	.word	0x08006fa5
 8006f40:	08006fa5 	.word	0x08006fa5
 8006f44:	08006fa5 	.word	0x08006fa5
 8006f48:	08006f81 	.word	0x08006f81
 8006f4c:	08006fa5 	.word	0x08006fa5
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	08006fa5 	.word	0x08006fa5
 8006f58:	08006f93 	.word	0x08006f93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0202 	orr.w	r2, r2, #2
 8006f6a:	60da      	str	r2, [r3, #12]
      break;
 8006f6c:	e01d      	b.n	8006faa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0204 	orr.w	r2, r2, #4
 8006f7c:	60da      	str	r2, [r3, #12]
      break;
 8006f7e:	e014      	b.n	8006faa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0208 	orr.w	r2, r2, #8
 8006f8e:	60da      	str	r2, [r3, #12]
      break;
 8006f90:	e00b      	b.n	8006faa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0210 	orr.w	r2, r2, #16
 8006fa0:	60da      	str	r2, [r3, #12]
      break;
 8006fa2:	e002      	b.n	8006faa <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d15f      	bne.n	8007070 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 fc55 	bl	8008868 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a2e      	ldr	r2, [pc, #184]	; (800707c <HAL_TIM_OC_Start_IT+0x210>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <HAL_TIM_OC_Start_IT+0x166>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2c      	ldr	r2, [pc, #176]	; (8007080 <HAL_TIM_OC_Start_IT+0x214>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d101      	bne.n	8006fd6 <HAL_TIM_OC_Start_IT+0x16a>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <HAL_TIM_OC_Start_IT+0x16c>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a22      	ldr	r2, [pc, #136]	; (800707c <HAL_TIM_OC_Start_IT+0x210>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d022      	beq.n	800703c <HAL_TIM_OC_Start_IT+0x1d0>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffe:	d01d      	beq.n	800703c <HAL_TIM_OC_Start_IT+0x1d0>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a1f      	ldr	r2, [pc, #124]	; (8007084 <HAL_TIM_OC_Start_IT+0x218>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d018      	beq.n	800703c <HAL_TIM_OC_Start_IT+0x1d0>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1e      	ldr	r2, [pc, #120]	; (8007088 <HAL_TIM_OC_Start_IT+0x21c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d013      	beq.n	800703c <HAL_TIM_OC_Start_IT+0x1d0>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1c      	ldr	r2, [pc, #112]	; (800708c <HAL_TIM_OC_Start_IT+0x220>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d00e      	beq.n	800703c <HAL_TIM_OC_Start_IT+0x1d0>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a17      	ldr	r2, [pc, #92]	; (8007080 <HAL_TIM_OC_Start_IT+0x214>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d009      	beq.n	800703c <HAL_TIM_OC_Start_IT+0x1d0>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a18      	ldr	r2, [pc, #96]	; (8007090 <HAL_TIM_OC_Start_IT+0x224>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d004      	beq.n	800703c <HAL_TIM_OC_Start_IT+0x1d0>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a17      	ldr	r2, [pc, #92]	; (8007094 <HAL_TIM_OC_Start_IT+0x228>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d111      	bne.n	8007060 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b06      	cmp	r3, #6
 800704c:	d010      	beq.n	8007070 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0201 	orr.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705e:	e007      	b.n	8007070 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	40010000 	.word	0x40010000
 8007080:	40010400 	.word	0x40010400
 8007084:	40000400 	.word	0x40000400
 8007088:	40000800 	.word	0x40000800
 800708c:	40000c00 	.word	0x40000c00
 8007090:	40014000 	.word	0x40014000
 8007094:	40001800 	.word	0x40001800

08007098 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e041      	b.n	800712e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d106      	bne.n	80070c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fb f8e0 	bl	8002284 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f001 f84c 	bl	8008174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d109      	bne.n	800715c <HAL_TIM_PWM_Start+0x24>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b01      	cmp	r3, #1
 8007152:	bf14      	ite	ne
 8007154:	2301      	movne	r3, #1
 8007156:	2300      	moveq	r3, #0
 8007158:	b2db      	uxtb	r3, r3
 800715a:	e022      	b.n	80071a2 <HAL_TIM_PWM_Start+0x6a>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b04      	cmp	r3, #4
 8007160:	d109      	bne.n	8007176 <HAL_TIM_PWM_Start+0x3e>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b01      	cmp	r3, #1
 800716c:	bf14      	ite	ne
 800716e:	2301      	movne	r3, #1
 8007170:	2300      	moveq	r3, #0
 8007172:	b2db      	uxtb	r3, r3
 8007174:	e015      	b.n	80071a2 <HAL_TIM_PWM_Start+0x6a>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b08      	cmp	r3, #8
 800717a:	d109      	bne.n	8007190 <HAL_TIM_PWM_Start+0x58>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b01      	cmp	r3, #1
 8007186:	bf14      	ite	ne
 8007188:	2301      	movne	r3, #1
 800718a:	2300      	moveq	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	e008      	b.n	80071a2 <HAL_TIM_PWM_Start+0x6a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	bf14      	ite	ne
 800719c:	2301      	movne	r3, #1
 800719e:	2300      	moveq	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e07c      	b.n	80072a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <HAL_TIM_PWM_Start+0x82>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071b8:	e013      	b.n	80071e2 <HAL_TIM_PWM_Start+0xaa>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d104      	bne.n	80071ca <HAL_TIM_PWM_Start+0x92>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071c8:	e00b      	b.n	80071e2 <HAL_TIM_PWM_Start+0xaa>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d104      	bne.n	80071da <HAL_TIM_PWM_Start+0xa2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071d8:	e003      	b.n	80071e2 <HAL_TIM_PWM_Start+0xaa>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2202      	movs	r2, #2
 80071de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2201      	movs	r2, #1
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f001 fb3c 	bl	8008868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a2d      	ldr	r2, [pc, #180]	; (80072ac <HAL_TIM_PWM_Start+0x174>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <HAL_TIM_PWM_Start+0xcc>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <HAL_TIM_PWM_Start+0x178>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d101      	bne.n	8007208 <HAL_TIM_PWM_Start+0xd0>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <HAL_TIM_PWM_Start+0xd2>
 8007208:	2300      	movs	r3, #0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d007      	beq.n	800721e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800721c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a22      	ldr	r2, [pc, #136]	; (80072ac <HAL_TIM_PWM_Start+0x174>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <HAL_TIM_PWM_Start+0x136>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007230:	d01d      	beq.n	800726e <HAL_TIM_PWM_Start+0x136>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1f      	ldr	r2, [pc, #124]	; (80072b4 <HAL_TIM_PWM_Start+0x17c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d018      	beq.n	800726e <HAL_TIM_PWM_Start+0x136>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1d      	ldr	r2, [pc, #116]	; (80072b8 <HAL_TIM_PWM_Start+0x180>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_TIM_PWM_Start+0x136>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1c      	ldr	r2, [pc, #112]	; (80072bc <HAL_TIM_PWM_Start+0x184>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_TIM_PWM_Start+0x136>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a16      	ldr	r2, [pc, #88]	; (80072b0 <HAL_TIM_PWM_Start+0x178>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_TIM_PWM_Start+0x136>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a18      	ldr	r2, [pc, #96]	; (80072c0 <HAL_TIM_PWM_Start+0x188>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_TIM_PWM_Start+0x136>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a16      	ldr	r2, [pc, #88]	; (80072c4 <HAL_TIM_PWM_Start+0x18c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d111      	bne.n	8007292 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b06      	cmp	r3, #6
 800727e:	d010      	beq.n	80072a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0201 	orr.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007290:	e007      	b.n	80072a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f042 0201 	orr.w	r2, r2, #1
 80072a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40010400 	.word	0x40010400
 80072b4:	40000400 	.word	0x40000400
 80072b8:	40000800 	.word	0x40000800
 80072bc:	40000c00 	.word	0x40000c00
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40001800 	.word	0x40001800

080072c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2200      	movs	r2, #0
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fac4 	bl	8008868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a2e      	ldr	r2, [pc, #184]	; (80073a0 <HAL_TIM_PWM_Stop+0xd8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d004      	beq.n	80072f4 <HAL_TIM_PWM_Stop+0x2c>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a2d      	ldr	r2, [pc, #180]	; (80073a4 <HAL_TIM_PWM_Stop+0xdc>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d101      	bne.n	80072f8 <HAL_TIM_PWM_Stop+0x30>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <HAL_TIM_PWM_Stop+0x32>
 80072f8:	2300      	movs	r3, #0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d017      	beq.n	800732e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	f241 1311 	movw	r3, #4369	; 0x1111
 8007308:	4013      	ands	r3, r2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10f      	bne.n	800732e <HAL_TIM_PWM_Stop+0x66>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6a1a      	ldr	r2, [r3, #32]
 8007314:	f240 4344 	movw	r3, #1092	; 0x444
 8007318:	4013      	ands	r3, r2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d107      	bne.n	800732e <HAL_TIM_PWM_Stop+0x66>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800732c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6a1a      	ldr	r2, [r3, #32]
 8007334:	f241 1311 	movw	r3, #4369	; 0x1111
 8007338:	4013      	ands	r3, r2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10f      	bne.n	800735e <HAL_TIM_PWM_Stop+0x96>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6a1a      	ldr	r2, [r3, #32]
 8007344:	f240 4344 	movw	r3, #1092	; 0x444
 8007348:	4013      	ands	r3, r2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d107      	bne.n	800735e <HAL_TIM_PWM_Stop+0x96>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0201 	bic.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <HAL_TIM_PWM_Stop+0xa6>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800736c:	e013      	b.n	8007396 <HAL_TIM_PWM_Stop+0xce>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b04      	cmp	r3, #4
 8007372:	d104      	bne.n	800737e <HAL_TIM_PWM_Stop+0xb6>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800737c:	e00b      	b.n	8007396 <HAL_TIM_PWM_Stop+0xce>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b08      	cmp	r3, #8
 8007382:	d104      	bne.n	800738e <HAL_TIM_PWM_Stop+0xc6>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800738c:	e003      	b.n	8007396 <HAL_TIM_PWM_Stop+0xce>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	40010000 	.word	0x40010000
 80073a4:	40010400 	.word	0x40010400

080073a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e041      	b.n	800743e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d106      	bne.n	80073d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f88d 	bl	80074ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f000 fec4 	bl	8008174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2202      	movs	r2, #2
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a1a      	ldr	r2, [r3, #32]
 800745c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007460:	4013      	ands	r3, r2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10f      	bne.n	8007486 <HAL_TIM_IC_DeInit+0x40>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6a1a      	ldr	r2, [r3, #32]
 800746c:	f240 4344 	movw	r3, #1092	; 0x444
 8007470:	4013      	ands	r3, r2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d107      	bne.n	8007486 <HAL_TIM_IC_DeInit+0x40>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f83b 	bl	8007502 <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d104      	bne.n	8007532 <HAL_TIM_IC_Start+0x1a>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800752e:	b2db      	uxtb	r3, r3
 8007530:	e013      	b.n	800755a <HAL_TIM_IC_Start+0x42>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b04      	cmp	r3, #4
 8007536:	d104      	bne.n	8007542 <HAL_TIM_IC_Start+0x2a>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800753e:	b2db      	uxtb	r3, r3
 8007540:	e00b      	b.n	800755a <HAL_TIM_IC_Start+0x42>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b08      	cmp	r3, #8
 8007546:	d104      	bne.n	8007552 <HAL_TIM_IC_Start+0x3a>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800754e:	b2db      	uxtb	r3, r3
 8007550:	e003      	b.n	800755a <HAL_TIM_IC_Start+0x42>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007558:	b2db      	uxtb	r3, r3
 800755a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <HAL_TIM_IC_Start+0x54>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007568:	b2db      	uxtb	r3, r3
 800756a:	e013      	b.n	8007594 <HAL_TIM_IC_Start+0x7c>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b04      	cmp	r3, #4
 8007570:	d104      	bne.n	800757c <HAL_TIM_IC_Start+0x64>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007578:	b2db      	uxtb	r3, r3
 800757a:	e00b      	b.n	8007594 <HAL_TIM_IC_Start+0x7c>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b08      	cmp	r3, #8
 8007580:	d104      	bne.n	800758c <HAL_TIM_IC_Start+0x74>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007588:	b2db      	uxtb	r3, r3
 800758a:	e003      	b.n	8007594 <HAL_TIM_IC_Start+0x7c>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007592:	b2db      	uxtb	r3, r3
 8007594:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007596:	7bfb      	ldrb	r3, [r7, #15]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d102      	bne.n	80075a2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d001      	beq.n	80075a6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e081      	b.n	80076aa <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d104      	bne.n	80075b6 <HAL_TIM_IC_Start+0x9e>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075b4:	e013      	b.n	80075de <HAL_TIM_IC_Start+0xc6>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d104      	bne.n	80075c6 <HAL_TIM_IC_Start+0xae>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075c4:	e00b      	b.n	80075de <HAL_TIM_IC_Start+0xc6>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d104      	bne.n	80075d6 <HAL_TIM_IC_Start+0xbe>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075d4:	e003      	b.n	80075de <HAL_TIM_IC_Start+0xc6>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2202      	movs	r2, #2
 80075da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <HAL_TIM_IC_Start+0xd6>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075ec:	e013      	b.n	8007616 <HAL_TIM_IC_Start+0xfe>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d104      	bne.n	80075fe <HAL_TIM_IC_Start+0xe6>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075fc:	e00b      	b.n	8007616 <HAL_TIM_IC_Start+0xfe>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b08      	cmp	r3, #8
 8007602:	d104      	bne.n	800760e <HAL_TIM_IC_Start+0xf6>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800760c:	e003      	b.n	8007616 <HAL_TIM_IC_Start+0xfe>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2202      	movs	r2, #2
 8007612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2201      	movs	r2, #1
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f001 f922 	bl	8008868 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a22      	ldr	r2, [pc, #136]	; (80076b4 <HAL_TIM_IC_Start+0x19c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d022      	beq.n	8007674 <HAL_TIM_IC_Start+0x15c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007636:	d01d      	beq.n	8007674 <HAL_TIM_IC_Start+0x15c>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1e      	ldr	r2, [pc, #120]	; (80076b8 <HAL_TIM_IC_Start+0x1a0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d018      	beq.n	8007674 <HAL_TIM_IC_Start+0x15c>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1d      	ldr	r2, [pc, #116]	; (80076bc <HAL_TIM_IC_Start+0x1a4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <HAL_TIM_IC_Start+0x15c>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <HAL_TIM_IC_Start+0x1a8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <HAL_TIM_IC_Start+0x15c>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1a      	ldr	r2, [pc, #104]	; (80076c4 <HAL_TIM_IC_Start+0x1ac>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_TIM_IC_Start+0x15c>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a18      	ldr	r2, [pc, #96]	; (80076c8 <HAL_TIM_IC_Start+0x1b0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_TIM_IC_Start+0x15c>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a17      	ldr	r2, [pc, #92]	; (80076cc <HAL_TIM_IC_Start+0x1b4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d111      	bne.n	8007698 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b06      	cmp	r3, #6
 8007684:	d010      	beq.n	80076a8 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007696:	e007      	b.n	80076a8 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	40010000 	.word	0x40010000
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800
 80076c0:	40000c00 	.word	0x40000c00
 80076c4:	40010400 	.word	0x40010400
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40001800 	.word	0x40001800

080076d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d104      	bne.n	80076ee <HAL_TIM_IC_Start_IT+0x1e>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	e013      	b.n	8007716 <HAL_TIM_IC_Start_IT+0x46>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d104      	bne.n	80076fe <HAL_TIM_IC_Start_IT+0x2e>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	e00b      	b.n	8007716 <HAL_TIM_IC_Start_IT+0x46>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b08      	cmp	r3, #8
 8007702:	d104      	bne.n	800770e <HAL_TIM_IC_Start_IT+0x3e>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800770a:	b2db      	uxtb	r3, r3
 800770c:	e003      	b.n	8007716 <HAL_TIM_IC_Start_IT+0x46>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007714:	b2db      	uxtb	r3, r3
 8007716:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d104      	bne.n	8007728 <HAL_TIM_IC_Start_IT+0x58>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007724:	b2db      	uxtb	r3, r3
 8007726:	e013      	b.n	8007750 <HAL_TIM_IC_Start_IT+0x80>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b04      	cmp	r3, #4
 800772c:	d104      	bne.n	8007738 <HAL_TIM_IC_Start_IT+0x68>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007734:	b2db      	uxtb	r3, r3
 8007736:	e00b      	b.n	8007750 <HAL_TIM_IC_Start_IT+0x80>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b08      	cmp	r3, #8
 800773c:	d104      	bne.n	8007748 <HAL_TIM_IC_Start_IT+0x78>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007744:	b2db      	uxtb	r3, r3
 8007746:	e003      	b.n	8007750 <HAL_TIM_IC_Start_IT+0x80>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800774e:	b2db      	uxtb	r3, r3
 8007750:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d102      	bne.n	800775e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007758:	7b7b      	ldrb	r3, [r7, #13]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d001      	beq.n	8007762 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e0cc      	b.n	80078fc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <HAL_TIM_IC_Start_IT+0xa2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007770:	e013      	b.n	800779a <HAL_TIM_IC_Start_IT+0xca>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b04      	cmp	r3, #4
 8007776:	d104      	bne.n	8007782 <HAL_TIM_IC_Start_IT+0xb2>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007780:	e00b      	b.n	800779a <HAL_TIM_IC_Start_IT+0xca>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b08      	cmp	r3, #8
 8007786:	d104      	bne.n	8007792 <HAL_TIM_IC_Start_IT+0xc2>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007790:	e003      	b.n	800779a <HAL_TIM_IC_Start_IT+0xca>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d104      	bne.n	80077aa <HAL_TIM_IC_Start_IT+0xda>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077a8:	e013      	b.n	80077d2 <HAL_TIM_IC_Start_IT+0x102>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d104      	bne.n	80077ba <HAL_TIM_IC_Start_IT+0xea>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077b8:	e00b      	b.n	80077d2 <HAL_TIM_IC_Start_IT+0x102>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d104      	bne.n	80077ca <HAL_TIM_IC_Start_IT+0xfa>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c8:	e003      	b.n	80077d2 <HAL_TIM_IC_Start_IT+0x102>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b0c      	cmp	r3, #12
 80077d6:	d841      	bhi.n	800785c <HAL_TIM_IC_Start_IT+0x18c>
 80077d8:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <HAL_TIM_IC_Start_IT+0x110>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	08007815 	.word	0x08007815
 80077e4:	0800785d 	.word	0x0800785d
 80077e8:	0800785d 	.word	0x0800785d
 80077ec:	0800785d 	.word	0x0800785d
 80077f0:	08007827 	.word	0x08007827
 80077f4:	0800785d 	.word	0x0800785d
 80077f8:	0800785d 	.word	0x0800785d
 80077fc:	0800785d 	.word	0x0800785d
 8007800:	08007839 	.word	0x08007839
 8007804:	0800785d 	.word	0x0800785d
 8007808:	0800785d 	.word	0x0800785d
 800780c:	0800785d 	.word	0x0800785d
 8007810:	0800784b 	.word	0x0800784b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f042 0202 	orr.w	r2, r2, #2
 8007822:	60da      	str	r2, [r3, #12]
      break;
 8007824:	e01d      	b.n	8007862 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0204 	orr.w	r2, r2, #4
 8007834:	60da      	str	r2, [r3, #12]
      break;
 8007836:	e014      	b.n	8007862 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0208 	orr.w	r2, r2, #8
 8007846:	60da      	str	r2, [r3, #12]
      break;
 8007848:	e00b      	b.n	8007862 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68da      	ldr	r2, [r3, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f042 0210 	orr.w	r2, r2, #16
 8007858:	60da      	str	r2, [r3, #12]
      break;
 800785a:	e002      	b.n	8007862 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]
      break;
 8007860:	bf00      	nop
  }

  if (status == HAL_OK)
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d148      	bne.n	80078fa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2201      	movs	r2, #1
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fff9 	bl	8008868 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a22      	ldr	r2, [pc, #136]	; (8007904 <HAL_TIM_IC_Start_IT+0x234>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d022      	beq.n	80078c6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007888:	d01d      	beq.n	80078c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a1e      	ldr	r2, [pc, #120]	; (8007908 <HAL_TIM_IC_Start_IT+0x238>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d018      	beq.n	80078c6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1c      	ldr	r2, [pc, #112]	; (800790c <HAL_TIM_IC_Start_IT+0x23c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d013      	beq.n	80078c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a1b      	ldr	r2, [pc, #108]	; (8007910 <HAL_TIM_IC_Start_IT+0x240>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00e      	beq.n	80078c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a19      	ldr	r2, [pc, #100]	; (8007914 <HAL_TIM_IC_Start_IT+0x244>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d009      	beq.n	80078c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a18      	ldr	r2, [pc, #96]	; (8007918 <HAL_TIM_IC_Start_IT+0x248>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d004      	beq.n	80078c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a16      	ldr	r2, [pc, #88]	; (800791c <HAL_TIM_IC_Start_IT+0x24c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d111      	bne.n	80078ea <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b06      	cmp	r3, #6
 80078d6:	d010      	beq.n	80078fa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e8:	e007      	b.n	80078fa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f042 0201 	orr.w	r2, r2, #1
 80078f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40010000 	.word	0x40010000
 8007908:	40000400 	.word	0x40000400
 800790c:	40000800 	.word	0x40000800
 8007910:	40000c00 	.word	0x40000c00
 8007914:	40010400 	.word	0x40010400
 8007918:	40014000 	.word	0x40014000
 800791c:	40001800 	.word	0x40001800

08007920 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b0c      	cmp	r3, #12
 8007932:	d841      	bhi.n	80079b8 <HAL_TIM_IC_Stop_IT+0x98>
 8007934:	a201      	add	r2, pc, #4	; (adr r2, 800793c <HAL_TIM_IC_Stop_IT+0x1c>)
 8007936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793a:	bf00      	nop
 800793c:	08007971 	.word	0x08007971
 8007940:	080079b9 	.word	0x080079b9
 8007944:	080079b9 	.word	0x080079b9
 8007948:	080079b9 	.word	0x080079b9
 800794c:	08007983 	.word	0x08007983
 8007950:	080079b9 	.word	0x080079b9
 8007954:	080079b9 	.word	0x080079b9
 8007958:	080079b9 	.word	0x080079b9
 800795c:	08007995 	.word	0x08007995
 8007960:	080079b9 	.word	0x080079b9
 8007964:	080079b9 	.word	0x080079b9
 8007968:	080079b9 	.word	0x080079b9
 800796c:	080079a7 	.word	0x080079a7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0202 	bic.w	r2, r2, #2
 800797e:	60da      	str	r2, [r3, #12]
      break;
 8007980:	e01d      	b.n	80079be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0204 	bic.w	r2, r2, #4
 8007990:	60da      	str	r2, [r3, #12]
      break;
 8007992:	e014      	b.n	80079be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0208 	bic.w	r2, r2, #8
 80079a2:	60da      	str	r2, [r3, #12]
      break;
 80079a4:	e00b      	b.n	80079be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0210 	bic.w	r2, r2, #16
 80079b4:	60da      	str	r2, [r3, #12]
      break;
 80079b6:	e002      	b.n	80079be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	73fb      	strb	r3, [r7, #15]
      break;
 80079bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d156      	bne.n	8007a72 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2200      	movs	r2, #0
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 ff4b 	bl	8008868 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6a1a      	ldr	r2, [r3, #32]
 80079d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80079dc:	4013      	ands	r3, r2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10f      	bne.n	8007a02 <HAL_TIM_IC_Stop_IT+0xe2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6a1a      	ldr	r2, [r3, #32]
 80079e8:	f240 4344 	movw	r3, #1092	; 0x444
 80079ec:	4013      	ands	r3, r2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d107      	bne.n	8007a02 <HAL_TIM_IC_Stop_IT+0xe2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0201 	bic.w	r2, r2, #1
 8007a00:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d104      	bne.n	8007a12 <HAL_TIM_IC_Stop_IT+0xf2>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a10:	e013      	b.n	8007a3a <HAL_TIM_IC_Stop_IT+0x11a>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d104      	bne.n	8007a22 <HAL_TIM_IC_Stop_IT+0x102>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a20:	e00b      	b.n	8007a3a <HAL_TIM_IC_Stop_IT+0x11a>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d104      	bne.n	8007a32 <HAL_TIM_IC_Stop_IT+0x112>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a30:	e003      	b.n	8007a3a <HAL_TIM_IC_Stop_IT+0x11a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d104      	bne.n	8007a4a <HAL_TIM_IC_Stop_IT+0x12a>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a48:	e013      	b.n	8007a72 <HAL_TIM_IC_Stop_IT+0x152>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d104      	bne.n	8007a5a <HAL_TIM_IC_Stop_IT+0x13a>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a58:	e00b      	b.n	8007a72 <HAL_TIM_IC_Stop_IT+0x152>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d104      	bne.n	8007a6a <HAL_TIM_IC_Stop_IT+0x14a>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a68:	e003      	b.n	8007a72 <HAL_TIM_IC_Stop_IT+0x152>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e097      	b.n	8007bc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d106      	bne.n	8007aaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7fa fba5 	bl	80021f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ac0:	f023 0307 	bic.w	r3, r3, #7
 8007ac4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	f000 fb4f 	bl	8008174 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afe:	f023 0303 	bic.w	r3, r3, #3
 8007b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007b1c:	f023 030c 	bic.w	r3, r3, #12
 8007b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	011a      	lsls	r2, r3, #4
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	031b      	lsls	r3, r3, #12
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007b5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007b62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d122      	bne.n	8007c24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d11b      	bne.n	8007c24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f06f 0202 	mvn.w	r2, #2
 8007bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f002 f89a 	bl	8009d44 <HAL_TIM_IC_CaptureCallback>
 8007c10:	e005      	b.n	8007c1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f002 f86e 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fa97 	bl	800814c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d122      	bne.n	8007c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d11b      	bne.n	8007c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f06f 0204 	mvn.w	r2, #4
 8007c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f002 f870 	bl	8009d44 <HAL_TIM_IC_CaptureCallback>
 8007c64:	e005      	b.n	8007c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f002 f844 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fa6d 	bl	800814c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f003 0308 	and.w	r3, r3, #8
 8007c82:	2b08      	cmp	r3, #8
 8007c84:	d122      	bne.n	8007ccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f003 0308 	and.w	r3, r3, #8
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d11b      	bne.n	8007ccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f06f 0208 	mvn.w	r2, #8
 8007c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2204      	movs	r2, #4
 8007ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	f003 0303 	and.w	r3, r3, #3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f002 f846 	bl	8009d44 <HAL_TIM_IC_CaptureCallback>
 8007cb8:	e005      	b.n	8007cc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f002 f81a 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fa43 	bl	800814c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	f003 0310 	and.w	r3, r3, #16
 8007cd6:	2b10      	cmp	r3, #16
 8007cd8:	d122      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b10      	cmp	r3, #16
 8007ce6:	d11b      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f06f 0210 	mvn.w	r2, #16
 8007cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2208      	movs	r2, #8
 8007cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f002 f81c 	bl	8009d44 <HAL_TIM_IC_CaptureCallback>
 8007d0c:	e005      	b.n	8007d1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f001 fff0 	bl	8009cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fa19 	bl	800814c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d10e      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d107      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0201 	mvn.w	r2, #1
 8007d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f002 f834 	bl	8009db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d56:	2b80      	cmp	r3, #128	; 0x80
 8007d58:	d10e      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d64:	2b80      	cmp	r3, #128	; 0x80
 8007d66:	d107      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fe24 	bl	80089c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d10e      	bne.n	8007da4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d90:	2b40      	cmp	r3, #64	; 0x40
 8007d92:	d107      	bne.n	8007da4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f9de 	bl	8008160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	f003 0320 	and.w	r3, r3, #32
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	d10e      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f003 0320 	and.w	r3, r3, #32
 8007dbc:	2b20      	cmp	r3, #32
 8007dbe:	d107      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f06f 0220 	mvn.w	r2, #32
 8007dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fdee 	bl	80089ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d101      	bne.n	8007df6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007df2:	2302      	movs	r3, #2
 8007df4:	e048      	b.n	8007e88 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b0c      	cmp	r3, #12
 8007e02:	d839      	bhi.n	8007e78 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007e04:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0a:	bf00      	nop
 8007e0c:	08007e41 	.word	0x08007e41
 8007e10:	08007e79 	.word	0x08007e79
 8007e14:	08007e79 	.word	0x08007e79
 8007e18:	08007e79 	.word	0x08007e79
 8007e1c:	08007e4f 	.word	0x08007e4f
 8007e20:	08007e79 	.word	0x08007e79
 8007e24:	08007e79 	.word	0x08007e79
 8007e28:	08007e79 	.word	0x08007e79
 8007e2c:	08007e5d 	.word	0x08007e5d
 8007e30:	08007e79 	.word	0x08007e79
 8007e34:	08007e79 	.word	0x08007e79
 8007e38:	08007e79 	.word	0x08007e79
 8007e3c:	08007e6b 	.word	0x08007e6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68b9      	ldr	r1, [r7, #8]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fa34 	bl	80082b4 <TIM_OC1_SetConfig>
      break;
 8007e4c:	e017      	b.n	8007e7e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fa9d 	bl	8008394 <TIM_OC2_SetConfig>
      break;
 8007e5a:	e010      	b.n	8007e7e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fb0c 	bl	8008480 <TIM_OC3_SetConfig>
      break;
 8007e68:	e009      	b.n	8007e7e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fb79 	bl	8008568 <TIM_OC4_SetConfig>
      break;
 8007e76:	e002      	b.n	8007e7e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d101      	bne.n	8007eae <HAL_TIM_IC_ConfigChannel+0x1e>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e088      	b.n	8007fc0 <HAL_TIM_IC_ConfigChannel+0x130>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d11b      	bne.n	8007ef4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	6819      	ldr	r1, [r3, #0]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f000 fba2 	bl	8008614 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699a      	ldr	r2, [r3, #24]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 020c 	bic.w	r2, r2, #12
 8007ede:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6999      	ldr	r1, [r3, #24]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	619a      	str	r2, [r3, #24]
 8007ef2:	e060      	b.n	8007fb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d11c      	bne.n	8007f34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	6819      	ldr	r1, [r3, #0]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f000 fbf7 	bl	80086fc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	699a      	ldr	r2, [r3, #24]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007f1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6999      	ldr	r1, [r3, #24]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	021a      	lsls	r2, r3, #8
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	619a      	str	r2, [r3, #24]
 8007f32:	e040      	b.n	8007fb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d11b      	bne.n	8007f72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	6819      	ldr	r1, [r3, #0]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f000 fc14 	bl	8008776 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69da      	ldr	r2, [r3, #28]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 020c 	bic.w	r2, r2, #12
 8007f5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69d9      	ldr	r1, [r3, #28]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	61da      	str	r2, [r3, #28]
 8007f70:	e021      	b.n	8007fb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b0c      	cmp	r3, #12
 8007f76:	d11c      	bne.n	8007fb2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	6819      	ldr	r1, [r3, #0]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f000 fc31 	bl	80087ee <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	69da      	ldr	r2, [r3, #28]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007f9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69d9      	ldr	r1, [r3, #28]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	021a      	lsls	r2, r3, #8
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	61da      	str	r2, [r3, #28]
 8007fb0:	e001      	b.n	8007fb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d101      	bne.n	8007fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	e0ae      	b.n	8008144 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b0c      	cmp	r3, #12
 8007ff2:	f200 809f 	bhi.w	8008134 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ff6:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	08008031 	.word	0x08008031
 8008000:	08008135 	.word	0x08008135
 8008004:	08008135 	.word	0x08008135
 8008008:	08008135 	.word	0x08008135
 800800c:	08008071 	.word	0x08008071
 8008010:	08008135 	.word	0x08008135
 8008014:	08008135 	.word	0x08008135
 8008018:	08008135 	.word	0x08008135
 800801c:	080080b3 	.word	0x080080b3
 8008020:	08008135 	.word	0x08008135
 8008024:	08008135 	.word	0x08008135
 8008028:	08008135 	.word	0x08008135
 800802c:	080080f3 	.word	0x080080f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 f93c 	bl	80082b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699a      	ldr	r2, [r3, #24]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0208 	orr.w	r2, r2, #8
 800804a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699a      	ldr	r2, [r3, #24]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0204 	bic.w	r2, r2, #4
 800805a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6999      	ldr	r1, [r3, #24]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	691a      	ldr	r2, [r3, #16]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	619a      	str	r2, [r3, #24]
      break;
 800806e:	e064      	b.n	800813a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68b9      	ldr	r1, [r7, #8]
 8008076:	4618      	mov	r0, r3
 8008078:	f000 f98c 	bl	8008394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	699a      	ldr	r2, [r3, #24]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800808a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699a      	ldr	r2, [r3, #24]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800809a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6999      	ldr	r1, [r3, #24]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	021a      	lsls	r2, r3, #8
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	619a      	str	r2, [r3, #24]
      break;
 80080b0:	e043      	b.n	800813a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 f9e1 	bl	8008480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69da      	ldr	r2, [r3, #28]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0208 	orr.w	r2, r2, #8
 80080cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69da      	ldr	r2, [r3, #28]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0204 	bic.w	r2, r2, #4
 80080dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	69d9      	ldr	r1, [r3, #28]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	691a      	ldr	r2, [r3, #16]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	61da      	str	r2, [r3, #28]
      break;
 80080f0:	e023      	b.n	800813a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68b9      	ldr	r1, [r7, #8]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 fa35 	bl	8008568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69da      	ldr	r2, [r3, #28]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800810c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69da      	ldr	r2, [r3, #28]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800811c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69d9      	ldr	r1, [r3, #28]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	021a      	lsls	r2, r3, #8
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	61da      	str	r2, [r3, #28]
      break;
 8008132:	e002      	b.n	800813a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	75fb      	strb	r3, [r7, #23]
      break;
 8008138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a40      	ldr	r2, [pc, #256]	; (8008288 <TIM_Base_SetConfig+0x114>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008192:	d00f      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a3d      	ldr	r2, [pc, #244]	; (800828c <TIM_Base_SetConfig+0x118>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00b      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a3c      	ldr	r2, [pc, #240]	; (8008290 <TIM_Base_SetConfig+0x11c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d007      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a3b      	ldr	r2, [pc, #236]	; (8008294 <TIM_Base_SetConfig+0x120>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d003      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a3a      	ldr	r2, [pc, #232]	; (8008298 <TIM_Base_SetConfig+0x124>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d108      	bne.n	80081c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2f      	ldr	r2, [pc, #188]	; (8008288 <TIM_Base_SetConfig+0x114>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d02b      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d4:	d027      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a2c      	ldr	r2, [pc, #176]	; (800828c <TIM_Base_SetConfig+0x118>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d023      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a2b      	ldr	r2, [pc, #172]	; (8008290 <TIM_Base_SetConfig+0x11c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d01f      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a2a      	ldr	r2, [pc, #168]	; (8008294 <TIM_Base_SetConfig+0x120>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d01b      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a29      	ldr	r2, [pc, #164]	; (8008298 <TIM_Base_SetConfig+0x124>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d017      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a28      	ldr	r2, [pc, #160]	; (800829c <TIM_Base_SetConfig+0x128>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d013      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a27      	ldr	r2, [pc, #156]	; (80082a0 <TIM_Base_SetConfig+0x12c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00f      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a26      	ldr	r2, [pc, #152]	; (80082a4 <TIM_Base_SetConfig+0x130>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00b      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a25      	ldr	r2, [pc, #148]	; (80082a8 <TIM_Base_SetConfig+0x134>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d007      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a24      	ldr	r2, [pc, #144]	; (80082ac <TIM_Base_SetConfig+0x138>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d003      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a23      	ldr	r2, [pc, #140]	; (80082b0 <TIM_Base_SetConfig+0x13c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d108      	bne.n	8008238 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800822c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	4313      	orrs	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a0a      	ldr	r2, [pc, #40]	; (8008288 <TIM_Base_SetConfig+0x114>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d003      	beq.n	800826c <TIM_Base_SetConfig+0xf8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a0c      	ldr	r2, [pc, #48]	; (8008298 <TIM_Base_SetConfig+0x124>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d103      	bne.n	8008274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	615a      	str	r2, [r3, #20]
}
 800827a:	bf00      	nop
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	40010000 	.word	0x40010000
 800828c:	40000400 	.word	0x40000400
 8008290:	40000800 	.word	0x40000800
 8008294:	40000c00 	.word	0x40000c00
 8008298:	40010400 	.word	0x40010400
 800829c:	40014000 	.word	0x40014000
 80082a0:	40014400 	.word	0x40014400
 80082a4:	40014800 	.word	0x40014800
 80082a8:	40001800 	.word	0x40001800
 80082ac:	40001c00 	.word	0x40001c00
 80082b0:	40002000 	.word	0x40002000

080082b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	f023 0201 	bic.w	r2, r3, #1
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0303 	bic.w	r3, r3, #3
 80082ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f023 0302 	bic.w	r3, r3, #2
 80082fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a20      	ldr	r2, [pc, #128]	; (800838c <TIM_OC1_SetConfig+0xd8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d003      	beq.n	8008318 <TIM_OC1_SetConfig+0x64>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a1f      	ldr	r2, [pc, #124]	; (8008390 <TIM_OC1_SetConfig+0xdc>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d10c      	bne.n	8008332 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f023 0308 	bic.w	r3, r3, #8
 800831e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f023 0304 	bic.w	r3, r3, #4
 8008330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a15      	ldr	r2, [pc, #84]	; (800838c <TIM_OC1_SetConfig+0xd8>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d003      	beq.n	8008342 <TIM_OC1_SetConfig+0x8e>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a14      	ldr	r2, [pc, #80]	; (8008390 <TIM_OC1_SetConfig+0xdc>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d111      	bne.n	8008366 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	4313      	orrs	r3, r2
 800835a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	621a      	str	r2, [r3, #32]
}
 8008380:	bf00      	nop
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	40010000 	.word	0x40010000
 8008390:	40010400 	.word	0x40010400

08008394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	f023 0210 	bic.w	r2, r3, #16
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f023 0320 	bic.w	r3, r3, #32
 80083de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a22      	ldr	r2, [pc, #136]	; (8008478 <TIM_OC2_SetConfig+0xe4>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_OC2_SetConfig+0x68>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a21      	ldr	r2, [pc, #132]	; (800847c <TIM_OC2_SetConfig+0xe8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d10d      	bne.n	8008418 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008416:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a17      	ldr	r2, [pc, #92]	; (8008478 <TIM_OC2_SetConfig+0xe4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_OC2_SetConfig+0x94>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a16      	ldr	r2, [pc, #88]	; (800847c <TIM_OC2_SetConfig+0xe8>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d113      	bne.n	8008450 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800842e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	621a      	str	r2, [r3, #32]
}
 800846a:	bf00      	nop
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	40010000 	.word	0x40010000
 800847c:	40010400 	.word	0x40010400

08008480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0303 	bic.w	r3, r3, #3
 80084b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	021b      	lsls	r3, r3, #8
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a21      	ldr	r2, [pc, #132]	; (8008560 <TIM_OC3_SetConfig+0xe0>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d003      	beq.n	80084e6 <TIM_OC3_SetConfig+0x66>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a20      	ldr	r2, [pc, #128]	; (8008564 <TIM_OC3_SetConfig+0xe4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d10d      	bne.n	8008502 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a16      	ldr	r2, [pc, #88]	; (8008560 <TIM_OC3_SetConfig+0xe0>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d003      	beq.n	8008512 <TIM_OC3_SetConfig+0x92>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a15      	ldr	r2, [pc, #84]	; (8008564 <TIM_OC3_SetConfig+0xe4>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d113      	bne.n	800853a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	4313      	orrs	r3, r2
 8008538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	621a      	str	r2, [r3, #32]
}
 8008554:	bf00      	nop
 8008556:	371c      	adds	r7, #28
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	40010000 	.word	0x40010000
 8008564:	40010400 	.word	0x40010400

08008568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800859e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	021b      	lsls	r3, r3, #8
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	031b      	lsls	r3, r3, #12
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4313      	orrs	r3, r2
 80085be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a12      	ldr	r2, [pc, #72]	; (800860c <TIM_OC4_SetConfig+0xa4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d003      	beq.n	80085d0 <TIM_OC4_SetConfig+0x68>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a11      	ldr	r2, [pc, #68]	; (8008610 <TIM_OC4_SetConfig+0xa8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d109      	bne.n	80085e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	019b      	lsls	r3, r3, #6
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	621a      	str	r2, [r3, #32]
}
 80085fe:	bf00      	nop
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	40010000 	.word	0x40010000
 8008610:	40010400 	.word	0x40010400

08008614 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	f023 0201 	bic.w	r2, r3, #1
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4a28      	ldr	r2, [pc, #160]	; (80086e0 <TIM_TI1_SetConfig+0xcc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d01b      	beq.n	800867a <TIM_TI1_SetConfig+0x66>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008648:	d017      	beq.n	800867a <TIM_TI1_SetConfig+0x66>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4a25      	ldr	r2, [pc, #148]	; (80086e4 <TIM_TI1_SetConfig+0xd0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d013      	beq.n	800867a <TIM_TI1_SetConfig+0x66>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	4a24      	ldr	r2, [pc, #144]	; (80086e8 <TIM_TI1_SetConfig+0xd4>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d00f      	beq.n	800867a <TIM_TI1_SetConfig+0x66>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	4a23      	ldr	r2, [pc, #140]	; (80086ec <TIM_TI1_SetConfig+0xd8>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d00b      	beq.n	800867a <TIM_TI1_SetConfig+0x66>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	4a22      	ldr	r2, [pc, #136]	; (80086f0 <TIM_TI1_SetConfig+0xdc>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d007      	beq.n	800867a <TIM_TI1_SetConfig+0x66>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	4a21      	ldr	r2, [pc, #132]	; (80086f4 <TIM_TI1_SetConfig+0xe0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d003      	beq.n	800867a <TIM_TI1_SetConfig+0x66>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4a20      	ldr	r2, [pc, #128]	; (80086f8 <TIM_TI1_SetConfig+0xe4>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d101      	bne.n	800867e <TIM_TI1_SetConfig+0x6a>
 800867a:	2301      	movs	r3, #1
 800867c:	e000      	b.n	8008680 <TIM_TI1_SetConfig+0x6c>
 800867e:	2300      	movs	r3, #0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f023 0303 	bic.w	r3, r3, #3
 800868a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4313      	orrs	r3, r2
 8008692:	617b      	str	r3, [r7, #20]
 8008694:	e003      	b.n	800869e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f043 0301 	orr.w	r3, r3, #1
 800869c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f023 030a 	bic.w	r3, r3, #10
 80086b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f003 030a 	and.w	r3, r3, #10
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	621a      	str	r2, [r3, #32]
}
 80086d2:	bf00      	nop
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	40010000 	.word	0x40010000
 80086e4:	40000400 	.word	0x40000400
 80086e8:	40000800 	.word	0x40000800
 80086ec:	40000c00 	.word	0x40000c00
 80086f0:	40010400 	.word	0x40010400
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40001800 	.word	0x40001800

080086fc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
 8008708:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	f023 0210 	bic.w	r2, r3, #16
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	4313      	orrs	r3, r2
 8008732:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800873a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	031b      	lsls	r3, r3, #12
 8008740:	b29b      	uxth	r3, r3
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800874e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4313      	orrs	r3, r2
 800875c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	621a      	str	r2, [r3, #32]
}
 800876a:	bf00      	nop
 800876c:	371c      	adds	r7, #28
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008776:	b480      	push	{r7}
 8008778:	b087      	sub	sp, #28
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
 8008782:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f023 0303 	bic.w	r3, r3, #3
 80087a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	011b      	lsls	r3, r3, #4
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	4313      	orrs	r3, r2
 80087be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80087c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	621a      	str	r2, [r3, #32]
}
 80087e2:	bf00      	nop
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b087      	sub	sp, #28
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	607a      	str	r2, [r7, #4]
 80087fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800881a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	4313      	orrs	r3, r2
 8008824:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800882c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	031b      	lsls	r3, r3, #12
 8008832:	b29b      	uxth	r3, r3
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008840:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	031b      	lsls	r3, r3, #12
 8008846:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	4313      	orrs	r3, r2
 800884e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	621a      	str	r2, [r3, #32]
}
 800885c:	bf00      	nop
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f003 031f 	and.w	r3, r3, #31
 800887a:	2201      	movs	r2, #1
 800887c:	fa02 f303 	lsl.w	r3, r2, r3
 8008880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a1a      	ldr	r2, [r3, #32]
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	43db      	mvns	r3, r3
 800888a:	401a      	ands	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a1a      	ldr	r2, [r3, #32]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f003 031f 	and.w	r3, r3, #31
 800889a:	6879      	ldr	r1, [r7, #4]
 800889c:	fa01 f303 	lsl.w	r3, r1, r3
 80088a0:	431a      	orrs	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	621a      	str	r2, [r3, #32]
}
 80088a6:	bf00      	nop
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
	...

080088b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d101      	bne.n	80088cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088c8:	2302      	movs	r3, #2
 80088ca:	e05a      	b.n	8008982 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2202      	movs	r2, #2
 80088d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a21      	ldr	r2, [pc, #132]	; (8008990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d022      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008918:	d01d      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a1d      	ldr	r2, [pc, #116]	; (8008994 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d018      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a1b      	ldr	r2, [pc, #108]	; (8008998 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d013      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a1a      	ldr	r2, [pc, #104]	; (800899c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d00e      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a18      	ldr	r2, [pc, #96]	; (80089a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d009      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a17      	ldr	r2, [pc, #92]	; (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d004      	beq.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a15      	ldr	r2, [pc, #84]	; (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d10c      	bne.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800895c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	4313      	orrs	r3, r2
 8008966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	40010000 	.word	0x40010000
 8008994:	40000400 	.word	0x40000400
 8008998:	40000800 	.word	0x40000800
 800899c:	40000c00 	.word	0x40000c00
 80089a0:	40010400 	.word	0x40010400
 80089a4:	40014000 	.word	0x40014000
 80089a8:	40001800 	.word	0x40001800

080089ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <f_gui_ClearLowerLcdPart>:
	"---"
};


static inline void f_gui_ClearLowerLcdPart()
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
	for(uint8_t i = 2; i < 8; i++) f_lcd_Clear(0, 128, i);
 80089da:	2302      	movs	r3, #2
 80089dc:	71fb      	strb	r3, [r7, #7]
 80089de:	e008      	b.n	80089f2 <f_gui_ClearLowerLcdPart+0x1e>
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	461a      	mov	r2, r3
 80089e4:	2180      	movs	r1, #128	; 0x80
 80089e6:	2000      	movs	r0, #0
 80089e8:	f000 fa7c 	bl	8008ee4 <f_lcd_Clear>
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	3301      	adds	r3, #1
 80089f0:	71fb      	strb	r3, [r7, #7]
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	2b07      	cmp	r3, #7
 80089f6:	d9f3      	bls.n	80089e0 <f_gui_ClearLowerLcdPart+0xc>
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <f_gui_DrawChartPage>:


//=============== PUBLIC FUNCTIONS ==========================

void f_gui_DrawChartPage(uint8_t *data, uint8_t length, uint8_t shift)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b084      	sub	sp, #16
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	70fb      	strb	r3, [r7, #3]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	70bb      	strb	r3, [r7, #2]
	//max length: 120 px
	//max value: 44 px
	if(length > 120) return;
 8008a12:	78fb      	ldrb	r3, [r7, #3]
 8008a14:	2b78      	cmp	r3, #120	; 0x78
 8008a16:	d835      	bhi.n	8008a84 <f_gui_DrawChartPage+0x82>

	f_gui_ClearLowerLcdPart();
 8008a18:	f7ff ffdc 	bl	80089d4 <f_gui_ClearLowerLcdPart>

	for(uint8_t i = 0; i < length; i++)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
 8008a20:	e01f      	b.n	8008a62 <f_gui_DrawChartPage+0x60>
	{
		uint8_t chartValue = 62 - data[(i + shift) % length]; //offset 2px
 8008a22:	7bfa      	ldrb	r2, [r7, #15]
 8008a24:	78bb      	ldrb	r3, [r7, #2]
 8008a26:	4413      	add	r3, r2
 8008a28:	78fa      	ldrb	r2, [r7, #3]
 8008a2a:	fb93 f1f2 	sdiv	r1, r3, r2
 8008a2e:	fb01 f202 	mul.w	r2, r1, r2
 8008a32:	1a9b      	subs	r3, r3, r2
 8008a34:	461a      	mov	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4413      	add	r3, r2
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8008a40:	73bb      	strb	r3, [r7, #14]
		if(chartValue < 18) chartValue = 18;
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	2b11      	cmp	r3, #17
 8008a46:	d801      	bhi.n	8008a4c <f_gui_DrawChartPage+0x4a>
 8008a48:	2312      	movs	r3, #18
 8008a4a:	73bb      	strb	r3, [r7, #14]
		f_lcd_SetPixel(i + 3, chartValue, true);
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	3303      	adds	r3, #3
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	7bb9      	ldrb	r1, [r7, #14]
 8008a54:	2201      	movs	r2, #1
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 fb9a 	bl	8009190 <f_lcd_SetPixel>
	for(uint8_t i = 0; i < length; i++)
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	73fb      	strb	r3, [r7, #15]
 8008a62:	7bfa      	ldrb	r2, [r7, #15]
 8008a64:	78fb      	ldrb	r3, [r7, #3]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d3db      	bcc.n	8008a22 <f_gui_DrawChartPage+0x20>
	}

	f_lcd_DrawLine(0, 16, 0, 64);
 8008a6a:	2340      	movs	r3, #64	; 0x40
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2110      	movs	r1, #16
 8008a70:	2000      	movs	r0, #0
 8008a72:	f000 fbdf 	bl	8009234 <f_lcd_DrawLine>
	f_lcd_DrawLine(0, 63, 127, 63);
 8008a76:	233f      	movs	r3, #63	; 0x3f
 8008a78:	227f      	movs	r2, #127	; 0x7f
 8008a7a:	213f      	movs	r1, #63	; 0x3f
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	f000 fbd9 	bl	8009234 <f_lcd_DrawLine>
 8008a82:	e000      	b.n	8008a86 <f_gui_DrawChartPage+0x84>
	if(length > 120) return;
 8008a84:	bf00      	nop
}
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <f_gui_DrawParamPage>:

void f_gui_DrawParamPage(t_pid_Parameter *Param, t_pid_Control *Ctrl)
{
 8008a8c:	b5b0      	push	{r4, r5, r7, lr}
 8008a8e:	b08c      	sub	sp, #48	; 0x30
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
	char txt[32];
	f_gui_ClearLowerLcdPart();
 8008a96:	f7ff ff9d 	bl	80089d4 <f_gui_ClearLowerLcdPart>

	//Parameter: (set) get

	sprintf(txt, "P:\t(%.1f)\t%.1f", Param->Kp, Ctrl->pValue);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7f7 fd52 	bl	8000548 <__aeabi_f2d>
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	460d      	mov	r5, r1
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7f7 fd4b 	bl	8000548 <__aeabi_f2d>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	f107 0008 	add.w	r0, r7, #8
 8008aba:	e9cd 2300 	strd	r2, r3, [sp]
 8008abe:	4622      	mov	r2, r4
 8008ac0:	462b      	mov	r3, r5
 8008ac2:	4925      	ldr	r1, [pc, #148]	; (8008b58 <f_gui_DrawParamPage+0xcc>)
 8008ac4:	f001 fe40 	bl	800a748 <siprintf>
	f_lcd_WriteTxt(0, 16, txt, &font_msSansSerif_14);
 8008ac8:	f107 0208 	add.w	r2, r7, #8
 8008acc:	4b23      	ldr	r3, [pc, #140]	; (8008b5c <f_gui_DrawParamPage+0xd0>)
 8008ace:	2110      	movs	r1, #16
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f000 fa52 	bl	8008f7a <f_lcd_WriteTxt>
	sprintf(txt, "I:\t(%.1f)\t%.1f", Param->Ki, Ctrl->iValue);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7f7 fd34 	bl	8000548 <__aeabi_f2d>
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	460d      	mov	r5, r1
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7f7 fd2d 	bl	8000548 <__aeabi_f2d>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	f107 0008 	add.w	r0, r7, #8
 8008af6:	e9cd 2300 	strd	r2, r3, [sp]
 8008afa:	4622      	mov	r2, r4
 8008afc:	462b      	mov	r3, r5
 8008afe:	4918      	ldr	r1, [pc, #96]	; (8008b60 <f_gui_DrawParamPage+0xd4>)
 8008b00:	f001 fe22 	bl	800a748 <siprintf>
	f_lcd_WriteTxt(0, 32, txt, &font_msSansSerif_14);
 8008b04:	f107 0208 	add.w	r2, r7, #8
 8008b08:	4b14      	ldr	r3, [pc, #80]	; (8008b5c <f_gui_DrawParamPage+0xd0>)
 8008b0a:	2120      	movs	r1, #32
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f000 fa34 	bl	8008f7a <f_lcd_WriteTxt>
	sprintf(txt, "D:\t(%.1f)\t%.1f", Param->Kd, Ctrl->dValue);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7f7 fd16 	bl	8000548 <__aeabi_f2d>
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	460d      	mov	r5, r1
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7f7 fd0f 	bl	8000548 <__aeabi_f2d>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	f107 0008 	add.w	r0, r7, #8
 8008b32:	e9cd 2300 	strd	r2, r3, [sp]
 8008b36:	4622      	mov	r2, r4
 8008b38:	462b      	mov	r3, r5
 8008b3a:	490a      	ldr	r1, [pc, #40]	; (8008b64 <f_gui_DrawParamPage+0xd8>)
 8008b3c:	f001 fe04 	bl	800a748 <siprintf>
	f_lcd_WriteTxt(0, 48, txt, &font_msSansSerif_14);
 8008b40:	f107 0208 	add.w	r2, r7, #8
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <f_gui_DrawParamPage+0xd0>)
 8008b46:	2130      	movs	r1, #48	; 0x30
 8008b48:	2000      	movs	r0, #0
 8008b4a:	f000 fa16 	bl	8008f7a <f_lcd_WriteTxt>
}
 8008b4e:	bf00      	nop
 8008b50:	3728      	adds	r7, #40	; 0x28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bdb0      	pop	{r4, r5, r7, pc}
 8008b56:	bf00      	nop
 8008b58:	0800cd24 	.word	0x0800cd24
 8008b5c:	0800dae0 	.word	0x0800dae0
 8008b60:	0800cd34 	.word	0x0800cd34
 8008b64:	0800cd44 	.word	0x0800cd44

08008b68 <f_gui_DrawCtrlPage>:

void f_gui_DrawCtrlPage(float set, float input, float output)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08c      	sub	sp, #48	; 0x30
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8008b72:	edc7 0a02 	vstr	s1, [r7, #8]
 8008b76:	ed87 1a01 	vstr	s2, [r7, #4]
	char txt[32];
	f_gui_ClearLowerLcdPart();
 8008b7a:	f7ff ff2b 	bl	80089d4 <f_gui_ClearLowerLcdPart>

	sprintf(txt, "Set:\t%.1f cm", set);
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7f7 fce2 	bl	8000548 <__aeabi_f2d>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	f107 0010 	add.w	r0, r7, #16
 8008b8c:	4917      	ldr	r1, [pc, #92]	; (8008bec <f_gui_DrawCtrlPage+0x84>)
 8008b8e:	f001 fddb 	bl	800a748 <siprintf>
	f_lcd_WriteTxt(0, 16, txt, &font_msSansSerif_14);
 8008b92:	f107 0210 	add.w	r2, r7, #16
 8008b96:	4b16      	ldr	r3, [pc, #88]	; (8008bf0 <f_gui_DrawCtrlPage+0x88>)
 8008b98:	2110      	movs	r1, #16
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	f000 f9ed 	bl	8008f7a <f_lcd_WriteTxt>
	sprintf(txt, "In:\t\t%.1f cm", input);
 8008ba0:	68b8      	ldr	r0, [r7, #8]
 8008ba2:	f7f7 fcd1 	bl	8000548 <__aeabi_f2d>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	f107 0010 	add.w	r0, r7, #16
 8008bae:	4911      	ldr	r1, [pc, #68]	; (8008bf4 <f_gui_DrawCtrlPage+0x8c>)
 8008bb0:	f001 fdca 	bl	800a748 <siprintf>
	f_lcd_WriteTxt(0, 32, txt, &font_msSansSerif_14);
 8008bb4:	f107 0210 	add.w	r2, r7, #16
 8008bb8:	4b0d      	ldr	r3, [pc, #52]	; (8008bf0 <f_gui_DrawCtrlPage+0x88>)
 8008bba:	2120      	movs	r1, #32
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	f000 f9dc 	bl	8008f7a <f_lcd_WriteTxt>
	sprintf(txt, "Out:\t%.1f", output);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7f7 fcc0 	bl	8000548 <__aeabi_f2d>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	f107 0010 	add.w	r0, r7, #16
 8008bd0:	4909      	ldr	r1, [pc, #36]	; (8008bf8 <f_gui_DrawCtrlPage+0x90>)
 8008bd2:	f001 fdb9 	bl	800a748 <siprintf>
	f_lcd_WriteTxt(0, 48, txt, &font_msSansSerif_14);
 8008bd6:	f107 0210 	add.w	r2, r7, #16
 8008bda:	4b05      	ldr	r3, [pc, #20]	; (8008bf0 <f_gui_DrawCtrlPage+0x88>)
 8008bdc:	2130      	movs	r1, #48	; 0x30
 8008bde:	2000      	movs	r0, #0
 8008be0:	f000 f9cb 	bl	8008f7a <f_lcd_WriteTxt>
}
 8008be4:	bf00      	nop
 8008be6:	3730      	adds	r7, #48	; 0x30
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	0800cd54 	.word	0x0800cd54
 8008bf0:	0800dae0 	.word	0x0800dae0
 8008bf4:	0800cd64 	.word	0x0800cd64
 8008bf8:	0800cd74 	.word	0x0800cd74

08008bfc <f_gui_DrawHeading>:

void f_gui_DrawHeading(e_sm_State state, e_gui_lcdPage Page)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	460a      	mov	r2, r1
 8008c06:	71fb      	strb	r3, [r7, #7]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	71bb      	strb	r3, [r7, #6]
	f_lcd_Clear(0, 128, 0);
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2180      	movs	r1, #128	; 0x80
 8008c10:	2000      	movs	r0, #0
 8008c12:	f000 f967 	bl	8008ee4 <f_lcd_Clear>
	f_lcd_Clear(0, 128, 1);
 8008c16:	2201      	movs	r2, #1
 8008c18:	2180      	movs	r1, #128	; 0x80
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	f000 f962 	bl	8008ee4 <f_lcd_Clear>
	
	f_lcd_WriteTxt(0, 0, "St:", &font_msSansSerif_14);
 8008c20:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <f_gui_DrawHeading+0x68>)
 8008c22:	4a11      	ldr	r2, [pc, #68]	; (8008c68 <f_gui_DrawHeading+0x6c>)
 8008c24:	2100      	movs	r1, #0
 8008c26:	2000      	movs	r0, #0
 8008c28:	f000 f9a7 	bl	8008f7a <f_lcd_WriteTxt>
	f_lcd_WriteTxt(24, 0, StateTitle[state], &font_msSansSerif_14);
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	4a0f      	ldr	r2, [pc, #60]	; (8008c6c <f_gui_DrawHeading+0x70>)
 8008c30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c34:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <f_gui_DrawHeading+0x68>)
 8008c36:	2100      	movs	r1, #0
 8008c38:	2018      	movs	r0, #24
 8008c3a:	f000 f99e 	bl	8008f7a <f_lcd_WriteTxt>
	f_lcd_WriteTxt(64, 0, "Lcd:", &font_msSansSerif_14);
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <f_gui_DrawHeading+0x68>)
 8008c40:	4a0b      	ldr	r2, [pc, #44]	; (8008c70 <f_gui_DrawHeading+0x74>)
 8008c42:	2100      	movs	r1, #0
 8008c44:	2040      	movs	r0, #64	; 0x40
 8008c46:	f000 f998 	bl	8008f7a <f_lcd_WriteTxt>
	f_lcd_WriteTxt(96, 0, PageTitle[Page], &font_msSansSerif_14);
 8008c4a:	79bb      	ldrb	r3, [r7, #6]
 8008c4c:	4a09      	ldr	r2, [pc, #36]	; (8008c74 <f_gui_DrawHeading+0x78>)
 8008c4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c52:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <f_gui_DrawHeading+0x68>)
 8008c54:	2100      	movs	r1, #0
 8008c56:	2060      	movs	r0, #96	; 0x60
 8008c58:	f000 f98f 	bl	8008f7a <f_lcd_WriteTxt>
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	0800dae0 	.word	0x0800dae0
 8008c68:	0800cd80 	.word	0x0800cd80
 8008c6c:	2000002c 	.word	0x2000002c
 8008c70:	0800cd84 	.word	0x0800cd84
 8008c74:	20000044 	.word	0x20000044

08008c78 <f_receiveWord>:
uint16_t curr_reg = INA219_CALIB_VALUE;
uint16_t curr_lsc = INA219_CURRENT_LSB * 1000000;


static uint16_t f_receiveWord(uint8_t address)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af02      	add	r7, sp, #8
 8008c7e:	4603      	mov	r3, r0
 8008c80:	71fb      	strb	r3, [r7, #7]
	uint8_t receive[2];

	HAL_I2C_Master_Transmit(&hi2c1, INA219_I2C_ADDRESS, &address, 1, 50);
 8008c82:	1dfa      	adds	r2, r7, #7
 8008c84:	2332      	movs	r3, #50	; 0x32
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	2301      	movs	r3, #1
 8008c8a:	2180      	movs	r1, #128	; 0x80
 8008c8c:	480b      	ldr	r0, [pc, #44]	; (8008cbc <f_receiveWord+0x44>)
 8008c8e:	f7fa fc5b 	bl	8003548 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, INA219_I2C_ADDRESS, (uint8_t*)&receive, 2, 50);
 8008c92:	f107 020c 	add.w	r2, r7, #12
 8008c96:	2332      	movs	r3, #50	; 0x32
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	2180      	movs	r1, #128	; 0x80
 8008c9e:	4807      	ldr	r0, [pc, #28]	; (8008cbc <f_receiveWord+0x44>)
 8008ca0:	f7fa fd50 	bl	8003744 <HAL_I2C_Master_Receive>

	return (receive[0] << 8) | receive[1];
 8008ca4:	7b3b      	ldrb	r3, [r7, #12]
 8008ca6:	021b      	lsls	r3, r3, #8
 8008ca8:	b21a      	sxth	r2, r3
 8008caa:	7b7b      	ldrb	r3, [r7, #13]
 8008cac:	b21b      	sxth	r3, r3
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	b21b      	sxth	r3, r3
 8008cb2:	b29b      	uxth	r3, r3
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	2000024c 	.word	0x2000024c

08008cc0 <f_sendWord>:

static inline void f_sendWord(uint8_t address, uint16_t word)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af02      	add	r7, sp, #8
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	460a      	mov	r2, r1
 8008cca:	71fb      	strb	r3, [r7, #7]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	80bb      	strh	r3, [r7, #4]
	uint8_t transmit[3] = {address, word >> 8, word & 0xFF};
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	733b      	strb	r3, [r7, #12]
 8008cd4:	88bb      	ldrh	r3, [r7, #4]
 8008cd6:	0a1b      	lsrs	r3, r3, #8
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	737b      	strb	r3, [r7, #13]
 8008cde:	88bb      	ldrh	r3, [r7, #4]
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&hi2c1, INA219_I2C_ADDRESS, (uint8_t*)&transmit, 3, 50);
 8008ce4:	f107 020c 	add.w	r2, r7, #12
 8008ce8:	2332      	movs	r3, #50	; 0x32
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	2303      	movs	r3, #3
 8008cee:	2180      	movs	r1, #128	; 0x80
 8008cf0:	4803      	ldr	r0, [pc, #12]	; (8008d00 <f_sendWord+0x40>)
 8008cf2:	f7fa fc29 	bl	8003548 <HAL_I2C_Master_Transmit>
}
 8008cf6:	bf00      	nop
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	2000024c 	.word	0x2000024c

08008d04 <f_ina219_HwInit>:

static void f_ina219_HwInit()
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
	 hi2c1.Instance = I2C1;
 8008d08:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <f_ina219_HwInit+0x50>)
 8008d0a:	4a13      	ldr	r2, [pc, #76]	; (8008d58 <f_ina219_HwInit+0x54>)
 8008d0c:	601a      	str	r2, [r3, #0]
	 hi2c1.Init.ClockSpeed = 100000;
 8008d0e:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <f_ina219_HwInit+0x50>)
 8008d10:	4a12      	ldr	r2, [pc, #72]	; (8008d5c <f_ina219_HwInit+0x58>)
 8008d12:	605a      	str	r2, [r3, #4]
	 hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008d14:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <f_ina219_HwInit+0x50>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	609a      	str	r2, [r3, #8]
	 hi2c1.Init.OwnAddress1 = 0;
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <f_ina219_HwInit+0x50>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	60da      	str	r2, [r3, #12]
	 hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008d20:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <f_ina219_HwInit+0x50>)
 8008d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008d26:	611a      	str	r2, [r3, #16]
	 hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008d28:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <f_ina219_HwInit+0x50>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	615a      	str	r2, [r3, #20]
	 hi2c1.Init.OwnAddress2 = 0;
 8008d2e:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <f_ina219_HwInit+0x50>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	619a      	str	r2, [r3, #24]
	 hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <f_ina219_HwInit+0x50>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	61da      	str	r2, [r3, #28]
	 hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008d3a:	4b06      	ldr	r3, [pc, #24]	; (8008d54 <f_ina219_HwInit+0x50>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	621a      	str	r2, [r3, #32]
	 if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008d40:	4804      	ldr	r0, [pc, #16]	; (8008d54 <f_ina219_HwInit+0x50>)
 8008d42:	f7fa fabd 	bl	80032c0 <HAL_I2C_Init>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <f_ina219_HwInit+0x4c>
	 {
	   Error_Handler();
 8008d4c:	f7f8 fffa 	bl	8001d44 <Error_Handler>
	 }
}
 8008d50:	bf00      	nop
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	2000024c 	.word	0x2000024c
 8008d58:	40005400 	.word	0x40005400
 8008d5c:	000186a0 	.word	0x000186a0

08008d60 <f_ina219_calibrate>:

static void f_ina219_calibrate()
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
	uint16_t calib = (uint16_t)INA219_CALIB_VALUE;
 8008d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d6a:	80fb      	strh	r3, [r7, #6]

	f_sendWord(INA219_CALIBRATION, calib);
 8008d6c:	88fb      	ldrh	r3, [r7, #6]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	2005      	movs	r0, #5
 8008d72:	f7ff ffa5 	bl	8008cc0 <f_sendWord>
}
 8008d76:	bf00      	nop
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <f_ina219_Init>:

//============== public functions ==================

bool f_ina219_Init()
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
	bool isOk = false;
 8008d84:	2300      	movs	r3, #0
 8008d86:	71fb      	strb	r3, [r7, #7]

	f_ina219_HwInit();
 8008d88:	f7ff ffbc 	bl	8008d04 <f_ina219_HwInit>
	// bus voltage range = 32v
	// gain divide = 2
	// bus mode/average = 12bit/
	// shunt mode/average = 12bit/ 128
	//mode = bus and shunt, continuous
	uint16_t config = (1 << 13) | (1 << 11) | (15 << 7) | (15 << 3) | (7 << 0);
 8008d8c:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8008d90:	80bb      	strh	r3, [r7, #4]

	f_ina219_reset();
 8008d92:	f000 f81a 	bl	8008dca <f_ina219_reset>
	HAL_Delay(1);
 8008d96:	2001      	movs	r0, #1
 8008d98:	f7f9 fbbc 	bl	8002514 <HAL_Delay>
	f_sendWord(INA219_CONFIG, config);
 8008d9c:	88bb      	ldrh	r3, [r7, #4]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	2000      	movs	r0, #0
 8008da2:	f7ff ff8d 	bl	8008cc0 <f_sendWord>

	//check if sensor is connected
	uint16_t checkConfig = f_receiveWord(INA219_CONFIG);
 8008da6:	2000      	movs	r0, #0
 8008da8:	f7ff ff66 	bl	8008c78 <f_receiveWord>
 8008dac:	4603      	mov	r3, r0
 8008dae:	807b      	strh	r3, [r7, #2]
	if(checkConfig == config) isOk = true;
 8008db0:	887a      	ldrh	r2, [r7, #2]
 8008db2:	88bb      	ldrh	r3, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d101      	bne.n	8008dbc <f_ina219_Init+0x3e>
 8008db8:	2301      	movs	r3, #1
 8008dba:	71fb      	strb	r3, [r7, #7]

	f_ina219_calibrate();
 8008dbc:	f7ff ffd0 	bl	8008d60 <f_ina219_calibrate>

	return isOk;
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <f_ina219_reset>:

void f_ina219_reset()
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
	uint16_t tempConfig = (1 << 15);
 8008dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dd4:	80fb      	strh	r3, [r7, #6]

	f_sendWord(INA219_CONFIG, tempConfig);
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	2000      	movs	r0, #0
 8008ddc:	f7ff ff70 	bl	8008cc0 <f_sendWord>
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <f_ina219_GetPowerInMilis>:

	return 1000*current*INA219_CURRENT_LSB;
}

uint16_t f_ina219_GetPowerInMilis()
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
	uint16_t power = f_receiveWord(INA219_POWER);
 8008dee:	2003      	movs	r0, #3
 8008df0:	f7ff ff42 	bl	8008c78 <f_receiveWord>
 8008df4:	4603      	mov	r3, r0
 8008df6:	80fb      	strh	r3, [r7, #6]

	return 1000*20*power*INA219_CURRENT_LSB;
 8008df8:	88fb      	ldrh	r3, [r7, #6]
 8008dfa:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008dfe:	fb02 f303 	mul.w	r3, r2, r3
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7f7 fb8e 	bl	8000524 <__aeabi_i2d>
 8008e08:	a309      	add	r3, pc, #36	; (adr r3, 8008e30 <f_ina219_GetPowerInMilis+0x48>)
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f7f7 fbf3 	bl	80005f8 <__aeabi_dmul>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4610      	mov	r0, r2
 8008e18:	4619      	mov	r1, r3
 8008e1a:	f7f7 fec5 	bl	8000ba8 <__aeabi_d2uiz>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	b29b      	uxth	r3, r3
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	f3af 8000 	nop.w
 8008e30:	d2f1a9fc 	.word	0xd2f1a9fc
 8008e34:	3f20624d 	.word	0x3f20624d

08008e38 <f_ina219_GetBusVoltageInMilis>:

int16_t f_ina219_GetBusVoltageInMilis()
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
	int16_t voltage = f_receiveWord(INA219_BUS_VOLTAGE);
 8008e3e:	2002      	movs	r0, #2
 8008e40:	f7ff ff1a 	bl	8008c78 <f_receiveWord>
 8008e44:	4603      	mov	r3, r0
 8008e46:	80fb      	strh	r3, [r7, #6]
	voltage = 4*(voltage >> 3);
 8008e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e4c:	10db      	asrs	r3, r3, #3
 8008e4e:	b21b      	sxth	r3, r3
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	80fb      	strh	r3, [r7, #6]

	return voltage;
 8008e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <f_SendFrameBufferPage>:
uint8_t sh1106_FrameBuffer[SH1106_HEIGHT/8][SH1106_WIDTH];
uint8_t sh1106_pageDirtyMask;


static inline void f_SendFrameBufferPage(uint8_t page)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	71fb      	strb	r3, [r7, #7]
	f_sh1106_cmd_SetColumnAddress(0);
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f000 fc3a 	bl	80096e8 <f_sh1106_cmd_SetColumnAddress>
	f_sh1106_cmd_SetPageAddress(page);
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fc9a 	bl	80097b0 <f_sh1106_cmd_SetPageAddress>
	f_sh1106_SendPageData(page, &sh1106_FrameBuffer[page][0], SH1106_WIDTH);
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	01db      	lsls	r3, r3, #7
 8008e80:	4a05      	ldr	r2, [pc, #20]	; (8008e98 <f_SendFrameBufferPage+0x34>)
 8008e82:	1899      	adds	r1, r3, r2
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	2280      	movs	r2, #128	; 0x80
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fcdf 	bl	800984c <f_sh1106_SendPageData>
}
 8008e8e:	bf00      	nop
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20000504 	.word	0x20000504

08008e9c <f_lcd_Init>:

//=========== public functions =================

void f_lcd_Init()
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
	f_sh1106_Init();
 8008ea2:	f000 fc0d 	bl	80096c0 <f_sh1106_Init>

	f_sh1106_cmd_SetScanDirection(1);
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	f000 fca4 	bl	80097f4 <f_sh1106_cmd_SetScanDirection>
	f_sh1106_cmd_SetSegmentDirection(1);
 8008eac:	2001      	movs	r0, #1
 8008eae:	f000 fc45 	bl	800973c <f_sh1106_cmd_SetSegmentDirection>
	f_lcd_ClearAll();
 8008eb2:	f000 f84b 	bl	8008f4c <f_lcd_ClearAll>

	for(uint8_t page = 0; page < 8; page++)
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	71fb      	strb	r3, [r7, #7]
 8008eba:	e009      	b.n	8008ed0 <f_lcd_Init+0x34>
	{
		f_SendFrameBufferPage(page);
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff ffd0 	bl	8008e64 <f_SendFrameBufferPage>
		HAL_Delay(4);
 8008ec4:	2004      	movs	r0, #4
 8008ec6:	f7f9 fb25 	bl	8002514 <HAL_Delay>
	for(uint8_t page = 0; page < 8; page++)
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	71fb      	strb	r3, [r7, #7]
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b07      	cmp	r3, #7
 8008ed4:	d9f2      	bls.n	8008ebc <f_lcd_Init+0x20>
	}

	f_sh1106_cmd_TogglePower(1);
 8008ed6:	2001      	movs	r0, #1
 8008ed8:	f000 fc4d 	bl	8009776 <f_sh1106_cmd_TogglePower>

}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <f_lcd_Clear>:

void f_lcd_Clear(uint8_t col_start, uint8_t col_end, uint8_t page)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	71fb      	strb	r3, [r7, #7]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	71bb      	strb	r3, [r7, #6]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	717b      	strb	r3, [r7, #5]
	uint8_t blank = 0x00;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i = col_start; i < col_end; i++)
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	73fb      	strb	r3, [r7, #15]
 8008efe:	e00a      	b.n	8008f16 <f_lcd_Clear+0x32>
	{
		sh1106_FrameBuffer[page][i] = blank;
 8008f00:	797a      	ldrb	r2, [r7, #5]
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	490f      	ldr	r1, [pc, #60]	; (8008f44 <f_lcd_Clear+0x60>)
 8008f06:	01d2      	lsls	r2, r2, #7
 8008f08:	440a      	add	r2, r1
 8008f0a:	4413      	add	r3, r2
 8008f0c:	7bba      	ldrb	r2, [r7, #14]
 8008f0e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = col_start; i < col_end; i++)
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	3301      	adds	r3, #1
 8008f14:	73fb      	strb	r3, [r7, #15]
 8008f16:	7bfa      	ldrb	r2, [r7, #15]
 8008f18:	79bb      	ldrb	r3, [r7, #6]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d3f0      	bcc.n	8008f00 <f_lcd_Clear+0x1c>
	}

	sh1106_pageDirtyMask |= (1 << page);
 8008f1e:	797b      	ldrb	r3, [r7, #5]
 8008f20:	2201      	movs	r2, #1
 8008f22:	fa02 f303 	lsl.w	r3, r2, r3
 8008f26:	b25a      	sxtb	r2, r3
 8008f28:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <f_lcd_Clear+0x64>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	b25b      	sxtb	r3, r3
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	b25b      	sxtb	r3, r3
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <f_lcd_Clear+0x64>)
 8008f36:	701a      	strb	r2, [r3, #0]
}
 8008f38:	bf00      	nop
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	20000504 	.word	0x20000504
 8008f48:	20000904 	.word	0x20000904

08008f4c <f_lcd_ClearAll>:

void f_lcd_ClearAll()
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++) f_lcd_Clear(0, SH1106_WIDTH, page);
 8008f52:	2300      	movs	r3, #0
 8008f54:	71fb      	strb	r3, [r7, #7]
 8008f56:	e008      	b.n	8008f6a <f_lcd_ClearAll+0x1e>
 8008f58:	79fb      	ldrb	r3, [r7, #7]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	2180      	movs	r1, #128	; 0x80
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f7ff ffc0 	bl	8008ee4 <f_lcd_Clear>
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	3301      	adds	r3, #1
 8008f68:	71fb      	strb	r3, [r7, #7]
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	2b07      	cmp	r3, #7
 8008f6e:	d9f3      	bls.n	8008f58 <f_lcd_ClearAll+0xc>
}
 8008f70:	bf00      	nop
 8008f72:	bf00      	nop
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <f_lcd_WriteTxt>:

void f_lcd_WriteTxt(uint8_t x, uint8_t y, const char* txt, const tFont *font)
{
 8008f7a:	b590      	push	{r4, r7, lr}
 8008f7c:	b089      	sub	sp, #36	; 0x24
 8008f7e:	af02      	add	r7, sp, #8
 8008f80:	60ba      	str	r2, [r7, #8]
 8008f82:	607b      	str	r3, [r7, #4]
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	73bb      	strb	r3, [r7, #14]
	uint8_t fontHeight = font->chars->image->height;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	88db      	ldrh	r3, [r3, #6]
 8008f94:	75fb      	strb	r3, [r7, #23]
	uint8_t ch;

	while((ch = *txt++))
 8008f96:	e031      	b.n	8008ffc <f_lcd_WriteTxt+0x82>
	{
		if(ch != '\t')
 8008f98:	7dbb      	ldrb	r3, [r7, #22]
 8008f9a:	2b09      	cmp	r3, #9
 8008f9c:	d027      	beq.n	8008fee <f_lcd_WriteTxt+0x74>
		{
			uint8_t fontWidth = font->chars[ch - 0x20].image->width;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	7dbb      	ldrb	r3, [r7, #22]
 8008fa4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008fa8:	3b20      	subs	r3, #32
 8008faa:	00db      	lsls	r3, r3, #3
 8008fac:	4413      	add	r3, r2
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	889b      	ldrh	r3, [r3, #4]
 8008fb2:	757b      	strb	r3, [r7, #21]
			if((SH1106_WIDTH - x) < fontWidth) break; //no line wrapping
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 8008fba:	7d7b      	ldrb	r3, [r7, #21]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	db26      	blt.n	800900e <f_lcd_WriteTxt+0x94>
			f_lcd_DrawRaw(x, y, font->chars[ch - 0x20].image->data, fontWidth, fontHeight);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	7dbb      	ldrb	r3, [r7, #22]
 8008fc6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008fca:	3b20      	subs	r3, #32
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	4413      	add	r3, r2
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	7d7c      	ldrb	r4, [r7, #21]
 8008fd6:	7bb9      	ldrb	r1, [r7, #14]
 8008fd8:	7bf8      	ldrb	r0, [r7, #15]
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	4623      	mov	r3, r4
 8008fe0:	f000 f81a 	bl	8009018 <f_lcd_DrawRaw>
	
			x += fontWidth;
 8008fe4:	7bfa      	ldrb	r2, [r7, #15]
 8008fe6:	7d7b      	ldrb	r3, [r7, #21]
 8008fe8:	4413      	add	r3, r2
 8008fea:	73fb      	strb	r3, [r7, #15]
 8008fec:	e006      	b.n	8008ffc <f_lcd_WriteTxt+0x82>
		}
		else //tab
		{
			x = ((x/16) + 1) * 16;
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	091b      	lsrs	r3, r3, #4
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	011b      	lsls	r3, r3, #4
 8008ffa:	73fb      	strb	r3, [r7, #15]
	while((ch = *txt++))
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	60ba      	str	r2, [r7, #8]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	75bb      	strb	r3, [r7, #22]
 8009006:	7dbb      	ldrb	r3, [r7, #22]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1c5      	bne.n	8008f98 <f_lcd_WriteTxt+0x1e>
		}
		
	}
}
 800900c:	e000      	b.n	8009010 <f_lcd_WriteTxt+0x96>
			if((SH1106_WIDTH - x) < fontWidth) break; //no line wrapping
 800900e:	bf00      	nop
}
 8009010:	bf00      	nop
 8009012:	371c      	adds	r7, #28
 8009014:	46bd      	mov	sp, r7
 8009016:	bd90      	pop	{r4, r7, pc}

08009018 <f_lcd_DrawRaw>:

void f_lcd_DrawRaw(uint8_t x, uint8_t y, const uint8_t* image, uint8_t x_size, uint8_t y_size)
{
 8009018:	b480      	push	{r7}
 800901a:	b087      	sub	sp, #28
 800901c:	af00      	add	r7, sp, #0
 800901e:	603a      	str	r2, [r7, #0]
 8009020:	461a      	mov	r2, r3
 8009022:	4603      	mov	r3, r0
 8009024:	71fb      	strb	r3, [r7, #7]
 8009026:	460b      	mov	r3, r1
 8009028:	71bb      	strb	r3, [r7, #6]
 800902a:	4613      	mov	r3, r2
 800902c:	717b      	strb	r3, [r7, #5]
	uint8_t bufferPage;
	uint8_t imagePage = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	75fb      	strb	r3, [r7, #23]

	uint8_t bitsLeftInBuffer;
	uint8_t bitsLeftInImage = 8; //first row of image is always full byte
 8009032:	2308      	movs	r3, #8
 8009034:	75bb      	strb	r3, [r7, #22]
	uint8_t bitsToWrite;

	bool writtenUpperHalf; //if false then lower half


	while(y_size)
 8009036:	e09b      	b.n	8009170 <f_lcd_DrawRaw+0x158>
	{
		bufferPage = y/8;
 8009038:	79bb      	ldrb	r3, [r7, #6]
 800903a:	08db      	lsrs	r3, r3, #3
 800903c:	743b      	strb	r3, [r7, #16]
		bitsLeftInBuffer = 8 - (y & 0x07);
 800903e:	79bb      	ldrb	r3, [r7, #6]
 8009040:	f003 0307 	and.w	r3, r3, #7
 8009044:	b2db      	uxtb	r3, r3
 8009046:	f1c3 0308 	rsb	r3, r3, #8
 800904a:	73fb      	strb	r3, [r7, #15]

		if(bitsLeftInImage > bitsLeftInBuffer) //probably you write on lower half (upper bits)
 800904c:	7dba      	ldrb	r2, [r7, #22]
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	429a      	cmp	r2, r3
 8009052:	d904      	bls.n	800905e <f_lcd_DrawRaw+0x46>
			{
				bitsToWrite = bitsLeftInBuffer;
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	757b      	strb	r3, [r7, #21]
				writtenUpperHalf = false;
 8009058:	2300      	movs	r3, #0
 800905a:	753b      	strb	r3, [r7, #20]
 800905c:	e003      	b.n	8009066 <f_lcd_DrawRaw+0x4e>
			}
		else
			{
				bitsToWrite = bitsLeftInImage;
 800905e:	7dbb      	ldrb	r3, [r7, #22]
 8009060:	757b      	strb	r3, [r7, #21]
				writtenUpperHalf = true;
 8009062:	2301      	movs	r3, #1
 8009064:	753b      	strb	r3, [r7, #20]
			}

		for(uint8_t lines = 0; lines < x_size; lines++)
 8009066:	2300      	movs	r3, #0
 8009068:	74fb      	strb	r3, [r7, #19]
 800906a:	e05a      	b.n	8009122 <f_lcd_DrawRaw+0x10a>
		{
			uint8_t dataToPreserve;
			uint8_t dataToWrite;

			if(writtenUpperHalf) //preserve MSB bits
 800906c:	7d3b      	ldrb	r3, [r7, #20]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d023      	beq.n	80090ba <f_lcd_DrawRaw+0xa2>
			{
				dataToPreserve = sh1106_FrameBuffer[bufferPage][x + lines] & (0xFF << bitsToWrite);
 8009072:	7c3a      	ldrb	r2, [r7, #16]
 8009074:	79f9      	ldrb	r1, [r7, #7]
 8009076:	7cfb      	ldrb	r3, [r7, #19]
 8009078:	440b      	add	r3, r1
 800907a:	4943      	ldr	r1, [pc, #268]	; (8009188 <f_lcd_DrawRaw+0x170>)
 800907c:	01d2      	lsls	r2, r2, #7
 800907e:	440a      	add	r2, r1
 8009080:	4413      	add	r3, r2
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	b25a      	sxtb	r2, r3
 8009086:	7d7b      	ldrb	r3, [r7, #21]
 8009088:	21ff      	movs	r1, #255	; 0xff
 800908a:	fa01 f303 	lsl.w	r3, r1, r3
 800908e:	b25b      	sxtb	r3, r3
 8009090:	4013      	ands	r3, r2
 8009092:	b25b      	sxtb	r3, r3
 8009094:	74bb      	strb	r3, [r7, #18]
				dataToWrite = image[imagePage*x_size + lines] >> (8 - bitsToWrite);
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	797a      	ldrb	r2, [r7, #5]
 800909a:	fb03 f202 	mul.w	r2, r3, r2
 800909e:	7cfb      	ldrb	r3, [r7, #19]
 80090a0:	4413      	add	r3, r2
 80090a2:	461a      	mov	r2, r3
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	4413      	add	r3, r2
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	461a      	mov	r2, r3
 80090ac:	7d7b      	ldrb	r3, [r7, #21]
 80090ae:	f1c3 0308 	rsb	r3, r3, #8
 80090b2:	fa42 f303 	asr.w	r3, r2, r3
 80090b6:	747b      	strb	r3, [r7, #17]
 80090b8:	e022      	b.n	8009100 <f_lcd_DrawRaw+0xe8>
			}
			else //preserve LSB bits
			{
				dataToPreserve = sh1106_FrameBuffer[bufferPage][x + lines] & (0xFF >> bitsToWrite);
 80090ba:	7c3a      	ldrb	r2, [r7, #16]
 80090bc:	79f9      	ldrb	r1, [r7, #7]
 80090be:	7cfb      	ldrb	r3, [r7, #19]
 80090c0:	440b      	add	r3, r1
 80090c2:	4931      	ldr	r1, [pc, #196]	; (8009188 <f_lcd_DrawRaw+0x170>)
 80090c4:	01d2      	lsls	r2, r2, #7
 80090c6:	440a      	add	r2, r1
 80090c8:	4413      	add	r3, r2
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	b25a      	sxtb	r2, r3
 80090ce:	7d7b      	ldrb	r3, [r7, #21]
 80090d0:	21ff      	movs	r1, #255	; 0xff
 80090d2:	fa41 f303 	asr.w	r3, r1, r3
 80090d6:	b25b      	sxtb	r3, r3
 80090d8:	4013      	ands	r3, r2
 80090da:	b25b      	sxtb	r3, r3
 80090dc:	74bb      	strb	r3, [r7, #18]
				dataToWrite = image[imagePage*x_size + lines] << (8 - bitsToWrite);
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	797a      	ldrb	r2, [r7, #5]
 80090e2:	fb03 f202 	mul.w	r2, r3, r2
 80090e6:	7cfb      	ldrb	r3, [r7, #19]
 80090e8:	4413      	add	r3, r2
 80090ea:	461a      	mov	r2, r3
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	4413      	add	r3, r2
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	7d7b      	ldrb	r3, [r7, #21]
 80090f6:	f1c3 0308 	rsb	r3, r3, #8
 80090fa:	fa02 f303 	lsl.w	r3, r2, r3
 80090fe:	747b      	strb	r3, [r7, #17]
			}

			sh1106_FrameBuffer[bufferPage][x + lines] = dataToPreserve | dataToWrite;//write image to page
 8009100:	7c3a      	ldrb	r2, [r7, #16]
 8009102:	79f9      	ldrb	r1, [r7, #7]
 8009104:	7cfb      	ldrb	r3, [r7, #19]
 8009106:	440b      	add	r3, r1
 8009108:	7cb8      	ldrb	r0, [r7, #18]
 800910a:	7c79      	ldrb	r1, [r7, #17]
 800910c:	4301      	orrs	r1, r0
 800910e:	b2c8      	uxtb	r0, r1
 8009110:	491d      	ldr	r1, [pc, #116]	; (8009188 <f_lcd_DrawRaw+0x170>)
 8009112:	01d2      	lsls	r2, r2, #7
 8009114:	440a      	add	r2, r1
 8009116:	4413      	add	r3, r2
 8009118:	4602      	mov	r2, r0
 800911a:	701a      	strb	r2, [r3, #0]
		for(uint8_t lines = 0; lines < x_size; lines++)
 800911c:	7cfb      	ldrb	r3, [r7, #19]
 800911e:	3301      	adds	r3, #1
 8009120:	74fb      	strb	r3, [r7, #19]
 8009122:	7cfa      	ldrb	r2, [r7, #19]
 8009124:	797b      	ldrb	r3, [r7, #5]
 8009126:	429a      	cmp	r2, r3
 8009128:	d3a0      	bcc.n	800906c <f_lcd_DrawRaw+0x54>
		}

		bitsLeftInImage -= bitsToWrite;
 800912a:	7dba      	ldrb	r2, [r7, #22]
 800912c:	7d7b      	ldrb	r3, [r7, #21]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	75bb      	strb	r3, [r7, #22]
		if(bitsLeftInImage == 0) //jump to next page from image
 8009132:	7dbb      	ldrb	r3, [r7, #22]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d104      	bne.n	8009142 <f_lcd_DrawRaw+0x12a>
		{
			imagePage++;
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	3301      	adds	r3, #1
 800913c:	75fb      	strb	r3, [r7, #23]
			bitsLeftInImage = 8;
 800913e:	2308      	movs	r3, #8
 8009140:	75bb      	strb	r3, [r7, #22]
		}

		y_size -= bitsToWrite;
 8009142:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009146:	7d7b      	ldrb	r3, [r7, #21]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	f887 3020 	strb.w	r3, [r7, #32]
		y += bitsToWrite;
 800914e:	79ba      	ldrb	r2, [r7, #6]
 8009150:	7d7b      	ldrb	r3, [r7, #21]
 8009152:	4413      	add	r3, r2
 8009154:	71bb      	strb	r3, [r7, #6]

		sh1106_pageDirtyMask |= (1 << bufferPage);
 8009156:	7c3b      	ldrb	r3, [r7, #16]
 8009158:	2201      	movs	r2, #1
 800915a:	fa02 f303 	lsl.w	r3, r2, r3
 800915e:	b25a      	sxtb	r2, r3
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <f_lcd_DrawRaw+0x174>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	b25b      	sxtb	r3, r3
 8009166:	4313      	orrs	r3, r2
 8009168:	b25b      	sxtb	r3, r3
 800916a:	b2da      	uxtb	r2, r3
 800916c:	4b07      	ldr	r3, [pc, #28]	; (800918c <f_lcd_DrawRaw+0x174>)
 800916e:	701a      	strb	r2, [r3, #0]
	while(y_size)
 8009170:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009174:	2b00      	cmp	r3, #0
 8009176:	f47f af5f 	bne.w	8009038 <f_lcd_DrawRaw+0x20>

	}

}
 800917a:	bf00      	nop
 800917c:	bf00      	nop
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	20000504 	.word	0x20000504
 800918c:	20000904 	.word	0x20000904

08009190 <f_lcd_SetPixel>:
{
	f_lcd_DrawRaw(x, y, image->data, image->width, image->height);
}

void f_lcd_SetPixel(uint8_t x, uint8_t y, bool set)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	71fb      	strb	r3, [r7, #7]
 800919a:	460b      	mov	r3, r1
 800919c:	71bb      	strb	r3, [r7, #6]
 800919e:	4613      	mov	r3, r2
 80091a0:	717b      	strb	r3, [r7, #5]
	if(set) sh1106_FrameBuffer[y/8][x] |= (1 << (y&0x07));
 80091a2:	797b      	ldrb	r3, [r7, #5]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01d      	beq.n	80091e4 <f_lcd_SetPixel+0x54>
 80091a8:	79bb      	ldrb	r3, [r7, #6]
 80091aa:	08db      	lsrs	r3, r3, #3
 80091ac:	b2d8      	uxtb	r0, r3
 80091ae:	4602      	mov	r2, r0
 80091b0:	79fb      	ldrb	r3, [r7, #7]
 80091b2:	491f      	ldr	r1, [pc, #124]	; (8009230 <f_lcd_SetPixel+0xa0>)
 80091b4:	01d2      	lsls	r2, r2, #7
 80091b6:	440a      	add	r2, r1
 80091b8:	4413      	add	r3, r2
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	b25a      	sxtb	r2, r3
 80091be:	79bb      	ldrb	r3, [r7, #6]
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	2101      	movs	r1, #1
 80091c6:	fa01 f303 	lsl.w	r3, r1, r3
 80091ca:	b25b      	sxtb	r3, r3
 80091cc:	4313      	orrs	r3, r2
 80091ce:	b259      	sxtb	r1, r3
 80091d0:	4602      	mov	r2, r0
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	b2c8      	uxtb	r0, r1
 80091d6:	4916      	ldr	r1, [pc, #88]	; (8009230 <f_lcd_SetPixel+0xa0>)
 80091d8:	01d2      	lsls	r2, r2, #7
 80091da:	440a      	add	r2, r1
 80091dc:	4413      	add	r3, r2
 80091de:	4602      	mov	r2, r0
 80091e0:	701a      	strb	r2, [r3, #0]
	else sh1106_FrameBuffer[y/8][x] &= ~(1 << (y&0x07));
}
 80091e2:	e01e      	b.n	8009222 <f_lcd_SetPixel+0x92>
	else sh1106_FrameBuffer[y/8][x] &= ~(1 << (y&0x07));
 80091e4:	79bb      	ldrb	r3, [r7, #6]
 80091e6:	08db      	lsrs	r3, r3, #3
 80091e8:	b2d8      	uxtb	r0, r3
 80091ea:	4602      	mov	r2, r0
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	4910      	ldr	r1, [pc, #64]	; (8009230 <f_lcd_SetPixel+0xa0>)
 80091f0:	01d2      	lsls	r2, r2, #7
 80091f2:	440a      	add	r2, r1
 80091f4:	4413      	add	r3, r2
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	b25a      	sxtb	r2, r3
 80091fa:	79bb      	ldrb	r3, [r7, #6]
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	2101      	movs	r1, #1
 8009202:	fa01 f303 	lsl.w	r3, r1, r3
 8009206:	b25b      	sxtb	r3, r3
 8009208:	43db      	mvns	r3, r3
 800920a:	b25b      	sxtb	r3, r3
 800920c:	4013      	ands	r3, r2
 800920e:	b259      	sxtb	r1, r3
 8009210:	4602      	mov	r2, r0
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	b2c8      	uxtb	r0, r1
 8009216:	4906      	ldr	r1, [pc, #24]	; (8009230 <f_lcd_SetPixel+0xa0>)
 8009218:	01d2      	lsls	r2, r2, #7
 800921a:	440a      	add	r2, r1
 800921c:	4413      	add	r3, r2
 800921e:	4602      	mov	r2, r0
 8009220:	701a      	strb	r2, [r3, #0]
}
 8009222:	bf00      	nop
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	20000504 	.word	0x20000504

08009234 <f_lcd_DrawLine>:

void f_lcd_DrawLine(uint8_t xStart, uint8_t yStart, uint8_t xEnd, uint8_t yEnd)
{
 8009234:	b590      	push	{r4, r7, lr}
 8009236:	b089      	sub	sp, #36	; 0x24
 8009238:	af00      	add	r7, sp, #0
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	4611      	mov	r1, r2
 8009240:	461a      	mov	r2, r3
 8009242:	4623      	mov	r3, r4
 8009244:	71fb      	strb	r3, [r7, #7]
 8009246:	4603      	mov	r3, r0
 8009248:	71bb      	strb	r3, [r7, #6]
 800924a:	460b      	mov	r3, r1
 800924c:	717b      	strb	r3, [r7, #5]
 800924e:	4613      	mov	r3, r2
 8009250:	713b      	strb	r3, [r7, #4]
	float delx, dely, length;
	float x, y;

	delx = abs(xEnd - xStart);
 8009252:	797a      	ldrb	r2, [r7, #5]
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	bfb8      	it	lt
 800925c:	425b      	neglt	r3, r3
 800925e:	ee07 3a90 	vmov	s15, r3
 8009262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009266:	edc7 7a03 	vstr	s15, [r7, #12]
	dely = abs(yEnd - yStart);
 800926a:	793a      	ldrb	r2, [r7, #4]
 800926c:	79bb      	ldrb	r3, [r7, #6]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	2b00      	cmp	r3, #0
 8009272:	bfb8      	it	lt
 8009274:	425b      	neglt	r3, r3
 8009276:	ee07 3a90 	vmov	s15, r3
 800927a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800927e:	edc7 7a02 	vstr	s15, [r7, #8]

	if(delx < dely) length = dely;
 8009282:	ed97 7a03 	vldr	s14, [r7, #12]
 8009286:	edd7 7a02 	vldr	s15, [r7, #8]
 800928a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800928e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009292:	d502      	bpl.n	800929a <f_lcd_DrawLine+0x66>
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	61fb      	str	r3, [r7, #28]
 8009298:	e001      	b.n	800929e <f_lcd_DrawLine+0x6a>
	else length = delx;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	61fb      	str	r3, [r7, #28]

	delx = (xEnd - xStart) / length;
 800929e:	797a      	ldrb	r2, [r7, #5]
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	ee07 3a90 	vmov	s15, r3
 80092a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80092ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80092b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b4:	edc7 7a03 	vstr	s15, [r7, #12]
	dely = (yEnd - yStart) / length;
 80092b8:	793a      	ldrb	r2, [r7, #4]
 80092ba:	79bb      	ldrb	r3, [r7, #6]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	ee07 3a90 	vmov	s15, r3
 80092c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80092c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80092ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092ce:	edc7 7a02 	vstr	s15, [r7, #8]

	x = xStart + 0.5;
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7f7 f925 	bl	8000524 <__aeabi_i2d>
 80092da:	f04f 0200 	mov.w	r2, #0
 80092de:	4b38      	ldr	r3, [pc, #224]	; (80093c0 <f_lcd_DrawLine+0x18c>)
 80092e0:	f7f6 ffd4 	bl	800028c <__adddf3>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4610      	mov	r0, r2
 80092ea:	4619      	mov	r1, r3
 80092ec:	f7f7 fc7c 	bl	8000be8 <__aeabi_d2f>
 80092f0:	4603      	mov	r3, r0
 80092f2:	61bb      	str	r3, [r7, #24]
	y = yStart + 0.5;
 80092f4:	79bb      	ldrb	r3, [r7, #6]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7f7 f914 	bl	8000524 <__aeabi_i2d>
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	4b2f      	ldr	r3, [pc, #188]	; (80093c0 <f_lcd_DrawLine+0x18c>)
 8009302:	f7f6 ffc3 	bl	800028c <__adddf3>
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4610      	mov	r0, r2
 800930c:	4619      	mov	r1, r3
 800930e:	f7f7 fc6b 	bl	8000be8 <__aeabi_d2f>
 8009312:	4603      	mov	r3, r0
 8009314:	617b      	str	r3, [r7, #20]

	for(uint8_t i = 0; i <= length; i ++)
 8009316:	2300      	movs	r3, #0
 8009318:	74fb      	strb	r3, [r7, #19]
 800931a:	e026      	b.n	800936a <f_lcd_DrawLine+0x136>
	{
		f_lcd_SetPixel((uint8_t)x, (uint8_t)y, 1);
 800931c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009324:	edc7 7a00 	vstr	s15, [r7]
 8009328:	783b      	ldrb	r3, [r7, #0]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009334:	edc7 7a00 	vstr	s15, [r7]
 8009338:	783a      	ldrb	r2, [r7, #0]
 800933a:	b2d1      	uxtb	r1, r2
 800933c:	2201      	movs	r2, #1
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff ff26 	bl	8009190 <f_lcd_SetPixel>

		x += delx;
 8009344:	ed97 7a06 	vldr	s14, [r7, #24]
 8009348:	edd7 7a03 	vldr	s15, [r7, #12]
 800934c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009350:	edc7 7a06 	vstr	s15, [r7, #24]
		y += dely;
 8009354:	ed97 7a05 	vldr	s14, [r7, #20]
 8009358:	edd7 7a02 	vldr	s15, [r7, #8]
 800935c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009360:	edc7 7a05 	vstr	s15, [r7, #20]
	for(uint8_t i = 0; i <= length; i ++)
 8009364:	7cfb      	ldrb	r3, [r7, #19]
 8009366:	3301      	adds	r3, #1
 8009368:	74fb      	strb	r3, [r7, #19]
 800936a:	7cfb      	ldrb	r3, [r7, #19]
 800936c:	ee07 3a90 	vmov	s15, r3
 8009370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009374:	ed97 7a07 	vldr	s14, [r7, #28]
 8009378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800937c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009380:	dacc      	bge.n	800931c <f_lcd_DrawLine+0xe8>
	}

	for(uint8_t i = yStart/8; i <= yEnd/8; i++) sh1106_pageDirtyMask |= (1 << i);
 8009382:	79bb      	ldrb	r3, [r7, #6]
 8009384:	08db      	lsrs	r3, r3, #3
 8009386:	74bb      	strb	r3, [r7, #18]
 8009388:	e00f      	b.n	80093aa <f_lcd_DrawLine+0x176>
 800938a:	7cbb      	ldrb	r3, [r7, #18]
 800938c:	2201      	movs	r2, #1
 800938e:	fa02 f303 	lsl.w	r3, r2, r3
 8009392:	b25a      	sxtb	r2, r3
 8009394:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <f_lcd_DrawLine+0x190>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	b25b      	sxtb	r3, r3
 800939a:	4313      	orrs	r3, r2
 800939c:	b25b      	sxtb	r3, r3
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <f_lcd_DrawLine+0x190>)
 80093a2:	701a      	strb	r2, [r3, #0]
 80093a4:	7cbb      	ldrb	r3, [r7, #18]
 80093a6:	3301      	adds	r3, #1
 80093a8:	74bb      	strb	r3, [r7, #18]
 80093aa:	793b      	ldrb	r3, [r7, #4]
 80093ac:	08db      	lsrs	r3, r3, #3
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	7cba      	ldrb	r2, [r7, #18]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d9e9      	bls.n	800938a <f_lcd_DrawLine+0x156>

	//check out for bresenham algorithm to optimize for bigger screens
}
 80093b6:	bf00      	nop
 80093b8:	bf00      	nop
 80093ba:	3724      	adds	r7, #36	; 0x24
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd90      	pop	{r4, r7, pc}
 80093c0:	3fe00000 	.word	0x3fe00000
 80093c4:	20000904 	.word	0x20000904

080093c8 <f_lcd_SendFrameCallback>:


void f_lcd_SendFrameCallback()
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0
	static uint8_t timer;
	static uint8_t activePage;


	if((HAL_GetTick() - timer) > 5) //software timer
 80093cc:	f7f9 f896 	bl	80024fc <HAL_GetTick>
 80093d0:	4603      	mov	r3, r0
 80093d2:	4a1d      	ldr	r2, [pc, #116]	; (8009448 <f_lcd_SendFrameCallback+0x80>)
 80093d4:	7812      	ldrb	r2, [r2, #0]
 80093d6:	1a9b      	subs	r3, r3, r2
 80093d8:	2b05      	cmp	r3, #5
 80093da:	d932      	bls.n	8009442 <f_lcd_SendFrameCallback+0x7a>
	{

		if(sh1106_pageDirtyMask & (1 << activePage))
 80093dc:	4b1b      	ldr	r3, [pc, #108]	; (800944c <f_lcd_SendFrameCallback+0x84>)
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	4b1b      	ldr	r3, [pc, #108]	; (8009450 <f_lcd_SendFrameCallback+0x88>)
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	fa42 f303 	asr.w	r3, r2, r3
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d014      	beq.n	800941c <f_lcd_SendFrameCallback+0x54>
		{
			f_SendFrameBufferPage(activePage);
 80093f2:	4b17      	ldr	r3, [pc, #92]	; (8009450 <f_lcd_SendFrameCallback+0x88>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff fd34 	bl	8008e64 <f_SendFrameBufferPage>

			sh1106_pageDirtyMask &= ~(1 << activePage);
 80093fc:	4b14      	ldr	r3, [pc, #80]	; (8009450 <f_lcd_SendFrameCallback+0x88>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	461a      	mov	r2, r3
 8009402:	2301      	movs	r3, #1
 8009404:	4093      	lsls	r3, r2
 8009406:	b25b      	sxtb	r3, r3
 8009408:	43db      	mvns	r3, r3
 800940a:	b25a      	sxtb	r2, r3
 800940c:	4b0f      	ldr	r3, [pc, #60]	; (800944c <f_lcd_SendFrameCallback+0x84>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	b25b      	sxtb	r3, r3
 8009412:	4013      	ands	r3, r2
 8009414:	b25b      	sxtb	r3, r3
 8009416:	b2da      	uxtb	r2, r3
 8009418:	4b0c      	ldr	r3, [pc, #48]	; (800944c <f_lcd_SendFrameCallback+0x84>)
 800941a:	701a      	strb	r2, [r3, #0]

		}

		activePage = (activePage + 1) % 8;
 800941c:	4b0c      	ldr	r3, [pc, #48]	; (8009450 <f_lcd_SendFrameCallback+0x88>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	3301      	adds	r3, #1
 8009422:	425a      	negs	r2, r3
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	f002 0207 	and.w	r2, r2, #7
 800942c:	bf58      	it	pl
 800942e:	4253      	negpl	r3, r2
 8009430:	b2da      	uxtb	r2, r3
 8009432:	4b07      	ldr	r3, [pc, #28]	; (8009450 <f_lcd_SendFrameCallback+0x88>)
 8009434:	701a      	strb	r2, [r3, #0]
		timer = HAL_GetTick();
 8009436:	f7f9 f861 	bl	80024fc <HAL_GetTick>
 800943a:	4603      	mov	r3, r0
 800943c:	b2da      	uxtb	r2, r3
 800943e:	4b02      	ldr	r3, [pc, #8]	; (8009448 <f_lcd_SendFrameCallback+0x80>)
 8009440:	701a      	strb	r2, [r3, #0]
	}
}
 8009442:	bf00      	nop
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20000905 	.word	0x20000905
 800944c:	20000904 	.word	0x20000904
 8009450:	20000906 	.word	0x20000906

08009454 <f_pid_calculateThrottle>:


#include "pid.h"

t_pid_Control* f_pid_calculateThrottle(float setPoint, float input, t_pid_Control* Ctrl, t_pid_Parameter* Param)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	ed87 0a03 	vstr	s0, [r7, #12]
 800945e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
	float error;

	error = setPoint - input;
 8009466:	ed97 7a03 	vldr	s14, [r7, #12]
 800946a:	edd7 7a02 	vldr	s15, [r7, #8]
 800946e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009472:	edc7 7a05 	vstr	s15, [r7, #20]

	//get p value
	Ctrl->pValue = error * Param->Kp;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	ed93 7a00 	vldr	s14, [r3]
 800947c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	edc3 7a04 	vstr	s15, [r3, #16]

	//get i value (the fancy way)
	Ctrl->integral += (error + Ctrl->lastError)/2 * Param->Ki;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	ed93 7a00 	vldr	s14, [r3]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	edd3 6a01 	vldr	s13, [r3, #4]
 8009496:	edd7 7a05 	vldr	s15, [r7, #20]
 800949a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80094a2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80094ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80094b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	edc3 7a00 	vstr	s15, [r3]

	Ctrl->iValue = Ctrl->integral;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	615a      	str	r2, [r3, #20]
	if(Ctrl->integral < Param->I_minRange) Ctrl->integral = Param->I_minRange;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	ed93 7a00 	vldr	s14, [r3]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80094ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d6:	d504      	bpl.n	80094e2 <f_pid_calculateThrottle+0x8e>
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	e00e      	b.n	8009500 <f_pid_calculateThrottle+0xac>
	else if(Ctrl->integral > Param->I_maxRange) Ctrl->integral = Param->I_maxRange;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	ed93 7a00 	vldr	s14, [r3]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80094ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f6:	dd03      	ble.n	8009500 <f_pid_calculateThrottle+0xac>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	691a      	ldr	r2, [r3, #16]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	601a      	str	r2, [r3, #0]


	//get d value but from input instead of error
	Ctrl->dValue = Param->Kd*(input - Ctrl->lastInput);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	ed93 7a02 	vldr	s14, [r3, #8]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	edd3 7a02 	vldr	s15, [r3, #8]
 800950c:	edd7 6a02 	vldr	s13, [r7, #8]
 8009510:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	edc3 7a06 	vstr	s15, [r3, #24]

	Ctrl->output = Ctrl->pValue + Ctrl->iValue + Ctrl->dValue;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	ed93 7a04 	vldr	s14, [r3, #16]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	edd3 7a05 	vldr	s15, [r3, #20]
 800952a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	edd3 7a06 	vldr	s15, [r3, #24]
 8009534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	edc3 7a03 	vstr	s15, [r3, #12]
	Ctrl->lastInput = input;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	609a      	str	r2, [r3, #8]
	Ctrl->lastError = error;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	605a      	str	r2, [r3, #4]

	if(Ctrl->output > Param->maxRange) Ctrl->output = Param->maxRange;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	ed93 7a03 	vldr	s14, [r3, #12]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	edd3 7a06 	vldr	s15, [r3, #24]
 8009556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800955a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800955e:	dd04      	ble.n	800956a <f_pid_calculateThrottle+0x116>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	699a      	ldr	r2, [r3, #24]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	60da      	str	r2, [r3, #12]
 8009568:	e00e      	b.n	8009588 <f_pid_calculateThrottle+0x134>
	else if(Ctrl->output < Param->minRange) Ctrl->output = Param->minRange;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	ed93 7a03 	vldr	s14, [r3, #12]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	edd3 7a05 	vldr	s15, [r3, #20]
 8009576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800957a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957e:	d503      	bpl.n	8009588 <f_pid_calculateThrottle+0x134>
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	695a      	ldr	r2, [r3, #20]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	60da      	str	r2, [r3, #12]

	return Ctrl;
 8009588:	687b      	ldr	r3, [r7, #4]
}
 800958a:	4618      	mov	r0, r3
 800958c:	371c      	adds	r7, #28
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
	...

08009598 <f_sh1106_HwInit>:
#define RES_LOW()		GPIO_LOW(LCD_RES_GPIO_Port, LCD_RES_Pin)

bool sh1106_TransmitBusy;

static void f_sh1106_HwInit()
{
 8009598:	b580      	push	{r7, lr}
 800959a:	af00      	add	r7, sp, #0
	hspi2.Instance = SPI2;
 800959c:	4b1d      	ldr	r3, [pc, #116]	; (8009614 <f_sh1106_HwInit+0x7c>)
 800959e:	4a1e      	ldr	r2, [pc, #120]	; (8009618 <f_sh1106_HwInit+0x80>)
 80095a0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80095a2:	4b1c      	ldr	r3, [pc, #112]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80095a8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80095aa:	4b1a      	ldr	r3, [pc, #104]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80095b0:	4b18      	ldr	r3, [pc, #96]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80095b6:	4b17      	ldr	r3, [pc, #92]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095b8:	2202      	movs	r2, #2
 80095ba:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80095bc:	4b15      	ldr	r3, [pc, #84]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095be:	2201      	movs	r2, #1
 80095c0:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80095c2:	4b14      	ldr	r3, [pc, #80]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095c8:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80095ca:	4b12      	ldr	r3, [pc, #72]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095cc:	2220      	movs	r2, #32
 80095ce:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80095d0:	4b10      	ldr	r3, [pc, #64]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80095d6:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095d8:	2200      	movs	r2, #0
 80095da:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095dc:	4b0d      	ldr	r3, [pc, #52]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095de:	2200      	movs	r2, #0
 80095e0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80095e2:	4b0c      	ldr	r3, [pc, #48]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095e4:	220a      	movs	r2, #10
 80095e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80095e8:	480a      	ldr	r0, [pc, #40]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095ea:	f7fc ff5d 	bl	80064a8 <HAL_SPI_Init>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <f_sh1106_HwInit+0x60>
	{
		Error_Handler();
 80095f4:	f7f8 fba6 	bl	8001d44 <Error_Handler>
	}

	__HAL_SPI_ENABLE(&hspi2);
 80095f8:	4b06      	ldr	r3, [pc, #24]	; (8009614 <f_sh1106_HwInit+0x7c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4b05      	ldr	r3, [pc, #20]	; (8009614 <f_sh1106_HwInit+0x7c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009606:	601a      	str	r2, [r3, #0]
	CS_HIGH();
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <f_sh1106_HwInit+0x84>)
 800960a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800960e:	619a      	str	r2, [r3, #24]
}
 8009610:	bf00      	nop
 8009612:	bd80      	pop	{r7, pc}
 8009614:	2000036c 	.word	0x2000036c
 8009618:	40003800 	.word	0x40003800
 800961c:	40020400 	.word	0x40020400

08009620 <f_sh1106_SendData>:

static bool f_sh1106_SendData(uint8_t *data, uint16_t length, bool cmd)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	807b      	strh	r3, [r7, #2]
 800962c:	4613      	mov	r3, r2
 800962e:	707b      	strb	r3, [r7, #1]
	bool isOk = false;
 8009630:	2300      	movs	r3, #0
 8009632:	73fb      	strb	r3, [r7, #15]
	uint8_t tries;

	for(tries = 0; tries < 3; tries++)
 8009634:	2300      	movs	r3, #0
 8009636:	73bb      	strb	r3, [r7, #14]
 8009638:	e032      	b.n	80096a0 <f_sh1106_SendData+0x80>
	{
		if(sh1106_TransmitBusy)
 800963a:	4b1e      	ldr	r3, [pc, #120]	; (80096b4 <f_sh1106_SendData+0x94>)
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <f_sh1106_SendData+0x2a>
		{
			HAL_Delay(10);
 8009642:	200a      	movs	r0, #10
 8009644:	f7f8 ff66 	bl	8002514 <HAL_Delay>
 8009648:	e027      	b.n	800969a <f_sh1106_SendData+0x7a>
		}
		else
		{
			if(cmd) CMD_LOW();
 800964a:	787b      	ldrb	r3, [r7, #1]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d004      	beq.n	800965a <f_sh1106_SendData+0x3a>
 8009650:	4b19      	ldr	r3, [pc, #100]	; (80096b8 <f_sh1106_SendData+0x98>)
 8009652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009656:	619a      	str	r2, [r3, #24]
 8009658:	e003      	b.n	8009662 <f_sh1106_SendData+0x42>
			else CMD_HIGH();
 800965a:	4b17      	ldr	r3, [pc, #92]	; (80096b8 <f_sh1106_SendData+0x98>)
 800965c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009660:	619a      	str	r2, [r3, #24]

			sh1106_TransmitBusy = true;
 8009662:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <f_sh1106_SendData+0x94>)
 8009664:	2201      	movs	r2, #1
 8009666:	701a      	strb	r2, [r3, #0]
			CS_LOW();
 8009668:	4b13      	ldr	r3, [pc, #76]	; (80096b8 <f_sh1106_SendData+0x98>)
 800966a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800966e:	619a      	str	r2, [r3, #24]
			HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, data, length, 10);
 8009670:	887a      	ldrh	r2, [r7, #2]
 8009672:	230a      	movs	r3, #10
 8009674:	6879      	ldr	r1, [r7, #4]
 8009676:	4811      	ldr	r0, [pc, #68]	; (80096bc <f_sh1106_SendData+0x9c>)
 8009678:	f7fc ff9f 	bl	80065ba <HAL_SPI_Transmit>
 800967c:	4603      	mov	r3, r0
 800967e:	737b      	strb	r3, [r7, #13]
			CS_HIGH();
 8009680:	4b0d      	ldr	r3, [pc, #52]	; (80096b8 <f_sh1106_SendData+0x98>)
 8009682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009686:	619a      	str	r2, [r3, #24]
			sh1106_TransmitBusy = false;
 8009688:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <f_sh1106_SendData+0x94>)
 800968a:	2200      	movs	r2, #0
 800968c:	701a      	strb	r2, [r3, #0]

			if(status == HAL_OK) isOk = true;
 800968e:	7b7b      	ldrb	r3, [r7, #13]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d109      	bne.n	80096a8 <f_sh1106_SendData+0x88>
 8009694:	2301      	movs	r3, #1
 8009696:	73fb      	strb	r3, [r7, #15]

			break;
 8009698:	e006      	b.n	80096a8 <f_sh1106_SendData+0x88>
	for(tries = 0; tries < 3; tries++)
 800969a:	7bbb      	ldrb	r3, [r7, #14]
 800969c:	3301      	adds	r3, #1
 800969e:	73bb      	strb	r3, [r7, #14]
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d9c9      	bls.n	800963a <f_sh1106_SendData+0x1a>
 80096a6:	e000      	b.n	80096aa <f_sh1106_SendData+0x8a>
			break;
 80096a8:	bf00      	nop
		}
	}

	return isOk;
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	20000907 	.word	0x20000907
 80096b8:	40020400 	.word	0x40020400
 80096bc:	2000036c 	.word	0x2000036c

080096c0 <f_sh1106_Init>:

//============ public functions ========================

void f_sh1106_Init()
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
	f_sh1106_HwInit();
 80096c4:	f7ff ff68 	bl	8009598 <f_sh1106_HwInit>

	RES_LOW();
 80096c8:	4b06      	ldr	r3, [pc, #24]	; (80096e4 <f_sh1106_Init+0x24>)
 80096ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80096ce:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80096d0:	2001      	movs	r0, #1
 80096d2:	f7f8 ff1f 	bl	8002514 <HAL_Delay>
	RES_HIGH();
 80096d6:	4b03      	ldr	r3, [pc, #12]	; (80096e4 <f_sh1106_Init+0x24>)
 80096d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096dc:	619a      	str	r2, [r3, #24]

}
 80096de:	bf00      	nop
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	40020400 	.word	0x40020400

080096e8 <f_sh1106_cmd_SetColumnAddress>:

bool f_sh1106_cmd_SetColumnAddress(uint8_t address)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	71fb      	strb	r3, [r7, #7]
	if(address >= SH1106_WIDTH) return false;
 80096f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	da01      	bge.n	80096fe <f_sh1106_cmd_SetColumnAddress+0x16>
 80096fa:	2300      	movs	r3, #0
 80096fc:	e01a      	b.n	8009734 <f_sh1106_cmd_SetColumnAddress+0x4c>

	address += 2; //2 first and last pixels are not visible
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	3302      	adds	r3, #2
 8009702:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[2];

	cmd[0] = 0x10 | ((address >> 4) & 0x0F);
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	091b      	lsrs	r3, r3, #4
 8009708:	b2db      	uxtb	r3, r3
 800970a:	b25b      	sxtb	r3, r3
 800970c:	f043 0310 	orr.w	r3, r3, #16
 8009710:	b25b      	sxtb	r3, r3
 8009712:	b2db      	uxtb	r3, r3
 8009714:	733b      	strb	r3, [r7, #12]
	cmd[1] = address & 0x0F;
 8009716:	79fb      	ldrb	r3, [r7, #7]
 8009718:	f003 030f 	and.w	r3, r3, #15
 800971c:	b2db      	uxtb	r3, r3
 800971e:	737b      	strb	r3, [r7, #13]

	bool isOk = f_sh1106_SendData((uint8_t*)&cmd, 2, true);
 8009720:	f107 030c 	add.w	r3, r7, #12
 8009724:	2201      	movs	r2, #1
 8009726:	2102      	movs	r1, #2
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff ff79 	bl	8009620 <f_sh1106_SendData>
 800972e:	4603      	mov	r3, r0
 8009730:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <f_sh1106_cmd_SetSegmentDirection>:

	return isOk;
}

bool f_sh1106_cmd_SetSegmentDirection(bool reverse)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xA0 | (reverse & 0x01);
 8009746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	b25b      	sxtb	r3, r3
 8009750:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8009754:	b25b      	sxtb	r3, r3
 8009756:	b2db      	uxtb	r3, r3
 8009758:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 800975a:	f107 030e 	add.w	r3, r7, #14
 800975e:	2201      	movs	r2, #1
 8009760:	2101      	movs	r1, #1
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff ff5c 	bl	8009620 <f_sh1106_SendData>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]

	return isOk;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <f_sh1106_cmd_TogglePower>:

	return isOk;
}

bool f_sh1106_cmd_TogglePower(bool sleep)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	4603      	mov	r3, r0
 800977e:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xAE | (sleep & 0x01);
 8009780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	b25b      	sxtb	r3, r3
 800978a:	f063 0351 	orn	r3, r3, #81	; 0x51
 800978e:	b25b      	sxtb	r3, r3
 8009790:	b2db      	uxtb	r3, r3
 8009792:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8009794:	f107 030e 	add.w	r3, r7, #14
 8009798:	2201      	movs	r2, #1
 800979a:	2101      	movs	r1, #1
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff ff3f 	bl	8009620 <f_sh1106_SendData>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73fb      	strb	r3, [r7, #15]

	return isOk;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <f_sh1106_cmd_SetPageAddress>:

bool f_sh1106_cmd_SetPageAddress(uint8_t page)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	4603      	mov	r3, r0
 80097b8:	71fb      	strb	r3, [r7, #7]
	if(page >= SH1106_HEIGHT/8) return false;
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	2b07      	cmp	r3, #7
 80097be:	d901      	bls.n	80097c4 <f_sh1106_cmd_SetPageAddress+0x14>
 80097c0:	2300      	movs	r3, #0
 80097c2:	e013      	b.n	80097ec <f_sh1106_cmd_SetPageAddress+0x3c>

	uint8_t cmd = 0xB0 | (page & 0x0F);
 80097c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097c8:	f003 030f 	and.w	r3, r3, #15
 80097cc:	b25b      	sxtb	r3, r3
 80097ce:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80097d2:	b25b      	sxtb	r3, r3
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 80097d8:	f107 030e 	add.w	r3, r7, #14
 80097dc:	2201      	movs	r2, #1
 80097de:	2101      	movs	r1, #1
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff ff1d 	bl	8009620 <f_sh1106_SendData>
 80097e6:	4603      	mov	r3, r0
 80097e8:	73fb      	strb	r3, [r7, #15]

	return isOk;
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <f_sh1106_cmd_SetScanDirection>:

bool f_sh1106_cmd_SetScanDirection(bool reverse)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0xC0 | ((reverse << 3) & 0x0F);
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	b25b      	sxtb	r3, r3
 8009804:	f003 030f 	and.w	r3, r3, #15
 8009808:	b25b      	sxtb	r3, r3
 800980a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800980e:	b25b      	sxtb	r3, r3
 8009810:	b2db      	uxtb	r3, r3
 8009812:	73bb      	strb	r3, [r7, #14]

	bool isOk = f_sh1106_SendData(&cmd, 1, true);
 8009814:	f107 030e 	add.w	r3, r7, #14
 8009818:	2201      	movs	r2, #1
 800981a:	2101      	movs	r1, #1
 800981c:	4618      	mov	r0, r3
 800981e:	f7ff feff 	bl	8009620 <f_sh1106_SendData>
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]

	return isOk;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <f_sh1106_CS_HIGH>:

	return isOk;
}

void f_sh1106_CS_HIGH()
{
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
	CS_HIGH();
 8009834:	4b04      	ldr	r3, [pc, #16]	; (8009848 <f_sh1106_CS_HIGH+0x18>)
 8009836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800983a:	619a      	str	r2, [r3, #24]
}
 800983c:	bf00      	nop
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	40020400 	.word	0x40020400

0800984c <f_sh1106_SendPageData>:

bool f_sh1106_SendPageData(uint8_t page, uint8_t *data, uint8_t length)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
 8009858:	4613      	mov	r3, r2
 800985a:	71bb      	strb	r3, [r7, #6]
	uint8_t tries = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]

	HAL_StatusTypeDef status;
	do
	{
		CS_LOW();
 8009860:	4b15      	ldr	r3, [pc, #84]	; (80098b8 <f_sh1106_SendPageData+0x6c>)
 8009862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009866:	619a      	str	r2, [r3, #24]
		CMD_HIGH(); //only data is send;
 8009868:	4b13      	ldr	r3, [pc, #76]	; (80098b8 <f_sh1106_SendPageData+0x6c>)
 800986a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800986e:	619a      	str	r2, [r3, #24]
		status = HAL_SPI_Transmit_DMA(&hspi2, data, length);
 8009870:	79bb      	ldrb	r3, [r7, #6]
 8009872:	b29b      	uxth	r3, r3
 8009874:	461a      	mov	r2, r3
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	4810      	ldr	r0, [pc, #64]	; (80098bc <f_sh1106_SendPageData+0x70>)
 800987a:	f7fc ffdb 	bl	8006834 <HAL_SPI_Transmit_DMA>
 800987e:	4603      	mov	r3, r0
 8009880:	73bb      	strb	r3, [r7, #14]
		tries ++;
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	3301      	adds	r3, #1
 8009886:	73fb      	strb	r3, [r7, #15]

	}while((status != HAL_OK) && tries < 5);
 8009888:	7bbb      	ldrb	r3, [r7, #14]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d002      	beq.n	8009894 <f_sh1106_SendPageData+0x48>
 800988e:	7bfb      	ldrb	r3, [r7, #15]
 8009890:	2b04      	cmp	r3, #4
 8009892:	d9e5      	bls.n	8009860 <f_sh1106_SendPageData+0x14>

	if(tries == 5)
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	2b05      	cmp	r3, #5
 8009898:	d105      	bne.n	80098a6 <f_sh1106_SendPageData+0x5a>
		{
			CS_HIGH();
 800989a:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <f_sh1106_SendPageData+0x6c>)
 800989c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80098a0:	619a      	str	r2, [r3, #24]
			return false;
 80098a2:	2300      	movs	r3, #0
 80098a4:	e003      	b.n	80098ae <f_sh1106_SendPageData+0x62>
		}

	sh1106_TransmitBusy = true;
 80098a6:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <f_sh1106_SendPageData+0x74>)
 80098a8:	2201      	movs	r2, #1
 80098aa:	701a      	strb	r2, [r3, #0]
	return true;
 80098ac:	2301      	movs	r3, #1
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	40020400 	.word	0x40020400
 80098bc:	2000036c 	.word	0x2000036c
 80098c0:	20000907 	.word	0x20000907

080098c4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
	f_sh1106_CS_HIGH();
 80098cc:	f7ff ffb0 	bl	8009830 <f_sh1106_CS_HIGH>
	sh1106_TransmitBusy = false;
 80098d0:	4b03      	ldr	r3, [pc, #12]	; (80098e0 <HAL_SPI_TxCpltCallback+0x1c>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20000907 	.word	0x20000907

080098e4 <f_work_MotorInitTimer>:
enum {SENSOR_OFF, SENSOR_TRIGGER, SENSOR_MEASURE, SENSOR_READ} sensorStatus;

// ====================== motor section ====================

void f_work_MotorInitTimer()
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 80098ea:	1d3b      	adds	r3, r7, #4
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	605a      	str	r2, [r3, #4]
 80098f2:	609a      	str	r2, [r3, #8]
 80098f4:	60da      	str	r2, [r3, #12]
 80098f6:	611a      	str	r2, [r3, #16]
 80098f8:	615a      	str	r2, [r3, #20]
 80098fa:	619a      	str	r2, [r3, #24]

	htim9.Instance = TIM9;
 80098fc:	4b1a      	ldr	r3, [pc, #104]	; (8009968 <f_work_MotorInitTimer+0x84>)
 80098fe:	4a1b      	ldr	r2, [pc, #108]	; (800996c <f_work_MotorInitTimer+0x88>)
 8009900:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 4;
 8009902:	4b19      	ldr	r3, [pc, #100]	; (8009968 <f_work_MotorInitTimer+0x84>)
 8009904:	2204      	movs	r2, #4
 8009906:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009908:	4b17      	ldr	r3, [pc, #92]	; (8009968 <f_work_MotorInitTimer+0x84>)
 800990a:	2200      	movs	r2, #0
 800990c:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = MAX_MOTOR_PWM;
 800990e:	4b16      	ldr	r3, [pc, #88]	; (8009968 <f_work_MotorInitTimer+0x84>)
 8009910:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009914:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009916:	4b14      	ldr	r3, [pc, #80]	; (8009968 <f_work_MotorInitTimer+0x84>)
 8009918:	2200      	movs	r2, #0
 800991a:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800991c:	4b12      	ldr	r3, [pc, #72]	; (8009968 <f_work_MotorInitTimer+0x84>)
 800991e:	2200      	movs	r2, #0
 8009920:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8009922:	4811      	ldr	r0, [pc, #68]	; (8009968 <f_work_MotorInitTimer+0x84>)
 8009924:	f7fd fbb8 	bl	8007098 <HAL_TIM_PWM_Init>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <f_work_MotorInitTimer+0x4e>
	{
		Error_Handler();
 800992e:	f7f8 fa09 	bl	8001d44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009932:	2360      	movs	r3, #96	; 0x60
 8009934:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800993a:	2300      	movs	r3, #0
 800993c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009942:	1d3b      	adds	r3, r7, #4
 8009944:	2200      	movs	r2, #0
 8009946:	4619      	mov	r1, r3
 8009948:	4807      	ldr	r0, [pc, #28]	; (8009968 <f_work_MotorInitTimer+0x84>)
 800994a:	f7fe fb3d 	bl	8007fc8 <HAL_TIM_PWM_ConfigChannel>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <f_work_MotorInitTimer+0x74>
	{
		Error_Handler();
 8009954:	f7f8 f9f6 	bl	8001d44 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim9);
 8009958:	4803      	ldr	r0, [pc, #12]	; (8009968 <f_work_MotorInitTimer+0x84>)
 800995a:	f7f8 fd05 	bl	8002368 <HAL_TIM_MspPostInit>


}
 800995e:	bf00      	nop
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000470 	.word	0x20000470
 800996c:	40014000 	.word	0x40014000

08009970 <f_work_MotorSet>:

void f_work_MotorSet(bool onOff)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	71fb      	strb	r3, [r7, #7]
	if(onOff) HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <f_work_MotorSet+0x1a>
 8009980:	2100      	movs	r1, #0
 8009982:	4806      	ldr	r0, [pc, #24]	; (800999c <f_work_MotorSet+0x2c>)
 8009984:	f7fd fbd8 	bl	8007138 <HAL_TIM_PWM_Start>
	else HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);
}
 8009988:	e003      	b.n	8009992 <f_work_MotorSet+0x22>
	else HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);
 800998a:	2100      	movs	r1, #0
 800998c:	4803      	ldr	r0, [pc, #12]	; (800999c <f_work_MotorSet+0x2c>)
 800998e:	f7fd fc9b 	bl	80072c8 <HAL_TIM_PWM_Stop>
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20000470 	.word	0x20000470

080099a0 <f_work_MotorSetVelocity>:

void f_work_MotorSetVelocity(uint16_t velocity)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	80fb      	strh	r3, [r7, #6]
	if(velocity >= MAX_MOTOR_PWM) velocity = MAX_MOTOR_PWM;
 80099aa:	88fb      	ldrh	r3, [r7, #6]
 80099ac:	f640 72fe 	movw	r2, #4094	; 0xffe
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d902      	bls.n	80099ba <f_work_MotorSetVelocity+0x1a>
 80099b4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80099b8:	80fb      	strh	r3, [r7, #6]
	motorVelocityOCR = velocity;
 80099ba:	4a06      	ldr	r2, [pc, #24]	; (80099d4 <f_work_MotorSetVelocity+0x34>)
 80099bc:	88fb      	ldrh	r3, [r7, #6]
 80099be:	8013      	strh	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, velocity);
 80099c0:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <f_work_MotorSetVelocity+0x38>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	88fa      	ldrh	r2, [r7, #6]
 80099c6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	2000090a 	.word	0x2000090a
 80099d8:	20000470 	.word	0x20000470
 80099dc:	00000000 	.word	0x00000000

080099e0 <f_work_MotorTest>:

bool f_work_MotorTest(bool workingMotor)
{
 80099e0:	b5b0      	push	{r4, r5, r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	71fb      	strb	r3, [r7, #7]
	bool isBusOk = false;
 80099ea:	2300      	movs	r3, #0
 80099ec:	77fb      	strb	r3, [r7, #31]
	bool isPowerOk = false;
 80099ee:	2300      	movs	r3, #0
 80099f0:	77bb      	strb	r3, [r7, #30]

	uint16_t busVoltageLow = 1000*(MOTOR_BUS_VOLTAGE - MOTOR_BUS_VOLTAGE_DEV);
 80099f2:	f243 23c8 	movw	r3, #13000	; 0x32c8
 80099f6:	833b      	strh	r3, [r7, #24]
	uint16_t busVoltageHigh = 1000*(MOTOR_BUS_VOLTAGE + MOTOR_BUS_VOLTAGE_DEV);
 80099f8:	f244 2368 	movw	r3, #17000	; 0x4268
 80099fc:	82fb      	strh	r3, [r7, #22]
	uint16_t busVoltage = f_ina219_GetBusVoltageInMilis();
 80099fe:	f7ff fa1b 	bl	8008e38 <f_ina219_GetBusVoltageInMilis>
 8009a02:	4603      	mov	r3, r0
 8009a04:	82bb      	strh	r3, [r7, #20]

	// is there bus voltage?
	if((busVoltage >= busVoltageLow) && (busVoltage <= busVoltageHigh)) isBusOk = true;
 8009a06:	8aba      	ldrh	r2, [r7, #20]
 8009a08:	8b3b      	ldrh	r3, [r7, #24]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d305      	bcc.n	8009a1a <f_work_MotorTest+0x3a>
 8009a0e:	8aba      	ldrh	r2, [r7, #20]
 8009a10:	8afb      	ldrh	r3, [r7, #22]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d801      	bhi.n	8009a1a <f_work_MotorTest+0x3a>
 8009a16:	2301      	movs	r3, #1
 8009a18:	77fb      	strb	r3, [r7, #31]

	// power draw is within the limit? Units: miliWatts
	int16_t powerUpperLimit;
	int16_t powerLowerLimit;

	if(workingMotor)
 8009a1a:	79fb      	ldrb	r3, [r7, #7]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d047      	beq.n	8009ab0 <f_work_MotorTest+0xd0>
	{
		uint32_t motorVoltage = busVoltage * motorVelocityOCR / MAX_MOTOR_PWM;
 8009a20:	8abb      	ldrh	r3, [r7, #20]
 8009a22:	4a39      	ldr	r2, [pc, #228]	; (8009b08 <f_work_MotorTest+0x128>)
 8009a24:	8812      	ldrh	r2, [r2, #0]
 8009a26:	fb02 f303 	mul.w	r3, r2, r3
 8009a2a:	4a38      	ldr	r2, [pc, #224]	; (8009b0c <f_work_MotorTest+0x12c>)
 8009a2c:	fb82 1203 	smull	r1, r2, r2, r3
 8009a30:	441a      	add	r2, r3
 8009a32:	12d2      	asrs	r2, r2, #11
 8009a34:	17db      	asrs	r3, r3, #31
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	613b      	str	r3, [r7, #16]
		uint32_t expectedPower = MOTOR_EXP_POWER_K * motorVoltage * motorVoltage / 1000;
 8009a3a:	6938      	ldr	r0, [r7, #16]
 8009a3c:	f7f6 fd62 	bl	8000504 <__aeabi_ui2d>
 8009a40:	a32f      	add	r3, pc, #188	; (adr r3, 8009b00 <f_work_MotorTest+0x120>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fdd7 	bl	80005f8 <__aeabi_dmul>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4614      	mov	r4, r2
 8009a50:	461d      	mov	r5, r3
 8009a52:	6938      	ldr	r0, [r7, #16]
 8009a54:	f7f6 fd56 	bl	8000504 <__aeabi_ui2d>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fdca 	bl	80005f8 <__aeabi_dmul>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	f04f 0200 	mov.w	r2, #0
 8009a70:	4b27      	ldr	r3, [pc, #156]	; (8009b10 <f_work_MotorTest+0x130>)
 8009a72:	f7f6 feeb 	bl	800084c <__aeabi_ddiv>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	f7f7 f893 	bl	8000ba8 <__aeabi_d2uiz>
 8009a82:	4603      	mov	r3, r0
 8009a84:	60fb      	str	r3, [r7, #12]
		powerUpperLimit = expectedPower + 1000 * MOTOR_POWER_DEV - motorIdlePower;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	4b22      	ldr	r3, [pc, #136]	; (8009b14 <f_work_MotorTest+0x134>)
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	83bb      	strh	r3, [r7, #28]
		powerLowerLimit = expectedPower - 1000 * MOTOR_POWER_DEV - motorIdlePower;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	4b1d      	ldr	r3, [pc, #116]	; (8009b14 <f_work_MotorTest+0x134>)
 8009aa0:	881b      	ldrh	r3, [r3, #0]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	837b      	strh	r3, [r7, #26]
 8009aae:	e005      	b.n	8009abc <f_work_MotorTest+0xdc>
	}
	else
	{
		powerUpperLimit = MOTOR_MAX_IDLE_POWER * 1000;
 8009ab0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009ab4:	83bb      	strh	r3, [r7, #28]
		powerLowerLimit = -MOTOR_MAX_IDLE_POWER * 1000;
 8009ab6:	f24f 4348 	movw	r3, #62536	; 0xf448
 8009aba:	837b      	strh	r3, [r7, #26]
	}


	uint16_t power = f_ina219_GetPowerInMilis();
 8009abc:	f7ff f994 	bl	8008de8 <f_ina219_GetPowerInMilis>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	817b      	strh	r3, [r7, #10]
	if((power >= powerLowerLimit) && (power <= powerUpperLimit)) isPowerOk = true;
 8009ac4:	897a      	ldrh	r2, [r7, #10]
 8009ac6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	db06      	blt.n	8009adc <f_work_MotorTest+0xfc>
 8009ace:	897a      	ldrh	r2, [r7, #10]
 8009ad0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	dc01      	bgt.n	8009adc <f_work_MotorTest+0xfc>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	77bb      	strb	r3, [r7, #30]


	return isBusOk && isPowerOk;
 8009adc:	7ffb      	ldrb	r3, [r7, #31]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d004      	beq.n	8009aec <f_work_MotorTest+0x10c>
 8009ae2:	7fbb      	ldrb	r3, [r7, #30]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <f_work_MotorTest+0x10c>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e000      	b.n	8009aee <f_work_MotorTest+0x10e>
 8009aec:	2300      	movs	r3, #0
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	b2db      	uxtb	r3, r3
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3720      	adds	r7, #32
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bdb0      	pop	{r4, r5, r7, pc}
 8009afc:	f3af 8000 	nop.w
 8009b00:	70a3d70a 	.word	0x70a3d70a
 8009b04:	3fb70a3d 	.word	0x3fb70a3d
 8009b08:	2000090a 	.word	0x2000090a
 8009b0c:	80080081 	.word	0x80080081
 8009b10:	408f4000 	.word	0x408f4000
 8009b14:	20000908 	.word	0x20000908

08009b18 <f_work_sensorTimerModeIC>:
 * change TIM10 to IC mode
 * after t_period interrupt with containing time
 */

static void f_work_sensorTimerModeIC()
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
	TIM_IC_InitTypeDef sConfigIC = {0};
 8009b1e:	463b      	mov	r3, r7
 8009b20:	2200      	movs	r2, #0
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	605a      	str	r2, [r3, #4]
 8009b26:	609a      	str	r2, [r3, #8]
 8009b28:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_DeInit(&htim10);
 8009b2a:	4813      	ldr	r0, [pc, #76]	; (8009b78 <f_work_sensorTimerModeIC+0x60>)
 8009b2c:	f7fd f936 	bl	8006d9c <HAL_TIM_OC_DeInit>

	if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8009b30:	4811      	ldr	r0, [pc, #68]	; (8009b78 <f_work_sensorTimerModeIC+0x60>)
 8009b32:	f7fd fc39 	bl	80073a8 <HAL_TIM_IC_Init>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <f_work_sensorTimerModeIC+0x28>
	{
		Error_Handler();
 8009b3c:	f7f8 f902 	bl	8001d44 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8009b40:	230a      	movs	r3, #10
 8009b42:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009b44:	2301      	movs	r3, #1
 8009b46:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8009b50:	463b      	mov	r3, r7
 8009b52:	2200      	movs	r2, #0
 8009b54:	4619      	mov	r1, r3
 8009b56:	4808      	ldr	r0, [pc, #32]	; (8009b78 <f_work_sensorTimerModeIC+0x60>)
 8009b58:	f7fe f99a 	bl	8007e90 <HAL_TIM_IC_ConfigChannel>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <f_work_sensorTimerModeIC+0x4e>
	{
		Error_Handler();
 8009b62:	f7f8 f8ef 	bl	8001d44 <Error_Handler>
	}
	__HAL_TIM_CLEAR_IT(&htim10, TIM_IT_UPDATE);
 8009b66:	4b04      	ldr	r3, [pc, #16]	; (8009b78 <f_work_sensorTimerModeIC+0x60>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f06f 0201 	mvn.w	r2, #1
 8009b6e:	611a      	str	r2, [r3, #16]
}
 8009b70:	bf00      	nop
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	200004b8 	.word	0x200004b8

08009b7c <f_work_sensorTimerModeOC>:

static void f_work_sensorTimerModeOC()
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC = {0};
 8009b82:	1d3b      	adds	r3, r7, #4
 8009b84:	2200      	movs	r2, #0
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	605a      	str	r2, [r3, #4]
 8009b8a:	609a      	str	r2, [r3, #8]
 8009b8c:	60da      	str	r2, [r3, #12]
 8009b8e:	611a      	str	r2, [r3, #16]
 8009b90:	615a      	str	r2, [r3, #20]
 8009b92:	619a      	str	r2, [r3, #24]
	HAL_TIM_IC_DeInit(&htim10);
 8009b94:	4813      	ldr	r0, [pc, #76]	; (8009be4 <f_work_sensorTimerModeOC+0x68>)
 8009b96:	f7fd fc56 	bl	8007446 <HAL_TIM_IC_DeInit>

	if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8009b9a:	4812      	ldr	r0, [pc, #72]	; (8009be4 <f_work_sensorTimerModeOC+0x68>)
 8009b9c:	f7fd f8af 	bl	8006cfe <HAL_TIM_OC_Init>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <f_work_sensorTimerModeOC+0x2e>
	{
		Error_Handler();
 8009ba6:	f7f8 f8cd 	bl	8001d44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8009baa:	2300      	movs	r3, #0
 8009bac:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 10;
 8009bae:	230a      	movs	r3, #10
 8009bb0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009bba:	1d3b      	adds	r3, r7, #4
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4808      	ldr	r0, [pc, #32]	; (8009be4 <f_work_sensorTimerModeOC+0x68>)
 8009bc2:	f7fe f909 	bl	8007dd8 <HAL_TIM_OC_ConfigChannel>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <f_work_sensorTimerModeOC+0x54>
	{
		Error_Handler();
 8009bcc:	f7f8 f8ba 	bl	8001d44 <Error_Handler>
	}
	__HAL_TIM_CLEAR_IT(&htim10, TIM_IT_UPDATE);
 8009bd0:	4b04      	ldr	r3, [pc, #16]	; (8009be4 <f_work_sensorTimerModeOC+0x68>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f06f 0201 	mvn.w	r2, #1
 8009bd8:	611a      	str	r2, [r3, #16]
}
 8009bda:	bf00      	nop
 8009bdc:	3720      	adds	r7, #32
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	200004b8 	.word	0x200004b8

08009be8 <f_work_SensorInitTimer>:

void f_work_SensorInitTimer()
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0

	htim10.Instance = TIM10;
 8009bec:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <f_work_SensorInitTimer+0x50>)
 8009bee:	4a13      	ldr	r2, [pc, #76]	; (8009c3c <f_work_SensorInitTimer+0x54>)
 8009bf0:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 167;
 8009bf2:	4b11      	ldr	r3, [pc, #68]	; (8009c38 <f_work_SensorInitTimer+0x50>)
 8009bf4:	22a7      	movs	r2, #167	; 0xa7
 8009bf6:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bf8:	4b0f      	ldr	r3, [pc, #60]	; (8009c38 <f_work_SensorInitTimer+0x50>)
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 30000;
 8009bfe:	4b0e      	ldr	r3, [pc, #56]	; (8009c38 <f_work_SensorInitTimer+0x50>)
 8009c00:	f247 5230 	movw	r2, #30000	; 0x7530
 8009c04:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <f_work_SensorInitTimer+0x50>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c0c:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <f_work_SensorInitTimer+0x50>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009c12:	4809      	ldr	r0, [pc, #36]	; (8009c38 <f_work_SensorInitTimer+0x50>)
 8009c14:	f7fd f824 	bl	8006c60 <HAL_TIM_Base_Init>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <f_work_SensorInitTimer+0x3a>
	{
		Error_Handler();
 8009c1e:	f7f8 f891 	bl	8001d44 <Error_Handler>
	}
	__HAL_TIM_URS_ENABLE(&htim10);
 8009c22:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <f_work_SensorInitTimer+0x50>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	4b03      	ldr	r3, [pc, #12]	; (8009c38 <f_work_SensorInitTimer+0x50>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f042 0204 	orr.w	r2, r2, #4
 8009c30:	601a      	str	r2, [r3, #0]
}
 8009c32:	bf00      	nop
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	200004b8 	.word	0x200004b8
 8009c3c:	40014400 	.word	0x40014400

08009c40 <f_work_sensorTriggerMeasure>:

void f_work_sensorTriggerMeasure()
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
	if(sensorStatus == SENSOR_OFF)
 8009c44:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <f_work_sensorTriggerMeasure+0x44>)
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d119      	bne.n	8009c80 <f_work_sensorTriggerMeasure+0x40>
	{
		f_work_sensorTimerModeOC();
 8009c4c:	f7ff ff96 	bl	8009b7c <f_work_sensorTimerModeOC>

		HAL_GPIO_WritePin(SENSOR_TRIG_GPIO_Port, SENSOR_TRIG_Pin, GPIO_PIN_SET);
 8009c50:	2201      	movs	r2, #1
 8009c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c56:	480c      	ldr	r0, [pc, #48]	; (8009c88 <f_work_sensorTriggerMeasure+0x48>)
 8009c58:	f7f9 fae6 	bl	8003228 <HAL_GPIO_WritePin>
		HAL_TIM_OC_Start_IT(&htim10, TIM_CHANNEL_1);
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	480b      	ldr	r0, [pc, #44]	; (8009c8c <f_work_sensorTriggerMeasure+0x4c>)
 8009c60:	f7fd f904 	bl	8006e6c <HAL_TIM_OC_Start_IT>

		__HAL_TIM_ENABLE_IT(&htim10, TIM_IT_UPDATE);
 8009c64:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <f_work_sensorTriggerMeasure+0x4c>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	4b08      	ldr	r3, [pc, #32]	; (8009c8c <f_work_sensorTriggerMeasure+0x4c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0201 	orr.w	r2, r2, #1
 8009c72:	60da      	str	r2, [r3, #12]

		sensorStatus = SENSOR_TRIGGER;
 8009c74:	4b03      	ldr	r3, [pc, #12]	; (8009c84 <f_work_sensorTriggerMeasure+0x44>)
 8009c76:	2201      	movs	r2, #1
 8009c78:	701a      	strb	r2, [r3, #0]
		sensorMeasureDone = false;
 8009c7a:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <f_work_sensorTriggerMeasure+0x50>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	701a      	strb	r2, [r3, #0]
	}
}
 8009c80:	bf00      	nop
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	2000090f 	.word	0x2000090f
 8009c88:	40020400 	.word	0x40020400
 8009c8c:	200004b8 	.word	0x200004b8
 8009c90:	2000090e 	.word	0x2000090e

08009c94 <f_work_sensorGetLastMeasure>:

uint16_t f_work_sensorGetLastMeasure() //return value in mm
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
	bool isMeasureOk = false;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	71fb      	strb	r3, [r7, #7]
	uint16_t distance;

	if(sensorMeasureDone)
 8009c9e:	4b12      	ldr	r3, [pc, #72]	; (8009ce8 <f_work_sensorGetLastMeasure+0x54>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d013      	beq.n	8009cce <f_work_sensorGetLastMeasure+0x3a>
	{
		distance = (uint32_t)((sensorTimeElapsed + SENSOR_CORRECTION) * SOUND_VELOCITY)/2000;
 8009ca6:	4b11      	ldr	r3, [pc, #68]	; (8009cec <f_work_sensorGetLastMeasure+0x58>)
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	3305      	adds	r3, #5
 8009cac:	f240 1257 	movw	r2, #343	; 0x157
 8009cb0:	fb02 f303 	mul.w	r3, r2, r3
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4b0e      	ldr	r3, [pc, #56]	; (8009cf0 <f_work_sensorGetLastMeasure+0x5c>)
 8009cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8009cbc:	09db      	lsrs	r3, r3, #7
 8009cbe:	80bb      	strh	r3, [r7, #4]
		if(distance <= SENSOR_MAX_DISTANCE) isMeasureOk = true;
 8009cc0:	88bb      	ldrh	r3, [r7, #4]
 8009cc2:	f640 0298 	movw	r2, #2200	; 0x898
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d801      	bhi.n	8009cce <f_work_sensorGetLastMeasure+0x3a>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	71fb      	strb	r3, [r7, #7]
	}

	return isMeasureOk ? distance : 0;
 8009cce:	79fb      	ldrb	r3, [r7, #7]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <f_work_sensorGetLastMeasure+0x44>
 8009cd4:	88bb      	ldrh	r3, [r7, #4]
 8009cd6:	e000      	b.n	8009cda <f_work_sensorGetLastMeasure+0x46>
 8009cd8:	2300      	movs	r3, #0

}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	2000090e 	.word	0x2000090e
 8009cec:	2000090c 	.word	0x2000090c
 8009cf0:	10624dd3 	.word	0x10624dd3

08009cf4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a0c      	ldr	r2, [pc, #48]	; (8009d34 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d112      	bne.n	8009d2c <HAL_TIM_OC_DelayElapsedCallback+0x38>
	{
		if(sensorStatus == SENSOR_TRIGGER)
 8009d06:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d10e      	bne.n	8009d2c <HAL_TIM_OC_DelayElapsedCallback+0x38>
		{
			f_work_sensorTimerModeIC();
 8009d0e:	f7ff ff03 	bl	8009b18 <f_work_sensorTimerModeIC>

			HAL_GPIO_WritePin(SENSOR_TRIG_GPIO_Port, SENSOR_TRIG_Pin, GPIO_PIN_RESET);
 8009d12:	2200      	movs	r2, #0
 8009d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d18:	4808      	ldr	r0, [pc, #32]	; (8009d3c <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 8009d1a:	f7f9 fa85 	bl	8003228 <HAL_GPIO_WritePin>
			HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 8009d1e:	2100      	movs	r1, #0
 8009d20:	4807      	ldr	r0, [pc, #28]	; (8009d40 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8009d22:	f7fd fcd5 	bl	80076d0 <HAL_TIM_IC_Start_IT>

			sensorStatus = SENSOR_MEASURE;
 8009d26:	4b04      	ldr	r3, [pc, #16]	; (8009d38 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8009d28:	2202      	movs	r2, #2
 8009d2a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	40014400 	.word	0x40014400
 8009d38:	2000090f 	.word	0x2000090f
 8009d3c:	40020400 	.word	0x40020400
 8009d40:	200004b8 	.word	0x200004b8

08009d44 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a13      	ldr	r2, [pc, #76]	; (8009da0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d11f      	bne.n	8009d96 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if(sensorStatus == SENSOR_MEASURE) //rising edge
 8009d56:	4b13      	ldr	r3, [pc, #76]	; (8009da4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d107      	bne.n	8009d6e <HAL_TIM_IC_CaptureCallback+0x2a>
		{
			__HAL_TIM_SET_COUNTER(&htim10, 0);
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	625a      	str	r2, [r3, #36]	; 0x24

			sensorStatus = SENSOR_READ;
 8009d66:	4b0f      	ldr	r3, [pc, #60]	; (8009da4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8009d68:	2203      	movs	r2, #3
 8009d6a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim10, TIM_CHANNEL_1);
			sensorStatus = SENSOR_OFF;
		}

	}
}
 8009d6c:	e013      	b.n	8009d96 <HAL_TIM_IC_CaptureCallback+0x52>
		else if(sensorStatus == SENSOR_READ) //falling edge
 8009d6e:	4b0d      	ldr	r3, [pc, #52]	; (8009da4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d10f      	bne.n	8009d96 <HAL_TIM_IC_CaptureCallback+0x52>
			sensorTimeElapsed = __HAL_TIM_GET_COMPARE(&htim10, TIM_CHANNEL_1);
 8009d76:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	4b0b      	ldr	r3, [pc, #44]	; (8009dac <HAL_TIM_IC_CaptureCallback+0x68>)
 8009d80:	801a      	strh	r2, [r3, #0]
			sensorMeasureDone = true;
 8009d82:	4b0b      	ldr	r3, [pc, #44]	; (8009db0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8009d84:	2201      	movs	r2, #1
 8009d86:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim10, TIM_CHANNEL_1);
 8009d88:	2100      	movs	r1, #0
 8009d8a:	4807      	ldr	r0, [pc, #28]	; (8009da8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8009d8c:	f7fd fdc8 	bl	8007920 <HAL_TIM_IC_Stop_IT>
			sensorStatus = SENSOR_OFF;
 8009d90:	4b04      	ldr	r3, [pc, #16]	; (8009da4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	701a      	strb	r2, [r3, #0]
}
 8009d96:	bf00      	nop
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	40014400 	.word	0x40014400
 8009da4:	2000090f 	.word	0x2000090f
 8009da8:	200004b8 	.word	0x200004b8
 8009dac:	2000090c 	.word	0x2000090c
 8009db0:	2000090e 	.word	0x2000090e

08009db4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //timeout for distance sensor
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a08      	ldr	r2, [pc, #32]	; (8009de4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d109      	bne.n	8009dda <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		HAL_TIM_IC_Stop_IT(&htim10, TIM_CHANNEL_1);
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4807      	ldr	r0, [pc, #28]	; (8009de8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8009dca:	f7fd fda9 	bl	8007920 <HAL_TIM_IC_Stop_IT>
		sensorStatus = SENSOR_OFF;
 8009dce:	4b07      	ldr	r3, [pc, #28]	; (8009dec <HAL_TIM_PeriodElapsedCallback+0x38>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	701a      	strb	r2, [r3, #0]
		sensorMeasureDone = false;
 8009dd4:	4b06      	ldr	r3, [pc, #24]	; (8009df0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	701a      	strb	r2, [r3, #0]
	}
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	40014400 	.word	0x40014400
 8009de8:	200004b8 	.word	0x200004b8
 8009dec:	2000090f 	.word	0x2000090f
 8009df0:	2000090e 	.word	0x2000090e

08009df4 <__errno>:
 8009df4:	4b01      	ldr	r3, [pc, #4]	; (8009dfc <__errno+0x8>)
 8009df6:	6818      	ldr	r0, [r3, #0]
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	20000060 	.word	0x20000060

08009e00 <__libc_init_array>:
 8009e00:	b570      	push	{r4, r5, r6, lr}
 8009e02:	4d0d      	ldr	r5, [pc, #52]	; (8009e38 <__libc_init_array+0x38>)
 8009e04:	4c0d      	ldr	r4, [pc, #52]	; (8009e3c <__libc_init_array+0x3c>)
 8009e06:	1b64      	subs	r4, r4, r5
 8009e08:	10a4      	asrs	r4, r4, #2
 8009e0a:	2600      	movs	r6, #0
 8009e0c:	42a6      	cmp	r6, r4
 8009e0e:	d109      	bne.n	8009e24 <__libc_init_array+0x24>
 8009e10:	4d0b      	ldr	r5, [pc, #44]	; (8009e40 <__libc_init_array+0x40>)
 8009e12:	4c0c      	ldr	r4, [pc, #48]	; (8009e44 <__libc_init_array+0x44>)
 8009e14:	f002 ff02 	bl	800cc1c <_init>
 8009e18:	1b64      	subs	r4, r4, r5
 8009e1a:	10a4      	asrs	r4, r4, #2
 8009e1c:	2600      	movs	r6, #0
 8009e1e:	42a6      	cmp	r6, r4
 8009e20:	d105      	bne.n	8009e2e <__libc_init_array+0x2e>
 8009e22:	bd70      	pop	{r4, r5, r6, pc}
 8009e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e28:	4798      	blx	r3
 8009e2a:	3601      	adds	r6, #1
 8009e2c:	e7ee      	b.n	8009e0c <__libc_init_array+0xc>
 8009e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e32:	4798      	blx	r3
 8009e34:	3601      	adds	r6, #1
 8009e36:	e7f2      	b.n	8009e1e <__libc_init_array+0x1e>
 8009e38:	0800decc 	.word	0x0800decc
 8009e3c:	0800decc 	.word	0x0800decc
 8009e40:	0800decc 	.word	0x0800decc
 8009e44:	0800ded0 	.word	0x0800ded0

08009e48 <memcpy>:
 8009e48:	440a      	add	r2, r1
 8009e4a:	4291      	cmp	r1, r2
 8009e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e50:	d100      	bne.n	8009e54 <memcpy+0xc>
 8009e52:	4770      	bx	lr
 8009e54:	b510      	push	{r4, lr}
 8009e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e5e:	4291      	cmp	r1, r2
 8009e60:	d1f9      	bne.n	8009e56 <memcpy+0xe>
 8009e62:	bd10      	pop	{r4, pc}

08009e64 <memset>:
 8009e64:	4402      	add	r2, r0
 8009e66:	4603      	mov	r3, r0
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d100      	bne.n	8009e6e <memset+0xa>
 8009e6c:	4770      	bx	lr
 8009e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e72:	e7f9      	b.n	8009e68 <memset+0x4>

08009e74 <__cvt>:
 8009e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e78:	ec55 4b10 	vmov	r4, r5, d0
 8009e7c:	2d00      	cmp	r5, #0
 8009e7e:	460e      	mov	r6, r1
 8009e80:	4619      	mov	r1, r3
 8009e82:	462b      	mov	r3, r5
 8009e84:	bfbb      	ittet	lt
 8009e86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e8a:	461d      	movlt	r5, r3
 8009e8c:	2300      	movge	r3, #0
 8009e8e:	232d      	movlt	r3, #45	; 0x2d
 8009e90:	700b      	strb	r3, [r1, #0]
 8009e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e98:	4691      	mov	r9, r2
 8009e9a:	f023 0820 	bic.w	r8, r3, #32
 8009e9e:	bfbc      	itt	lt
 8009ea0:	4622      	movlt	r2, r4
 8009ea2:	4614      	movlt	r4, r2
 8009ea4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ea8:	d005      	beq.n	8009eb6 <__cvt+0x42>
 8009eaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009eae:	d100      	bne.n	8009eb2 <__cvt+0x3e>
 8009eb0:	3601      	adds	r6, #1
 8009eb2:	2102      	movs	r1, #2
 8009eb4:	e000      	b.n	8009eb8 <__cvt+0x44>
 8009eb6:	2103      	movs	r1, #3
 8009eb8:	ab03      	add	r3, sp, #12
 8009eba:	9301      	str	r3, [sp, #4]
 8009ebc:	ab02      	add	r3, sp, #8
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	ec45 4b10 	vmov	d0, r4, r5
 8009ec4:	4653      	mov	r3, sl
 8009ec6:	4632      	mov	r2, r6
 8009ec8:	f000 fcea 	bl	800a8a0 <_dtoa_r>
 8009ecc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ed0:	4607      	mov	r7, r0
 8009ed2:	d102      	bne.n	8009eda <__cvt+0x66>
 8009ed4:	f019 0f01 	tst.w	r9, #1
 8009ed8:	d022      	beq.n	8009f20 <__cvt+0xac>
 8009eda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ede:	eb07 0906 	add.w	r9, r7, r6
 8009ee2:	d110      	bne.n	8009f06 <__cvt+0x92>
 8009ee4:	783b      	ldrb	r3, [r7, #0]
 8009ee6:	2b30      	cmp	r3, #48	; 0x30
 8009ee8:	d10a      	bne.n	8009f00 <__cvt+0x8c>
 8009eea:	2200      	movs	r2, #0
 8009eec:	2300      	movs	r3, #0
 8009eee:	4620      	mov	r0, r4
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	f7f6 fde9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef6:	b918      	cbnz	r0, 8009f00 <__cvt+0x8c>
 8009ef8:	f1c6 0601 	rsb	r6, r6, #1
 8009efc:	f8ca 6000 	str.w	r6, [sl]
 8009f00:	f8da 3000 	ldr.w	r3, [sl]
 8009f04:	4499      	add	r9, r3
 8009f06:	2200      	movs	r2, #0
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	f7f6 fddb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f12:	b108      	cbz	r0, 8009f18 <__cvt+0xa4>
 8009f14:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f18:	2230      	movs	r2, #48	; 0x30
 8009f1a:	9b03      	ldr	r3, [sp, #12]
 8009f1c:	454b      	cmp	r3, r9
 8009f1e:	d307      	bcc.n	8009f30 <__cvt+0xbc>
 8009f20:	9b03      	ldr	r3, [sp, #12]
 8009f22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f24:	1bdb      	subs	r3, r3, r7
 8009f26:	4638      	mov	r0, r7
 8009f28:	6013      	str	r3, [r2, #0]
 8009f2a:	b004      	add	sp, #16
 8009f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f30:	1c59      	adds	r1, r3, #1
 8009f32:	9103      	str	r1, [sp, #12]
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	e7f0      	b.n	8009f1a <__cvt+0xa6>

08009f38 <__exponent>:
 8009f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	bfb8      	it	lt
 8009f40:	4249      	neglt	r1, r1
 8009f42:	f803 2b02 	strb.w	r2, [r3], #2
 8009f46:	bfb4      	ite	lt
 8009f48:	222d      	movlt	r2, #45	; 0x2d
 8009f4a:	222b      	movge	r2, #43	; 0x2b
 8009f4c:	2909      	cmp	r1, #9
 8009f4e:	7042      	strb	r2, [r0, #1]
 8009f50:	dd2a      	ble.n	8009fa8 <__exponent+0x70>
 8009f52:	f10d 0407 	add.w	r4, sp, #7
 8009f56:	46a4      	mov	ip, r4
 8009f58:	270a      	movs	r7, #10
 8009f5a:	46a6      	mov	lr, r4
 8009f5c:	460a      	mov	r2, r1
 8009f5e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009f62:	fb07 1516 	mls	r5, r7, r6, r1
 8009f66:	3530      	adds	r5, #48	; 0x30
 8009f68:	2a63      	cmp	r2, #99	; 0x63
 8009f6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009f6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009f72:	4631      	mov	r1, r6
 8009f74:	dcf1      	bgt.n	8009f5a <__exponent+0x22>
 8009f76:	3130      	adds	r1, #48	; 0x30
 8009f78:	f1ae 0502 	sub.w	r5, lr, #2
 8009f7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009f80:	1c44      	adds	r4, r0, #1
 8009f82:	4629      	mov	r1, r5
 8009f84:	4561      	cmp	r1, ip
 8009f86:	d30a      	bcc.n	8009f9e <__exponent+0x66>
 8009f88:	f10d 0209 	add.w	r2, sp, #9
 8009f8c:	eba2 020e 	sub.w	r2, r2, lr
 8009f90:	4565      	cmp	r5, ip
 8009f92:	bf88      	it	hi
 8009f94:	2200      	movhi	r2, #0
 8009f96:	4413      	add	r3, r2
 8009f98:	1a18      	subs	r0, r3, r0
 8009f9a:	b003      	add	sp, #12
 8009f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fa2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009fa6:	e7ed      	b.n	8009f84 <__exponent+0x4c>
 8009fa8:	2330      	movs	r3, #48	; 0x30
 8009faa:	3130      	adds	r1, #48	; 0x30
 8009fac:	7083      	strb	r3, [r0, #2]
 8009fae:	70c1      	strb	r1, [r0, #3]
 8009fb0:	1d03      	adds	r3, r0, #4
 8009fb2:	e7f1      	b.n	8009f98 <__exponent+0x60>

08009fb4 <_printf_float>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	ed2d 8b02 	vpush	{d8}
 8009fbc:	b08d      	sub	sp, #52	; 0x34
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009fc4:	4616      	mov	r6, r2
 8009fc6:	461f      	mov	r7, r3
 8009fc8:	4605      	mov	r5, r0
 8009fca:	f001 fa57 	bl	800b47c <_localeconv_r>
 8009fce:	f8d0 a000 	ldr.w	sl, [r0]
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	f7f6 f8fc 	bl	80001d0 <strlen>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	930a      	str	r3, [sp, #40]	; 0x28
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	9305      	str	r3, [sp, #20]
 8009fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009fe8:	3307      	adds	r3, #7
 8009fea:	f023 0307 	bic.w	r3, r3, #7
 8009fee:	f103 0208 	add.w	r2, r3, #8
 8009ff2:	f8c8 2000 	str.w	r2, [r8]
 8009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009ffe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a002:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a006:	9307      	str	r3, [sp, #28]
 800a008:	f8cd 8018 	str.w	r8, [sp, #24]
 800a00c:	ee08 0a10 	vmov	s16, r0
 800a010:	4b9f      	ldr	r3, [pc, #636]	; (800a290 <_printf_float+0x2dc>)
 800a012:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a016:	f04f 32ff 	mov.w	r2, #4294967295
 800a01a:	f7f6 fd87 	bl	8000b2c <__aeabi_dcmpun>
 800a01e:	bb88      	cbnz	r0, 800a084 <_printf_float+0xd0>
 800a020:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a024:	4b9a      	ldr	r3, [pc, #616]	; (800a290 <_printf_float+0x2dc>)
 800a026:	f04f 32ff 	mov.w	r2, #4294967295
 800a02a:	f7f6 fd61 	bl	8000af0 <__aeabi_dcmple>
 800a02e:	bb48      	cbnz	r0, 800a084 <_printf_float+0xd0>
 800a030:	2200      	movs	r2, #0
 800a032:	2300      	movs	r3, #0
 800a034:	4640      	mov	r0, r8
 800a036:	4649      	mov	r1, r9
 800a038:	f7f6 fd50 	bl	8000adc <__aeabi_dcmplt>
 800a03c:	b110      	cbz	r0, 800a044 <_printf_float+0x90>
 800a03e:	232d      	movs	r3, #45	; 0x2d
 800a040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a044:	4b93      	ldr	r3, [pc, #588]	; (800a294 <_printf_float+0x2e0>)
 800a046:	4894      	ldr	r0, [pc, #592]	; (800a298 <_printf_float+0x2e4>)
 800a048:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a04c:	bf94      	ite	ls
 800a04e:	4698      	movls	r8, r3
 800a050:	4680      	movhi	r8, r0
 800a052:	2303      	movs	r3, #3
 800a054:	6123      	str	r3, [r4, #16]
 800a056:	9b05      	ldr	r3, [sp, #20]
 800a058:	f023 0204 	bic.w	r2, r3, #4
 800a05c:	6022      	str	r2, [r4, #0]
 800a05e:	f04f 0900 	mov.w	r9, #0
 800a062:	9700      	str	r7, [sp, #0]
 800a064:	4633      	mov	r3, r6
 800a066:	aa0b      	add	r2, sp, #44	; 0x2c
 800a068:	4621      	mov	r1, r4
 800a06a:	4628      	mov	r0, r5
 800a06c:	f000 f9d8 	bl	800a420 <_printf_common>
 800a070:	3001      	adds	r0, #1
 800a072:	f040 8090 	bne.w	800a196 <_printf_float+0x1e2>
 800a076:	f04f 30ff 	mov.w	r0, #4294967295
 800a07a:	b00d      	add	sp, #52	; 0x34
 800a07c:	ecbd 8b02 	vpop	{d8}
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a084:	4642      	mov	r2, r8
 800a086:	464b      	mov	r3, r9
 800a088:	4640      	mov	r0, r8
 800a08a:	4649      	mov	r1, r9
 800a08c:	f7f6 fd4e 	bl	8000b2c <__aeabi_dcmpun>
 800a090:	b140      	cbz	r0, 800a0a4 <_printf_float+0xf0>
 800a092:	464b      	mov	r3, r9
 800a094:	2b00      	cmp	r3, #0
 800a096:	bfbc      	itt	lt
 800a098:	232d      	movlt	r3, #45	; 0x2d
 800a09a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a09e:	487f      	ldr	r0, [pc, #508]	; (800a29c <_printf_float+0x2e8>)
 800a0a0:	4b7f      	ldr	r3, [pc, #508]	; (800a2a0 <_printf_float+0x2ec>)
 800a0a2:	e7d1      	b.n	800a048 <_printf_float+0x94>
 800a0a4:	6863      	ldr	r3, [r4, #4]
 800a0a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a0aa:	9206      	str	r2, [sp, #24]
 800a0ac:	1c5a      	adds	r2, r3, #1
 800a0ae:	d13f      	bne.n	800a130 <_printf_float+0x17c>
 800a0b0:	2306      	movs	r3, #6
 800a0b2:	6063      	str	r3, [r4, #4]
 800a0b4:	9b05      	ldr	r3, [sp, #20]
 800a0b6:	6861      	ldr	r1, [r4, #4]
 800a0b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9303      	str	r3, [sp, #12]
 800a0c0:	ab0a      	add	r3, sp, #40	; 0x28
 800a0c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a0c6:	ab09      	add	r3, sp, #36	; 0x24
 800a0c8:	ec49 8b10 	vmov	d0, r8, r9
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	6022      	str	r2, [r4, #0]
 800a0d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f7ff fecd 	bl	8009e74 <__cvt>
 800a0da:	9b06      	ldr	r3, [sp, #24]
 800a0dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0de:	2b47      	cmp	r3, #71	; 0x47
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	d108      	bne.n	800a0f6 <_printf_float+0x142>
 800a0e4:	1cc8      	adds	r0, r1, #3
 800a0e6:	db02      	blt.n	800a0ee <_printf_float+0x13a>
 800a0e8:	6863      	ldr	r3, [r4, #4]
 800a0ea:	4299      	cmp	r1, r3
 800a0ec:	dd41      	ble.n	800a172 <_printf_float+0x1be>
 800a0ee:	f1ab 0b02 	sub.w	fp, fp, #2
 800a0f2:	fa5f fb8b 	uxtb.w	fp, fp
 800a0f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0fa:	d820      	bhi.n	800a13e <_printf_float+0x18a>
 800a0fc:	3901      	subs	r1, #1
 800a0fe:	465a      	mov	r2, fp
 800a100:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a104:	9109      	str	r1, [sp, #36]	; 0x24
 800a106:	f7ff ff17 	bl	8009f38 <__exponent>
 800a10a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a10c:	1813      	adds	r3, r2, r0
 800a10e:	2a01      	cmp	r2, #1
 800a110:	4681      	mov	r9, r0
 800a112:	6123      	str	r3, [r4, #16]
 800a114:	dc02      	bgt.n	800a11c <_printf_float+0x168>
 800a116:	6822      	ldr	r2, [r4, #0]
 800a118:	07d2      	lsls	r2, r2, #31
 800a11a:	d501      	bpl.n	800a120 <_printf_float+0x16c>
 800a11c:	3301      	adds	r3, #1
 800a11e:	6123      	str	r3, [r4, #16]
 800a120:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a124:	2b00      	cmp	r3, #0
 800a126:	d09c      	beq.n	800a062 <_printf_float+0xae>
 800a128:	232d      	movs	r3, #45	; 0x2d
 800a12a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a12e:	e798      	b.n	800a062 <_printf_float+0xae>
 800a130:	9a06      	ldr	r2, [sp, #24]
 800a132:	2a47      	cmp	r2, #71	; 0x47
 800a134:	d1be      	bne.n	800a0b4 <_printf_float+0x100>
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1bc      	bne.n	800a0b4 <_printf_float+0x100>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e7b9      	b.n	800a0b2 <_printf_float+0xfe>
 800a13e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a142:	d118      	bne.n	800a176 <_printf_float+0x1c2>
 800a144:	2900      	cmp	r1, #0
 800a146:	6863      	ldr	r3, [r4, #4]
 800a148:	dd0b      	ble.n	800a162 <_printf_float+0x1ae>
 800a14a:	6121      	str	r1, [r4, #16]
 800a14c:	b913      	cbnz	r3, 800a154 <_printf_float+0x1a0>
 800a14e:	6822      	ldr	r2, [r4, #0]
 800a150:	07d0      	lsls	r0, r2, #31
 800a152:	d502      	bpl.n	800a15a <_printf_float+0x1a6>
 800a154:	3301      	adds	r3, #1
 800a156:	440b      	add	r3, r1
 800a158:	6123      	str	r3, [r4, #16]
 800a15a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a15c:	f04f 0900 	mov.w	r9, #0
 800a160:	e7de      	b.n	800a120 <_printf_float+0x16c>
 800a162:	b913      	cbnz	r3, 800a16a <_printf_float+0x1b6>
 800a164:	6822      	ldr	r2, [r4, #0]
 800a166:	07d2      	lsls	r2, r2, #31
 800a168:	d501      	bpl.n	800a16e <_printf_float+0x1ba>
 800a16a:	3302      	adds	r3, #2
 800a16c:	e7f4      	b.n	800a158 <_printf_float+0x1a4>
 800a16e:	2301      	movs	r3, #1
 800a170:	e7f2      	b.n	800a158 <_printf_float+0x1a4>
 800a172:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a178:	4299      	cmp	r1, r3
 800a17a:	db05      	blt.n	800a188 <_printf_float+0x1d4>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	6121      	str	r1, [r4, #16]
 800a180:	07d8      	lsls	r0, r3, #31
 800a182:	d5ea      	bpl.n	800a15a <_printf_float+0x1a6>
 800a184:	1c4b      	adds	r3, r1, #1
 800a186:	e7e7      	b.n	800a158 <_printf_float+0x1a4>
 800a188:	2900      	cmp	r1, #0
 800a18a:	bfd4      	ite	le
 800a18c:	f1c1 0202 	rsble	r2, r1, #2
 800a190:	2201      	movgt	r2, #1
 800a192:	4413      	add	r3, r2
 800a194:	e7e0      	b.n	800a158 <_printf_float+0x1a4>
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	055a      	lsls	r2, r3, #21
 800a19a:	d407      	bmi.n	800a1ac <_printf_float+0x1f8>
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	4642      	mov	r2, r8
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	47b8      	blx	r7
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	d12c      	bne.n	800a204 <_printf_float+0x250>
 800a1aa:	e764      	b.n	800a076 <_printf_float+0xc2>
 800a1ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1b0:	f240 80e0 	bls.w	800a374 <_printf_float+0x3c0>
 800a1b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f7f6 fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d034      	beq.n	800a22e <_printf_float+0x27a>
 800a1c4:	4a37      	ldr	r2, [pc, #220]	; (800a2a4 <_printf_float+0x2f0>)
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f43f af51 	beq.w	800a076 <_printf_float+0xc2>
 800a1d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	db02      	blt.n	800a1e2 <_printf_float+0x22e>
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	07d8      	lsls	r0, r3, #31
 800a1e0:	d510      	bpl.n	800a204 <_printf_float+0x250>
 800a1e2:	ee18 3a10 	vmov	r3, s16
 800a1e6:	4652      	mov	r2, sl
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	47b8      	blx	r7
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	f43f af41 	beq.w	800a076 <_printf_float+0xc2>
 800a1f4:	f04f 0800 	mov.w	r8, #0
 800a1f8:	f104 091a 	add.w	r9, r4, #26
 800a1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1fe:	3b01      	subs	r3, #1
 800a200:	4543      	cmp	r3, r8
 800a202:	dc09      	bgt.n	800a218 <_printf_float+0x264>
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	079b      	lsls	r3, r3, #30
 800a208:	f100 8105 	bmi.w	800a416 <_printf_float+0x462>
 800a20c:	68e0      	ldr	r0, [r4, #12]
 800a20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a210:	4298      	cmp	r0, r3
 800a212:	bfb8      	it	lt
 800a214:	4618      	movlt	r0, r3
 800a216:	e730      	b.n	800a07a <_printf_float+0xc6>
 800a218:	2301      	movs	r3, #1
 800a21a:	464a      	mov	r2, r9
 800a21c:	4631      	mov	r1, r6
 800a21e:	4628      	mov	r0, r5
 800a220:	47b8      	blx	r7
 800a222:	3001      	adds	r0, #1
 800a224:	f43f af27 	beq.w	800a076 <_printf_float+0xc2>
 800a228:	f108 0801 	add.w	r8, r8, #1
 800a22c:	e7e6      	b.n	800a1fc <_printf_float+0x248>
 800a22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a230:	2b00      	cmp	r3, #0
 800a232:	dc39      	bgt.n	800a2a8 <_printf_float+0x2f4>
 800a234:	4a1b      	ldr	r2, [pc, #108]	; (800a2a4 <_printf_float+0x2f0>)
 800a236:	2301      	movs	r3, #1
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	f43f af19 	beq.w	800a076 <_printf_float+0xc2>
 800a244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a248:	4313      	orrs	r3, r2
 800a24a:	d102      	bne.n	800a252 <_printf_float+0x29e>
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	07d9      	lsls	r1, r3, #31
 800a250:	d5d8      	bpl.n	800a204 <_printf_float+0x250>
 800a252:	ee18 3a10 	vmov	r3, s16
 800a256:	4652      	mov	r2, sl
 800a258:	4631      	mov	r1, r6
 800a25a:	4628      	mov	r0, r5
 800a25c:	47b8      	blx	r7
 800a25e:	3001      	adds	r0, #1
 800a260:	f43f af09 	beq.w	800a076 <_printf_float+0xc2>
 800a264:	f04f 0900 	mov.w	r9, #0
 800a268:	f104 0a1a 	add.w	sl, r4, #26
 800a26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26e:	425b      	negs	r3, r3
 800a270:	454b      	cmp	r3, r9
 800a272:	dc01      	bgt.n	800a278 <_printf_float+0x2c4>
 800a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a276:	e792      	b.n	800a19e <_printf_float+0x1ea>
 800a278:	2301      	movs	r3, #1
 800a27a:	4652      	mov	r2, sl
 800a27c:	4631      	mov	r1, r6
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	f43f aef7 	beq.w	800a076 <_printf_float+0xc2>
 800a288:	f109 0901 	add.w	r9, r9, #1
 800a28c:	e7ee      	b.n	800a26c <_printf_float+0x2b8>
 800a28e:	bf00      	nop
 800a290:	7fefffff 	.word	0x7fefffff
 800a294:	0800daec 	.word	0x0800daec
 800a298:	0800daf0 	.word	0x0800daf0
 800a29c:	0800daf8 	.word	0x0800daf8
 800a2a0:	0800daf4 	.word	0x0800daf4
 800a2a4:	0800dafc 	.word	0x0800dafc
 800a2a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	bfa8      	it	ge
 800a2b0:	461a      	movge	r2, r3
 800a2b2:	2a00      	cmp	r2, #0
 800a2b4:	4691      	mov	r9, r2
 800a2b6:	dc37      	bgt.n	800a328 <_printf_float+0x374>
 800a2b8:	f04f 0b00 	mov.w	fp, #0
 800a2bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2c0:	f104 021a 	add.w	r2, r4, #26
 800a2c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2c6:	9305      	str	r3, [sp, #20]
 800a2c8:	eba3 0309 	sub.w	r3, r3, r9
 800a2cc:	455b      	cmp	r3, fp
 800a2ce:	dc33      	bgt.n	800a338 <_printf_float+0x384>
 800a2d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	db3b      	blt.n	800a350 <_printf_float+0x39c>
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	07da      	lsls	r2, r3, #31
 800a2dc:	d438      	bmi.n	800a350 <_printf_float+0x39c>
 800a2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e0:	9a05      	ldr	r2, [sp, #20]
 800a2e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2e4:	1a9a      	subs	r2, r3, r2
 800a2e6:	eba3 0901 	sub.w	r9, r3, r1
 800a2ea:	4591      	cmp	r9, r2
 800a2ec:	bfa8      	it	ge
 800a2ee:	4691      	movge	r9, r2
 800a2f0:	f1b9 0f00 	cmp.w	r9, #0
 800a2f4:	dc35      	bgt.n	800a362 <_printf_float+0x3ae>
 800a2f6:	f04f 0800 	mov.w	r8, #0
 800a2fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2fe:	f104 0a1a 	add.w	sl, r4, #26
 800a302:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a306:	1a9b      	subs	r3, r3, r2
 800a308:	eba3 0309 	sub.w	r3, r3, r9
 800a30c:	4543      	cmp	r3, r8
 800a30e:	f77f af79 	ble.w	800a204 <_printf_float+0x250>
 800a312:	2301      	movs	r3, #1
 800a314:	4652      	mov	r2, sl
 800a316:	4631      	mov	r1, r6
 800a318:	4628      	mov	r0, r5
 800a31a:	47b8      	blx	r7
 800a31c:	3001      	adds	r0, #1
 800a31e:	f43f aeaa 	beq.w	800a076 <_printf_float+0xc2>
 800a322:	f108 0801 	add.w	r8, r8, #1
 800a326:	e7ec      	b.n	800a302 <_printf_float+0x34e>
 800a328:	4613      	mov	r3, r2
 800a32a:	4631      	mov	r1, r6
 800a32c:	4642      	mov	r2, r8
 800a32e:	4628      	mov	r0, r5
 800a330:	47b8      	blx	r7
 800a332:	3001      	adds	r0, #1
 800a334:	d1c0      	bne.n	800a2b8 <_printf_float+0x304>
 800a336:	e69e      	b.n	800a076 <_printf_float+0xc2>
 800a338:	2301      	movs	r3, #1
 800a33a:	4631      	mov	r1, r6
 800a33c:	4628      	mov	r0, r5
 800a33e:	9205      	str	r2, [sp, #20]
 800a340:	47b8      	blx	r7
 800a342:	3001      	adds	r0, #1
 800a344:	f43f ae97 	beq.w	800a076 <_printf_float+0xc2>
 800a348:	9a05      	ldr	r2, [sp, #20]
 800a34a:	f10b 0b01 	add.w	fp, fp, #1
 800a34e:	e7b9      	b.n	800a2c4 <_printf_float+0x310>
 800a350:	ee18 3a10 	vmov	r3, s16
 800a354:	4652      	mov	r2, sl
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	d1be      	bne.n	800a2de <_printf_float+0x32a>
 800a360:	e689      	b.n	800a076 <_printf_float+0xc2>
 800a362:	9a05      	ldr	r2, [sp, #20]
 800a364:	464b      	mov	r3, r9
 800a366:	4442      	add	r2, r8
 800a368:	4631      	mov	r1, r6
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	d1c1      	bne.n	800a2f6 <_printf_float+0x342>
 800a372:	e680      	b.n	800a076 <_printf_float+0xc2>
 800a374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a376:	2a01      	cmp	r2, #1
 800a378:	dc01      	bgt.n	800a37e <_printf_float+0x3ca>
 800a37a:	07db      	lsls	r3, r3, #31
 800a37c:	d538      	bpl.n	800a3f0 <_printf_float+0x43c>
 800a37e:	2301      	movs	r3, #1
 800a380:	4642      	mov	r2, r8
 800a382:	4631      	mov	r1, r6
 800a384:	4628      	mov	r0, r5
 800a386:	47b8      	blx	r7
 800a388:	3001      	adds	r0, #1
 800a38a:	f43f ae74 	beq.w	800a076 <_printf_float+0xc2>
 800a38e:	ee18 3a10 	vmov	r3, s16
 800a392:	4652      	mov	r2, sl
 800a394:	4631      	mov	r1, r6
 800a396:	4628      	mov	r0, r5
 800a398:	47b8      	blx	r7
 800a39a:	3001      	adds	r0, #1
 800a39c:	f43f ae6b 	beq.w	800a076 <_printf_float+0xc2>
 800a3a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	f7f6 fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3ac:	b9d8      	cbnz	r0, 800a3e6 <_printf_float+0x432>
 800a3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b0:	f108 0201 	add.w	r2, r8, #1
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	47b8      	blx	r7
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d10e      	bne.n	800a3de <_printf_float+0x42a>
 800a3c0:	e659      	b.n	800a076 <_printf_float+0xc2>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	4652      	mov	r2, sl
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	47b8      	blx	r7
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	f43f ae52 	beq.w	800a076 <_printf_float+0xc2>
 800a3d2:	f108 0801 	add.w	r8, r8, #1
 800a3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	4543      	cmp	r3, r8
 800a3dc:	dcf1      	bgt.n	800a3c2 <_printf_float+0x40e>
 800a3de:	464b      	mov	r3, r9
 800a3e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a3e4:	e6dc      	b.n	800a1a0 <_printf_float+0x1ec>
 800a3e6:	f04f 0800 	mov.w	r8, #0
 800a3ea:	f104 0a1a 	add.w	sl, r4, #26
 800a3ee:	e7f2      	b.n	800a3d6 <_printf_float+0x422>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	4642      	mov	r2, r8
 800a3f4:	e7df      	b.n	800a3b6 <_printf_float+0x402>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	464a      	mov	r2, r9
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	47b8      	blx	r7
 800a400:	3001      	adds	r0, #1
 800a402:	f43f ae38 	beq.w	800a076 <_printf_float+0xc2>
 800a406:	f108 0801 	add.w	r8, r8, #1
 800a40a:	68e3      	ldr	r3, [r4, #12]
 800a40c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a40e:	1a5b      	subs	r3, r3, r1
 800a410:	4543      	cmp	r3, r8
 800a412:	dcf0      	bgt.n	800a3f6 <_printf_float+0x442>
 800a414:	e6fa      	b.n	800a20c <_printf_float+0x258>
 800a416:	f04f 0800 	mov.w	r8, #0
 800a41a:	f104 0919 	add.w	r9, r4, #25
 800a41e:	e7f4      	b.n	800a40a <_printf_float+0x456>

0800a420 <_printf_common>:
 800a420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a424:	4616      	mov	r6, r2
 800a426:	4699      	mov	r9, r3
 800a428:	688a      	ldr	r2, [r1, #8]
 800a42a:	690b      	ldr	r3, [r1, #16]
 800a42c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a430:	4293      	cmp	r3, r2
 800a432:	bfb8      	it	lt
 800a434:	4613      	movlt	r3, r2
 800a436:	6033      	str	r3, [r6, #0]
 800a438:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a43c:	4607      	mov	r7, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	b10a      	cbz	r2, 800a446 <_printf_common+0x26>
 800a442:	3301      	adds	r3, #1
 800a444:	6033      	str	r3, [r6, #0]
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	0699      	lsls	r1, r3, #26
 800a44a:	bf42      	ittt	mi
 800a44c:	6833      	ldrmi	r3, [r6, #0]
 800a44e:	3302      	addmi	r3, #2
 800a450:	6033      	strmi	r3, [r6, #0]
 800a452:	6825      	ldr	r5, [r4, #0]
 800a454:	f015 0506 	ands.w	r5, r5, #6
 800a458:	d106      	bne.n	800a468 <_printf_common+0x48>
 800a45a:	f104 0a19 	add.w	sl, r4, #25
 800a45e:	68e3      	ldr	r3, [r4, #12]
 800a460:	6832      	ldr	r2, [r6, #0]
 800a462:	1a9b      	subs	r3, r3, r2
 800a464:	42ab      	cmp	r3, r5
 800a466:	dc26      	bgt.n	800a4b6 <_printf_common+0x96>
 800a468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a46c:	1e13      	subs	r3, r2, #0
 800a46e:	6822      	ldr	r2, [r4, #0]
 800a470:	bf18      	it	ne
 800a472:	2301      	movne	r3, #1
 800a474:	0692      	lsls	r2, r2, #26
 800a476:	d42b      	bmi.n	800a4d0 <_printf_common+0xb0>
 800a478:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a47c:	4649      	mov	r1, r9
 800a47e:	4638      	mov	r0, r7
 800a480:	47c0      	blx	r8
 800a482:	3001      	adds	r0, #1
 800a484:	d01e      	beq.n	800a4c4 <_printf_common+0xa4>
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	68e5      	ldr	r5, [r4, #12]
 800a48a:	6832      	ldr	r2, [r6, #0]
 800a48c:	f003 0306 	and.w	r3, r3, #6
 800a490:	2b04      	cmp	r3, #4
 800a492:	bf08      	it	eq
 800a494:	1aad      	subeq	r5, r5, r2
 800a496:	68a3      	ldr	r3, [r4, #8]
 800a498:	6922      	ldr	r2, [r4, #16]
 800a49a:	bf0c      	ite	eq
 800a49c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4a0:	2500      	movne	r5, #0
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	bfc4      	itt	gt
 800a4a6:	1a9b      	subgt	r3, r3, r2
 800a4a8:	18ed      	addgt	r5, r5, r3
 800a4aa:	2600      	movs	r6, #0
 800a4ac:	341a      	adds	r4, #26
 800a4ae:	42b5      	cmp	r5, r6
 800a4b0:	d11a      	bne.n	800a4e8 <_printf_common+0xc8>
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	e008      	b.n	800a4c8 <_printf_common+0xa8>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	4652      	mov	r2, sl
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	4638      	mov	r0, r7
 800a4be:	47c0      	blx	r8
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	d103      	bne.n	800a4cc <_printf_common+0xac>
 800a4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4cc:	3501      	adds	r5, #1
 800a4ce:	e7c6      	b.n	800a45e <_printf_common+0x3e>
 800a4d0:	18e1      	adds	r1, r4, r3
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	2030      	movs	r0, #48	; 0x30
 800a4d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4da:	4422      	add	r2, r4
 800a4dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4e4:	3302      	adds	r3, #2
 800a4e6:	e7c7      	b.n	800a478 <_printf_common+0x58>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	4622      	mov	r2, r4
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	47c0      	blx	r8
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	d0e6      	beq.n	800a4c4 <_printf_common+0xa4>
 800a4f6:	3601      	adds	r6, #1
 800a4f8:	e7d9      	b.n	800a4ae <_printf_common+0x8e>
	...

0800a4fc <_printf_i>:
 800a4fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a500:	7e0f      	ldrb	r7, [r1, #24]
 800a502:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a504:	2f78      	cmp	r7, #120	; 0x78
 800a506:	4691      	mov	r9, r2
 800a508:	4680      	mov	r8, r0
 800a50a:	460c      	mov	r4, r1
 800a50c:	469a      	mov	sl, r3
 800a50e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a512:	d807      	bhi.n	800a524 <_printf_i+0x28>
 800a514:	2f62      	cmp	r7, #98	; 0x62
 800a516:	d80a      	bhi.n	800a52e <_printf_i+0x32>
 800a518:	2f00      	cmp	r7, #0
 800a51a:	f000 80d8 	beq.w	800a6ce <_printf_i+0x1d2>
 800a51e:	2f58      	cmp	r7, #88	; 0x58
 800a520:	f000 80a3 	beq.w	800a66a <_printf_i+0x16e>
 800a524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a528:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a52c:	e03a      	b.n	800a5a4 <_printf_i+0xa8>
 800a52e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a532:	2b15      	cmp	r3, #21
 800a534:	d8f6      	bhi.n	800a524 <_printf_i+0x28>
 800a536:	a101      	add	r1, pc, #4	; (adr r1, 800a53c <_printf_i+0x40>)
 800a538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a53c:	0800a595 	.word	0x0800a595
 800a540:	0800a5a9 	.word	0x0800a5a9
 800a544:	0800a525 	.word	0x0800a525
 800a548:	0800a525 	.word	0x0800a525
 800a54c:	0800a525 	.word	0x0800a525
 800a550:	0800a525 	.word	0x0800a525
 800a554:	0800a5a9 	.word	0x0800a5a9
 800a558:	0800a525 	.word	0x0800a525
 800a55c:	0800a525 	.word	0x0800a525
 800a560:	0800a525 	.word	0x0800a525
 800a564:	0800a525 	.word	0x0800a525
 800a568:	0800a6b5 	.word	0x0800a6b5
 800a56c:	0800a5d9 	.word	0x0800a5d9
 800a570:	0800a697 	.word	0x0800a697
 800a574:	0800a525 	.word	0x0800a525
 800a578:	0800a525 	.word	0x0800a525
 800a57c:	0800a6d7 	.word	0x0800a6d7
 800a580:	0800a525 	.word	0x0800a525
 800a584:	0800a5d9 	.word	0x0800a5d9
 800a588:	0800a525 	.word	0x0800a525
 800a58c:	0800a525 	.word	0x0800a525
 800a590:	0800a69f 	.word	0x0800a69f
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	1d1a      	adds	r2, r3, #4
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	602a      	str	r2, [r5, #0]
 800a59c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e0a3      	b.n	800a6f0 <_printf_i+0x1f4>
 800a5a8:	6820      	ldr	r0, [r4, #0]
 800a5aa:	6829      	ldr	r1, [r5, #0]
 800a5ac:	0606      	lsls	r6, r0, #24
 800a5ae:	f101 0304 	add.w	r3, r1, #4
 800a5b2:	d50a      	bpl.n	800a5ca <_printf_i+0xce>
 800a5b4:	680e      	ldr	r6, [r1, #0]
 800a5b6:	602b      	str	r3, [r5, #0]
 800a5b8:	2e00      	cmp	r6, #0
 800a5ba:	da03      	bge.n	800a5c4 <_printf_i+0xc8>
 800a5bc:	232d      	movs	r3, #45	; 0x2d
 800a5be:	4276      	negs	r6, r6
 800a5c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5c4:	485e      	ldr	r0, [pc, #376]	; (800a740 <_printf_i+0x244>)
 800a5c6:	230a      	movs	r3, #10
 800a5c8:	e019      	b.n	800a5fe <_printf_i+0x102>
 800a5ca:	680e      	ldr	r6, [r1, #0]
 800a5cc:	602b      	str	r3, [r5, #0]
 800a5ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a5d2:	bf18      	it	ne
 800a5d4:	b236      	sxthne	r6, r6
 800a5d6:	e7ef      	b.n	800a5b8 <_printf_i+0xbc>
 800a5d8:	682b      	ldr	r3, [r5, #0]
 800a5da:	6820      	ldr	r0, [r4, #0]
 800a5dc:	1d19      	adds	r1, r3, #4
 800a5de:	6029      	str	r1, [r5, #0]
 800a5e0:	0601      	lsls	r1, r0, #24
 800a5e2:	d501      	bpl.n	800a5e8 <_printf_i+0xec>
 800a5e4:	681e      	ldr	r6, [r3, #0]
 800a5e6:	e002      	b.n	800a5ee <_printf_i+0xf2>
 800a5e8:	0646      	lsls	r6, r0, #25
 800a5ea:	d5fb      	bpl.n	800a5e4 <_printf_i+0xe8>
 800a5ec:	881e      	ldrh	r6, [r3, #0]
 800a5ee:	4854      	ldr	r0, [pc, #336]	; (800a740 <_printf_i+0x244>)
 800a5f0:	2f6f      	cmp	r7, #111	; 0x6f
 800a5f2:	bf0c      	ite	eq
 800a5f4:	2308      	moveq	r3, #8
 800a5f6:	230a      	movne	r3, #10
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5fe:	6865      	ldr	r5, [r4, #4]
 800a600:	60a5      	str	r5, [r4, #8]
 800a602:	2d00      	cmp	r5, #0
 800a604:	bfa2      	ittt	ge
 800a606:	6821      	ldrge	r1, [r4, #0]
 800a608:	f021 0104 	bicge.w	r1, r1, #4
 800a60c:	6021      	strge	r1, [r4, #0]
 800a60e:	b90e      	cbnz	r6, 800a614 <_printf_i+0x118>
 800a610:	2d00      	cmp	r5, #0
 800a612:	d04d      	beq.n	800a6b0 <_printf_i+0x1b4>
 800a614:	4615      	mov	r5, r2
 800a616:	fbb6 f1f3 	udiv	r1, r6, r3
 800a61a:	fb03 6711 	mls	r7, r3, r1, r6
 800a61e:	5dc7      	ldrb	r7, [r0, r7]
 800a620:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a624:	4637      	mov	r7, r6
 800a626:	42bb      	cmp	r3, r7
 800a628:	460e      	mov	r6, r1
 800a62a:	d9f4      	bls.n	800a616 <_printf_i+0x11a>
 800a62c:	2b08      	cmp	r3, #8
 800a62e:	d10b      	bne.n	800a648 <_printf_i+0x14c>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	07de      	lsls	r6, r3, #31
 800a634:	d508      	bpl.n	800a648 <_printf_i+0x14c>
 800a636:	6923      	ldr	r3, [r4, #16]
 800a638:	6861      	ldr	r1, [r4, #4]
 800a63a:	4299      	cmp	r1, r3
 800a63c:	bfde      	ittt	le
 800a63e:	2330      	movle	r3, #48	; 0x30
 800a640:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a644:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a648:	1b52      	subs	r2, r2, r5
 800a64a:	6122      	str	r2, [r4, #16]
 800a64c:	f8cd a000 	str.w	sl, [sp]
 800a650:	464b      	mov	r3, r9
 800a652:	aa03      	add	r2, sp, #12
 800a654:	4621      	mov	r1, r4
 800a656:	4640      	mov	r0, r8
 800a658:	f7ff fee2 	bl	800a420 <_printf_common>
 800a65c:	3001      	adds	r0, #1
 800a65e:	d14c      	bne.n	800a6fa <_printf_i+0x1fe>
 800a660:	f04f 30ff 	mov.w	r0, #4294967295
 800a664:	b004      	add	sp, #16
 800a666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66a:	4835      	ldr	r0, [pc, #212]	; (800a740 <_printf_i+0x244>)
 800a66c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a670:	6829      	ldr	r1, [r5, #0]
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	f851 6b04 	ldr.w	r6, [r1], #4
 800a678:	6029      	str	r1, [r5, #0]
 800a67a:	061d      	lsls	r5, r3, #24
 800a67c:	d514      	bpl.n	800a6a8 <_printf_i+0x1ac>
 800a67e:	07df      	lsls	r7, r3, #31
 800a680:	bf44      	itt	mi
 800a682:	f043 0320 	orrmi.w	r3, r3, #32
 800a686:	6023      	strmi	r3, [r4, #0]
 800a688:	b91e      	cbnz	r6, 800a692 <_printf_i+0x196>
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	f023 0320 	bic.w	r3, r3, #32
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	2310      	movs	r3, #16
 800a694:	e7b0      	b.n	800a5f8 <_printf_i+0xfc>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	f043 0320 	orr.w	r3, r3, #32
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	2378      	movs	r3, #120	; 0x78
 800a6a0:	4828      	ldr	r0, [pc, #160]	; (800a744 <_printf_i+0x248>)
 800a6a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6a6:	e7e3      	b.n	800a670 <_printf_i+0x174>
 800a6a8:	0659      	lsls	r1, r3, #25
 800a6aa:	bf48      	it	mi
 800a6ac:	b2b6      	uxthmi	r6, r6
 800a6ae:	e7e6      	b.n	800a67e <_printf_i+0x182>
 800a6b0:	4615      	mov	r5, r2
 800a6b2:	e7bb      	b.n	800a62c <_printf_i+0x130>
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	6826      	ldr	r6, [r4, #0]
 800a6b8:	6961      	ldr	r1, [r4, #20]
 800a6ba:	1d18      	adds	r0, r3, #4
 800a6bc:	6028      	str	r0, [r5, #0]
 800a6be:	0635      	lsls	r5, r6, #24
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	d501      	bpl.n	800a6c8 <_printf_i+0x1cc>
 800a6c4:	6019      	str	r1, [r3, #0]
 800a6c6:	e002      	b.n	800a6ce <_printf_i+0x1d2>
 800a6c8:	0670      	lsls	r0, r6, #25
 800a6ca:	d5fb      	bpl.n	800a6c4 <_printf_i+0x1c8>
 800a6cc:	8019      	strh	r1, [r3, #0]
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	4615      	mov	r5, r2
 800a6d4:	e7ba      	b.n	800a64c <_printf_i+0x150>
 800a6d6:	682b      	ldr	r3, [r5, #0]
 800a6d8:	1d1a      	adds	r2, r3, #4
 800a6da:	602a      	str	r2, [r5, #0]
 800a6dc:	681d      	ldr	r5, [r3, #0]
 800a6de:	6862      	ldr	r2, [r4, #4]
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f7f5 fd7c 	bl	80001e0 <memchr>
 800a6e8:	b108      	cbz	r0, 800a6ee <_printf_i+0x1f2>
 800a6ea:	1b40      	subs	r0, r0, r5
 800a6ec:	6060      	str	r0, [r4, #4]
 800a6ee:	6863      	ldr	r3, [r4, #4]
 800a6f0:	6123      	str	r3, [r4, #16]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6f8:	e7a8      	b.n	800a64c <_printf_i+0x150>
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	462a      	mov	r2, r5
 800a6fe:	4649      	mov	r1, r9
 800a700:	4640      	mov	r0, r8
 800a702:	47d0      	blx	sl
 800a704:	3001      	adds	r0, #1
 800a706:	d0ab      	beq.n	800a660 <_printf_i+0x164>
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	079b      	lsls	r3, r3, #30
 800a70c:	d413      	bmi.n	800a736 <_printf_i+0x23a>
 800a70e:	68e0      	ldr	r0, [r4, #12]
 800a710:	9b03      	ldr	r3, [sp, #12]
 800a712:	4298      	cmp	r0, r3
 800a714:	bfb8      	it	lt
 800a716:	4618      	movlt	r0, r3
 800a718:	e7a4      	b.n	800a664 <_printf_i+0x168>
 800a71a:	2301      	movs	r3, #1
 800a71c:	4632      	mov	r2, r6
 800a71e:	4649      	mov	r1, r9
 800a720:	4640      	mov	r0, r8
 800a722:	47d0      	blx	sl
 800a724:	3001      	adds	r0, #1
 800a726:	d09b      	beq.n	800a660 <_printf_i+0x164>
 800a728:	3501      	adds	r5, #1
 800a72a:	68e3      	ldr	r3, [r4, #12]
 800a72c:	9903      	ldr	r1, [sp, #12]
 800a72e:	1a5b      	subs	r3, r3, r1
 800a730:	42ab      	cmp	r3, r5
 800a732:	dcf2      	bgt.n	800a71a <_printf_i+0x21e>
 800a734:	e7eb      	b.n	800a70e <_printf_i+0x212>
 800a736:	2500      	movs	r5, #0
 800a738:	f104 0619 	add.w	r6, r4, #25
 800a73c:	e7f5      	b.n	800a72a <_printf_i+0x22e>
 800a73e:	bf00      	nop
 800a740:	0800dafe 	.word	0x0800dafe
 800a744:	0800db0f 	.word	0x0800db0f

0800a748 <siprintf>:
 800a748:	b40e      	push	{r1, r2, r3}
 800a74a:	b500      	push	{lr}
 800a74c:	b09c      	sub	sp, #112	; 0x70
 800a74e:	ab1d      	add	r3, sp, #116	; 0x74
 800a750:	9002      	str	r0, [sp, #8]
 800a752:	9006      	str	r0, [sp, #24]
 800a754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a758:	4809      	ldr	r0, [pc, #36]	; (800a780 <siprintf+0x38>)
 800a75a:	9107      	str	r1, [sp, #28]
 800a75c:	9104      	str	r1, [sp, #16]
 800a75e:	4909      	ldr	r1, [pc, #36]	; (800a784 <siprintf+0x3c>)
 800a760:	f853 2b04 	ldr.w	r2, [r3], #4
 800a764:	9105      	str	r1, [sp, #20]
 800a766:	6800      	ldr	r0, [r0, #0]
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	a902      	add	r1, sp, #8
 800a76c:	f001 fb68 	bl	800be40 <_svfiprintf_r>
 800a770:	9b02      	ldr	r3, [sp, #8]
 800a772:	2200      	movs	r2, #0
 800a774:	701a      	strb	r2, [r3, #0]
 800a776:	b01c      	add	sp, #112	; 0x70
 800a778:	f85d eb04 	ldr.w	lr, [sp], #4
 800a77c:	b003      	add	sp, #12
 800a77e:	4770      	bx	lr
 800a780:	20000060 	.word	0x20000060
 800a784:	ffff0208 	.word	0xffff0208

0800a788 <quorem>:
 800a788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	6903      	ldr	r3, [r0, #16]
 800a78e:	690c      	ldr	r4, [r1, #16]
 800a790:	42a3      	cmp	r3, r4
 800a792:	4607      	mov	r7, r0
 800a794:	f2c0 8081 	blt.w	800a89a <quorem+0x112>
 800a798:	3c01      	subs	r4, #1
 800a79a:	f101 0814 	add.w	r8, r1, #20
 800a79e:	f100 0514 	add.w	r5, r0, #20
 800a7a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7a6:	9301      	str	r3, [sp, #4]
 800a7a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7c0:	d331      	bcc.n	800a826 <quorem+0x9e>
 800a7c2:	f04f 0e00 	mov.w	lr, #0
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	46ac      	mov	ip, r5
 800a7ca:	46f2      	mov	sl, lr
 800a7cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7d0:	b293      	uxth	r3, r2
 800a7d2:	fb06 e303 	mla	r3, r6, r3, lr
 800a7d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	ebaa 0303 	sub.w	r3, sl, r3
 800a7e0:	f8dc a000 	ldr.w	sl, [ip]
 800a7e4:	0c12      	lsrs	r2, r2, #16
 800a7e6:	fa13 f38a 	uxtah	r3, r3, sl
 800a7ea:	fb06 e202 	mla	r2, r6, r2, lr
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	9b00      	ldr	r3, [sp, #0]
 800a7f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7f6:	b292      	uxth	r2, r2
 800a7f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a7fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a800:	f8bd 3000 	ldrh.w	r3, [sp]
 800a804:	4581      	cmp	r9, r0
 800a806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a80a:	f84c 3b04 	str.w	r3, [ip], #4
 800a80e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a812:	d2db      	bcs.n	800a7cc <quorem+0x44>
 800a814:	f855 300b 	ldr.w	r3, [r5, fp]
 800a818:	b92b      	cbnz	r3, 800a826 <quorem+0x9e>
 800a81a:	9b01      	ldr	r3, [sp, #4]
 800a81c:	3b04      	subs	r3, #4
 800a81e:	429d      	cmp	r5, r3
 800a820:	461a      	mov	r2, r3
 800a822:	d32e      	bcc.n	800a882 <quorem+0xfa>
 800a824:	613c      	str	r4, [r7, #16]
 800a826:	4638      	mov	r0, r7
 800a828:	f001 f8b6 	bl	800b998 <__mcmp>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	db24      	blt.n	800a87a <quorem+0xf2>
 800a830:	3601      	adds	r6, #1
 800a832:	4628      	mov	r0, r5
 800a834:	f04f 0c00 	mov.w	ip, #0
 800a838:	f858 2b04 	ldr.w	r2, [r8], #4
 800a83c:	f8d0 e000 	ldr.w	lr, [r0]
 800a840:	b293      	uxth	r3, r2
 800a842:	ebac 0303 	sub.w	r3, ip, r3
 800a846:	0c12      	lsrs	r2, r2, #16
 800a848:	fa13 f38e 	uxtah	r3, r3, lr
 800a84c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a850:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a854:	b29b      	uxth	r3, r3
 800a856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a85a:	45c1      	cmp	r9, r8
 800a85c:	f840 3b04 	str.w	r3, [r0], #4
 800a860:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a864:	d2e8      	bcs.n	800a838 <quorem+0xb0>
 800a866:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a86a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a86e:	b922      	cbnz	r2, 800a87a <quorem+0xf2>
 800a870:	3b04      	subs	r3, #4
 800a872:	429d      	cmp	r5, r3
 800a874:	461a      	mov	r2, r3
 800a876:	d30a      	bcc.n	800a88e <quorem+0x106>
 800a878:	613c      	str	r4, [r7, #16]
 800a87a:	4630      	mov	r0, r6
 800a87c:	b003      	add	sp, #12
 800a87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a882:	6812      	ldr	r2, [r2, #0]
 800a884:	3b04      	subs	r3, #4
 800a886:	2a00      	cmp	r2, #0
 800a888:	d1cc      	bne.n	800a824 <quorem+0x9c>
 800a88a:	3c01      	subs	r4, #1
 800a88c:	e7c7      	b.n	800a81e <quorem+0x96>
 800a88e:	6812      	ldr	r2, [r2, #0]
 800a890:	3b04      	subs	r3, #4
 800a892:	2a00      	cmp	r2, #0
 800a894:	d1f0      	bne.n	800a878 <quorem+0xf0>
 800a896:	3c01      	subs	r4, #1
 800a898:	e7eb      	b.n	800a872 <quorem+0xea>
 800a89a:	2000      	movs	r0, #0
 800a89c:	e7ee      	b.n	800a87c <quorem+0xf4>
	...

0800a8a0 <_dtoa_r>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	ed2d 8b04 	vpush	{d8-d9}
 800a8a8:	ec57 6b10 	vmov	r6, r7, d0
 800a8ac:	b093      	sub	sp, #76	; 0x4c
 800a8ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8b4:	9106      	str	r1, [sp, #24]
 800a8b6:	ee10 aa10 	vmov	sl, s0
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a8be:	930c      	str	r3, [sp, #48]	; 0x30
 800a8c0:	46bb      	mov	fp, r7
 800a8c2:	b975      	cbnz	r5, 800a8e2 <_dtoa_r+0x42>
 800a8c4:	2010      	movs	r0, #16
 800a8c6:	f000 fddd 	bl	800b484 <malloc>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	6260      	str	r0, [r4, #36]	; 0x24
 800a8ce:	b920      	cbnz	r0, 800a8da <_dtoa_r+0x3a>
 800a8d0:	4ba7      	ldr	r3, [pc, #668]	; (800ab70 <_dtoa_r+0x2d0>)
 800a8d2:	21ea      	movs	r1, #234	; 0xea
 800a8d4:	48a7      	ldr	r0, [pc, #668]	; (800ab74 <_dtoa_r+0x2d4>)
 800a8d6:	f001 fbc3 	bl	800c060 <__assert_func>
 800a8da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8de:	6005      	str	r5, [r0, #0]
 800a8e0:	60c5      	str	r5, [r0, #12]
 800a8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8e4:	6819      	ldr	r1, [r3, #0]
 800a8e6:	b151      	cbz	r1, 800a8fe <_dtoa_r+0x5e>
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	604a      	str	r2, [r1, #4]
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	4093      	lsls	r3, r2
 800a8f0:	608b      	str	r3, [r1, #8]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f000 fe0e 	bl	800b514 <_Bfree>
 800a8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	1e3b      	subs	r3, r7, #0
 800a900:	bfaa      	itet	ge
 800a902:	2300      	movge	r3, #0
 800a904:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a908:	f8c8 3000 	strge.w	r3, [r8]
 800a90c:	4b9a      	ldr	r3, [pc, #616]	; (800ab78 <_dtoa_r+0x2d8>)
 800a90e:	bfbc      	itt	lt
 800a910:	2201      	movlt	r2, #1
 800a912:	f8c8 2000 	strlt.w	r2, [r8]
 800a916:	ea33 030b 	bics.w	r3, r3, fp
 800a91a:	d11b      	bne.n	800a954 <_dtoa_r+0xb4>
 800a91c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a91e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a928:	4333      	orrs	r3, r6
 800a92a:	f000 8592 	beq.w	800b452 <_dtoa_r+0xbb2>
 800a92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a930:	b963      	cbnz	r3, 800a94c <_dtoa_r+0xac>
 800a932:	4b92      	ldr	r3, [pc, #584]	; (800ab7c <_dtoa_r+0x2dc>)
 800a934:	e022      	b.n	800a97c <_dtoa_r+0xdc>
 800a936:	4b92      	ldr	r3, [pc, #584]	; (800ab80 <_dtoa_r+0x2e0>)
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	3308      	adds	r3, #8
 800a93c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	9801      	ldr	r0, [sp, #4]
 800a942:	b013      	add	sp, #76	; 0x4c
 800a944:	ecbd 8b04 	vpop	{d8-d9}
 800a948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94c:	4b8b      	ldr	r3, [pc, #556]	; (800ab7c <_dtoa_r+0x2dc>)
 800a94e:	9301      	str	r3, [sp, #4]
 800a950:	3303      	adds	r3, #3
 800a952:	e7f3      	b.n	800a93c <_dtoa_r+0x9c>
 800a954:	2200      	movs	r2, #0
 800a956:	2300      	movs	r3, #0
 800a958:	4650      	mov	r0, sl
 800a95a:	4659      	mov	r1, fp
 800a95c:	f7f6 f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a960:	ec4b ab19 	vmov	d9, sl, fp
 800a964:	4680      	mov	r8, r0
 800a966:	b158      	cbz	r0, 800a980 <_dtoa_r+0xe0>
 800a968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a96a:	2301      	movs	r3, #1
 800a96c:	6013      	str	r3, [r2, #0]
 800a96e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 856b 	beq.w	800b44c <_dtoa_r+0xbac>
 800a976:	4883      	ldr	r0, [pc, #524]	; (800ab84 <_dtoa_r+0x2e4>)
 800a978:	6018      	str	r0, [r3, #0]
 800a97a:	1e43      	subs	r3, r0, #1
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	e7df      	b.n	800a940 <_dtoa_r+0xa0>
 800a980:	ec4b ab10 	vmov	d0, sl, fp
 800a984:	aa10      	add	r2, sp, #64	; 0x40
 800a986:	a911      	add	r1, sp, #68	; 0x44
 800a988:	4620      	mov	r0, r4
 800a98a:	f001 f8ab 	bl	800bae4 <__d2b>
 800a98e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a992:	ee08 0a10 	vmov	s16, r0
 800a996:	2d00      	cmp	r5, #0
 800a998:	f000 8084 	beq.w	800aaa4 <_dtoa_r+0x204>
 800a99c:	ee19 3a90 	vmov	r3, s19
 800a9a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a9a8:	4656      	mov	r6, sl
 800a9aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a9ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a9b6:	4b74      	ldr	r3, [pc, #464]	; (800ab88 <_dtoa_r+0x2e8>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	4639      	mov	r1, r7
 800a9be:	f7f5 fc63 	bl	8000288 <__aeabi_dsub>
 800a9c2:	a365      	add	r3, pc, #404	; (adr r3, 800ab58 <_dtoa_r+0x2b8>)
 800a9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c8:	f7f5 fe16 	bl	80005f8 <__aeabi_dmul>
 800a9cc:	a364      	add	r3, pc, #400	; (adr r3, 800ab60 <_dtoa_r+0x2c0>)
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	f7f5 fc5b 	bl	800028c <__adddf3>
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	4628      	mov	r0, r5
 800a9da:	460f      	mov	r7, r1
 800a9dc:	f7f5 fda2 	bl	8000524 <__aeabi_i2d>
 800a9e0:	a361      	add	r3, pc, #388	; (adr r3, 800ab68 <_dtoa_r+0x2c8>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	f7f5 fe07 	bl	80005f8 <__aeabi_dmul>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	4639      	mov	r1, r7
 800a9f2:	f7f5 fc4b 	bl	800028c <__adddf3>
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	460f      	mov	r7, r1
 800a9fa:	f7f6 f8ad 	bl	8000b58 <__aeabi_d2iz>
 800a9fe:	2200      	movs	r2, #0
 800aa00:	9000      	str	r0, [sp, #0]
 800aa02:	2300      	movs	r3, #0
 800aa04:	4630      	mov	r0, r6
 800aa06:	4639      	mov	r1, r7
 800aa08:	f7f6 f868 	bl	8000adc <__aeabi_dcmplt>
 800aa0c:	b150      	cbz	r0, 800aa24 <_dtoa_r+0x184>
 800aa0e:	9800      	ldr	r0, [sp, #0]
 800aa10:	f7f5 fd88 	bl	8000524 <__aeabi_i2d>
 800aa14:	4632      	mov	r2, r6
 800aa16:	463b      	mov	r3, r7
 800aa18:	f7f6 f856 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa1c:	b910      	cbnz	r0, 800aa24 <_dtoa_r+0x184>
 800aa1e:	9b00      	ldr	r3, [sp, #0]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	9b00      	ldr	r3, [sp, #0]
 800aa26:	2b16      	cmp	r3, #22
 800aa28:	d85a      	bhi.n	800aae0 <_dtoa_r+0x240>
 800aa2a:	9a00      	ldr	r2, [sp, #0]
 800aa2c:	4b57      	ldr	r3, [pc, #348]	; (800ab8c <_dtoa_r+0x2ec>)
 800aa2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	ec51 0b19 	vmov	r0, r1, d9
 800aa3a:	f7f6 f84f 	bl	8000adc <__aeabi_dcmplt>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d050      	beq.n	800aae4 <_dtoa_r+0x244>
 800aa42:	9b00      	ldr	r3, [sp, #0]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	2300      	movs	r3, #0
 800aa4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa4e:	1b5d      	subs	r5, r3, r5
 800aa50:	1e6b      	subs	r3, r5, #1
 800aa52:	9305      	str	r3, [sp, #20]
 800aa54:	bf45      	ittet	mi
 800aa56:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa5a:	9304      	strmi	r3, [sp, #16]
 800aa5c:	2300      	movpl	r3, #0
 800aa5e:	2300      	movmi	r3, #0
 800aa60:	bf4c      	ite	mi
 800aa62:	9305      	strmi	r3, [sp, #20]
 800aa64:	9304      	strpl	r3, [sp, #16]
 800aa66:	9b00      	ldr	r3, [sp, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	db3d      	blt.n	800aae8 <_dtoa_r+0x248>
 800aa6c:	9b05      	ldr	r3, [sp, #20]
 800aa6e:	9a00      	ldr	r2, [sp, #0]
 800aa70:	920a      	str	r2, [sp, #40]	; 0x28
 800aa72:	4413      	add	r3, r2
 800aa74:	9305      	str	r3, [sp, #20]
 800aa76:	2300      	movs	r3, #0
 800aa78:	9307      	str	r3, [sp, #28]
 800aa7a:	9b06      	ldr	r3, [sp, #24]
 800aa7c:	2b09      	cmp	r3, #9
 800aa7e:	f200 8089 	bhi.w	800ab94 <_dtoa_r+0x2f4>
 800aa82:	2b05      	cmp	r3, #5
 800aa84:	bfc4      	itt	gt
 800aa86:	3b04      	subgt	r3, #4
 800aa88:	9306      	strgt	r3, [sp, #24]
 800aa8a:	9b06      	ldr	r3, [sp, #24]
 800aa8c:	f1a3 0302 	sub.w	r3, r3, #2
 800aa90:	bfcc      	ite	gt
 800aa92:	2500      	movgt	r5, #0
 800aa94:	2501      	movle	r5, #1
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	f200 8087 	bhi.w	800abaa <_dtoa_r+0x30a>
 800aa9c:	e8df f003 	tbb	[pc, r3]
 800aaa0:	59383a2d 	.word	0x59383a2d
 800aaa4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aaa8:	441d      	add	r5, r3
 800aaaa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aaae:	2b20      	cmp	r3, #32
 800aab0:	bfc1      	itttt	gt
 800aab2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aab6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aaba:	fa0b f303 	lslgt.w	r3, fp, r3
 800aabe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aac2:	bfda      	itte	le
 800aac4:	f1c3 0320 	rsble	r3, r3, #32
 800aac8:	fa06 f003 	lslle.w	r0, r6, r3
 800aacc:	4318      	orrgt	r0, r3
 800aace:	f7f5 fd19 	bl	8000504 <__aeabi_ui2d>
 800aad2:	2301      	movs	r3, #1
 800aad4:	4606      	mov	r6, r0
 800aad6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aada:	3d01      	subs	r5, #1
 800aadc:	930e      	str	r3, [sp, #56]	; 0x38
 800aade:	e76a      	b.n	800a9b6 <_dtoa_r+0x116>
 800aae0:	2301      	movs	r3, #1
 800aae2:	e7b2      	b.n	800aa4a <_dtoa_r+0x1aa>
 800aae4:	900b      	str	r0, [sp, #44]	; 0x2c
 800aae6:	e7b1      	b.n	800aa4c <_dtoa_r+0x1ac>
 800aae8:	9b04      	ldr	r3, [sp, #16]
 800aaea:	9a00      	ldr	r2, [sp, #0]
 800aaec:	1a9b      	subs	r3, r3, r2
 800aaee:	9304      	str	r3, [sp, #16]
 800aaf0:	4253      	negs	r3, r2
 800aaf2:	9307      	str	r3, [sp, #28]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	930a      	str	r3, [sp, #40]	; 0x28
 800aaf8:	e7bf      	b.n	800aa7a <_dtoa_r+0x1da>
 800aafa:	2300      	movs	r3, #0
 800aafc:	9308      	str	r3, [sp, #32]
 800aafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	dc55      	bgt.n	800abb0 <_dtoa_r+0x310>
 800ab04:	2301      	movs	r3, #1
 800ab06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab0e:	e00c      	b.n	800ab2a <_dtoa_r+0x28a>
 800ab10:	2301      	movs	r3, #1
 800ab12:	e7f3      	b.n	800aafc <_dtoa_r+0x25c>
 800ab14:	2300      	movs	r3, #0
 800ab16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab18:	9308      	str	r3, [sp, #32]
 800ab1a:	9b00      	ldr	r3, [sp, #0]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	9302      	str	r3, [sp, #8]
 800ab20:	3301      	adds	r3, #1
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	9303      	str	r3, [sp, #12]
 800ab26:	bfb8      	it	lt
 800ab28:	2301      	movlt	r3, #1
 800ab2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	6042      	str	r2, [r0, #4]
 800ab30:	2204      	movs	r2, #4
 800ab32:	f102 0614 	add.w	r6, r2, #20
 800ab36:	429e      	cmp	r6, r3
 800ab38:	6841      	ldr	r1, [r0, #4]
 800ab3a:	d93d      	bls.n	800abb8 <_dtoa_r+0x318>
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 fca9 	bl	800b494 <_Balloc>
 800ab42:	9001      	str	r0, [sp, #4]
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d13b      	bne.n	800abc0 <_dtoa_r+0x320>
 800ab48:	4b11      	ldr	r3, [pc, #68]	; (800ab90 <_dtoa_r+0x2f0>)
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab50:	e6c0      	b.n	800a8d4 <_dtoa_r+0x34>
 800ab52:	2301      	movs	r3, #1
 800ab54:	e7df      	b.n	800ab16 <_dtoa_r+0x276>
 800ab56:	bf00      	nop
 800ab58:	636f4361 	.word	0x636f4361
 800ab5c:	3fd287a7 	.word	0x3fd287a7
 800ab60:	8b60c8b3 	.word	0x8b60c8b3
 800ab64:	3fc68a28 	.word	0x3fc68a28
 800ab68:	509f79fb 	.word	0x509f79fb
 800ab6c:	3fd34413 	.word	0x3fd34413
 800ab70:	0800db2d 	.word	0x0800db2d
 800ab74:	0800db44 	.word	0x0800db44
 800ab78:	7ff00000 	.word	0x7ff00000
 800ab7c:	0800db29 	.word	0x0800db29
 800ab80:	0800db20 	.word	0x0800db20
 800ab84:	0800dafd 	.word	0x0800dafd
 800ab88:	3ff80000 	.word	0x3ff80000
 800ab8c:	0800dc38 	.word	0x0800dc38
 800ab90:	0800db9f 	.word	0x0800db9f
 800ab94:	2501      	movs	r5, #1
 800ab96:	2300      	movs	r3, #0
 800ab98:	9306      	str	r3, [sp, #24]
 800ab9a:	9508      	str	r5, [sp, #32]
 800ab9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aba0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aba4:	2200      	movs	r2, #0
 800aba6:	2312      	movs	r3, #18
 800aba8:	e7b0      	b.n	800ab0c <_dtoa_r+0x26c>
 800abaa:	2301      	movs	r3, #1
 800abac:	9308      	str	r3, [sp, #32]
 800abae:	e7f5      	b.n	800ab9c <_dtoa_r+0x2fc>
 800abb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800abb6:	e7b8      	b.n	800ab2a <_dtoa_r+0x28a>
 800abb8:	3101      	adds	r1, #1
 800abba:	6041      	str	r1, [r0, #4]
 800abbc:	0052      	lsls	r2, r2, #1
 800abbe:	e7b8      	b.n	800ab32 <_dtoa_r+0x292>
 800abc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abc2:	9a01      	ldr	r2, [sp, #4]
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	9b03      	ldr	r3, [sp, #12]
 800abc8:	2b0e      	cmp	r3, #14
 800abca:	f200 809d 	bhi.w	800ad08 <_dtoa_r+0x468>
 800abce:	2d00      	cmp	r5, #0
 800abd0:	f000 809a 	beq.w	800ad08 <_dtoa_r+0x468>
 800abd4:	9b00      	ldr	r3, [sp, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	dd32      	ble.n	800ac40 <_dtoa_r+0x3a0>
 800abda:	4ab7      	ldr	r2, [pc, #732]	; (800aeb8 <_dtoa_r+0x618>)
 800abdc:	f003 030f 	and.w	r3, r3, #15
 800abe0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800abe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abe8:	9b00      	ldr	r3, [sp, #0]
 800abea:	05d8      	lsls	r0, r3, #23
 800abec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800abf0:	d516      	bpl.n	800ac20 <_dtoa_r+0x380>
 800abf2:	4bb2      	ldr	r3, [pc, #712]	; (800aebc <_dtoa_r+0x61c>)
 800abf4:	ec51 0b19 	vmov	r0, r1, d9
 800abf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abfc:	f7f5 fe26 	bl	800084c <__aeabi_ddiv>
 800ac00:	f007 070f 	and.w	r7, r7, #15
 800ac04:	4682      	mov	sl, r0
 800ac06:	468b      	mov	fp, r1
 800ac08:	2503      	movs	r5, #3
 800ac0a:	4eac      	ldr	r6, [pc, #688]	; (800aebc <_dtoa_r+0x61c>)
 800ac0c:	b957      	cbnz	r7, 800ac24 <_dtoa_r+0x384>
 800ac0e:	4642      	mov	r2, r8
 800ac10:	464b      	mov	r3, r9
 800ac12:	4650      	mov	r0, sl
 800ac14:	4659      	mov	r1, fp
 800ac16:	f7f5 fe19 	bl	800084c <__aeabi_ddiv>
 800ac1a:	4682      	mov	sl, r0
 800ac1c:	468b      	mov	fp, r1
 800ac1e:	e028      	b.n	800ac72 <_dtoa_r+0x3d2>
 800ac20:	2502      	movs	r5, #2
 800ac22:	e7f2      	b.n	800ac0a <_dtoa_r+0x36a>
 800ac24:	07f9      	lsls	r1, r7, #31
 800ac26:	d508      	bpl.n	800ac3a <_dtoa_r+0x39a>
 800ac28:	4640      	mov	r0, r8
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac30:	f7f5 fce2 	bl	80005f8 <__aeabi_dmul>
 800ac34:	3501      	adds	r5, #1
 800ac36:	4680      	mov	r8, r0
 800ac38:	4689      	mov	r9, r1
 800ac3a:	107f      	asrs	r7, r7, #1
 800ac3c:	3608      	adds	r6, #8
 800ac3e:	e7e5      	b.n	800ac0c <_dtoa_r+0x36c>
 800ac40:	f000 809b 	beq.w	800ad7a <_dtoa_r+0x4da>
 800ac44:	9b00      	ldr	r3, [sp, #0]
 800ac46:	4f9d      	ldr	r7, [pc, #628]	; (800aebc <_dtoa_r+0x61c>)
 800ac48:	425e      	negs	r6, r3
 800ac4a:	4b9b      	ldr	r3, [pc, #620]	; (800aeb8 <_dtoa_r+0x618>)
 800ac4c:	f006 020f 	and.w	r2, r6, #15
 800ac50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac58:	ec51 0b19 	vmov	r0, r1, d9
 800ac5c:	f7f5 fccc 	bl	80005f8 <__aeabi_dmul>
 800ac60:	1136      	asrs	r6, r6, #4
 800ac62:	4682      	mov	sl, r0
 800ac64:	468b      	mov	fp, r1
 800ac66:	2300      	movs	r3, #0
 800ac68:	2502      	movs	r5, #2
 800ac6a:	2e00      	cmp	r6, #0
 800ac6c:	d17a      	bne.n	800ad64 <_dtoa_r+0x4c4>
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1d3      	bne.n	800ac1a <_dtoa_r+0x37a>
 800ac72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 8082 	beq.w	800ad7e <_dtoa_r+0x4de>
 800ac7a:	4b91      	ldr	r3, [pc, #580]	; (800aec0 <_dtoa_r+0x620>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	4650      	mov	r0, sl
 800ac80:	4659      	mov	r1, fp
 800ac82:	f7f5 ff2b 	bl	8000adc <__aeabi_dcmplt>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d079      	beq.n	800ad7e <_dtoa_r+0x4de>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d076      	beq.n	800ad7e <_dtoa_r+0x4de>
 800ac90:	9b02      	ldr	r3, [sp, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	dd36      	ble.n	800ad04 <_dtoa_r+0x464>
 800ac96:	9b00      	ldr	r3, [sp, #0]
 800ac98:	4650      	mov	r0, sl
 800ac9a:	4659      	mov	r1, fp
 800ac9c:	1e5f      	subs	r7, r3, #1
 800ac9e:	2200      	movs	r2, #0
 800aca0:	4b88      	ldr	r3, [pc, #544]	; (800aec4 <_dtoa_r+0x624>)
 800aca2:	f7f5 fca9 	bl	80005f8 <__aeabi_dmul>
 800aca6:	9e02      	ldr	r6, [sp, #8]
 800aca8:	4682      	mov	sl, r0
 800acaa:	468b      	mov	fp, r1
 800acac:	3501      	adds	r5, #1
 800acae:	4628      	mov	r0, r5
 800acb0:	f7f5 fc38 	bl	8000524 <__aeabi_i2d>
 800acb4:	4652      	mov	r2, sl
 800acb6:	465b      	mov	r3, fp
 800acb8:	f7f5 fc9e 	bl	80005f8 <__aeabi_dmul>
 800acbc:	4b82      	ldr	r3, [pc, #520]	; (800aec8 <_dtoa_r+0x628>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	f7f5 fae4 	bl	800028c <__adddf3>
 800acc4:	46d0      	mov	r8, sl
 800acc6:	46d9      	mov	r9, fp
 800acc8:	4682      	mov	sl, r0
 800acca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800acce:	2e00      	cmp	r6, #0
 800acd0:	d158      	bne.n	800ad84 <_dtoa_r+0x4e4>
 800acd2:	4b7e      	ldr	r3, [pc, #504]	; (800aecc <_dtoa_r+0x62c>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	4640      	mov	r0, r8
 800acd8:	4649      	mov	r1, r9
 800acda:	f7f5 fad5 	bl	8000288 <__aeabi_dsub>
 800acde:	4652      	mov	r2, sl
 800ace0:	465b      	mov	r3, fp
 800ace2:	4680      	mov	r8, r0
 800ace4:	4689      	mov	r9, r1
 800ace6:	f7f5 ff17 	bl	8000b18 <__aeabi_dcmpgt>
 800acea:	2800      	cmp	r0, #0
 800acec:	f040 8295 	bne.w	800b21a <_dtoa_r+0x97a>
 800acf0:	4652      	mov	r2, sl
 800acf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800acf6:	4640      	mov	r0, r8
 800acf8:	4649      	mov	r1, r9
 800acfa:	f7f5 feef 	bl	8000adc <__aeabi_dcmplt>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	f040 8289 	bne.w	800b216 <_dtoa_r+0x976>
 800ad04:	ec5b ab19 	vmov	sl, fp, d9
 800ad08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f2c0 8148 	blt.w	800afa0 <_dtoa_r+0x700>
 800ad10:	9a00      	ldr	r2, [sp, #0]
 800ad12:	2a0e      	cmp	r2, #14
 800ad14:	f300 8144 	bgt.w	800afa0 <_dtoa_r+0x700>
 800ad18:	4b67      	ldr	r3, [pc, #412]	; (800aeb8 <_dtoa_r+0x618>)
 800ad1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f280 80d5 	bge.w	800aed4 <_dtoa_r+0x634>
 800ad2a:	9b03      	ldr	r3, [sp, #12]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f300 80d1 	bgt.w	800aed4 <_dtoa_r+0x634>
 800ad32:	f040 826f 	bne.w	800b214 <_dtoa_r+0x974>
 800ad36:	4b65      	ldr	r3, [pc, #404]	; (800aecc <_dtoa_r+0x62c>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	f7f5 fc5b 	bl	80005f8 <__aeabi_dmul>
 800ad42:	4652      	mov	r2, sl
 800ad44:	465b      	mov	r3, fp
 800ad46:	f7f5 fedd 	bl	8000b04 <__aeabi_dcmpge>
 800ad4a:	9e03      	ldr	r6, [sp, #12]
 800ad4c:	4637      	mov	r7, r6
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	f040 8245 	bne.w	800b1de <_dtoa_r+0x93e>
 800ad54:	9d01      	ldr	r5, [sp, #4]
 800ad56:	2331      	movs	r3, #49	; 0x31
 800ad58:	f805 3b01 	strb.w	r3, [r5], #1
 800ad5c:	9b00      	ldr	r3, [sp, #0]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	e240      	b.n	800b1e6 <_dtoa_r+0x946>
 800ad64:	07f2      	lsls	r2, r6, #31
 800ad66:	d505      	bpl.n	800ad74 <_dtoa_r+0x4d4>
 800ad68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad6c:	f7f5 fc44 	bl	80005f8 <__aeabi_dmul>
 800ad70:	3501      	adds	r5, #1
 800ad72:	2301      	movs	r3, #1
 800ad74:	1076      	asrs	r6, r6, #1
 800ad76:	3708      	adds	r7, #8
 800ad78:	e777      	b.n	800ac6a <_dtoa_r+0x3ca>
 800ad7a:	2502      	movs	r5, #2
 800ad7c:	e779      	b.n	800ac72 <_dtoa_r+0x3d2>
 800ad7e:	9f00      	ldr	r7, [sp, #0]
 800ad80:	9e03      	ldr	r6, [sp, #12]
 800ad82:	e794      	b.n	800acae <_dtoa_r+0x40e>
 800ad84:	9901      	ldr	r1, [sp, #4]
 800ad86:	4b4c      	ldr	r3, [pc, #304]	; (800aeb8 <_dtoa_r+0x618>)
 800ad88:	4431      	add	r1, r6
 800ad8a:	910d      	str	r1, [sp, #52]	; 0x34
 800ad8c:	9908      	ldr	r1, [sp, #32]
 800ad8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad96:	2900      	cmp	r1, #0
 800ad98:	d043      	beq.n	800ae22 <_dtoa_r+0x582>
 800ad9a:	494d      	ldr	r1, [pc, #308]	; (800aed0 <_dtoa_r+0x630>)
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	f7f5 fd55 	bl	800084c <__aeabi_ddiv>
 800ada2:	4652      	mov	r2, sl
 800ada4:	465b      	mov	r3, fp
 800ada6:	f7f5 fa6f 	bl	8000288 <__aeabi_dsub>
 800adaa:	9d01      	ldr	r5, [sp, #4]
 800adac:	4682      	mov	sl, r0
 800adae:	468b      	mov	fp, r1
 800adb0:	4649      	mov	r1, r9
 800adb2:	4640      	mov	r0, r8
 800adb4:	f7f5 fed0 	bl	8000b58 <__aeabi_d2iz>
 800adb8:	4606      	mov	r6, r0
 800adba:	f7f5 fbb3 	bl	8000524 <__aeabi_i2d>
 800adbe:	4602      	mov	r2, r0
 800adc0:	460b      	mov	r3, r1
 800adc2:	4640      	mov	r0, r8
 800adc4:	4649      	mov	r1, r9
 800adc6:	f7f5 fa5f 	bl	8000288 <__aeabi_dsub>
 800adca:	3630      	adds	r6, #48	; 0x30
 800adcc:	f805 6b01 	strb.w	r6, [r5], #1
 800add0:	4652      	mov	r2, sl
 800add2:	465b      	mov	r3, fp
 800add4:	4680      	mov	r8, r0
 800add6:	4689      	mov	r9, r1
 800add8:	f7f5 fe80 	bl	8000adc <__aeabi_dcmplt>
 800addc:	2800      	cmp	r0, #0
 800adde:	d163      	bne.n	800aea8 <_dtoa_r+0x608>
 800ade0:	4642      	mov	r2, r8
 800ade2:	464b      	mov	r3, r9
 800ade4:	4936      	ldr	r1, [pc, #216]	; (800aec0 <_dtoa_r+0x620>)
 800ade6:	2000      	movs	r0, #0
 800ade8:	f7f5 fa4e 	bl	8000288 <__aeabi_dsub>
 800adec:	4652      	mov	r2, sl
 800adee:	465b      	mov	r3, fp
 800adf0:	f7f5 fe74 	bl	8000adc <__aeabi_dcmplt>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f040 80b5 	bne.w	800af64 <_dtoa_r+0x6c4>
 800adfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adfc:	429d      	cmp	r5, r3
 800adfe:	d081      	beq.n	800ad04 <_dtoa_r+0x464>
 800ae00:	4b30      	ldr	r3, [pc, #192]	; (800aec4 <_dtoa_r+0x624>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	4650      	mov	r0, sl
 800ae06:	4659      	mov	r1, fp
 800ae08:	f7f5 fbf6 	bl	80005f8 <__aeabi_dmul>
 800ae0c:	4b2d      	ldr	r3, [pc, #180]	; (800aec4 <_dtoa_r+0x624>)
 800ae0e:	4682      	mov	sl, r0
 800ae10:	468b      	mov	fp, r1
 800ae12:	4640      	mov	r0, r8
 800ae14:	4649      	mov	r1, r9
 800ae16:	2200      	movs	r2, #0
 800ae18:	f7f5 fbee 	bl	80005f8 <__aeabi_dmul>
 800ae1c:	4680      	mov	r8, r0
 800ae1e:	4689      	mov	r9, r1
 800ae20:	e7c6      	b.n	800adb0 <_dtoa_r+0x510>
 800ae22:	4650      	mov	r0, sl
 800ae24:	4659      	mov	r1, fp
 800ae26:	f7f5 fbe7 	bl	80005f8 <__aeabi_dmul>
 800ae2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae2c:	9d01      	ldr	r5, [sp, #4]
 800ae2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae30:	4682      	mov	sl, r0
 800ae32:	468b      	mov	fp, r1
 800ae34:	4649      	mov	r1, r9
 800ae36:	4640      	mov	r0, r8
 800ae38:	f7f5 fe8e 	bl	8000b58 <__aeabi_d2iz>
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	f7f5 fb71 	bl	8000524 <__aeabi_i2d>
 800ae42:	3630      	adds	r6, #48	; 0x30
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	4640      	mov	r0, r8
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	f7f5 fa1c 	bl	8000288 <__aeabi_dsub>
 800ae50:	f805 6b01 	strb.w	r6, [r5], #1
 800ae54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae56:	429d      	cmp	r5, r3
 800ae58:	4680      	mov	r8, r0
 800ae5a:	4689      	mov	r9, r1
 800ae5c:	f04f 0200 	mov.w	r2, #0
 800ae60:	d124      	bne.n	800aeac <_dtoa_r+0x60c>
 800ae62:	4b1b      	ldr	r3, [pc, #108]	; (800aed0 <_dtoa_r+0x630>)
 800ae64:	4650      	mov	r0, sl
 800ae66:	4659      	mov	r1, fp
 800ae68:	f7f5 fa10 	bl	800028c <__adddf3>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	4640      	mov	r0, r8
 800ae72:	4649      	mov	r1, r9
 800ae74:	f7f5 fe50 	bl	8000b18 <__aeabi_dcmpgt>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d173      	bne.n	800af64 <_dtoa_r+0x6c4>
 800ae7c:	4652      	mov	r2, sl
 800ae7e:	465b      	mov	r3, fp
 800ae80:	4913      	ldr	r1, [pc, #76]	; (800aed0 <_dtoa_r+0x630>)
 800ae82:	2000      	movs	r0, #0
 800ae84:	f7f5 fa00 	bl	8000288 <__aeabi_dsub>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	4649      	mov	r1, r9
 800ae90:	f7f5 fe24 	bl	8000adc <__aeabi_dcmplt>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	f43f af35 	beq.w	800ad04 <_dtoa_r+0x464>
 800ae9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae9c:	1e6b      	subs	r3, r5, #1
 800ae9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800aea0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aea4:	2b30      	cmp	r3, #48	; 0x30
 800aea6:	d0f8      	beq.n	800ae9a <_dtoa_r+0x5fa>
 800aea8:	9700      	str	r7, [sp, #0]
 800aeaa:	e049      	b.n	800af40 <_dtoa_r+0x6a0>
 800aeac:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <_dtoa_r+0x624>)
 800aeae:	f7f5 fba3 	bl	80005f8 <__aeabi_dmul>
 800aeb2:	4680      	mov	r8, r0
 800aeb4:	4689      	mov	r9, r1
 800aeb6:	e7bd      	b.n	800ae34 <_dtoa_r+0x594>
 800aeb8:	0800dc38 	.word	0x0800dc38
 800aebc:	0800dc10 	.word	0x0800dc10
 800aec0:	3ff00000 	.word	0x3ff00000
 800aec4:	40240000 	.word	0x40240000
 800aec8:	401c0000 	.word	0x401c0000
 800aecc:	40140000 	.word	0x40140000
 800aed0:	3fe00000 	.word	0x3fe00000
 800aed4:	9d01      	ldr	r5, [sp, #4]
 800aed6:	4656      	mov	r6, sl
 800aed8:	465f      	mov	r7, fp
 800aeda:	4642      	mov	r2, r8
 800aedc:	464b      	mov	r3, r9
 800aede:	4630      	mov	r0, r6
 800aee0:	4639      	mov	r1, r7
 800aee2:	f7f5 fcb3 	bl	800084c <__aeabi_ddiv>
 800aee6:	f7f5 fe37 	bl	8000b58 <__aeabi_d2iz>
 800aeea:	4682      	mov	sl, r0
 800aeec:	f7f5 fb1a 	bl	8000524 <__aeabi_i2d>
 800aef0:	4642      	mov	r2, r8
 800aef2:	464b      	mov	r3, r9
 800aef4:	f7f5 fb80 	bl	80005f8 <__aeabi_dmul>
 800aef8:	4602      	mov	r2, r0
 800aefa:	460b      	mov	r3, r1
 800aefc:	4630      	mov	r0, r6
 800aefe:	4639      	mov	r1, r7
 800af00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800af04:	f7f5 f9c0 	bl	8000288 <__aeabi_dsub>
 800af08:	f805 6b01 	strb.w	r6, [r5], #1
 800af0c:	9e01      	ldr	r6, [sp, #4]
 800af0e:	9f03      	ldr	r7, [sp, #12]
 800af10:	1bae      	subs	r6, r5, r6
 800af12:	42b7      	cmp	r7, r6
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	d135      	bne.n	800af86 <_dtoa_r+0x6e6>
 800af1a:	f7f5 f9b7 	bl	800028c <__adddf3>
 800af1e:	4642      	mov	r2, r8
 800af20:	464b      	mov	r3, r9
 800af22:	4606      	mov	r6, r0
 800af24:	460f      	mov	r7, r1
 800af26:	f7f5 fdf7 	bl	8000b18 <__aeabi_dcmpgt>
 800af2a:	b9d0      	cbnz	r0, 800af62 <_dtoa_r+0x6c2>
 800af2c:	4642      	mov	r2, r8
 800af2e:	464b      	mov	r3, r9
 800af30:	4630      	mov	r0, r6
 800af32:	4639      	mov	r1, r7
 800af34:	f7f5 fdc8 	bl	8000ac8 <__aeabi_dcmpeq>
 800af38:	b110      	cbz	r0, 800af40 <_dtoa_r+0x6a0>
 800af3a:	f01a 0f01 	tst.w	sl, #1
 800af3e:	d110      	bne.n	800af62 <_dtoa_r+0x6c2>
 800af40:	4620      	mov	r0, r4
 800af42:	ee18 1a10 	vmov	r1, s16
 800af46:	f000 fae5 	bl	800b514 <_Bfree>
 800af4a:	2300      	movs	r3, #0
 800af4c:	9800      	ldr	r0, [sp, #0]
 800af4e:	702b      	strb	r3, [r5, #0]
 800af50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af52:	3001      	adds	r0, #1
 800af54:	6018      	str	r0, [r3, #0]
 800af56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f43f acf1 	beq.w	800a940 <_dtoa_r+0xa0>
 800af5e:	601d      	str	r5, [r3, #0]
 800af60:	e4ee      	b.n	800a940 <_dtoa_r+0xa0>
 800af62:	9f00      	ldr	r7, [sp, #0]
 800af64:	462b      	mov	r3, r5
 800af66:	461d      	mov	r5, r3
 800af68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af6c:	2a39      	cmp	r2, #57	; 0x39
 800af6e:	d106      	bne.n	800af7e <_dtoa_r+0x6de>
 800af70:	9a01      	ldr	r2, [sp, #4]
 800af72:	429a      	cmp	r2, r3
 800af74:	d1f7      	bne.n	800af66 <_dtoa_r+0x6c6>
 800af76:	9901      	ldr	r1, [sp, #4]
 800af78:	2230      	movs	r2, #48	; 0x30
 800af7a:	3701      	adds	r7, #1
 800af7c:	700a      	strb	r2, [r1, #0]
 800af7e:	781a      	ldrb	r2, [r3, #0]
 800af80:	3201      	adds	r2, #1
 800af82:	701a      	strb	r2, [r3, #0]
 800af84:	e790      	b.n	800aea8 <_dtoa_r+0x608>
 800af86:	4ba6      	ldr	r3, [pc, #664]	; (800b220 <_dtoa_r+0x980>)
 800af88:	2200      	movs	r2, #0
 800af8a:	f7f5 fb35 	bl	80005f8 <__aeabi_dmul>
 800af8e:	2200      	movs	r2, #0
 800af90:	2300      	movs	r3, #0
 800af92:	4606      	mov	r6, r0
 800af94:	460f      	mov	r7, r1
 800af96:	f7f5 fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d09d      	beq.n	800aeda <_dtoa_r+0x63a>
 800af9e:	e7cf      	b.n	800af40 <_dtoa_r+0x6a0>
 800afa0:	9a08      	ldr	r2, [sp, #32]
 800afa2:	2a00      	cmp	r2, #0
 800afa4:	f000 80d7 	beq.w	800b156 <_dtoa_r+0x8b6>
 800afa8:	9a06      	ldr	r2, [sp, #24]
 800afaa:	2a01      	cmp	r2, #1
 800afac:	f300 80ba 	bgt.w	800b124 <_dtoa_r+0x884>
 800afb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afb2:	2a00      	cmp	r2, #0
 800afb4:	f000 80b2 	beq.w	800b11c <_dtoa_r+0x87c>
 800afb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afbc:	9e07      	ldr	r6, [sp, #28]
 800afbe:	9d04      	ldr	r5, [sp, #16]
 800afc0:	9a04      	ldr	r2, [sp, #16]
 800afc2:	441a      	add	r2, r3
 800afc4:	9204      	str	r2, [sp, #16]
 800afc6:	9a05      	ldr	r2, [sp, #20]
 800afc8:	2101      	movs	r1, #1
 800afca:	441a      	add	r2, r3
 800afcc:	4620      	mov	r0, r4
 800afce:	9205      	str	r2, [sp, #20]
 800afd0:	f000 fb58 	bl	800b684 <__i2b>
 800afd4:	4607      	mov	r7, r0
 800afd6:	2d00      	cmp	r5, #0
 800afd8:	dd0c      	ble.n	800aff4 <_dtoa_r+0x754>
 800afda:	9b05      	ldr	r3, [sp, #20]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	dd09      	ble.n	800aff4 <_dtoa_r+0x754>
 800afe0:	42ab      	cmp	r3, r5
 800afe2:	9a04      	ldr	r2, [sp, #16]
 800afe4:	bfa8      	it	ge
 800afe6:	462b      	movge	r3, r5
 800afe8:	1ad2      	subs	r2, r2, r3
 800afea:	9204      	str	r2, [sp, #16]
 800afec:	9a05      	ldr	r2, [sp, #20]
 800afee:	1aed      	subs	r5, r5, r3
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	9305      	str	r3, [sp, #20]
 800aff4:	9b07      	ldr	r3, [sp, #28]
 800aff6:	b31b      	cbz	r3, 800b040 <_dtoa_r+0x7a0>
 800aff8:	9b08      	ldr	r3, [sp, #32]
 800affa:	2b00      	cmp	r3, #0
 800affc:	f000 80af 	beq.w	800b15e <_dtoa_r+0x8be>
 800b000:	2e00      	cmp	r6, #0
 800b002:	dd13      	ble.n	800b02c <_dtoa_r+0x78c>
 800b004:	4639      	mov	r1, r7
 800b006:	4632      	mov	r2, r6
 800b008:	4620      	mov	r0, r4
 800b00a:	f000 fbfb 	bl	800b804 <__pow5mult>
 800b00e:	ee18 2a10 	vmov	r2, s16
 800b012:	4601      	mov	r1, r0
 800b014:	4607      	mov	r7, r0
 800b016:	4620      	mov	r0, r4
 800b018:	f000 fb4a 	bl	800b6b0 <__multiply>
 800b01c:	ee18 1a10 	vmov	r1, s16
 800b020:	4680      	mov	r8, r0
 800b022:	4620      	mov	r0, r4
 800b024:	f000 fa76 	bl	800b514 <_Bfree>
 800b028:	ee08 8a10 	vmov	s16, r8
 800b02c:	9b07      	ldr	r3, [sp, #28]
 800b02e:	1b9a      	subs	r2, r3, r6
 800b030:	d006      	beq.n	800b040 <_dtoa_r+0x7a0>
 800b032:	ee18 1a10 	vmov	r1, s16
 800b036:	4620      	mov	r0, r4
 800b038:	f000 fbe4 	bl	800b804 <__pow5mult>
 800b03c:	ee08 0a10 	vmov	s16, r0
 800b040:	2101      	movs	r1, #1
 800b042:	4620      	mov	r0, r4
 800b044:	f000 fb1e 	bl	800b684 <__i2b>
 800b048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	4606      	mov	r6, r0
 800b04e:	f340 8088 	ble.w	800b162 <_dtoa_r+0x8c2>
 800b052:	461a      	mov	r2, r3
 800b054:	4601      	mov	r1, r0
 800b056:	4620      	mov	r0, r4
 800b058:	f000 fbd4 	bl	800b804 <__pow5mult>
 800b05c:	9b06      	ldr	r3, [sp, #24]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	4606      	mov	r6, r0
 800b062:	f340 8081 	ble.w	800b168 <_dtoa_r+0x8c8>
 800b066:	f04f 0800 	mov.w	r8, #0
 800b06a:	6933      	ldr	r3, [r6, #16]
 800b06c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b070:	6918      	ldr	r0, [r3, #16]
 800b072:	f000 fab7 	bl	800b5e4 <__hi0bits>
 800b076:	f1c0 0020 	rsb	r0, r0, #32
 800b07a:	9b05      	ldr	r3, [sp, #20]
 800b07c:	4418      	add	r0, r3
 800b07e:	f010 001f 	ands.w	r0, r0, #31
 800b082:	f000 8092 	beq.w	800b1aa <_dtoa_r+0x90a>
 800b086:	f1c0 0320 	rsb	r3, r0, #32
 800b08a:	2b04      	cmp	r3, #4
 800b08c:	f340 808a 	ble.w	800b1a4 <_dtoa_r+0x904>
 800b090:	f1c0 001c 	rsb	r0, r0, #28
 800b094:	9b04      	ldr	r3, [sp, #16]
 800b096:	4403      	add	r3, r0
 800b098:	9304      	str	r3, [sp, #16]
 800b09a:	9b05      	ldr	r3, [sp, #20]
 800b09c:	4403      	add	r3, r0
 800b09e:	4405      	add	r5, r0
 800b0a0:	9305      	str	r3, [sp, #20]
 800b0a2:	9b04      	ldr	r3, [sp, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	dd07      	ble.n	800b0b8 <_dtoa_r+0x818>
 800b0a8:	ee18 1a10 	vmov	r1, s16
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 fc02 	bl	800b8b8 <__lshift>
 800b0b4:	ee08 0a10 	vmov	s16, r0
 800b0b8:	9b05      	ldr	r3, [sp, #20]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	dd05      	ble.n	800b0ca <_dtoa_r+0x82a>
 800b0be:	4631      	mov	r1, r6
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 fbf8 	bl	800b8b8 <__lshift>
 800b0c8:	4606      	mov	r6, r0
 800b0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d06e      	beq.n	800b1ae <_dtoa_r+0x90e>
 800b0d0:	ee18 0a10 	vmov	r0, s16
 800b0d4:	4631      	mov	r1, r6
 800b0d6:	f000 fc5f 	bl	800b998 <__mcmp>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	da67      	bge.n	800b1ae <_dtoa_r+0x90e>
 800b0de:	9b00      	ldr	r3, [sp, #0]
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	ee18 1a10 	vmov	r1, s16
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	220a      	movs	r2, #10
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f000 fa33 	bl	800b558 <__multadd>
 800b0f2:	9b08      	ldr	r3, [sp, #32]
 800b0f4:	ee08 0a10 	vmov	s16, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f000 81b1 	beq.w	800b460 <_dtoa_r+0xbc0>
 800b0fe:	2300      	movs	r3, #0
 800b100:	4639      	mov	r1, r7
 800b102:	220a      	movs	r2, #10
 800b104:	4620      	mov	r0, r4
 800b106:	f000 fa27 	bl	800b558 <__multadd>
 800b10a:	9b02      	ldr	r3, [sp, #8]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	4607      	mov	r7, r0
 800b110:	f300 808e 	bgt.w	800b230 <_dtoa_r+0x990>
 800b114:	9b06      	ldr	r3, [sp, #24]
 800b116:	2b02      	cmp	r3, #2
 800b118:	dc51      	bgt.n	800b1be <_dtoa_r+0x91e>
 800b11a:	e089      	b.n	800b230 <_dtoa_r+0x990>
 800b11c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b11e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b122:	e74b      	b.n	800afbc <_dtoa_r+0x71c>
 800b124:	9b03      	ldr	r3, [sp, #12]
 800b126:	1e5e      	subs	r6, r3, #1
 800b128:	9b07      	ldr	r3, [sp, #28]
 800b12a:	42b3      	cmp	r3, r6
 800b12c:	bfbf      	itttt	lt
 800b12e:	9b07      	ldrlt	r3, [sp, #28]
 800b130:	9607      	strlt	r6, [sp, #28]
 800b132:	1af2      	sublt	r2, r6, r3
 800b134:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b136:	bfb6      	itet	lt
 800b138:	189b      	addlt	r3, r3, r2
 800b13a:	1b9e      	subge	r6, r3, r6
 800b13c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b13e:	9b03      	ldr	r3, [sp, #12]
 800b140:	bfb8      	it	lt
 800b142:	2600      	movlt	r6, #0
 800b144:	2b00      	cmp	r3, #0
 800b146:	bfb7      	itett	lt
 800b148:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b14c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b150:	1a9d      	sublt	r5, r3, r2
 800b152:	2300      	movlt	r3, #0
 800b154:	e734      	b.n	800afc0 <_dtoa_r+0x720>
 800b156:	9e07      	ldr	r6, [sp, #28]
 800b158:	9d04      	ldr	r5, [sp, #16]
 800b15a:	9f08      	ldr	r7, [sp, #32]
 800b15c:	e73b      	b.n	800afd6 <_dtoa_r+0x736>
 800b15e:	9a07      	ldr	r2, [sp, #28]
 800b160:	e767      	b.n	800b032 <_dtoa_r+0x792>
 800b162:	9b06      	ldr	r3, [sp, #24]
 800b164:	2b01      	cmp	r3, #1
 800b166:	dc18      	bgt.n	800b19a <_dtoa_r+0x8fa>
 800b168:	f1ba 0f00 	cmp.w	sl, #0
 800b16c:	d115      	bne.n	800b19a <_dtoa_r+0x8fa>
 800b16e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b172:	b993      	cbnz	r3, 800b19a <_dtoa_r+0x8fa>
 800b174:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b178:	0d1b      	lsrs	r3, r3, #20
 800b17a:	051b      	lsls	r3, r3, #20
 800b17c:	b183      	cbz	r3, 800b1a0 <_dtoa_r+0x900>
 800b17e:	9b04      	ldr	r3, [sp, #16]
 800b180:	3301      	adds	r3, #1
 800b182:	9304      	str	r3, [sp, #16]
 800b184:	9b05      	ldr	r3, [sp, #20]
 800b186:	3301      	adds	r3, #1
 800b188:	9305      	str	r3, [sp, #20]
 800b18a:	f04f 0801 	mov.w	r8, #1
 800b18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b190:	2b00      	cmp	r3, #0
 800b192:	f47f af6a 	bne.w	800b06a <_dtoa_r+0x7ca>
 800b196:	2001      	movs	r0, #1
 800b198:	e76f      	b.n	800b07a <_dtoa_r+0x7da>
 800b19a:	f04f 0800 	mov.w	r8, #0
 800b19e:	e7f6      	b.n	800b18e <_dtoa_r+0x8ee>
 800b1a0:	4698      	mov	r8, r3
 800b1a2:	e7f4      	b.n	800b18e <_dtoa_r+0x8ee>
 800b1a4:	f43f af7d 	beq.w	800b0a2 <_dtoa_r+0x802>
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	301c      	adds	r0, #28
 800b1ac:	e772      	b.n	800b094 <_dtoa_r+0x7f4>
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	dc37      	bgt.n	800b224 <_dtoa_r+0x984>
 800b1b4:	9b06      	ldr	r3, [sp, #24]
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	dd34      	ble.n	800b224 <_dtoa_r+0x984>
 800b1ba:	9b03      	ldr	r3, [sp, #12]
 800b1bc:	9302      	str	r3, [sp, #8]
 800b1be:	9b02      	ldr	r3, [sp, #8]
 800b1c0:	b96b      	cbnz	r3, 800b1de <_dtoa_r+0x93e>
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	2205      	movs	r2, #5
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 f9c6 	bl	800b558 <__multadd>
 800b1cc:	4601      	mov	r1, r0
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	ee18 0a10 	vmov	r0, s16
 800b1d4:	f000 fbe0 	bl	800b998 <__mcmp>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	f73f adbb 	bgt.w	800ad54 <_dtoa_r+0x4b4>
 800b1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e0:	9d01      	ldr	r5, [sp, #4]
 800b1e2:	43db      	mvns	r3, r3
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	f04f 0800 	mov.w	r8, #0
 800b1ea:	4631      	mov	r1, r6
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f000 f991 	bl	800b514 <_Bfree>
 800b1f2:	2f00      	cmp	r7, #0
 800b1f4:	f43f aea4 	beq.w	800af40 <_dtoa_r+0x6a0>
 800b1f8:	f1b8 0f00 	cmp.w	r8, #0
 800b1fc:	d005      	beq.n	800b20a <_dtoa_r+0x96a>
 800b1fe:	45b8      	cmp	r8, r7
 800b200:	d003      	beq.n	800b20a <_dtoa_r+0x96a>
 800b202:	4641      	mov	r1, r8
 800b204:	4620      	mov	r0, r4
 800b206:	f000 f985 	bl	800b514 <_Bfree>
 800b20a:	4639      	mov	r1, r7
 800b20c:	4620      	mov	r0, r4
 800b20e:	f000 f981 	bl	800b514 <_Bfree>
 800b212:	e695      	b.n	800af40 <_dtoa_r+0x6a0>
 800b214:	2600      	movs	r6, #0
 800b216:	4637      	mov	r7, r6
 800b218:	e7e1      	b.n	800b1de <_dtoa_r+0x93e>
 800b21a:	9700      	str	r7, [sp, #0]
 800b21c:	4637      	mov	r7, r6
 800b21e:	e599      	b.n	800ad54 <_dtoa_r+0x4b4>
 800b220:	40240000 	.word	0x40240000
 800b224:	9b08      	ldr	r3, [sp, #32]
 800b226:	2b00      	cmp	r3, #0
 800b228:	f000 80ca 	beq.w	800b3c0 <_dtoa_r+0xb20>
 800b22c:	9b03      	ldr	r3, [sp, #12]
 800b22e:	9302      	str	r3, [sp, #8]
 800b230:	2d00      	cmp	r5, #0
 800b232:	dd05      	ble.n	800b240 <_dtoa_r+0x9a0>
 800b234:	4639      	mov	r1, r7
 800b236:	462a      	mov	r2, r5
 800b238:	4620      	mov	r0, r4
 800b23a:	f000 fb3d 	bl	800b8b8 <__lshift>
 800b23e:	4607      	mov	r7, r0
 800b240:	f1b8 0f00 	cmp.w	r8, #0
 800b244:	d05b      	beq.n	800b2fe <_dtoa_r+0xa5e>
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 f923 	bl	800b494 <_Balloc>
 800b24e:	4605      	mov	r5, r0
 800b250:	b928      	cbnz	r0, 800b25e <_dtoa_r+0x9be>
 800b252:	4b87      	ldr	r3, [pc, #540]	; (800b470 <_dtoa_r+0xbd0>)
 800b254:	4602      	mov	r2, r0
 800b256:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b25a:	f7ff bb3b 	b.w	800a8d4 <_dtoa_r+0x34>
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	3202      	adds	r2, #2
 800b262:	0092      	lsls	r2, r2, #2
 800b264:	f107 010c 	add.w	r1, r7, #12
 800b268:	300c      	adds	r0, #12
 800b26a:	f7fe fded 	bl	8009e48 <memcpy>
 800b26e:	2201      	movs	r2, #1
 800b270:	4629      	mov	r1, r5
 800b272:	4620      	mov	r0, r4
 800b274:	f000 fb20 	bl	800b8b8 <__lshift>
 800b278:	9b01      	ldr	r3, [sp, #4]
 800b27a:	f103 0901 	add.w	r9, r3, #1
 800b27e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b282:	4413      	add	r3, r2
 800b284:	9305      	str	r3, [sp, #20]
 800b286:	f00a 0301 	and.w	r3, sl, #1
 800b28a:	46b8      	mov	r8, r7
 800b28c:	9304      	str	r3, [sp, #16]
 800b28e:	4607      	mov	r7, r0
 800b290:	4631      	mov	r1, r6
 800b292:	ee18 0a10 	vmov	r0, s16
 800b296:	f7ff fa77 	bl	800a788 <quorem>
 800b29a:	4641      	mov	r1, r8
 800b29c:	9002      	str	r0, [sp, #8]
 800b29e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b2a2:	ee18 0a10 	vmov	r0, s16
 800b2a6:	f000 fb77 	bl	800b998 <__mcmp>
 800b2aa:	463a      	mov	r2, r7
 800b2ac:	9003      	str	r0, [sp, #12]
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 fb8d 	bl	800b9d0 <__mdiff>
 800b2b6:	68c2      	ldr	r2, [r0, #12]
 800b2b8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b2bc:	4605      	mov	r5, r0
 800b2be:	bb02      	cbnz	r2, 800b302 <_dtoa_r+0xa62>
 800b2c0:	4601      	mov	r1, r0
 800b2c2:	ee18 0a10 	vmov	r0, s16
 800b2c6:	f000 fb67 	bl	800b998 <__mcmp>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	9207      	str	r2, [sp, #28]
 800b2d2:	f000 f91f 	bl	800b514 <_Bfree>
 800b2d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b2da:	ea43 0102 	orr.w	r1, r3, r2
 800b2de:	9b04      	ldr	r3, [sp, #16]
 800b2e0:	430b      	orrs	r3, r1
 800b2e2:	464d      	mov	r5, r9
 800b2e4:	d10f      	bne.n	800b306 <_dtoa_r+0xa66>
 800b2e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b2ea:	d02a      	beq.n	800b342 <_dtoa_r+0xaa2>
 800b2ec:	9b03      	ldr	r3, [sp, #12]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	dd02      	ble.n	800b2f8 <_dtoa_r+0xa58>
 800b2f2:	9b02      	ldr	r3, [sp, #8]
 800b2f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b2f8:	f88b a000 	strb.w	sl, [fp]
 800b2fc:	e775      	b.n	800b1ea <_dtoa_r+0x94a>
 800b2fe:	4638      	mov	r0, r7
 800b300:	e7ba      	b.n	800b278 <_dtoa_r+0x9d8>
 800b302:	2201      	movs	r2, #1
 800b304:	e7e2      	b.n	800b2cc <_dtoa_r+0xa2c>
 800b306:	9b03      	ldr	r3, [sp, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	db04      	blt.n	800b316 <_dtoa_r+0xa76>
 800b30c:	9906      	ldr	r1, [sp, #24]
 800b30e:	430b      	orrs	r3, r1
 800b310:	9904      	ldr	r1, [sp, #16]
 800b312:	430b      	orrs	r3, r1
 800b314:	d122      	bne.n	800b35c <_dtoa_r+0xabc>
 800b316:	2a00      	cmp	r2, #0
 800b318:	ddee      	ble.n	800b2f8 <_dtoa_r+0xa58>
 800b31a:	ee18 1a10 	vmov	r1, s16
 800b31e:	2201      	movs	r2, #1
 800b320:	4620      	mov	r0, r4
 800b322:	f000 fac9 	bl	800b8b8 <__lshift>
 800b326:	4631      	mov	r1, r6
 800b328:	ee08 0a10 	vmov	s16, r0
 800b32c:	f000 fb34 	bl	800b998 <__mcmp>
 800b330:	2800      	cmp	r0, #0
 800b332:	dc03      	bgt.n	800b33c <_dtoa_r+0xa9c>
 800b334:	d1e0      	bne.n	800b2f8 <_dtoa_r+0xa58>
 800b336:	f01a 0f01 	tst.w	sl, #1
 800b33a:	d0dd      	beq.n	800b2f8 <_dtoa_r+0xa58>
 800b33c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b340:	d1d7      	bne.n	800b2f2 <_dtoa_r+0xa52>
 800b342:	2339      	movs	r3, #57	; 0x39
 800b344:	f88b 3000 	strb.w	r3, [fp]
 800b348:	462b      	mov	r3, r5
 800b34a:	461d      	mov	r5, r3
 800b34c:	3b01      	subs	r3, #1
 800b34e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b352:	2a39      	cmp	r2, #57	; 0x39
 800b354:	d071      	beq.n	800b43a <_dtoa_r+0xb9a>
 800b356:	3201      	adds	r2, #1
 800b358:	701a      	strb	r2, [r3, #0]
 800b35a:	e746      	b.n	800b1ea <_dtoa_r+0x94a>
 800b35c:	2a00      	cmp	r2, #0
 800b35e:	dd07      	ble.n	800b370 <_dtoa_r+0xad0>
 800b360:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b364:	d0ed      	beq.n	800b342 <_dtoa_r+0xaa2>
 800b366:	f10a 0301 	add.w	r3, sl, #1
 800b36a:	f88b 3000 	strb.w	r3, [fp]
 800b36e:	e73c      	b.n	800b1ea <_dtoa_r+0x94a>
 800b370:	9b05      	ldr	r3, [sp, #20]
 800b372:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b376:	4599      	cmp	r9, r3
 800b378:	d047      	beq.n	800b40a <_dtoa_r+0xb6a>
 800b37a:	ee18 1a10 	vmov	r1, s16
 800b37e:	2300      	movs	r3, #0
 800b380:	220a      	movs	r2, #10
 800b382:	4620      	mov	r0, r4
 800b384:	f000 f8e8 	bl	800b558 <__multadd>
 800b388:	45b8      	cmp	r8, r7
 800b38a:	ee08 0a10 	vmov	s16, r0
 800b38e:	f04f 0300 	mov.w	r3, #0
 800b392:	f04f 020a 	mov.w	r2, #10
 800b396:	4641      	mov	r1, r8
 800b398:	4620      	mov	r0, r4
 800b39a:	d106      	bne.n	800b3aa <_dtoa_r+0xb0a>
 800b39c:	f000 f8dc 	bl	800b558 <__multadd>
 800b3a0:	4680      	mov	r8, r0
 800b3a2:	4607      	mov	r7, r0
 800b3a4:	f109 0901 	add.w	r9, r9, #1
 800b3a8:	e772      	b.n	800b290 <_dtoa_r+0x9f0>
 800b3aa:	f000 f8d5 	bl	800b558 <__multadd>
 800b3ae:	4639      	mov	r1, r7
 800b3b0:	4680      	mov	r8, r0
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	220a      	movs	r2, #10
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f000 f8ce 	bl	800b558 <__multadd>
 800b3bc:	4607      	mov	r7, r0
 800b3be:	e7f1      	b.n	800b3a4 <_dtoa_r+0xb04>
 800b3c0:	9b03      	ldr	r3, [sp, #12]
 800b3c2:	9302      	str	r3, [sp, #8]
 800b3c4:	9d01      	ldr	r5, [sp, #4]
 800b3c6:	ee18 0a10 	vmov	r0, s16
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	f7ff f9dc 	bl	800a788 <quorem>
 800b3d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b3d4:	9b01      	ldr	r3, [sp, #4]
 800b3d6:	f805 ab01 	strb.w	sl, [r5], #1
 800b3da:	1aea      	subs	r2, r5, r3
 800b3dc:	9b02      	ldr	r3, [sp, #8]
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	dd09      	ble.n	800b3f6 <_dtoa_r+0xb56>
 800b3e2:	ee18 1a10 	vmov	r1, s16
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	220a      	movs	r2, #10
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f000 f8b4 	bl	800b558 <__multadd>
 800b3f0:	ee08 0a10 	vmov	s16, r0
 800b3f4:	e7e7      	b.n	800b3c6 <_dtoa_r+0xb26>
 800b3f6:	9b02      	ldr	r3, [sp, #8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	bfc8      	it	gt
 800b3fc:	461d      	movgt	r5, r3
 800b3fe:	9b01      	ldr	r3, [sp, #4]
 800b400:	bfd8      	it	le
 800b402:	2501      	movle	r5, #1
 800b404:	441d      	add	r5, r3
 800b406:	f04f 0800 	mov.w	r8, #0
 800b40a:	ee18 1a10 	vmov	r1, s16
 800b40e:	2201      	movs	r2, #1
 800b410:	4620      	mov	r0, r4
 800b412:	f000 fa51 	bl	800b8b8 <__lshift>
 800b416:	4631      	mov	r1, r6
 800b418:	ee08 0a10 	vmov	s16, r0
 800b41c:	f000 fabc 	bl	800b998 <__mcmp>
 800b420:	2800      	cmp	r0, #0
 800b422:	dc91      	bgt.n	800b348 <_dtoa_r+0xaa8>
 800b424:	d102      	bne.n	800b42c <_dtoa_r+0xb8c>
 800b426:	f01a 0f01 	tst.w	sl, #1
 800b42a:	d18d      	bne.n	800b348 <_dtoa_r+0xaa8>
 800b42c:	462b      	mov	r3, r5
 800b42e:	461d      	mov	r5, r3
 800b430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b434:	2a30      	cmp	r2, #48	; 0x30
 800b436:	d0fa      	beq.n	800b42e <_dtoa_r+0xb8e>
 800b438:	e6d7      	b.n	800b1ea <_dtoa_r+0x94a>
 800b43a:	9a01      	ldr	r2, [sp, #4]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d184      	bne.n	800b34a <_dtoa_r+0xaaa>
 800b440:	9b00      	ldr	r3, [sp, #0]
 800b442:	3301      	adds	r3, #1
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	2331      	movs	r3, #49	; 0x31
 800b448:	7013      	strb	r3, [r2, #0]
 800b44a:	e6ce      	b.n	800b1ea <_dtoa_r+0x94a>
 800b44c:	4b09      	ldr	r3, [pc, #36]	; (800b474 <_dtoa_r+0xbd4>)
 800b44e:	f7ff ba95 	b.w	800a97c <_dtoa_r+0xdc>
 800b452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b454:	2b00      	cmp	r3, #0
 800b456:	f47f aa6e 	bne.w	800a936 <_dtoa_r+0x96>
 800b45a:	4b07      	ldr	r3, [pc, #28]	; (800b478 <_dtoa_r+0xbd8>)
 800b45c:	f7ff ba8e 	b.w	800a97c <_dtoa_r+0xdc>
 800b460:	9b02      	ldr	r3, [sp, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	dcae      	bgt.n	800b3c4 <_dtoa_r+0xb24>
 800b466:	9b06      	ldr	r3, [sp, #24]
 800b468:	2b02      	cmp	r3, #2
 800b46a:	f73f aea8 	bgt.w	800b1be <_dtoa_r+0x91e>
 800b46e:	e7a9      	b.n	800b3c4 <_dtoa_r+0xb24>
 800b470:	0800db9f 	.word	0x0800db9f
 800b474:	0800dafc 	.word	0x0800dafc
 800b478:	0800db20 	.word	0x0800db20

0800b47c <_localeconv_r>:
 800b47c:	4800      	ldr	r0, [pc, #0]	; (800b480 <_localeconv_r+0x4>)
 800b47e:	4770      	bx	lr
 800b480:	200001b4 	.word	0x200001b4

0800b484 <malloc>:
 800b484:	4b02      	ldr	r3, [pc, #8]	; (800b490 <malloc+0xc>)
 800b486:	4601      	mov	r1, r0
 800b488:	6818      	ldr	r0, [r3, #0]
 800b48a:	f000 bc09 	b.w	800bca0 <_malloc_r>
 800b48e:	bf00      	nop
 800b490:	20000060 	.word	0x20000060

0800b494 <_Balloc>:
 800b494:	b570      	push	{r4, r5, r6, lr}
 800b496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b498:	4604      	mov	r4, r0
 800b49a:	460d      	mov	r5, r1
 800b49c:	b976      	cbnz	r6, 800b4bc <_Balloc+0x28>
 800b49e:	2010      	movs	r0, #16
 800b4a0:	f7ff fff0 	bl	800b484 <malloc>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	6260      	str	r0, [r4, #36]	; 0x24
 800b4a8:	b920      	cbnz	r0, 800b4b4 <_Balloc+0x20>
 800b4aa:	4b18      	ldr	r3, [pc, #96]	; (800b50c <_Balloc+0x78>)
 800b4ac:	4818      	ldr	r0, [pc, #96]	; (800b510 <_Balloc+0x7c>)
 800b4ae:	2166      	movs	r1, #102	; 0x66
 800b4b0:	f000 fdd6 	bl	800c060 <__assert_func>
 800b4b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4b8:	6006      	str	r6, [r0, #0]
 800b4ba:	60c6      	str	r6, [r0, #12]
 800b4bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b4be:	68f3      	ldr	r3, [r6, #12]
 800b4c0:	b183      	cbz	r3, 800b4e4 <_Balloc+0x50>
 800b4c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4ca:	b9b8      	cbnz	r0, 800b4fc <_Balloc+0x68>
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	fa01 f605 	lsl.w	r6, r1, r5
 800b4d2:	1d72      	adds	r2, r6, #5
 800b4d4:	0092      	lsls	r2, r2, #2
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f000 fb60 	bl	800bb9c <_calloc_r>
 800b4dc:	b160      	cbz	r0, 800b4f8 <_Balloc+0x64>
 800b4de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4e2:	e00e      	b.n	800b502 <_Balloc+0x6e>
 800b4e4:	2221      	movs	r2, #33	; 0x21
 800b4e6:	2104      	movs	r1, #4
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f000 fb57 	bl	800bb9c <_calloc_r>
 800b4ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4f0:	60f0      	str	r0, [r6, #12]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1e4      	bne.n	800b4c2 <_Balloc+0x2e>
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}
 800b4fc:	6802      	ldr	r2, [r0, #0]
 800b4fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b502:	2300      	movs	r3, #0
 800b504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b508:	e7f7      	b.n	800b4fa <_Balloc+0x66>
 800b50a:	bf00      	nop
 800b50c:	0800db2d 	.word	0x0800db2d
 800b510:	0800dbb0 	.word	0x0800dbb0

0800b514 <_Bfree>:
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b518:	4605      	mov	r5, r0
 800b51a:	460c      	mov	r4, r1
 800b51c:	b976      	cbnz	r6, 800b53c <_Bfree+0x28>
 800b51e:	2010      	movs	r0, #16
 800b520:	f7ff ffb0 	bl	800b484 <malloc>
 800b524:	4602      	mov	r2, r0
 800b526:	6268      	str	r0, [r5, #36]	; 0x24
 800b528:	b920      	cbnz	r0, 800b534 <_Bfree+0x20>
 800b52a:	4b09      	ldr	r3, [pc, #36]	; (800b550 <_Bfree+0x3c>)
 800b52c:	4809      	ldr	r0, [pc, #36]	; (800b554 <_Bfree+0x40>)
 800b52e:	218a      	movs	r1, #138	; 0x8a
 800b530:	f000 fd96 	bl	800c060 <__assert_func>
 800b534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b538:	6006      	str	r6, [r0, #0]
 800b53a:	60c6      	str	r6, [r0, #12]
 800b53c:	b13c      	cbz	r4, 800b54e <_Bfree+0x3a>
 800b53e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b540:	6862      	ldr	r2, [r4, #4]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b548:	6021      	str	r1, [r4, #0]
 800b54a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b54e:	bd70      	pop	{r4, r5, r6, pc}
 800b550:	0800db2d 	.word	0x0800db2d
 800b554:	0800dbb0 	.word	0x0800dbb0

0800b558 <__multadd>:
 800b558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b55c:	690d      	ldr	r5, [r1, #16]
 800b55e:	4607      	mov	r7, r0
 800b560:	460c      	mov	r4, r1
 800b562:	461e      	mov	r6, r3
 800b564:	f101 0c14 	add.w	ip, r1, #20
 800b568:	2000      	movs	r0, #0
 800b56a:	f8dc 3000 	ldr.w	r3, [ip]
 800b56e:	b299      	uxth	r1, r3
 800b570:	fb02 6101 	mla	r1, r2, r1, r6
 800b574:	0c1e      	lsrs	r6, r3, #16
 800b576:	0c0b      	lsrs	r3, r1, #16
 800b578:	fb02 3306 	mla	r3, r2, r6, r3
 800b57c:	b289      	uxth	r1, r1
 800b57e:	3001      	adds	r0, #1
 800b580:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b584:	4285      	cmp	r5, r0
 800b586:	f84c 1b04 	str.w	r1, [ip], #4
 800b58a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b58e:	dcec      	bgt.n	800b56a <__multadd+0x12>
 800b590:	b30e      	cbz	r6, 800b5d6 <__multadd+0x7e>
 800b592:	68a3      	ldr	r3, [r4, #8]
 800b594:	42ab      	cmp	r3, r5
 800b596:	dc19      	bgt.n	800b5cc <__multadd+0x74>
 800b598:	6861      	ldr	r1, [r4, #4]
 800b59a:	4638      	mov	r0, r7
 800b59c:	3101      	adds	r1, #1
 800b59e:	f7ff ff79 	bl	800b494 <_Balloc>
 800b5a2:	4680      	mov	r8, r0
 800b5a4:	b928      	cbnz	r0, 800b5b2 <__multadd+0x5a>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	4b0c      	ldr	r3, [pc, #48]	; (800b5dc <__multadd+0x84>)
 800b5aa:	480d      	ldr	r0, [pc, #52]	; (800b5e0 <__multadd+0x88>)
 800b5ac:	21b5      	movs	r1, #181	; 0xb5
 800b5ae:	f000 fd57 	bl	800c060 <__assert_func>
 800b5b2:	6922      	ldr	r2, [r4, #16]
 800b5b4:	3202      	adds	r2, #2
 800b5b6:	f104 010c 	add.w	r1, r4, #12
 800b5ba:	0092      	lsls	r2, r2, #2
 800b5bc:	300c      	adds	r0, #12
 800b5be:	f7fe fc43 	bl	8009e48 <memcpy>
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	f7ff ffa5 	bl	800b514 <_Bfree>
 800b5ca:	4644      	mov	r4, r8
 800b5cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5d0:	3501      	adds	r5, #1
 800b5d2:	615e      	str	r6, [r3, #20]
 800b5d4:	6125      	str	r5, [r4, #16]
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5dc:	0800db9f 	.word	0x0800db9f
 800b5e0:	0800dbb0 	.word	0x0800dbb0

0800b5e4 <__hi0bits>:
 800b5e4:	0c03      	lsrs	r3, r0, #16
 800b5e6:	041b      	lsls	r3, r3, #16
 800b5e8:	b9d3      	cbnz	r3, 800b620 <__hi0bits+0x3c>
 800b5ea:	0400      	lsls	r0, r0, #16
 800b5ec:	2310      	movs	r3, #16
 800b5ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b5f2:	bf04      	itt	eq
 800b5f4:	0200      	lsleq	r0, r0, #8
 800b5f6:	3308      	addeq	r3, #8
 800b5f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b5fc:	bf04      	itt	eq
 800b5fe:	0100      	lsleq	r0, r0, #4
 800b600:	3304      	addeq	r3, #4
 800b602:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b606:	bf04      	itt	eq
 800b608:	0080      	lsleq	r0, r0, #2
 800b60a:	3302      	addeq	r3, #2
 800b60c:	2800      	cmp	r0, #0
 800b60e:	db05      	blt.n	800b61c <__hi0bits+0x38>
 800b610:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b614:	f103 0301 	add.w	r3, r3, #1
 800b618:	bf08      	it	eq
 800b61a:	2320      	moveq	r3, #32
 800b61c:	4618      	mov	r0, r3
 800b61e:	4770      	bx	lr
 800b620:	2300      	movs	r3, #0
 800b622:	e7e4      	b.n	800b5ee <__hi0bits+0xa>

0800b624 <__lo0bits>:
 800b624:	6803      	ldr	r3, [r0, #0]
 800b626:	f013 0207 	ands.w	r2, r3, #7
 800b62a:	4601      	mov	r1, r0
 800b62c:	d00b      	beq.n	800b646 <__lo0bits+0x22>
 800b62e:	07da      	lsls	r2, r3, #31
 800b630:	d423      	bmi.n	800b67a <__lo0bits+0x56>
 800b632:	0798      	lsls	r0, r3, #30
 800b634:	bf49      	itett	mi
 800b636:	085b      	lsrmi	r3, r3, #1
 800b638:	089b      	lsrpl	r3, r3, #2
 800b63a:	2001      	movmi	r0, #1
 800b63c:	600b      	strmi	r3, [r1, #0]
 800b63e:	bf5c      	itt	pl
 800b640:	600b      	strpl	r3, [r1, #0]
 800b642:	2002      	movpl	r0, #2
 800b644:	4770      	bx	lr
 800b646:	b298      	uxth	r0, r3
 800b648:	b9a8      	cbnz	r0, 800b676 <__lo0bits+0x52>
 800b64a:	0c1b      	lsrs	r3, r3, #16
 800b64c:	2010      	movs	r0, #16
 800b64e:	b2da      	uxtb	r2, r3
 800b650:	b90a      	cbnz	r2, 800b656 <__lo0bits+0x32>
 800b652:	3008      	adds	r0, #8
 800b654:	0a1b      	lsrs	r3, r3, #8
 800b656:	071a      	lsls	r2, r3, #28
 800b658:	bf04      	itt	eq
 800b65a:	091b      	lsreq	r3, r3, #4
 800b65c:	3004      	addeq	r0, #4
 800b65e:	079a      	lsls	r2, r3, #30
 800b660:	bf04      	itt	eq
 800b662:	089b      	lsreq	r3, r3, #2
 800b664:	3002      	addeq	r0, #2
 800b666:	07da      	lsls	r2, r3, #31
 800b668:	d403      	bmi.n	800b672 <__lo0bits+0x4e>
 800b66a:	085b      	lsrs	r3, r3, #1
 800b66c:	f100 0001 	add.w	r0, r0, #1
 800b670:	d005      	beq.n	800b67e <__lo0bits+0x5a>
 800b672:	600b      	str	r3, [r1, #0]
 800b674:	4770      	bx	lr
 800b676:	4610      	mov	r0, r2
 800b678:	e7e9      	b.n	800b64e <__lo0bits+0x2a>
 800b67a:	2000      	movs	r0, #0
 800b67c:	4770      	bx	lr
 800b67e:	2020      	movs	r0, #32
 800b680:	4770      	bx	lr
	...

0800b684 <__i2b>:
 800b684:	b510      	push	{r4, lr}
 800b686:	460c      	mov	r4, r1
 800b688:	2101      	movs	r1, #1
 800b68a:	f7ff ff03 	bl	800b494 <_Balloc>
 800b68e:	4602      	mov	r2, r0
 800b690:	b928      	cbnz	r0, 800b69e <__i2b+0x1a>
 800b692:	4b05      	ldr	r3, [pc, #20]	; (800b6a8 <__i2b+0x24>)
 800b694:	4805      	ldr	r0, [pc, #20]	; (800b6ac <__i2b+0x28>)
 800b696:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b69a:	f000 fce1 	bl	800c060 <__assert_func>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	6144      	str	r4, [r0, #20]
 800b6a2:	6103      	str	r3, [r0, #16]
 800b6a4:	bd10      	pop	{r4, pc}
 800b6a6:	bf00      	nop
 800b6a8:	0800db9f 	.word	0x0800db9f
 800b6ac:	0800dbb0 	.word	0x0800dbb0

0800b6b0 <__multiply>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	4691      	mov	r9, r2
 800b6b6:	690a      	ldr	r2, [r1, #16]
 800b6b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	bfb8      	it	lt
 800b6c0:	460b      	movlt	r3, r1
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	bfbc      	itt	lt
 800b6c6:	464c      	movlt	r4, r9
 800b6c8:	4699      	movlt	r9, r3
 800b6ca:	6927      	ldr	r7, [r4, #16]
 800b6cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b6d0:	68a3      	ldr	r3, [r4, #8]
 800b6d2:	6861      	ldr	r1, [r4, #4]
 800b6d4:	eb07 060a 	add.w	r6, r7, sl
 800b6d8:	42b3      	cmp	r3, r6
 800b6da:	b085      	sub	sp, #20
 800b6dc:	bfb8      	it	lt
 800b6de:	3101      	addlt	r1, #1
 800b6e0:	f7ff fed8 	bl	800b494 <_Balloc>
 800b6e4:	b930      	cbnz	r0, 800b6f4 <__multiply+0x44>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	4b44      	ldr	r3, [pc, #272]	; (800b7fc <__multiply+0x14c>)
 800b6ea:	4845      	ldr	r0, [pc, #276]	; (800b800 <__multiply+0x150>)
 800b6ec:	f240 115d 	movw	r1, #349	; 0x15d
 800b6f0:	f000 fcb6 	bl	800c060 <__assert_func>
 800b6f4:	f100 0514 	add.w	r5, r0, #20
 800b6f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6fc:	462b      	mov	r3, r5
 800b6fe:	2200      	movs	r2, #0
 800b700:	4543      	cmp	r3, r8
 800b702:	d321      	bcc.n	800b748 <__multiply+0x98>
 800b704:	f104 0314 	add.w	r3, r4, #20
 800b708:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b70c:	f109 0314 	add.w	r3, r9, #20
 800b710:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b714:	9202      	str	r2, [sp, #8]
 800b716:	1b3a      	subs	r2, r7, r4
 800b718:	3a15      	subs	r2, #21
 800b71a:	f022 0203 	bic.w	r2, r2, #3
 800b71e:	3204      	adds	r2, #4
 800b720:	f104 0115 	add.w	r1, r4, #21
 800b724:	428f      	cmp	r7, r1
 800b726:	bf38      	it	cc
 800b728:	2204      	movcc	r2, #4
 800b72a:	9201      	str	r2, [sp, #4]
 800b72c:	9a02      	ldr	r2, [sp, #8]
 800b72e:	9303      	str	r3, [sp, #12]
 800b730:	429a      	cmp	r2, r3
 800b732:	d80c      	bhi.n	800b74e <__multiply+0x9e>
 800b734:	2e00      	cmp	r6, #0
 800b736:	dd03      	ble.n	800b740 <__multiply+0x90>
 800b738:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d05a      	beq.n	800b7f6 <__multiply+0x146>
 800b740:	6106      	str	r6, [r0, #16]
 800b742:	b005      	add	sp, #20
 800b744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b748:	f843 2b04 	str.w	r2, [r3], #4
 800b74c:	e7d8      	b.n	800b700 <__multiply+0x50>
 800b74e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b752:	f1ba 0f00 	cmp.w	sl, #0
 800b756:	d024      	beq.n	800b7a2 <__multiply+0xf2>
 800b758:	f104 0e14 	add.w	lr, r4, #20
 800b75c:	46a9      	mov	r9, r5
 800b75e:	f04f 0c00 	mov.w	ip, #0
 800b762:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b766:	f8d9 1000 	ldr.w	r1, [r9]
 800b76a:	fa1f fb82 	uxth.w	fp, r2
 800b76e:	b289      	uxth	r1, r1
 800b770:	fb0a 110b 	mla	r1, sl, fp, r1
 800b774:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b778:	f8d9 2000 	ldr.w	r2, [r9]
 800b77c:	4461      	add	r1, ip
 800b77e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b782:	fb0a c20b 	mla	r2, sl, fp, ip
 800b786:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b78a:	b289      	uxth	r1, r1
 800b78c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b790:	4577      	cmp	r7, lr
 800b792:	f849 1b04 	str.w	r1, [r9], #4
 800b796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b79a:	d8e2      	bhi.n	800b762 <__multiply+0xb2>
 800b79c:	9a01      	ldr	r2, [sp, #4]
 800b79e:	f845 c002 	str.w	ip, [r5, r2]
 800b7a2:	9a03      	ldr	r2, [sp, #12]
 800b7a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	f1b9 0f00 	cmp.w	r9, #0
 800b7ae:	d020      	beq.n	800b7f2 <__multiply+0x142>
 800b7b0:	6829      	ldr	r1, [r5, #0]
 800b7b2:	f104 0c14 	add.w	ip, r4, #20
 800b7b6:	46ae      	mov	lr, r5
 800b7b8:	f04f 0a00 	mov.w	sl, #0
 800b7bc:	f8bc b000 	ldrh.w	fp, [ip]
 800b7c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b7c4:	fb09 220b 	mla	r2, r9, fp, r2
 800b7c8:	4492      	add	sl, r2
 800b7ca:	b289      	uxth	r1, r1
 800b7cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b7d0:	f84e 1b04 	str.w	r1, [lr], #4
 800b7d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b7d8:	f8be 1000 	ldrh.w	r1, [lr]
 800b7dc:	0c12      	lsrs	r2, r2, #16
 800b7de:	fb09 1102 	mla	r1, r9, r2, r1
 800b7e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b7e6:	4567      	cmp	r7, ip
 800b7e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b7ec:	d8e6      	bhi.n	800b7bc <__multiply+0x10c>
 800b7ee:	9a01      	ldr	r2, [sp, #4]
 800b7f0:	50a9      	str	r1, [r5, r2]
 800b7f2:	3504      	adds	r5, #4
 800b7f4:	e79a      	b.n	800b72c <__multiply+0x7c>
 800b7f6:	3e01      	subs	r6, #1
 800b7f8:	e79c      	b.n	800b734 <__multiply+0x84>
 800b7fa:	bf00      	nop
 800b7fc:	0800db9f 	.word	0x0800db9f
 800b800:	0800dbb0 	.word	0x0800dbb0

0800b804 <__pow5mult>:
 800b804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b808:	4615      	mov	r5, r2
 800b80a:	f012 0203 	ands.w	r2, r2, #3
 800b80e:	4606      	mov	r6, r0
 800b810:	460f      	mov	r7, r1
 800b812:	d007      	beq.n	800b824 <__pow5mult+0x20>
 800b814:	4c25      	ldr	r4, [pc, #148]	; (800b8ac <__pow5mult+0xa8>)
 800b816:	3a01      	subs	r2, #1
 800b818:	2300      	movs	r3, #0
 800b81a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b81e:	f7ff fe9b 	bl	800b558 <__multadd>
 800b822:	4607      	mov	r7, r0
 800b824:	10ad      	asrs	r5, r5, #2
 800b826:	d03d      	beq.n	800b8a4 <__pow5mult+0xa0>
 800b828:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b82a:	b97c      	cbnz	r4, 800b84c <__pow5mult+0x48>
 800b82c:	2010      	movs	r0, #16
 800b82e:	f7ff fe29 	bl	800b484 <malloc>
 800b832:	4602      	mov	r2, r0
 800b834:	6270      	str	r0, [r6, #36]	; 0x24
 800b836:	b928      	cbnz	r0, 800b844 <__pow5mult+0x40>
 800b838:	4b1d      	ldr	r3, [pc, #116]	; (800b8b0 <__pow5mult+0xac>)
 800b83a:	481e      	ldr	r0, [pc, #120]	; (800b8b4 <__pow5mult+0xb0>)
 800b83c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b840:	f000 fc0e 	bl	800c060 <__assert_func>
 800b844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b848:	6004      	str	r4, [r0, #0]
 800b84a:	60c4      	str	r4, [r0, #12]
 800b84c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b854:	b94c      	cbnz	r4, 800b86a <__pow5mult+0x66>
 800b856:	f240 2171 	movw	r1, #625	; 0x271
 800b85a:	4630      	mov	r0, r6
 800b85c:	f7ff ff12 	bl	800b684 <__i2b>
 800b860:	2300      	movs	r3, #0
 800b862:	f8c8 0008 	str.w	r0, [r8, #8]
 800b866:	4604      	mov	r4, r0
 800b868:	6003      	str	r3, [r0, #0]
 800b86a:	f04f 0900 	mov.w	r9, #0
 800b86e:	07eb      	lsls	r3, r5, #31
 800b870:	d50a      	bpl.n	800b888 <__pow5mult+0x84>
 800b872:	4639      	mov	r1, r7
 800b874:	4622      	mov	r2, r4
 800b876:	4630      	mov	r0, r6
 800b878:	f7ff ff1a 	bl	800b6b0 <__multiply>
 800b87c:	4639      	mov	r1, r7
 800b87e:	4680      	mov	r8, r0
 800b880:	4630      	mov	r0, r6
 800b882:	f7ff fe47 	bl	800b514 <_Bfree>
 800b886:	4647      	mov	r7, r8
 800b888:	106d      	asrs	r5, r5, #1
 800b88a:	d00b      	beq.n	800b8a4 <__pow5mult+0xa0>
 800b88c:	6820      	ldr	r0, [r4, #0]
 800b88e:	b938      	cbnz	r0, 800b8a0 <__pow5mult+0x9c>
 800b890:	4622      	mov	r2, r4
 800b892:	4621      	mov	r1, r4
 800b894:	4630      	mov	r0, r6
 800b896:	f7ff ff0b 	bl	800b6b0 <__multiply>
 800b89a:	6020      	str	r0, [r4, #0]
 800b89c:	f8c0 9000 	str.w	r9, [r0]
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	e7e4      	b.n	800b86e <__pow5mult+0x6a>
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8aa:	bf00      	nop
 800b8ac:	0800dd00 	.word	0x0800dd00
 800b8b0:	0800db2d 	.word	0x0800db2d
 800b8b4:	0800dbb0 	.word	0x0800dbb0

0800b8b8 <__lshift>:
 800b8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8bc:	460c      	mov	r4, r1
 800b8be:	6849      	ldr	r1, [r1, #4]
 800b8c0:	6923      	ldr	r3, [r4, #16]
 800b8c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8c6:	68a3      	ldr	r3, [r4, #8]
 800b8c8:	4607      	mov	r7, r0
 800b8ca:	4691      	mov	r9, r2
 800b8cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8d0:	f108 0601 	add.w	r6, r8, #1
 800b8d4:	42b3      	cmp	r3, r6
 800b8d6:	db0b      	blt.n	800b8f0 <__lshift+0x38>
 800b8d8:	4638      	mov	r0, r7
 800b8da:	f7ff fddb 	bl	800b494 <_Balloc>
 800b8de:	4605      	mov	r5, r0
 800b8e0:	b948      	cbnz	r0, 800b8f6 <__lshift+0x3e>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	4b2a      	ldr	r3, [pc, #168]	; (800b990 <__lshift+0xd8>)
 800b8e6:	482b      	ldr	r0, [pc, #172]	; (800b994 <__lshift+0xdc>)
 800b8e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b8ec:	f000 fbb8 	bl	800c060 <__assert_func>
 800b8f0:	3101      	adds	r1, #1
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	e7ee      	b.n	800b8d4 <__lshift+0x1c>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f100 0114 	add.w	r1, r0, #20
 800b8fc:	f100 0210 	add.w	r2, r0, #16
 800b900:	4618      	mov	r0, r3
 800b902:	4553      	cmp	r3, sl
 800b904:	db37      	blt.n	800b976 <__lshift+0xbe>
 800b906:	6920      	ldr	r0, [r4, #16]
 800b908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b90c:	f104 0314 	add.w	r3, r4, #20
 800b910:	f019 091f 	ands.w	r9, r9, #31
 800b914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b918:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b91c:	d02f      	beq.n	800b97e <__lshift+0xc6>
 800b91e:	f1c9 0e20 	rsb	lr, r9, #32
 800b922:	468a      	mov	sl, r1
 800b924:	f04f 0c00 	mov.w	ip, #0
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	fa02 f209 	lsl.w	r2, r2, r9
 800b92e:	ea42 020c 	orr.w	r2, r2, ip
 800b932:	f84a 2b04 	str.w	r2, [sl], #4
 800b936:	f853 2b04 	ldr.w	r2, [r3], #4
 800b93a:	4298      	cmp	r0, r3
 800b93c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b940:	d8f2      	bhi.n	800b928 <__lshift+0x70>
 800b942:	1b03      	subs	r3, r0, r4
 800b944:	3b15      	subs	r3, #21
 800b946:	f023 0303 	bic.w	r3, r3, #3
 800b94a:	3304      	adds	r3, #4
 800b94c:	f104 0215 	add.w	r2, r4, #21
 800b950:	4290      	cmp	r0, r2
 800b952:	bf38      	it	cc
 800b954:	2304      	movcc	r3, #4
 800b956:	f841 c003 	str.w	ip, [r1, r3]
 800b95a:	f1bc 0f00 	cmp.w	ip, #0
 800b95e:	d001      	beq.n	800b964 <__lshift+0xac>
 800b960:	f108 0602 	add.w	r6, r8, #2
 800b964:	3e01      	subs	r6, #1
 800b966:	4638      	mov	r0, r7
 800b968:	612e      	str	r6, [r5, #16]
 800b96a:	4621      	mov	r1, r4
 800b96c:	f7ff fdd2 	bl	800b514 <_Bfree>
 800b970:	4628      	mov	r0, r5
 800b972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b976:	f842 0f04 	str.w	r0, [r2, #4]!
 800b97a:	3301      	adds	r3, #1
 800b97c:	e7c1      	b.n	800b902 <__lshift+0x4a>
 800b97e:	3904      	subs	r1, #4
 800b980:	f853 2b04 	ldr.w	r2, [r3], #4
 800b984:	f841 2f04 	str.w	r2, [r1, #4]!
 800b988:	4298      	cmp	r0, r3
 800b98a:	d8f9      	bhi.n	800b980 <__lshift+0xc8>
 800b98c:	e7ea      	b.n	800b964 <__lshift+0xac>
 800b98e:	bf00      	nop
 800b990:	0800db9f 	.word	0x0800db9f
 800b994:	0800dbb0 	.word	0x0800dbb0

0800b998 <__mcmp>:
 800b998:	b530      	push	{r4, r5, lr}
 800b99a:	6902      	ldr	r2, [r0, #16]
 800b99c:	690c      	ldr	r4, [r1, #16]
 800b99e:	1b12      	subs	r2, r2, r4
 800b9a0:	d10e      	bne.n	800b9c0 <__mcmp+0x28>
 800b9a2:	f100 0314 	add.w	r3, r0, #20
 800b9a6:	3114      	adds	r1, #20
 800b9a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b9ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b9b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b9b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b9b8:	42a5      	cmp	r5, r4
 800b9ba:	d003      	beq.n	800b9c4 <__mcmp+0x2c>
 800b9bc:	d305      	bcc.n	800b9ca <__mcmp+0x32>
 800b9be:	2201      	movs	r2, #1
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	bd30      	pop	{r4, r5, pc}
 800b9c4:	4283      	cmp	r3, r0
 800b9c6:	d3f3      	bcc.n	800b9b0 <__mcmp+0x18>
 800b9c8:	e7fa      	b.n	800b9c0 <__mcmp+0x28>
 800b9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ce:	e7f7      	b.n	800b9c0 <__mcmp+0x28>

0800b9d0 <__mdiff>:
 800b9d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	4611      	mov	r1, r2
 800b9da:	4620      	mov	r0, r4
 800b9dc:	4690      	mov	r8, r2
 800b9de:	f7ff ffdb 	bl	800b998 <__mcmp>
 800b9e2:	1e05      	subs	r5, r0, #0
 800b9e4:	d110      	bne.n	800ba08 <__mdiff+0x38>
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f7ff fd53 	bl	800b494 <_Balloc>
 800b9ee:	b930      	cbnz	r0, 800b9fe <__mdiff+0x2e>
 800b9f0:	4b3a      	ldr	r3, [pc, #232]	; (800badc <__mdiff+0x10c>)
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	f240 2132 	movw	r1, #562	; 0x232
 800b9f8:	4839      	ldr	r0, [pc, #228]	; (800bae0 <__mdiff+0x110>)
 800b9fa:	f000 fb31 	bl	800c060 <__assert_func>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba08:	bfa4      	itt	ge
 800ba0a:	4643      	movge	r3, r8
 800ba0c:	46a0      	movge	r8, r4
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba14:	bfa6      	itte	ge
 800ba16:	461c      	movge	r4, r3
 800ba18:	2500      	movge	r5, #0
 800ba1a:	2501      	movlt	r5, #1
 800ba1c:	f7ff fd3a 	bl	800b494 <_Balloc>
 800ba20:	b920      	cbnz	r0, 800ba2c <__mdiff+0x5c>
 800ba22:	4b2e      	ldr	r3, [pc, #184]	; (800badc <__mdiff+0x10c>)
 800ba24:	4602      	mov	r2, r0
 800ba26:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ba2a:	e7e5      	b.n	800b9f8 <__mdiff+0x28>
 800ba2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ba30:	6926      	ldr	r6, [r4, #16]
 800ba32:	60c5      	str	r5, [r0, #12]
 800ba34:	f104 0914 	add.w	r9, r4, #20
 800ba38:	f108 0514 	add.w	r5, r8, #20
 800ba3c:	f100 0e14 	add.w	lr, r0, #20
 800ba40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ba44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ba48:	f108 0210 	add.w	r2, r8, #16
 800ba4c:	46f2      	mov	sl, lr
 800ba4e:	2100      	movs	r1, #0
 800ba50:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ba58:	fa1f f883 	uxth.w	r8, r3
 800ba5c:	fa11 f18b 	uxtah	r1, r1, fp
 800ba60:	0c1b      	lsrs	r3, r3, #16
 800ba62:	eba1 0808 	sub.w	r8, r1, r8
 800ba66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ba6e:	fa1f f888 	uxth.w	r8, r8
 800ba72:	1419      	asrs	r1, r3, #16
 800ba74:	454e      	cmp	r6, r9
 800ba76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ba7a:	f84a 3b04 	str.w	r3, [sl], #4
 800ba7e:	d8e7      	bhi.n	800ba50 <__mdiff+0x80>
 800ba80:	1b33      	subs	r3, r6, r4
 800ba82:	3b15      	subs	r3, #21
 800ba84:	f023 0303 	bic.w	r3, r3, #3
 800ba88:	3304      	adds	r3, #4
 800ba8a:	3415      	adds	r4, #21
 800ba8c:	42a6      	cmp	r6, r4
 800ba8e:	bf38      	it	cc
 800ba90:	2304      	movcc	r3, #4
 800ba92:	441d      	add	r5, r3
 800ba94:	4473      	add	r3, lr
 800ba96:	469e      	mov	lr, r3
 800ba98:	462e      	mov	r6, r5
 800ba9a:	4566      	cmp	r6, ip
 800ba9c:	d30e      	bcc.n	800babc <__mdiff+0xec>
 800ba9e:	f10c 0203 	add.w	r2, ip, #3
 800baa2:	1b52      	subs	r2, r2, r5
 800baa4:	f022 0203 	bic.w	r2, r2, #3
 800baa8:	3d03      	subs	r5, #3
 800baaa:	45ac      	cmp	ip, r5
 800baac:	bf38      	it	cc
 800baae:	2200      	movcc	r2, #0
 800bab0:	441a      	add	r2, r3
 800bab2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bab6:	b17b      	cbz	r3, 800bad8 <__mdiff+0x108>
 800bab8:	6107      	str	r7, [r0, #16]
 800baba:	e7a3      	b.n	800ba04 <__mdiff+0x34>
 800babc:	f856 8b04 	ldr.w	r8, [r6], #4
 800bac0:	fa11 f288 	uxtah	r2, r1, r8
 800bac4:	1414      	asrs	r4, r2, #16
 800bac6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800baca:	b292      	uxth	r2, r2
 800bacc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bad0:	f84e 2b04 	str.w	r2, [lr], #4
 800bad4:	1421      	asrs	r1, r4, #16
 800bad6:	e7e0      	b.n	800ba9a <__mdiff+0xca>
 800bad8:	3f01      	subs	r7, #1
 800bada:	e7ea      	b.n	800bab2 <__mdiff+0xe2>
 800badc:	0800db9f 	.word	0x0800db9f
 800bae0:	0800dbb0 	.word	0x0800dbb0

0800bae4 <__d2b>:
 800bae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bae8:	4689      	mov	r9, r1
 800baea:	2101      	movs	r1, #1
 800baec:	ec57 6b10 	vmov	r6, r7, d0
 800baf0:	4690      	mov	r8, r2
 800baf2:	f7ff fccf 	bl	800b494 <_Balloc>
 800baf6:	4604      	mov	r4, r0
 800baf8:	b930      	cbnz	r0, 800bb08 <__d2b+0x24>
 800bafa:	4602      	mov	r2, r0
 800bafc:	4b25      	ldr	r3, [pc, #148]	; (800bb94 <__d2b+0xb0>)
 800bafe:	4826      	ldr	r0, [pc, #152]	; (800bb98 <__d2b+0xb4>)
 800bb00:	f240 310a 	movw	r1, #778	; 0x30a
 800bb04:	f000 faac 	bl	800c060 <__assert_func>
 800bb08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bb0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb10:	bb35      	cbnz	r5, 800bb60 <__d2b+0x7c>
 800bb12:	2e00      	cmp	r6, #0
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	d028      	beq.n	800bb6a <__d2b+0x86>
 800bb18:	4668      	mov	r0, sp
 800bb1a:	9600      	str	r6, [sp, #0]
 800bb1c:	f7ff fd82 	bl	800b624 <__lo0bits>
 800bb20:	9900      	ldr	r1, [sp, #0]
 800bb22:	b300      	cbz	r0, 800bb66 <__d2b+0x82>
 800bb24:	9a01      	ldr	r2, [sp, #4]
 800bb26:	f1c0 0320 	rsb	r3, r0, #32
 800bb2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb2e:	430b      	orrs	r3, r1
 800bb30:	40c2      	lsrs	r2, r0
 800bb32:	6163      	str	r3, [r4, #20]
 800bb34:	9201      	str	r2, [sp, #4]
 800bb36:	9b01      	ldr	r3, [sp, #4]
 800bb38:	61a3      	str	r3, [r4, #24]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	bf14      	ite	ne
 800bb3e:	2202      	movne	r2, #2
 800bb40:	2201      	moveq	r2, #1
 800bb42:	6122      	str	r2, [r4, #16]
 800bb44:	b1d5      	cbz	r5, 800bb7c <__d2b+0x98>
 800bb46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb4a:	4405      	add	r5, r0
 800bb4c:	f8c9 5000 	str.w	r5, [r9]
 800bb50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb54:	f8c8 0000 	str.w	r0, [r8]
 800bb58:	4620      	mov	r0, r4
 800bb5a:	b003      	add	sp, #12
 800bb5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb64:	e7d5      	b.n	800bb12 <__d2b+0x2e>
 800bb66:	6161      	str	r1, [r4, #20]
 800bb68:	e7e5      	b.n	800bb36 <__d2b+0x52>
 800bb6a:	a801      	add	r0, sp, #4
 800bb6c:	f7ff fd5a 	bl	800b624 <__lo0bits>
 800bb70:	9b01      	ldr	r3, [sp, #4]
 800bb72:	6163      	str	r3, [r4, #20]
 800bb74:	2201      	movs	r2, #1
 800bb76:	6122      	str	r2, [r4, #16]
 800bb78:	3020      	adds	r0, #32
 800bb7a:	e7e3      	b.n	800bb44 <__d2b+0x60>
 800bb7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb84:	f8c9 0000 	str.w	r0, [r9]
 800bb88:	6918      	ldr	r0, [r3, #16]
 800bb8a:	f7ff fd2b 	bl	800b5e4 <__hi0bits>
 800bb8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb92:	e7df      	b.n	800bb54 <__d2b+0x70>
 800bb94:	0800db9f 	.word	0x0800db9f
 800bb98:	0800dbb0 	.word	0x0800dbb0

0800bb9c <_calloc_r>:
 800bb9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb9e:	fba1 2402 	umull	r2, r4, r1, r2
 800bba2:	b94c      	cbnz	r4, 800bbb8 <_calloc_r+0x1c>
 800bba4:	4611      	mov	r1, r2
 800bba6:	9201      	str	r2, [sp, #4]
 800bba8:	f000 f87a 	bl	800bca0 <_malloc_r>
 800bbac:	9a01      	ldr	r2, [sp, #4]
 800bbae:	4605      	mov	r5, r0
 800bbb0:	b930      	cbnz	r0, 800bbc0 <_calloc_r+0x24>
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	b003      	add	sp, #12
 800bbb6:	bd30      	pop	{r4, r5, pc}
 800bbb8:	220c      	movs	r2, #12
 800bbba:	6002      	str	r2, [r0, #0]
 800bbbc:	2500      	movs	r5, #0
 800bbbe:	e7f8      	b.n	800bbb2 <_calloc_r+0x16>
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	f7fe f94f 	bl	8009e64 <memset>
 800bbc6:	e7f4      	b.n	800bbb2 <_calloc_r+0x16>

0800bbc8 <_free_r>:
 800bbc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbca:	2900      	cmp	r1, #0
 800bbcc:	d044      	beq.n	800bc58 <_free_r+0x90>
 800bbce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbd2:	9001      	str	r0, [sp, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f1a1 0404 	sub.w	r4, r1, #4
 800bbda:	bfb8      	it	lt
 800bbdc:	18e4      	addlt	r4, r4, r3
 800bbde:	f000 fa9b 	bl	800c118 <__malloc_lock>
 800bbe2:	4a1e      	ldr	r2, [pc, #120]	; (800bc5c <_free_r+0x94>)
 800bbe4:	9801      	ldr	r0, [sp, #4]
 800bbe6:	6813      	ldr	r3, [r2, #0]
 800bbe8:	b933      	cbnz	r3, 800bbf8 <_free_r+0x30>
 800bbea:	6063      	str	r3, [r4, #4]
 800bbec:	6014      	str	r4, [r2, #0]
 800bbee:	b003      	add	sp, #12
 800bbf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbf4:	f000 ba96 	b.w	800c124 <__malloc_unlock>
 800bbf8:	42a3      	cmp	r3, r4
 800bbfa:	d908      	bls.n	800bc0e <_free_r+0x46>
 800bbfc:	6825      	ldr	r5, [r4, #0]
 800bbfe:	1961      	adds	r1, r4, r5
 800bc00:	428b      	cmp	r3, r1
 800bc02:	bf01      	itttt	eq
 800bc04:	6819      	ldreq	r1, [r3, #0]
 800bc06:	685b      	ldreq	r3, [r3, #4]
 800bc08:	1949      	addeq	r1, r1, r5
 800bc0a:	6021      	streq	r1, [r4, #0]
 800bc0c:	e7ed      	b.n	800bbea <_free_r+0x22>
 800bc0e:	461a      	mov	r2, r3
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	b10b      	cbz	r3, 800bc18 <_free_r+0x50>
 800bc14:	42a3      	cmp	r3, r4
 800bc16:	d9fa      	bls.n	800bc0e <_free_r+0x46>
 800bc18:	6811      	ldr	r1, [r2, #0]
 800bc1a:	1855      	adds	r5, r2, r1
 800bc1c:	42a5      	cmp	r5, r4
 800bc1e:	d10b      	bne.n	800bc38 <_free_r+0x70>
 800bc20:	6824      	ldr	r4, [r4, #0]
 800bc22:	4421      	add	r1, r4
 800bc24:	1854      	adds	r4, r2, r1
 800bc26:	42a3      	cmp	r3, r4
 800bc28:	6011      	str	r1, [r2, #0]
 800bc2a:	d1e0      	bne.n	800bbee <_free_r+0x26>
 800bc2c:	681c      	ldr	r4, [r3, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	6053      	str	r3, [r2, #4]
 800bc32:	4421      	add	r1, r4
 800bc34:	6011      	str	r1, [r2, #0]
 800bc36:	e7da      	b.n	800bbee <_free_r+0x26>
 800bc38:	d902      	bls.n	800bc40 <_free_r+0x78>
 800bc3a:	230c      	movs	r3, #12
 800bc3c:	6003      	str	r3, [r0, #0]
 800bc3e:	e7d6      	b.n	800bbee <_free_r+0x26>
 800bc40:	6825      	ldr	r5, [r4, #0]
 800bc42:	1961      	adds	r1, r4, r5
 800bc44:	428b      	cmp	r3, r1
 800bc46:	bf04      	itt	eq
 800bc48:	6819      	ldreq	r1, [r3, #0]
 800bc4a:	685b      	ldreq	r3, [r3, #4]
 800bc4c:	6063      	str	r3, [r4, #4]
 800bc4e:	bf04      	itt	eq
 800bc50:	1949      	addeq	r1, r1, r5
 800bc52:	6021      	streq	r1, [r4, #0]
 800bc54:	6054      	str	r4, [r2, #4]
 800bc56:	e7ca      	b.n	800bbee <_free_r+0x26>
 800bc58:	b003      	add	sp, #12
 800bc5a:	bd30      	pop	{r4, r5, pc}
 800bc5c:	20000910 	.word	0x20000910

0800bc60 <sbrk_aligned>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	4e0e      	ldr	r6, [pc, #56]	; (800bc9c <sbrk_aligned+0x3c>)
 800bc64:	460c      	mov	r4, r1
 800bc66:	6831      	ldr	r1, [r6, #0]
 800bc68:	4605      	mov	r5, r0
 800bc6a:	b911      	cbnz	r1, 800bc72 <sbrk_aligned+0x12>
 800bc6c:	f000 f9e8 	bl	800c040 <_sbrk_r>
 800bc70:	6030      	str	r0, [r6, #0]
 800bc72:	4621      	mov	r1, r4
 800bc74:	4628      	mov	r0, r5
 800bc76:	f000 f9e3 	bl	800c040 <_sbrk_r>
 800bc7a:	1c43      	adds	r3, r0, #1
 800bc7c:	d00a      	beq.n	800bc94 <sbrk_aligned+0x34>
 800bc7e:	1cc4      	adds	r4, r0, #3
 800bc80:	f024 0403 	bic.w	r4, r4, #3
 800bc84:	42a0      	cmp	r0, r4
 800bc86:	d007      	beq.n	800bc98 <sbrk_aligned+0x38>
 800bc88:	1a21      	subs	r1, r4, r0
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f000 f9d8 	bl	800c040 <_sbrk_r>
 800bc90:	3001      	adds	r0, #1
 800bc92:	d101      	bne.n	800bc98 <sbrk_aligned+0x38>
 800bc94:	f04f 34ff 	mov.w	r4, #4294967295
 800bc98:	4620      	mov	r0, r4
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	20000914 	.word	0x20000914

0800bca0 <_malloc_r>:
 800bca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca4:	1ccd      	adds	r5, r1, #3
 800bca6:	f025 0503 	bic.w	r5, r5, #3
 800bcaa:	3508      	adds	r5, #8
 800bcac:	2d0c      	cmp	r5, #12
 800bcae:	bf38      	it	cc
 800bcb0:	250c      	movcc	r5, #12
 800bcb2:	2d00      	cmp	r5, #0
 800bcb4:	4607      	mov	r7, r0
 800bcb6:	db01      	blt.n	800bcbc <_malloc_r+0x1c>
 800bcb8:	42a9      	cmp	r1, r5
 800bcba:	d905      	bls.n	800bcc8 <_malloc_r+0x28>
 800bcbc:	230c      	movs	r3, #12
 800bcbe:	603b      	str	r3, [r7, #0]
 800bcc0:	2600      	movs	r6, #0
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc8:	4e2e      	ldr	r6, [pc, #184]	; (800bd84 <_malloc_r+0xe4>)
 800bcca:	f000 fa25 	bl	800c118 <__malloc_lock>
 800bcce:	6833      	ldr	r3, [r6, #0]
 800bcd0:	461c      	mov	r4, r3
 800bcd2:	bb34      	cbnz	r4, 800bd22 <_malloc_r+0x82>
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	4638      	mov	r0, r7
 800bcd8:	f7ff ffc2 	bl	800bc60 <sbrk_aligned>
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	4604      	mov	r4, r0
 800bce0:	d14d      	bne.n	800bd7e <_malloc_r+0xde>
 800bce2:	6834      	ldr	r4, [r6, #0]
 800bce4:	4626      	mov	r6, r4
 800bce6:	2e00      	cmp	r6, #0
 800bce8:	d140      	bne.n	800bd6c <_malloc_r+0xcc>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	4631      	mov	r1, r6
 800bcee:	4638      	mov	r0, r7
 800bcf0:	eb04 0803 	add.w	r8, r4, r3
 800bcf4:	f000 f9a4 	bl	800c040 <_sbrk_r>
 800bcf8:	4580      	cmp	r8, r0
 800bcfa:	d13a      	bne.n	800bd72 <_malloc_r+0xd2>
 800bcfc:	6821      	ldr	r1, [r4, #0]
 800bcfe:	3503      	adds	r5, #3
 800bd00:	1a6d      	subs	r5, r5, r1
 800bd02:	f025 0503 	bic.w	r5, r5, #3
 800bd06:	3508      	adds	r5, #8
 800bd08:	2d0c      	cmp	r5, #12
 800bd0a:	bf38      	it	cc
 800bd0c:	250c      	movcc	r5, #12
 800bd0e:	4629      	mov	r1, r5
 800bd10:	4638      	mov	r0, r7
 800bd12:	f7ff ffa5 	bl	800bc60 <sbrk_aligned>
 800bd16:	3001      	adds	r0, #1
 800bd18:	d02b      	beq.n	800bd72 <_malloc_r+0xd2>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	442b      	add	r3, r5
 800bd1e:	6023      	str	r3, [r4, #0]
 800bd20:	e00e      	b.n	800bd40 <_malloc_r+0xa0>
 800bd22:	6822      	ldr	r2, [r4, #0]
 800bd24:	1b52      	subs	r2, r2, r5
 800bd26:	d41e      	bmi.n	800bd66 <_malloc_r+0xc6>
 800bd28:	2a0b      	cmp	r2, #11
 800bd2a:	d916      	bls.n	800bd5a <_malloc_r+0xba>
 800bd2c:	1961      	adds	r1, r4, r5
 800bd2e:	42a3      	cmp	r3, r4
 800bd30:	6025      	str	r5, [r4, #0]
 800bd32:	bf18      	it	ne
 800bd34:	6059      	strne	r1, [r3, #4]
 800bd36:	6863      	ldr	r3, [r4, #4]
 800bd38:	bf08      	it	eq
 800bd3a:	6031      	streq	r1, [r6, #0]
 800bd3c:	5162      	str	r2, [r4, r5]
 800bd3e:	604b      	str	r3, [r1, #4]
 800bd40:	4638      	mov	r0, r7
 800bd42:	f104 060b 	add.w	r6, r4, #11
 800bd46:	f000 f9ed 	bl	800c124 <__malloc_unlock>
 800bd4a:	f026 0607 	bic.w	r6, r6, #7
 800bd4e:	1d23      	adds	r3, r4, #4
 800bd50:	1af2      	subs	r2, r6, r3
 800bd52:	d0b6      	beq.n	800bcc2 <_malloc_r+0x22>
 800bd54:	1b9b      	subs	r3, r3, r6
 800bd56:	50a3      	str	r3, [r4, r2]
 800bd58:	e7b3      	b.n	800bcc2 <_malloc_r+0x22>
 800bd5a:	6862      	ldr	r2, [r4, #4]
 800bd5c:	42a3      	cmp	r3, r4
 800bd5e:	bf0c      	ite	eq
 800bd60:	6032      	streq	r2, [r6, #0]
 800bd62:	605a      	strne	r2, [r3, #4]
 800bd64:	e7ec      	b.n	800bd40 <_malloc_r+0xa0>
 800bd66:	4623      	mov	r3, r4
 800bd68:	6864      	ldr	r4, [r4, #4]
 800bd6a:	e7b2      	b.n	800bcd2 <_malloc_r+0x32>
 800bd6c:	4634      	mov	r4, r6
 800bd6e:	6876      	ldr	r6, [r6, #4]
 800bd70:	e7b9      	b.n	800bce6 <_malloc_r+0x46>
 800bd72:	230c      	movs	r3, #12
 800bd74:	603b      	str	r3, [r7, #0]
 800bd76:	4638      	mov	r0, r7
 800bd78:	f000 f9d4 	bl	800c124 <__malloc_unlock>
 800bd7c:	e7a1      	b.n	800bcc2 <_malloc_r+0x22>
 800bd7e:	6025      	str	r5, [r4, #0]
 800bd80:	e7de      	b.n	800bd40 <_malloc_r+0xa0>
 800bd82:	bf00      	nop
 800bd84:	20000910 	.word	0x20000910

0800bd88 <__ssputs_r>:
 800bd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd8c:	688e      	ldr	r6, [r1, #8]
 800bd8e:	429e      	cmp	r6, r3
 800bd90:	4682      	mov	sl, r0
 800bd92:	460c      	mov	r4, r1
 800bd94:	4690      	mov	r8, r2
 800bd96:	461f      	mov	r7, r3
 800bd98:	d838      	bhi.n	800be0c <__ssputs_r+0x84>
 800bd9a:	898a      	ldrh	r2, [r1, #12]
 800bd9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bda0:	d032      	beq.n	800be08 <__ssputs_r+0x80>
 800bda2:	6825      	ldr	r5, [r4, #0]
 800bda4:	6909      	ldr	r1, [r1, #16]
 800bda6:	eba5 0901 	sub.w	r9, r5, r1
 800bdaa:	6965      	ldr	r5, [r4, #20]
 800bdac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	444b      	add	r3, r9
 800bdb8:	106d      	asrs	r5, r5, #1
 800bdba:	429d      	cmp	r5, r3
 800bdbc:	bf38      	it	cc
 800bdbe:	461d      	movcc	r5, r3
 800bdc0:	0553      	lsls	r3, r2, #21
 800bdc2:	d531      	bpl.n	800be28 <__ssputs_r+0xa0>
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	f7ff ff6b 	bl	800bca0 <_malloc_r>
 800bdca:	4606      	mov	r6, r0
 800bdcc:	b950      	cbnz	r0, 800bde4 <__ssputs_r+0x5c>
 800bdce:	230c      	movs	r3, #12
 800bdd0:	f8ca 3000 	str.w	r3, [sl]
 800bdd4:	89a3      	ldrh	r3, [r4, #12]
 800bdd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdda:	81a3      	strh	r3, [r4, #12]
 800bddc:	f04f 30ff 	mov.w	r0, #4294967295
 800bde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde4:	6921      	ldr	r1, [r4, #16]
 800bde6:	464a      	mov	r2, r9
 800bde8:	f7fe f82e 	bl	8009e48 <memcpy>
 800bdec:	89a3      	ldrh	r3, [r4, #12]
 800bdee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdf6:	81a3      	strh	r3, [r4, #12]
 800bdf8:	6126      	str	r6, [r4, #16]
 800bdfa:	6165      	str	r5, [r4, #20]
 800bdfc:	444e      	add	r6, r9
 800bdfe:	eba5 0509 	sub.w	r5, r5, r9
 800be02:	6026      	str	r6, [r4, #0]
 800be04:	60a5      	str	r5, [r4, #8]
 800be06:	463e      	mov	r6, r7
 800be08:	42be      	cmp	r6, r7
 800be0a:	d900      	bls.n	800be0e <__ssputs_r+0x86>
 800be0c:	463e      	mov	r6, r7
 800be0e:	6820      	ldr	r0, [r4, #0]
 800be10:	4632      	mov	r2, r6
 800be12:	4641      	mov	r1, r8
 800be14:	f000 f966 	bl	800c0e4 <memmove>
 800be18:	68a3      	ldr	r3, [r4, #8]
 800be1a:	1b9b      	subs	r3, r3, r6
 800be1c:	60a3      	str	r3, [r4, #8]
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	4433      	add	r3, r6
 800be22:	6023      	str	r3, [r4, #0]
 800be24:	2000      	movs	r0, #0
 800be26:	e7db      	b.n	800bde0 <__ssputs_r+0x58>
 800be28:	462a      	mov	r2, r5
 800be2a:	f000 f981 	bl	800c130 <_realloc_r>
 800be2e:	4606      	mov	r6, r0
 800be30:	2800      	cmp	r0, #0
 800be32:	d1e1      	bne.n	800bdf8 <__ssputs_r+0x70>
 800be34:	6921      	ldr	r1, [r4, #16]
 800be36:	4650      	mov	r0, sl
 800be38:	f7ff fec6 	bl	800bbc8 <_free_r>
 800be3c:	e7c7      	b.n	800bdce <__ssputs_r+0x46>
	...

0800be40 <_svfiprintf_r>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	4698      	mov	r8, r3
 800be46:	898b      	ldrh	r3, [r1, #12]
 800be48:	061b      	lsls	r3, r3, #24
 800be4a:	b09d      	sub	sp, #116	; 0x74
 800be4c:	4607      	mov	r7, r0
 800be4e:	460d      	mov	r5, r1
 800be50:	4614      	mov	r4, r2
 800be52:	d50e      	bpl.n	800be72 <_svfiprintf_r+0x32>
 800be54:	690b      	ldr	r3, [r1, #16]
 800be56:	b963      	cbnz	r3, 800be72 <_svfiprintf_r+0x32>
 800be58:	2140      	movs	r1, #64	; 0x40
 800be5a:	f7ff ff21 	bl	800bca0 <_malloc_r>
 800be5e:	6028      	str	r0, [r5, #0]
 800be60:	6128      	str	r0, [r5, #16]
 800be62:	b920      	cbnz	r0, 800be6e <_svfiprintf_r+0x2e>
 800be64:	230c      	movs	r3, #12
 800be66:	603b      	str	r3, [r7, #0]
 800be68:	f04f 30ff 	mov.w	r0, #4294967295
 800be6c:	e0d1      	b.n	800c012 <_svfiprintf_r+0x1d2>
 800be6e:	2340      	movs	r3, #64	; 0x40
 800be70:	616b      	str	r3, [r5, #20]
 800be72:	2300      	movs	r3, #0
 800be74:	9309      	str	r3, [sp, #36]	; 0x24
 800be76:	2320      	movs	r3, #32
 800be78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be80:	2330      	movs	r3, #48	; 0x30
 800be82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c02c <_svfiprintf_r+0x1ec>
 800be86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be8a:	f04f 0901 	mov.w	r9, #1
 800be8e:	4623      	mov	r3, r4
 800be90:	469a      	mov	sl, r3
 800be92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be96:	b10a      	cbz	r2, 800be9c <_svfiprintf_r+0x5c>
 800be98:	2a25      	cmp	r2, #37	; 0x25
 800be9a:	d1f9      	bne.n	800be90 <_svfiprintf_r+0x50>
 800be9c:	ebba 0b04 	subs.w	fp, sl, r4
 800bea0:	d00b      	beq.n	800beba <_svfiprintf_r+0x7a>
 800bea2:	465b      	mov	r3, fp
 800bea4:	4622      	mov	r2, r4
 800bea6:	4629      	mov	r1, r5
 800bea8:	4638      	mov	r0, r7
 800beaa:	f7ff ff6d 	bl	800bd88 <__ssputs_r>
 800beae:	3001      	adds	r0, #1
 800beb0:	f000 80aa 	beq.w	800c008 <_svfiprintf_r+0x1c8>
 800beb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beb6:	445a      	add	r2, fp
 800beb8:	9209      	str	r2, [sp, #36]	; 0x24
 800beba:	f89a 3000 	ldrb.w	r3, [sl]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f000 80a2 	beq.w	800c008 <_svfiprintf_r+0x1c8>
 800bec4:	2300      	movs	r3, #0
 800bec6:	f04f 32ff 	mov.w	r2, #4294967295
 800beca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bece:	f10a 0a01 	add.w	sl, sl, #1
 800bed2:	9304      	str	r3, [sp, #16]
 800bed4:	9307      	str	r3, [sp, #28]
 800bed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800beda:	931a      	str	r3, [sp, #104]	; 0x68
 800bedc:	4654      	mov	r4, sl
 800bede:	2205      	movs	r2, #5
 800bee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bee4:	4851      	ldr	r0, [pc, #324]	; (800c02c <_svfiprintf_r+0x1ec>)
 800bee6:	f7f4 f97b 	bl	80001e0 <memchr>
 800beea:	9a04      	ldr	r2, [sp, #16]
 800beec:	b9d8      	cbnz	r0, 800bf26 <_svfiprintf_r+0xe6>
 800beee:	06d0      	lsls	r0, r2, #27
 800bef0:	bf44      	itt	mi
 800bef2:	2320      	movmi	r3, #32
 800bef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bef8:	0711      	lsls	r1, r2, #28
 800befa:	bf44      	itt	mi
 800befc:	232b      	movmi	r3, #43	; 0x2b
 800befe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf02:	f89a 3000 	ldrb.w	r3, [sl]
 800bf06:	2b2a      	cmp	r3, #42	; 0x2a
 800bf08:	d015      	beq.n	800bf36 <_svfiprintf_r+0xf6>
 800bf0a:	9a07      	ldr	r2, [sp, #28]
 800bf0c:	4654      	mov	r4, sl
 800bf0e:	2000      	movs	r0, #0
 800bf10:	f04f 0c0a 	mov.w	ip, #10
 800bf14:	4621      	mov	r1, r4
 800bf16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf1a:	3b30      	subs	r3, #48	; 0x30
 800bf1c:	2b09      	cmp	r3, #9
 800bf1e:	d94e      	bls.n	800bfbe <_svfiprintf_r+0x17e>
 800bf20:	b1b0      	cbz	r0, 800bf50 <_svfiprintf_r+0x110>
 800bf22:	9207      	str	r2, [sp, #28]
 800bf24:	e014      	b.n	800bf50 <_svfiprintf_r+0x110>
 800bf26:	eba0 0308 	sub.w	r3, r0, r8
 800bf2a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	9304      	str	r3, [sp, #16]
 800bf32:	46a2      	mov	sl, r4
 800bf34:	e7d2      	b.n	800bedc <_svfiprintf_r+0x9c>
 800bf36:	9b03      	ldr	r3, [sp, #12]
 800bf38:	1d19      	adds	r1, r3, #4
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	9103      	str	r1, [sp, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	bfbb      	ittet	lt
 800bf42:	425b      	neglt	r3, r3
 800bf44:	f042 0202 	orrlt.w	r2, r2, #2
 800bf48:	9307      	strge	r3, [sp, #28]
 800bf4a:	9307      	strlt	r3, [sp, #28]
 800bf4c:	bfb8      	it	lt
 800bf4e:	9204      	strlt	r2, [sp, #16]
 800bf50:	7823      	ldrb	r3, [r4, #0]
 800bf52:	2b2e      	cmp	r3, #46	; 0x2e
 800bf54:	d10c      	bne.n	800bf70 <_svfiprintf_r+0x130>
 800bf56:	7863      	ldrb	r3, [r4, #1]
 800bf58:	2b2a      	cmp	r3, #42	; 0x2a
 800bf5a:	d135      	bne.n	800bfc8 <_svfiprintf_r+0x188>
 800bf5c:	9b03      	ldr	r3, [sp, #12]
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	9203      	str	r2, [sp, #12]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	bfb8      	it	lt
 800bf68:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf6c:	3402      	adds	r4, #2
 800bf6e:	9305      	str	r3, [sp, #20]
 800bf70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c03c <_svfiprintf_r+0x1fc>
 800bf74:	7821      	ldrb	r1, [r4, #0]
 800bf76:	2203      	movs	r2, #3
 800bf78:	4650      	mov	r0, sl
 800bf7a:	f7f4 f931 	bl	80001e0 <memchr>
 800bf7e:	b140      	cbz	r0, 800bf92 <_svfiprintf_r+0x152>
 800bf80:	2340      	movs	r3, #64	; 0x40
 800bf82:	eba0 000a 	sub.w	r0, r0, sl
 800bf86:	fa03 f000 	lsl.w	r0, r3, r0
 800bf8a:	9b04      	ldr	r3, [sp, #16]
 800bf8c:	4303      	orrs	r3, r0
 800bf8e:	3401      	adds	r4, #1
 800bf90:	9304      	str	r3, [sp, #16]
 800bf92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf96:	4826      	ldr	r0, [pc, #152]	; (800c030 <_svfiprintf_r+0x1f0>)
 800bf98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf9c:	2206      	movs	r2, #6
 800bf9e:	f7f4 f91f 	bl	80001e0 <memchr>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d038      	beq.n	800c018 <_svfiprintf_r+0x1d8>
 800bfa6:	4b23      	ldr	r3, [pc, #140]	; (800c034 <_svfiprintf_r+0x1f4>)
 800bfa8:	bb1b      	cbnz	r3, 800bff2 <_svfiprintf_r+0x1b2>
 800bfaa:	9b03      	ldr	r3, [sp, #12]
 800bfac:	3307      	adds	r3, #7
 800bfae:	f023 0307 	bic.w	r3, r3, #7
 800bfb2:	3308      	adds	r3, #8
 800bfb4:	9303      	str	r3, [sp, #12]
 800bfb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfb8:	4433      	add	r3, r6
 800bfba:	9309      	str	r3, [sp, #36]	; 0x24
 800bfbc:	e767      	b.n	800be8e <_svfiprintf_r+0x4e>
 800bfbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	e7a5      	b.n	800bf14 <_svfiprintf_r+0xd4>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	3401      	adds	r4, #1
 800bfcc:	9305      	str	r3, [sp, #20]
 800bfce:	4619      	mov	r1, r3
 800bfd0:	f04f 0c0a 	mov.w	ip, #10
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfda:	3a30      	subs	r2, #48	; 0x30
 800bfdc:	2a09      	cmp	r2, #9
 800bfde:	d903      	bls.n	800bfe8 <_svfiprintf_r+0x1a8>
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0c5      	beq.n	800bf70 <_svfiprintf_r+0x130>
 800bfe4:	9105      	str	r1, [sp, #20]
 800bfe6:	e7c3      	b.n	800bf70 <_svfiprintf_r+0x130>
 800bfe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfec:	4604      	mov	r4, r0
 800bfee:	2301      	movs	r3, #1
 800bff0:	e7f0      	b.n	800bfd4 <_svfiprintf_r+0x194>
 800bff2:	ab03      	add	r3, sp, #12
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	462a      	mov	r2, r5
 800bff8:	4b0f      	ldr	r3, [pc, #60]	; (800c038 <_svfiprintf_r+0x1f8>)
 800bffa:	a904      	add	r1, sp, #16
 800bffc:	4638      	mov	r0, r7
 800bffe:	f7fd ffd9 	bl	8009fb4 <_printf_float>
 800c002:	1c42      	adds	r2, r0, #1
 800c004:	4606      	mov	r6, r0
 800c006:	d1d6      	bne.n	800bfb6 <_svfiprintf_r+0x176>
 800c008:	89ab      	ldrh	r3, [r5, #12]
 800c00a:	065b      	lsls	r3, r3, #25
 800c00c:	f53f af2c 	bmi.w	800be68 <_svfiprintf_r+0x28>
 800c010:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c012:	b01d      	add	sp, #116	; 0x74
 800c014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c018:	ab03      	add	r3, sp, #12
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	462a      	mov	r2, r5
 800c01e:	4b06      	ldr	r3, [pc, #24]	; (800c038 <_svfiprintf_r+0x1f8>)
 800c020:	a904      	add	r1, sp, #16
 800c022:	4638      	mov	r0, r7
 800c024:	f7fe fa6a 	bl	800a4fc <_printf_i>
 800c028:	e7eb      	b.n	800c002 <_svfiprintf_r+0x1c2>
 800c02a:	bf00      	nop
 800c02c:	0800dd0c 	.word	0x0800dd0c
 800c030:	0800dd16 	.word	0x0800dd16
 800c034:	08009fb5 	.word	0x08009fb5
 800c038:	0800bd89 	.word	0x0800bd89
 800c03c:	0800dd12 	.word	0x0800dd12

0800c040 <_sbrk_r>:
 800c040:	b538      	push	{r3, r4, r5, lr}
 800c042:	4d06      	ldr	r5, [pc, #24]	; (800c05c <_sbrk_r+0x1c>)
 800c044:	2300      	movs	r3, #0
 800c046:	4604      	mov	r4, r0
 800c048:	4608      	mov	r0, r1
 800c04a:	602b      	str	r3, [r5, #0]
 800c04c:	f7f6 f836 	bl	80020bc <_sbrk>
 800c050:	1c43      	adds	r3, r0, #1
 800c052:	d102      	bne.n	800c05a <_sbrk_r+0x1a>
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	b103      	cbz	r3, 800c05a <_sbrk_r+0x1a>
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	20000918 	.word	0x20000918

0800c060 <__assert_func>:
 800c060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c062:	4614      	mov	r4, r2
 800c064:	461a      	mov	r2, r3
 800c066:	4b09      	ldr	r3, [pc, #36]	; (800c08c <__assert_func+0x2c>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4605      	mov	r5, r0
 800c06c:	68d8      	ldr	r0, [r3, #12]
 800c06e:	b14c      	cbz	r4, 800c084 <__assert_func+0x24>
 800c070:	4b07      	ldr	r3, [pc, #28]	; (800c090 <__assert_func+0x30>)
 800c072:	9100      	str	r1, [sp, #0]
 800c074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c078:	4906      	ldr	r1, [pc, #24]	; (800c094 <__assert_func+0x34>)
 800c07a:	462b      	mov	r3, r5
 800c07c:	f000 f80e 	bl	800c09c <fiprintf>
 800c080:	f000 faac 	bl	800c5dc <abort>
 800c084:	4b04      	ldr	r3, [pc, #16]	; (800c098 <__assert_func+0x38>)
 800c086:	461c      	mov	r4, r3
 800c088:	e7f3      	b.n	800c072 <__assert_func+0x12>
 800c08a:	bf00      	nop
 800c08c:	20000060 	.word	0x20000060
 800c090:	0800dd1d 	.word	0x0800dd1d
 800c094:	0800dd2a 	.word	0x0800dd2a
 800c098:	0800dd58 	.word	0x0800dd58

0800c09c <fiprintf>:
 800c09c:	b40e      	push	{r1, r2, r3}
 800c09e:	b503      	push	{r0, r1, lr}
 800c0a0:	4601      	mov	r1, r0
 800c0a2:	ab03      	add	r3, sp, #12
 800c0a4:	4805      	ldr	r0, [pc, #20]	; (800c0bc <fiprintf+0x20>)
 800c0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0aa:	6800      	ldr	r0, [r0, #0]
 800c0ac:	9301      	str	r3, [sp, #4]
 800c0ae:	f000 f897 	bl	800c1e0 <_vfiprintf_r>
 800c0b2:	b002      	add	sp, #8
 800c0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0b8:	b003      	add	sp, #12
 800c0ba:	4770      	bx	lr
 800c0bc:	20000060 	.word	0x20000060

0800c0c0 <__ascii_mbtowc>:
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	b901      	cbnz	r1, 800c0c6 <__ascii_mbtowc+0x6>
 800c0c4:	a901      	add	r1, sp, #4
 800c0c6:	b142      	cbz	r2, 800c0da <__ascii_mbtowc+0x1a>
 800c0c8:	b14b      	cbz	r3, 800c0de <__ascii_mbtowc+0x1e>
 800c0ca:	7813      	ldrb	r3, [r2, #0]
 800c0cc:	600b      	str	r3, [r1, #0]
 800c0ce:	7812      	ldrb	r2, [r2, #0]
 800c0d0:	1e10      	subs	r0, r2, #0
 800c0d2:	bf18      	it	ne
 800c0d4:	2001      	movne	r0, #1
 800c0d6:	b002      	add	sp, #8
 800c0d8:	4770      	bx	lr
 800c0da:	4610      	mov	r0, r2
 800c0dc:	e7fb      	b.n	800c0d6 <__ascii_mbtowc+0x16>
 800c0de:	f06f 0001 	mvn.w	r0, #1
 800c0e2:	e7f8      	b.n	800c0d6 <__ascii_mbtowc+0x16>

0800c0e4 <memmove>:
 800c0e4:	4288      	cmp	r0, r1
 800c0e6:	b510      	push	{r4, lr}
 800c0e8:	eb01 0402 	add.w	r4, r1, r2
 800c0ec:	d902      	bls.n	800c0f4 <memmove+0x10>
 800c0ee:	4284      	cmp	r4, r0
 800c0f0:	4623      	mov	r3, r4
 800c0f2:	d807      	bhi.n	800c104 <memmove+0x20>
 800c0f4:	1e43      	subs	r3, r0, #1
 800c0f6:	42a1      	cmp	r1, r4
 800c0f8:	d008      	beq.n	800c10c <memmove+0x28>
 800c0fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c102:	e7f8      	b.n	800c0f6 <memmove+0x12>
 800c104:	4402      	add	r2, r0
 800c106:	4601      	mov	r1, r0
 800c108:	428a      	cmp	r2, r1
 800c10a:	d100      	bne.n	800c10e <memmove+0x2a>
 800c10c:	bd10      	pop	{r4, pc}
 800c10e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c116:	e7f7      	b.n	800c108 <memmove+0x24>

0800c118 <__malloc_lock>:
 800c118:	4801      	ldr	r0, [pc, #4]	; (800c120 <__malloc_lock+0x8>)
 800c11a:	f000 bc1f 	b.w	800c95c <__retarget_lock_acquire_recursive>
 800c11e:	bf00      	nop
 800c120:	2000091c 	.word	0x2000091c

0800c124 <__malloc_unlock>:
 800c124:	4801      	ldr	r0, [pc, #4]	; (800c12c <__malloc_unlock+0x8>)
 800c126:	f000 bc1a 	b.w	800c95e <__retarget_lock_release_recursive>
 800c12a:	bf00      	nop
 800c12c:	2000091c 	.word	0x2000091c

0800c130 <_realloc_r>:
 800c130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c134:	4680      	mov	r8, r0
 800c136:	4614      	mov	r4, r2
 800c138:	460e      	mov	r6, r1
 800c13a:	b921      	cbnz	r1, 800c146 <_realloc_r+0x16>
 800c13c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c140:	4611      	mov	r1, r2
 800c142:	f7ff bdad 	b.w	800bca0 <_malloc_r>
 800c146:	b92a      	cbnz	r2, 800c154 <_realloc_r+0x24>
 800c148:	f7ff fd3e 	bl	800bbc8 <_free_r>
 800c14c:	4625      	mov	r5, r4
 800c14e:	4628      	mov	r0, r5
 800c150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c154:	f000 fc6a 	bl	800ca2c <_malloc_usable_size_r>
 800c158:	4284      	cmp	r4, r0
 800c15a:	4607      	mov	r7, r0
 800c15c:	d802      	bhi.n	800c164 <_realloc_r+0x34>
 800c15e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c162:	d812      	bhi.n	800c18a <_realloc_r+0x5a>
 800c164:	4621      	mov	r1, r4
 800c166:	4640      	mov	r0, r8
 800c168:	f7ff fd9a 	bl	800bca0 <_malloc_r>
 800c16c:	4605      	mov	r5, r0
 800c16e:	2800      	cmp	r0, #0
 800c170:	d0ed      	beq.n	800c14e <_realloc_r+0x1e>
 800c172:	42bc      	cmp	r4, r7
 800c174:	4622      	mov	r2, r4
 800c176:	4631      	mov	r1, r6
 800c178:	bf28      	it	cs
 800c17a:	463a      	movcs	r2, r7
 800c17c:	f7fd fe64 	bl	8009e48 <memcpy>
 800c180:	4631      	mov	r1, r6
 800c182:	4640      	mov	r0, r8
 800c184:	f7ff fd20 	bl	800bbc8 <_free_r>
 800c188:	e7e1      	b.n	800c14e <_realloc_r+0x1e>
 800c18a:	4635      	mov	r5, r6
 800c18c:	e7df      	b.n	800c14e <_realloc_r+0x1e>

0800c18e <__sfputc_r>:
 800c18e:	6893      	ldr	r3, [r2, #8]
 800c190:	3b01      	subs	r3, #1
 800c192:	2b00      	cmp	r3, #0
 800c194:	b410      	push	{r4}
 800c196:	6093      	str	r3, [r2, #8]
 800c198:	da08      	bge.n	800c1ac <__sfputc_r+0x1e>
 800c19a:	6994      	ldr	r4, [r2, #24]
 800c19c:	42a3      	cmp	r3, r4
 800c19e:	db01      	blt.n	800c1a4 <__sfputc_r+0x16>
 800c1a0:	290a      	cmp	r1, #10
 800c1a2:	d103      	bne.n	800c1ac <__sfputc_r+0x1e>
 800c1a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1a8:	f000 b94a 	b.w	800c440 <__swbuf_r>
 800c1ac:	6813      	ldr	r3, [r2, #0]
 800c1ae:	1c58      	adds	r0, r3, #1
 800c1b0:	6010      	str	r0, [r2, #0]
 800c1b2:	7019      	strb	r1, [r3, #0]
 800c1b4:	4608      	mov	r0, r1
 800c1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <__sfputs_r>:
 800c1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1be:	4606      	mov	r6, r0
 800c1c0:	460f      	mov	r7, r1
 800c1c2:	4614      	mov	r4, r2
 800c1c4:	18d5      	adds	r5, r2, r3
 800c1c6:	42ac      	cmp	r4, r5
 800c1c8:	d101      	bne.n	800c1ce <__sfputs_r+0x12>
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	e007      	b.n	800c1de <__sfputs_r+0x22>
 800c1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1d2:	463a      	mov	r2, r7
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f7ff ffda 	bl	800c18e <__sfputc_r>
 800c1da:	1c43      	adds	r3, r0, #1
 800c1dc:	d1f3      	bne.n	800c1c6 <__sfputs_r+0xa>
 800c1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1e0 <_vfiprintf_r>:
 800c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e4:	460d      	mov	r5, r1
 800c1e6:	b09d      	sub	sp, #116	; 0x74
 800c1e8:	4614      	mov	r4, r2
 800c1ea:	4698      	mov	r8, r3
 800c1ec:	4606      	mov	r6, r0
 800c1ee:	b118      	cbz	r0, 800c1f8 <_vfiprintf_r+0x18>
 800c1f0:	6983      	ldr	r3, [r0, #24]
 800c1f2:	b90b      	cbnz	r3, 800c1f8 <_vfiprintf_r+0x18>
 800c1f4:	f000 fb14 	bl	800c820 <__sinit>
 800c1f8:	4b89      	ldr	r3, [pc, #548]	; (800c420 <_vfiprintf_r+0x240>)
 800c1fa:	429d      	cmp	r5, r3
 800c1fc:	d11b      	bne.n	800c236 <_vfiprintf_r+0x56>
 800c1fe:	6875      	ldr	r5, [r6, #4]
 800c200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c202:	07d9      	lsls	r1, r3, #31
 800c204:	d405      	bmi.n	800c212 <_vfiprintf_r+0x32>
 800c206:	89ab      	ldrh	r3, [r5, #12]
 800c208:	059a      	lsls	r2, r3, #22
 800c20a:	d402      	bmi.n	800c212 <_vfiprintf_r+0x32>
 800c20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c20e:	f000 fba5 	bl	800c95c <__retarget_lock_acquire_recursive>
 800c212:	89ab      	ldrh	r3, [r5, #12]
 800c214:	071b      	lsls	r3, r3, #28
 800c216:	d501      	bpl.n	800c21c <_vfiprintf_r+0x3c>
 800c218:	692b      	ldr	r3, [r5, #16]
 800c21a:	b9eb      	cbnz	r3, 800c258 <_vfiprintf_r+0x78>
 800c21c:	4629      	mov	r1, r5
 800c21e:	4630      	mov	r0, r6
 800c220:	f000 f96e 	bl	800c500 <__swsetup_r>
 800c224:	b1c0      	cbz	r0, 800c258 <_vfiprintf_r+0x78>
 800c226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c228:	07dc      	lsls	r4, r3, #31
 800c22a:	d50e      	bpl.n	800c24a <_vfiprintf_r+0x6a>
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295
 800c230:	b01d      	add	sp, #116	; 0x74
 800c232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c236:	4b7b      	ldr	r3, [pc, #492]	; (800c424 <_vfiprintf_r+0x244>)
 800c238:	429d      	cmp	r5, r3
 800c23a:	d101      	bne.n	800c240 <_vfiprintf_r+0x60>
 800c23c:	68b5      	ldr	r5, [r6, #8]
 800c23e:	e7df      	b.n	800c200 <_vfiprintf_r+0x20>
 800c240:	4b79      	ldr	r3, [pc, #484]	; (800c428 <_vfiprintf_r+0x248>)
 800c242:	429d      	cmp	r5, r3
 800c244:	bf08      	it	eq
 800c246:	68f5      	ldreq	r5, [r6, #12]
 800c248:	e7da      	b.n	800c200 <_vfiprintf_r+0x20>
 800c24a:	89ab      	ldrh	r3, [r5, #12]
 800c24c:	0598      	lsls	r0, r3, #22
 800c24e:	d4ed      	bmi.n	800c22c <_vfiprintf_r+0x4c>
 800c250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c252:	f000 fb84 	bl	800c95e <__retarget_lock_release_recursive>
 800c256:	e7e9      	b.n	800c22c <_vfiprintf_r+0x4c>
 800c258:	2300      	movs	r3, #0
 800c25a:	9309      	str	r3, [sp, #36]	; 0x24
 800c25c:	2320      	movs	r3, #32
 800c25e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c262:	f8cd 800c 	str.w	r8, [sp, #12]
 800c266:	2330      	movs	r3, #48	; 0x30
 800c268:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c42c <_vfiprintf_r+0x24c>
 800c26c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c270:	f04f 0901 	mov.w	r9, #1
 800c274:	4623      	mov	r3, r4
 800c276:	469a      	mov	sl, r3
 800c278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c27c:	b10a      	cbz	r2, 800c282 <_vfiprintf_r+0xa2>
 800c27e:	2a25      	cmp	r2, #37	; 0x25
 800c280:	d1f9      	bne.n	800c276 <_vfiprintf_r+0x96>
 800c282:	ebba 0b04 	subs.w	fp, sl, r4
 800c286:	d00b      	beq.n	800c2a0 <_vfiprintf_r+0xc0>
 800c288:	465b      	mov	r3, fp
 800c28a:	4622      	mov	r2, r4
 800c28c:	4629      	mov	r1, r5
 800c28e:	4630      	mov	r0, r6
 800c290:	f7ff ff94 	bl	800c1bc <__sfputs_r>
 800c294:	3001      	adds	r0, #1
 800c296:	f000 80aa 	beq.w	800c3ee <_vfiprintf_r+0x20e>
 800c29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c29c:	445a      	add	r2, fp
 800c29e:	9209      	str	r2, [sp, #36]	; 0x24
 800c2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f000 80a2 	beq.w	800c3ee <_vfiprintf_r+0x20e>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2b4:	f10a 0a01 	add.w	sl, sl, #1
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	9307      	str	r3, [sp, #28]
 800c2bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2c0:	931a      	str	r3, [sp, #104]	; 0x68
 800c2c2:	4654      	mov	r4, sl
 800c2c4:	2205      	movs	r2, #5
 800c2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ca:	4858      	ldr	r0, [pc, #352]	; (800c42c <_vfiprintf_r+0x24c>)
 800c2cc:	f7f3 ff88 	bl	80001e0 <memchr>
 800c2d0:	9a04      	ldr	r2, [sp, #16]
 800c2d2:	b9d8      	cbnz	r0, 800c30c <_vfiprintf_r+0x12c>
 800c2d4:	06d1      	lsls	r1, r2, #27
 800c2d6:	bf44      	itt	mi
 800c2d8:	2320      	movmi	r3, #32
 800c2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2de:	0713      	lsls	r3, r2, #28
 800c2e0:	bf44      	itt	mi
 800c2e2:	232b      	movmi	r3, #43	; 0x2b
 800c2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ee:	d015      	beq.n	800c31c <_vfiprintf_r+0x13c>
 800c2f0:	9a07      	ldr	r2, [sp, #28]
 800c2f2:	4654      	mov	r4, sl
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	f04f 0c0a 	mov.w	ip, #10
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c300:	3b30      	subs	r3, #48	; 0x30
 800c302:	2b09      	cmp	r3, #9
 800c304:	d94e      	bls.n	800c3a4 <_vfiprintf_r+0x1c4>
 800c306:	b1b0      	cbz	r0, 800c336 <_vfiprintf_r+0x156>
 800c308:	9207      	str	r2, [sp, #28]
 800c30a:	e014      	b.n	800c336 <_vfiprintf_r+0x156>
 800c30c:	eba0 0308 	sub.w	r3, r0, r8
 800c310:	fa09 f303 	lsl.w	r3, r9, r3
 800c314:	4313      	orrs	r3, r2
 800c316:	9304      	str	r3, [sp, #16]
 800c318:	46a2      	mov	sl, r4
 800c31a:	e7d2      	b.n	800c2c2 <_vfiprintf_r+0xe2>
 800c31c:	9b03      	ldr	r3, [sp, #12]
 800c31e:	1d19      	adds	r1, r3, #4
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	9103      	str	r1, [sp, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	bfbb      	ittet	lt
 800c328:	425b      	neglt	r3, r3
 800c32a:	f042 0202 	orrlt.w	r2, r2, #2
 800c32e:	9307      	strge	r3, [sp, #28]
 800c330:	9307      	strlt	r3, [sp, #28]
 800c332:	bfb8      	it	lt
 800c334:	9204      	strlt	r2, [sp, #16]
 800c336:	7823      	ldrb	r3, [r4, #0]
 800c338:	2b2e      	cmp	r3, #46	; 0x2e
 800c33a:	d10c      	bne.n	800c356 <_vfiprintf_r+0x176>
 800c33c:	7863      	ldrb	r3, [r4, #1]
 800c33e:	2b2a      	cmp	r3, #42	; 0x2a
 800c340:	d135      	bne.n	800c3ae <_vfiprintf_r+0x1ce>
 800c342:	9b03      	ldr	r3, [sp, #12]
 800c344:	1d1a      	adds	r2, r3, #4
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	9203      	str	r2, [sp, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	bfb8      	it	lt
 800c34e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c352:	3402      	adds	r4, #2
 800c354:	9305      	str	r3, [sp, #20]
 800c356:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c43c <_vfiprintf_r+0x25c>
 800c35a:	7821      	ldrb	r1, [r4, #0]
 800c35c:	2203      	movs	r2, #3
 800c35e:	4650      	mov	r0, sl
 800c360:	f7f3 ff3e 	bl	80001e0 <memchr>
 800c364:	b140      	cbz	r0, 800c378 <_vfiprintf_r+0x198>
 800c366:	2340      	movs	r3, #64	; 0x40
 800c368:	eba0 000a 	sub.w	r0, r0, sl
 800c36c:	fa03 f000 	lsl.w	r0, r3, r0
 800c370:	9b04      	ldr	r3, [sp, #16]
 800c372:	4303      	orrs	r3, r0
 800c374:	3401      	adds	r4, #1
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c37c:	482c      	ldr	r0, [pc, #176]	; (800c430 <_vfiprintf_r+0x250>)
 800c37e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c382:	2206      	movs	r2, #6
 800c384:	f7f3 ff2c 	bl	80001e0 <memchr>
 800c388:	2800      	cmp	r0, #0
 800c38a:	d03f      	beq.n	800c40c <_vfiprintf_r+0x22c>
 800c38c:	4b29      	ldr	r3, [pc, #164]	; (800c434 <_vfiprintf_r+0x254>)
 800c38e:	bb1b      	cbnz	r3, 800c3d8 <_vfiprintf_r+0x1f8>
 800c390:	9b03      	ldr	r3, [sp, #12]
 800c392:	3307      	adds	r3, #7
 800c394:	f023 0307 	bic.w	r3, r3, #7
 800c398:	3308      	adds	r3, #8
 800c39a:	9303      	str	r3, [sp, #12]
 800c39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c39e:	443b      	add	r3, r7
 800c3a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a2:	e767      	b.n	800c274 <_vfiprintf_r+0x94>
 800c3a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	2001      	movs	r0, #1
 800c3ac:	e7a5      	b.n	800c2fa <_vfiprintf_r+0x11a>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	3401      	adds	r4, #1
 800c3b2:	9305      	str	r3, [sp, #20]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	f04f 0c0a 	mov.w	ip, #10
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3c0:	3a30      	subs	r2, #48	; 0x30
 800c3c2:	2a09      	cmp	r2, #9
 800c3c4:	d903      	bls.n	800c3ce <_vfiprintf_r+0x1ee>
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0c5      	beq.n	800c356 <_vfiprintf_r+0x176>
 800c3ca:	9105      	str	r1, [sp, #20]
 800c3cc:	e7c3      	b.n	800c356 <_vfiprintf_r+0x176>
 800c3ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e7f0      	b.n	800c3ba <_vfiprintf_r+0x1da>
 800c3d8:	ab03      	add	r3, sp, #12
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	462a      	mov	r2, r5
 800c3de:	4b16      	ldr	r3, [pc, #88]	; (800c438 <_vfiprintf_r+0x258>)
 800c3e0:	a904      	add	r1, sp, #16
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	f7fd fde6 	bl	8009fb4 <_printf_float>
 800c3e8:	4607      	mov	r7, r0
 800c3ea:	1c78      	adds	r0, r7, #1
 800c3ec:	d1d6      	bne.n	800c39c <_vfiprintf_r+0x1bc>
 800c3ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3f0:	07d9      	lsls	r1, r3, #31
 800c3f2:	d405      	bmi.n	800c400 <_vfiprintf_r+0x220>
 800c3f4:	89ab      	ldrh	r3, [r5, #12]
 800c3f6:	059a      	lsls	r2, r3, #22
 800c3f8:	d402      	bmi.n	800c400 <_vfiprintf_r+0x220>
 800c3fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3fc:	f000 faaf 	bl	800c95e <__retarget_lock_release_recursive>
 800c400:	89ab      	ldrh	r3, [r5, #12]
 800c402:	065b      	lsls	r3, r3, #25
 800c404:	f53f af12 	bmi.w	800c22c <_vfiprintf_r+0x4c>
 800c408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c40a:	e711      	b.n	800c230 <_vfiprintf_r+0x50>
 800c40c:	ab03      	add	r3, sp, #12
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	462a      	mov	r2, r5
 800c412:	4b09      	ldr	r3, [pc, #36]	; (800c438 <_vfiprintf_r+0x258>)
 800c414:	a904      	add	r1, sp, #16
 800c416:	4630      	mov	r0, r6
 800c418:	f7fe f870 	bl	800a4fc <_printf_i>
 800c41c:	e7e4      	b.n	800c3e8 <_vfiprintf_r+0x208>
 800c41e:	bf00      	nop
 800c420:	0800de84 	.word	0x0800de84
 800c424:	0800dea4 	.word	0x0800dea4
 800c428:	0800de64 	.word	0x0800de64
 800c42c:	0800dd0c 	.word	0x0800dd0c
 800c430:	0800dd16 	.word	0x0800dd16
 800c434:	08009fb5 	.word	0x08009fb5
 800c438:	0800c1bd 	.word	0x0800c1bd
 800c43c:	0800dd12 	.word	0x0800dd12

0800c440 <__swbuf_r>:
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	460e      	mov	r6, r1
 800c444:	4614      	mov	r4, r2
 800c446:	4605      	mov	r5, r0
 800c448:	b118      	cbz	r0, 800c452 <__swbuf_r+0x12>
 800c44a:	6983      	ldr	r3, [r0, #24]
 800c44c:	b90b      	cbnz	r3, 800c452 <__swbuf_r+0x12>
 800c44e:	f000 f9e7 	bl	800c820 <__sinit>
 800c452:	4b21      	ldr	r3, [pc, #132]	; (800c4d8 <__swbuf_r+0x98>)
 800c454:	429c      	cmp	r4, r3
 800c456:	d12b      	bne.n	800c4b0 <__swbuf_r+0x70>
 800c458:	686c      	ldr	r4, [r5, #4]
 800c45a:	69a3      	ldr	r3, [r4, #24]
 800c45c:	60a3      	str	r3, [r4, #8]
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	071a      	lsls	r2, r3, #28
 800c462:	d52f      	bpl.n	800c4c4 <__swbuf_r+0x84>
 800c464:	6923      	ldr	r3, [r4, #16]
 800c466:	b36b      	cbz	r3, 800c4c4 <__swbuf_r+0x84>
 800c468:	6923      	ldr	r3, [r4, #16]
 800c46a:	6820      	ldr	r0, [r4, #0]
 800c46c:	1ac0      	subs	r0, r0, r3
 800c46e:	6963      	ldr	r3, [r4, #20]
 800c470:	b2f6      	uxtb	r6, r6
 800c472:	4283      	cmp	r3, r0
 800c474:	4637      	mov	r7, r6
 800c476:	dc04      	bgt.n	800c482 <__swbuf_r+0x42>
 800c478:	4621      	mov	r1, r4
 800c47a:	4628      	mov	r0, r5
 800c47c:	f000 f93c 	bl	800c6f8 <_fflush_r>
 800c480:	bb30      	cbnz	r0, 800c4d0 <__swbuf_r+0x90>
 800c482:	68a3      	ldr	r3, [r4, #8]
 800c484:	3b01      	subs	r3, #1
 800c486:	60a3      	str	r3, [r4, #8]
 800c488:	6823      	ldr	r3, [r4, #0]
 800c48a:	1c5a      	adds	r2, r3, #1
 800c48c:	6022      	str	r2, [r4, #0]
 800c48e:	701e      	strb	r6, [r3, #0]
 800c490:	6963      	ldr	r3, [r4, #20]
 800c492:	3001      	adds	r0, #1
 800c494:	4283      	cmp	r3, r0
 800c496:	d004      	beq.n	800c4a2 <__swbuf_r+0x62>
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	07db      	lsls	r3, r3, #31
 800c49c:	d506      	bpl.n	800c4ac <__swbuf_r+0x6c>
 800c49e:	2e0a      	cmp	r6, #10
 800c4a0:	d104      	bne.n	800c4ac <__swbuf_r+0x6c>
 800c4a2:	4621      	mov	r1, r4
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f000 f927 	bl	800c6f8 <_fflush_r>
 800c4aa:	b988      	cbnz	r0, 800c4d0 <__swbuf_r+0x90>
 800c4ac:	4638      	mov	r0, r7
 800c4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4b0:	4b0a      	ldr	r3, [pc, #40]	; (800c4dc <__swbuf_r+0x9c>)
 800c4b2:	429c      	cmp	r4, r3
 800c4b4:	d101      	bne.n	800c4ba <__swbuf_r+0x7a>
 800c4b6:	68ac      	ldr	r4, [r5, #8]
 800c4b8:	e7cf      	b.n	800c45a <__swbuf_r+0x1a>
 800c4ba:	4b09      	ldr	r3, [pc, #36]	; (800c4e0 <__swbuf_r+0xa0>)
 800c4bc:	429c      	cmp	r4, r3
 800c4be:	bf08      	it	eq
 800c4c0:	68ec      	ldreq	r4, [r5, #12]
 800c4c2:	e7ca      	b.n	800c45a <__swbuf_r+0x1a>
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	f000 f81a 	bl	800c500 <__swsetup_r>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d0cb      	beq.n	800c468 <__swbuf_r+0x28>
 800c4d0:	f04f 37ff 	mov.w	r7, #4294967295
 800c4d4:	e7ea      	b.n	800c4ac <__swbuf_r+0x6c>
 800c4d6:	bf00      	nop
 800c4d8:	0800de84 	.word	0x0800de84
 800c4dc:	0800dea4 	.word	0x0800dea4
 800c4e0:	0800de64 	.word	0x0800de64

0800c4e4 <__ascii_wctomb>:
 800c4e4:	b149      	cbz	r1, 800c4fa <__ascii_wctomb+0x16>
 800c4e6:	2aff      	cmp	r2, #255	; 0xff
 800c4e8:	bf85      	ittet	hi
 800c4ea:	238a      	movhi	r3, #138	; 0x8a
 800c4ec:	6003      	strhi	r3, [r0, #0]
 800c4ee:	700a      	strbls	r2, [r1, #0]
 800c4f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c4f4:	bf98      	it	ls
 800c4f6:	2001      	movls	r0, #1
 800c4f8:	4770      	bx	lr
 800c4fa:	4608      	mov	r0, r1
 800c4fc:	4770      	bx	lr
	...

0800c500 <__swsetup_r>:
 800c500:	4b32      	ldr	r3, [pc, #200]	; (800c5cc <__swsetup_r+0xcc>)
 800c502:	b570      	push	{r4, r5, r6, lr}
 800c504:	681d      	ldr	r5, [r3, #0]
 800c506:	4606      	mov	r6, r0
 800c508:	460c      	mov	r4, r1
 800c50a:	b125      	cbz	r5, 800c516 <__swsetup_r+0x16>
 800c50c:	69ab      	ldr	r3, [r5, #24]
 800c50e:	b913      	cbnz	r3, 800c516 <__swsetup_r+0x16>
 800c510:	4628      	mov	r0, r5
 800c512:	f000 f985 	bl	800c820 <__sinit>
 800c516:	4b2e      	ldr	r3, [pc, #184]	; (800c5d0 <__swsetup_r+0xd0>)
 800c518:	429c      	cmp	r4, r3
 800c51a:	d10f      	bne.n	800c53c <__swsetup_r+0x3c>
 800c51c:	686c      	ldr	r4, [r5, #4]
 800c51e:	89a3      	ldrh	r3, [r4, #12]
 800c520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c524:	0719      	lsls	r1, r3, #28
 800c526:	d42c      	bmi.n	800c582 <__swsetup_r+0x82>
 800c528:	06dd      	lsls	r5, r3, #27
 800c52a:	d411      	bmi.n	800c550 <__swsetup_r+0x50>
 800c52c:	2309      	movs	r3, #9
 800c52e:	6033      	str	r3, [r6, #0]
 800c530:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c534:	81a3      	strh	r3, [r4, #12]
 800c536:	f04f 30ff 	mov.w	r0, #4294967295
 800c53a:	e03e      	b.n	800c5ba <__swsetup_r+0xba>
 800c53c:	4b25      	ldr	r3, [pc, #148]	; (800c5d4 <__swsetup_r+0xd4>)
 800c53e:	429c      	cmp	r4, r3
 800c540:	d101      	bne.n	800c546 <__swsetup_r+0x46>
 800c542:	68ac      	ldr	r4, [r5, #8]
 800c544:	e7eb      	b.n	800c51e <__swsetup_r+0x1e>
 800c546:	4b24      	ldr	r3, [pc, #144]	; (800c5d8 <__swsetup_r+0xd8>)
 800c548:	429c      	cmp	r4, r3
 800c54a:	bf08      	it	eq
 800c54c:	68ec      	ldreq	r4, [r5, #12]
 800c54e:	e7e6      	b.n	800c51e <__swsetup_r+0x1e>
 800c550:	0758      	lsls	r0, r3, #29
 800c552:	d512      	bpl.n	800c57a <__swsetup_r+0x7a>
 800c554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c556:	b141      	cbz	r1, 800c56a <__swsetup_r+0x6a>
 800c558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c55c:	4299      	cmp	r1, r3
 800c55e:	d002      	beq.n	800c566 <__swsetup_r+0x66>
 800c560:	4630      	mov	r0, r6
 800c562:	f7ff fb31 	bl	800bbc8 <_free_r>
 800c566:	2300      	movs	r3, #0
 800c568:	6363      	str	r3, [r4, #52]	; 0x34
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c570:	81a3      	strh	r3, [r4, #12]
 800c572:	2300      	movs	r3, #0
 800c574:	6063      	str	r3, [r4, #4]
 800c576:	6923      	ldr	r3, [r4, #16]
 800c578:	6023      	str	r3, [r4, #0]
 800c57a:	89a3      	ldrh	r3, [r4, #12]
 800c57c:	f043 0308 	orr.w	r3, r3, #8
 800c580:	81a3      	strh	r3, [r4, #12]
 800c582:	6923      	ldr	r3, [r4, #16]
 800c584:	b94b      	cbnz	r3, 800c59a <__swsetup_r+0x9a>
 800c586:	89a3      	ldrh	r3, [r4, #12]
 800c588:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c58c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c590:	d003      	beq.n	800c59a <__swsetup_r+0x9a>
 800c592:	4621      	mov	r1, r4
 800c594:	4630      	mov	r0, r6
 800c596:	f000 fa09 	bl	800c9ac <__smakebuf_r>
 800c59a:	89a0      	ldrh	r0, [r4, #12]
 800c59c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5a0:	f010 0301 	ands.w	r3, r0, #1
 800c5a4:	d00a      	beq.n	800c5bc <__swsetup_r+0xbc>
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60a3      	str	r3, [r4, #8]
 800c5aa:	6963      	ldr	r3, [r4, #20]
 800c5ac:	425b      	negs	r3, r3
 800c5ae:	61a3      	str	r3, [r4, #24]
 800c5b0:	6923      	ldr	r3, [r4, #16]
 800c5b2:	b943      	cbnz	r3, 800c5c6 <__swsetup_r+0xc6>
 800c5b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5b8:	d1ba      	bne.n	800c530 <__swsetup_r+0x30>
 800c5ba:	bd70      	pop	{r4, r5, r6, pc}
 800c5bc:	0781      	lsls	r1, r0, #30
 800c5be:	bf58      	it	pl
 800c5c0:	6963      	ldrpl	r3, [r4, #20]
 800c5c2:	60a3      	str	r3, [r4, #8]
 800c5c4:	e7f4      	b.n	800c5b0 <__swsetup_r+0xb0>
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	e7f7      	b.n	800c5ba <__swsetup_r+0xba>
 800c5ca:	bf00      	nop
 800c5cc:	20000060 	.word	0x20000060
 800c5d0:	0800de84 	.word	0x0800de84
 800c5d4:	0800dea4 	.word	0x0800dea4
 800c5d8:	0800de64 	.word	0x0800de64

0800c5dc <abort>:
 800c5dc:	b508      	push	{r3, lr}
 800c5de:	2006      	movs	r0, #6
 800c5e0:	f000 fa54 	bl	800ca8c <raise>
 800c5e4:	2001      	movs	r0, #1
 800c5e6:	f7f5 fcf1 	bl	8001fcc <_exit>
	...

0800c5ec <__sflush_r>:
 800c5ec:	898a      	ldrh	r2, [r1, #12]
 800c5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	0710      	lsls	r0, r2, #28
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	d458      	bmi.n	800c6ac <__sflush_r+0xc0>
 800c5fa:	684b      	ldr	r3, [r1, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	dc05      	bgt.n	800c60c <__sflush_r+0x20>
 800c600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c602:	2b00      	cmp	r3, #0
 800c604:	dc02      	bgt.n	800c60c <__sflush_r+0x20>
 800c606:	2000      	movs	r0, #0
 800c608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c60c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c60e:	2e00      	cmp	r6, #0
 800c610:	d0f9      	beq.n	800c606 <__sflush_r+0x1a>
 800c612:	2300      	movs	r3, #0
 800c614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c618:	682f      	ldr	r7, [r5, #0]
 800c61a:	602b      	str	r3, [r5, #0]
 800c61c:	d032      	beq.n	800c684 <__sflush_r+0x98>
 800c61e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	075a      	lsls	r2, r3, #29
 800c624:	d505      	bpl.n	800c632 <__sflush_r+0x46>
 800c626:	6863      	ldr	r3, [r4, #4]
 800c628:	1ac0      	subs	r0, r0, r3
 800c62a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c62c:	b10b      	cbz	r3, 800c632 <__sflush_r+0x46>
 800c62e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c630:	1ac0      	subs	r0, r0, r3
 800c632:	2300      	movs	r3, #0
 800c634:	4602      	mov	r2, r0
 800c636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c638:	6a21      	ldr	r1, [r4, #32]
 800c63a:	4628      	mov	r0, r5
 800c63c:	47b0      	blx	r6
 800c63e:	1c43      	adds	r3, r0, #1
 800c640:	89a3      	ldrh	r3, [r4, #12]
 800c642:	d106      	bne.n	800c652 <__sflush_r+0x66>
 800c644:	6829      	ldr	r1, [r5, #0]
 800c646:	291d      	cmp	r1, #29
 800c648:	d82c      	bhi.n	800c6a4 <__sflush_r+0xb8>
 800c64a:	4a2a      	ldr	r2, [pc, #168]	; (800c6f4 <__sflush_r+0x108>)
 800c64c:	40ca      	lsrs	r2, r1
 800c64e:	07d6      	lsls	r6, r2, #31
 800c650:	d528      	bpl.n	800c6a4 <__sflush_r+0xb8>
 800c652:	2200      	movs	r2, #0
 800c654:	6062      	str	r2, [r4, #4]
 800c656:	04d9      	lsls	r1, r3, #19
 800c658:	6922      	ldr	r2, [r4, #16]
 800c65a:	6022      	str	r2, [r4, #0]
 800c65c:	d504      	bpl.n	800c668 <__sflush_r+0x7c>
 800c65e:	1c42      	adds	r2, r0, #1
 800c660:	d101      	bne.n	800c666 <__sflush_r+0x7a>
 800c662:	682b      	ldr	r3, [r5, #0]
 800c664:	b903      	cbnz	r3, 800c668 <__sflush_r+0x7c>
 800c666:	6560      	str	r0, [r4, #84]	; 0x54
 800c668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c66a:	602f      	str	r7, [r5, #0]
 800c66c:	2900      	cmp	r1, #0
 800c66e:	d0ca      	beq.n	800c606 <__sflush_r+0x1a>
 800c670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c674:	4299      	cmp	r1, r3
 800c676:	d002      	beq.n	800c67e <__sflush_r+0x92>
 800c678:	4628      	mov	r0, r5
 800c67a:	f7ff faa5 	bl	800bbc8 <_free_r>
 800c67e:	2000      	movs	r0, #0
 800c680:	6360      	str	r0, [r4, #52]	; 0x34
 800c682:	e7c1      	b.n	800c608 <__sflush_r+0x1c>
 800c684:	6a21      	ldr	r1, [r4, #32]
 800c686:	2301      	movs	r3, #1
 800c688:	4628      	mov	r0, r5
 800c68a:	47b0      	blx	r6
 800c68c:	1c41      	adds	r1, r0, #1
 800c68e:	d1c7      	bne.n	800c620 <__sflush_r+0x34>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d0c4      	beq.n	800c620 <__sflush_r+0x34>
 800c696:	2b1d      	cmp	r3, #29
 800c698:	d001      	beq.n	800c69e <__sflush_r+0xb2>
 800c69a:	2b16      	cmp	r3, #22
 800c69c:	d101      	bne.n	800c6a2 <__sflush_r+0xb6>
 800c69e:	602f      	str	r7, [r5, #0]
 800c6a0:	e7b1      	b.n	800c606 <__sflush_r+0x1a>
 800c6a2:	89a3      	ldrh	r3, [r4, #12]
 800c6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a8:	81a3      	strh	r3, [r4, #12]
 800c6aa:	e7ad      	b.n	800c608 <__sflush_r+0x1c>
 800c6ac:	690f      	ldr	r7, [r1, #16]
 800c6ae:	2f00      	cmp	r7, #0
 800c6b0:	d0a9      	beq.n	800c606 <__sflush_r+0x1a>
 800c6b2:	0793      	lsls	r3, r2, #30
 800c6b4:	680e      	ldr	r6, [r1, #0]
 800c6b6:	bf08      	it	eq
 800c6b8:	694b      	ldreq	r3, [r1, #20]
 800c6ba:	600f      	str	r7, [r1, #0]
 800c6bc:	bf18      	it	ne
 800c6be:	2300      	movne	r3, #0
 800c6c0:	eba6 0807 	sub.w	r8, r6, r7
 800c6c4:	608b      	str	r3, [r1, #8]
 800c6c6:	f1b8 0f00 	cmp.w	r8, #0
 800c6ca:	dd9c      	ble.n	800c606 <__sflush_r+0x1a>
 800c6cc:	6a21      	ldr	r1, [r4, #32]
 800c6ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6d0:	4643      	mov	r3, r8
 800c6d2:	463a      	mov	r2, r7
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b0      	blx	r6
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	dc06      	bgt.n	800c6ea <__sflush_r+0xfe>
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	e78e      	b.n	800c608 <__sflush_r+0x1c>
 800c6ea:	4407      	add	r7, r0
 800c6ec:	eba8 0800 	sub.w	r8, r8, r0
 800c6f0:	e7e9      	b.n	800c6c6 <__sflush_r+0xda>
 800c6f2:	bf00      	nop
 800c6f4:	20400001 	.word	0x20400001

0800c6f8 <_fflush_r>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	690b      	ldr	r3, [r1, #16]
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	460c      	mov	r4, r1
 800c700:	b913      	cbnz	r3, 800c708 <_fflush_r+0x10>
 800c702:	2500      	movs	r5, #0
 800c704:	4628      	mov	r0, r5
 800c706:	bd38      	pop	{r3, r4, r5, pc}
 800c708:	b118      	cbz	r0, 800c712 <_fflush_r+0x1a>
 800c70a:	6983      	ldr	r3, [r0, #24]
 800c70c:	b90b      	cbnz	r3, 800c712 <_fflush_r+0x1a>
 800c70e:	f000 f887 	bl	800c820 <__sinit>
 800c712:	4b14      	ldr	r3, [pc, #80]	; (800c764 <_fflush_r+0x6c>)
 800c714:	429c      	cmp	r4, r3
 800c716:	d11b      	bne.n	800c750 <_fflush_r+0x58>
 800c718:	686c      	ldr	r4, [r5, #4]
 800c71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0ef      	beq.n	800c702 <_fflush_r+0xa>
 800c722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c724:	07d0      	lsls	r0, r2, #31
 800c726:	d404      	bmi.n	800c732 <_fflush_r+0x3a>
 800c728:	0599      	lsls	r1, r3, #22
 800c72a:	d402      	bmi.n	800c732 <_fflush_r+0x3a>
 800c72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c72e:	f000 f915 	bl	800c95c <__retarget_lock_acquire_recursive>
 800c732:	4628      	mov	r0, r5
 800c734:	4621      	mov	r1, r4
 800c736:	f7ff ff59 	bl	800c5ec <__sflush_r>
 800c73a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c73c:	07da      	lsls	r2, r3, #31
 800c73e:	4605      	mov	r5, r0
 800c740:	d4e0      	bmi.n	800c704 <_fflush_r+0xc>
 800c742:	89a3      	ldrh	r3, [r4, #12]
 800c744:	059b      	lsls	r3, r3, #22
 800c746:	d4dd      	bmi.n	800c704 <_fflush_r+0xc>
 800c748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c74a:	f000 f908 	bl	800c95e <__retarget_lock_release_recursive>
 800c74e:	e7d9      	b.n	800c704 <_fflush_r+0xc>
 800c750:	4b05      	ldr	r3, [pc, #20]	; (800c768 <_fflush_r+0x70>)
 800c752:	429c      	cmp	r4, r3
 800c754:	d101      	bne.n	800c75a <_fflush_r+0x62>
 800c756:	68ac      	ldr	r4, [r5, #8]
 800c758:	e7df      	b.n	800c71a <_fflush_r+0x22>
 800c75a:	4b04      	ldr	r3, [pc, #16]	; (800c76c <_fflush_r+0x74>)
 800c75c:	429c      	cmp	r4, r3
 800c75e:	bf08      	it	eq
 800c760:	68ec      	ldreq	r4, [r5, #12]
 800c762:	e7da      	b.n	800c71a <_fflush_r+0x22>
 800c764:	0800de84 	.word	0x0800de84
 800c768:	0800dea4 	.word	0x0800dea4
 800c76c:	0800de64 	.word	0x0800de64

0800c770 <std>:
 800c770:	2300      	movs	r3, #0
 800c772:	b510      	push	{r4, lr}
 800c774:	4604      	mov	r4, r0
 800c776:	e9c0 3300 	strd	r3, r3, [r0]
 800c77a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c77e:	6083      	str	r3, [r0, #8]
 800c780:	8181      	strh	r1, [r0, #12]
 800c782:	6643      	str	r3, [r0, #100]	; 0x64
 800c784:	81c2      	strh	r2, [r0, #14]
 800c786:	6183      	str	r3, [r0, #24]
 800c788:	4619      	mov	r1, r3
 800c78a:	2208      	movs	r2, #8
 800c78c:	305c      	adds	r0, #92	; 0x5c
 800c78e:	f7fd fb69 	bl	8009e64 <memset>
 800c792:	4b05      	ldr	r3, [pc, #20]	; (800c7a8 <std+0x38>)
 800c794:	6263      	str	r3, [r4, #36]	; 0x24
 800c796:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <std+0x3c>)
 800c798:	62a3      	str	r3, [r4, #40]	; 0x28
 800c79a:	4b05      	ldr	r3, [pc, #20]	; (800c7b0 <std+0x40>)
 800c79c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c79e:	4b05      	ldr	r3, [pc, #20]	; (800c7b4 <std+0x44>)
 800c7a0:	6224      	str	r4, [r4, #32]
 800c7a2:	6323      	str	r3, [r4, #48]	; 0x30
 800c7a4:	bd10      	pop	{r4, pc}
 800c7a6:	bf00      	nop
 800c7a8:	0800cac5 	.word	0x0800cac5
 800c7ac:	0800cae7 	.word	0x0800cae7
 800c7b0:	0800cb1f 	.word	0x0800cb1f
 800c7b4:	0800cb43 	.word	0x0800cb43

0800c7b8 <_cleanup_r>:
 800c7b8:	4901      	ldr	r1, [pc, #4]	; (800c7c0 <_cleanup_r+0x8>)
 800c7ba:	f000 b8af 	b.w	800c91c <_fwalk_reent>
 800c7be:	bf00      	nop
 800c7c0:	0800c6f9 	.word	0x0800c6f9

0800c7c4 <__sfmoreglue>:
 800c7c4:	b570      	push	{r4, r5, r6, lr}
 800c7c6:	2268      	movs	r2, #104	; 0x68
 800c7c8:	1e4d      	subs	r5, r1, #1
 800c7ca:	4355      	muls	r5, r2
 800c7cc:	460e      	mov	r6, r1
 800c7ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7d2:	f7ff fa65 	bl	800bca0 <_malloc_r>
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	b140      	cbz	r0, 800c7ec <__sfmoreglue+0x28>
 800c7da:	2100      	movs	r1, #0
 800c7dc:	e9c0 1600 	strd	r1, r6, [r0]
 800c7e0:	300c      	adds	r0, #12
 800c7e2:	60a0      	str	r0, [r4, #8]
 800c7e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c7e8:	f7fd fb3c 	bl	8009e64 <memset>
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	bd70      	pop	{r4, r5, r6, pc}

0800c7f0 <__sfp_lock_acquire>:
 800c7f0:	4801      	ldr	r0, [pc, #4]	; (800c7f8 <__sfp_lock_acquire+0x8>)
 800c7f2:	f000 b8b3 	b.w	800c95c <__retarget_lock_acquire_recursive>
 800c7f6:	bf00      	nop
 800c7f8:	2000091d 	.word	0x2000091d

0800c7fc <__sfp_lock_release>:
 800c7fc:	4801      	ldr	r0, [pc, #4]	; (800c804 <__sfp_lock_release+0x8>)
 800c7fe:	f000 b8ae 	b.w	800c95e <__retarget_lock_release_recursive>
 800c802:	bf00      	nop
 800c804:	2000091d 	.word	0x2000091d

0800c808 <__sinit_lock_acquire>:
 800c808:	4801      	ldr	r0, [pc, #4]	; (800c810 <__sinit_lock_acquire+0x8>)
 800c80a:	f000 b8a7 	b.w	800c95c <__retarget_lock_acquire_recursive>
 800c80e:	bf00      	nop
 800c810:	2000091e 	.word	0x2000091e

0800c814 <__sinit_lock_release>:
 800c814:	4801      	ldr	r0, [pc, #4]	; (800c81c <__sinit_lock_release+0x8>)
 800c816:	f000 b8a2 	b.w	800c95e <__retarget_lock_release_recursive>
 800c81a:	bf00      	nop
 800c81c:	2000091e 	.word	0x2000091e

0800c820 <__sinit>:
 800c820:	b510      	push	{r4, lr}
 800c822:	4604      	mov	r4, r0
 800c824:	f7ff fff0 	bl	800c808 <__sinit_lock_acquire>
 800c828:	69a3      	ldr	r3, [r4, #24]
 800c82a:	b11b      	cbz	r3, 800c834 <__sinit+0x14>
 800c82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c830:	f7ff bff0 	b.w	800c814 <__sinit_lock_release>
 800c834:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c838:	6523      	str	r3, [r4, #80]	; 0x50
 800c83a:	4b13      	ldr	r3, [pc, #76]	; (800c888 <__sinit+0x68>)
 800c83c:	4a13      	ldr	r2, [pc, #76]	; (800c88c <__sinit+0x6c>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	62a2      	str	r2, [r4, #40]	; 0x28
 800c842:	42a3      	cmp	r3, r4
 800c844:	bf04      	itt	eq
 800c846:	2301      	moveq	r3, #1
 800c848:	61a3      	streq	r3, [r4, #24]
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 f820 	bl	800c890 <__sfp>
 800c850:	6060      	str	r0, [r4, #4]
 800c852:	4620      	mov	r0, r4
 800c854:	f000 f81c 	bl	800c890 <__sfp>
 800c858:	60a0      	str	r0, [r4, #8]
 800c85a:	4620      	mov	r0, r4
 800c85c:	f000 f818 	bl	800c890 <__sfp>
 800c860:	2200      	movs	r2, #0
 800c862:	60e0      	str	r0, [r4, #12]
 800c864:	2104      	movs	r1, #4
 800c866:	6860      	ldr	r0, [r4, #4]
 800c868:	f7ff ff82 	bl	800c770 <std>
 800c86c:	68a0      	ldr	r0, [r4, #8]
 800c86e:	2201      	movs	r2, #1
 800c870:	2109      	movs	r1, #9
 800c872:	f7ff ff7d 	bl	800c770 <std>
 800c876:	68e0      	ldr	r0, [r4, #12]
 800c878:	2202      	movs	r2, #2
 800c87a:	2112      	movs	r1, #18
 800c87c:	f7ff ff78 	bl	800c770 <std>
 800c880:	2301      	movs	r3, #1
 800c882:	61a3      	str	r3, [r4, #24]
 800c884:	e7d2      	b.n	800c82c <__sinit+0xc>
 800c886:	bf00      	nop
 800c888:	0800dae8 	.word	0x0800dae8
 800c88c:	0800c7b9 	.word	0x0800c7b9

0800c890 <__sfp>:
 800c890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c892:	4607      	mov	r7, r0
 800c894:	f7ff ffac 	bl	800c7f0 <__sfp_lock_acquire>
 800c898:	4b1e      	ldr	r3, [pc, #120]	; (800c914 <__sfp+0x84>)
 800c89a:	681e      	ldr	r6, [r3, #0]
 800c89c:	69b3      	ldr	r3, [r6, #24]
 800c89e:	b913      	cbnz	r3, 800c8a6 <__sfp+0x16>
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f7ff ffbd 	bl	800c820 <__sinit>
 800c8a6:	3648      	adds	r6, #72	; 0x48
 800c8a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	d503      	bpl.n	800c8b8 <__sfp+0x28>
 800c8b0:	6833      	ldr	r3, [r6, #0]
 800c8b2:	b30b      	cbz	r3, 800c8f8 <__sfp+0x68>
 800c8b4:	6836      	ldr	r6, [r6, #0]
 800c8b6:	e7f7      	b.n	800c8a8 <__sfp+0x18>
 800c8b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c8bc:	b9d5      	cbnz	r5, 800c8f4 <__sfp+0x64>
 800c8be:	4b16      	ldr	r3, [pc, #88]	; (800c918 <__sfp+0x88>)
 800c8c0:	60e3      	str	r3, [r4, #12]
 800c8c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8c6:	6665      	str	r5, [r4, #100]	; 0x64
 800c8c8:	f000 f847 	bl	800c95a <__retarget_lock_init_recursive>
 800c8cc:	f7ff ff96 	bl	800c7fc <__sfp_lock_release>
 800c8d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c8d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c8d8:	6025      	str	r5, [r4, #0]
 800c8da:	61a5      	str	r5, [r4, #24]
 800c8dc:	2208      	movs	r2, #8
 800c8de:	4629      	mov	r1, r5
 800c8e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8e4:	f7fd fabe 	bl	8009e64 <memset>
 800c8e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8f4:	3468      	adds	r4, #104	; 0x68
 800c8f6:	e7d9      	b.n	800c8ac <__sfp+0x1c>
 800c8f8:	2104      	movs	r1, #4
 800c8fa:	4638      	mov	r0, r7
 800c8fc:	f7ff ff62 	bl	800c7c4 <__sfmoreglue>
 800c900:	4604      	mov	r4, r0
 800c902:	6030      	str	r0, [r6, #0]
 800c904:	2800      	cmp	r0, #0
 800c906:	d1d5      	bne.n	800c8b4 <__sfp+0x24>
 800c908:	f7ff ff78 	bl	800c7fc <__sfp_lock_release>
 800c90c:	230c      	movs	r3, #12
 800c90e:	603b      	str	r3, [r7, #0]
 800c910:	e7ee      	b.n	800c8f0 <__sfp+0x60>
 800c912:	bf00      	nop
 800c914:	0800dae8 	.word	0x0800dae8
 800c918:	ffff0001 	.word	0xffff0001

0800c91c <_fwalk_reent>:
 800c91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c920:	4606      	mov	r6, r0
 800c922:	4688      	mov	r8, r1
 800c924:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c928:	2700      	movs	r7, #0
 800c92a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c92e:	f1b9 0901 	subs.w	r9, r9, #1
 800c932:	d505      	bpl.n	800c940 <_fwalk_reent+0x24>
 800c934:	6824      	ldr	r4, [r4, #0]
 800c936:	2c00      	cmp	r4, #0
 800c938:	d1f7      	bne.n	800c92a <_fwalk_reent+0xe>
 800c93a:	4638      	mov	r0, r7
 800c93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c940:	89ab      	ldrh	r3, [r5, #12]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d907      	bls.n	800c956 <_fwalk_reent+0x3a>
 800c946:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c94a:	3301      	adds	r3, #1
 800c94c:	d003      	beq.n	800c956 <_fwalk_reent+0x3a>
 800c94e:	4629      	mov	r1, r5
 800c950:	4630      	mov	r0, r6
 800c952:	47c0      	blx	r8
 800c954:	4307      	orrs	r7, r0
 800c956:	3568      	adds	r5, #104	; 0x68
 800c958:	e7e9      	b.n	800c92e <_fwalk_reent+0x12>

0800c95a <__retarget_lock_init_recursive>:
 800c95a:	4770      	bx	lr

0800c95c <__retarget_lock_acquire_recursive>:
 800c95c:	4770      	bx	lr

0800c95e <__retarget_lock_release_recursive>:
 800c95e:	4770      	bx	lr

0800c960 <__swhatbuf_r>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	460e      	mov	r6, r1
 800c964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c968:	2900      	cmp	r1, #0
 800c96a:	b096      	sub	sp, #88	; 0x58
 800c96c:	4614      	mov	r4, r2
 800c96e:	461d      	mov	r5, r3
 800c970:	da08      	bge.n	800c984 <__swhatbuf_r+0x24>
 800c972:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c976:	2200      	movs	r2, #0
 800c978:	602a      	str	r2, [r5, #0]
 800c97a:	061a      	lsls	r2, r3, #24
 800c97c:	d410      	bmi.n	800c9a0 <__swhatbuf_r+0x40>
 800c97e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c982:	e00e      	b.n	800c9a2 <__swhatbuf_r+0x42>
 800c984:	466a      	mov	r2, sp
 800c986:	f000 f903 	bl	800cb90 <_fstat_r>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	dbf1      	blt.n	800c972 <__swhatbuf_r+0x12>
 800c98e:	9a01      	ldr	r2, [sp, #4]
 800c990:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c994:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c998:	425a      	negs	r2, r3
 800c99a:	415a      	adcs	r2, r3
 800c99c:	602a      	str	r2, [r5, #0]
 800c99e:	e7ee      	b.n	800c97e <__swhatbuf_r+0x1e>
 800c9a0:	2340      	movs	r3, #64	; 0x40
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	b016      	add	sp, #88	; 0x58
 800c9a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9ac <__smakebuf_r>:
 800c9ac:	898b      	ldrh	r3, [r1, #12]
 800c9ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9b0:	079d      	lsls	r5, r3, #30
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	d507      	bpl.n	800c9c8 <__smakebuf_r+0x1c>
 800c9b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	6123      	str	r3, [r4, #16]
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	6163      	str	r3, [r4, #20]
 800c9c4:	b002      	add	sp, #8
 800c9c6:	bd70      	pop	{r4, r5, r6, pc}
 800c9c8:	ab01      	add	r3, sp, #4
 800c9ca:	466a      	mov	r2, sp
 800c9cc:	f7ff ffc8 	bl	800c960 <__swhatbuf_r>
 800c9d0:	9900      	ldr	r1, [sp, #0]
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7ff f963 	bl	800bca0 <_malloc_r>
 800c9da:	b948      	cbnz	r0, 800c9f0 <__smakebuf_r+0x44>
 800c9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9e0:	059a      	lsls	r2, r3, #22
 800c9e2:	d4ef      	bmi.n	800c9c4 <__smakebuf_r+0x18>
 800c9e4:	f023 0303 	bic.w	r3, r3, #3
 800c9e8:	f043 0302 	orr.w	r3, r3, #2
 800c9ec:	81a3      	strh	r3, [r4, #12]
 800c9ee:	e7e3      	b.n	800c9b8 <__smakebuf_r+0xc>
 800c9f0:	4b0d      	ldr	r3, [pc, #52]	; (800ca28 <__smakebuf_r+0x7c>)
 800c9f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9f4:	89a3      	ldrh	r3, [r4, #12]
 800c9f6:	6020      	str	r0, [r4, #0]
 800c9f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9fc:	81a3      	strh	r3, [r4, #12]
 800c9fe:	9b00      	ldr	r3, [sp, #0]
 800ca00:	6163      	str	r3, [r4, #20]
 800ca02:	9b01      	ldr	r3, [sp, #4]
 800ca04:	6120      	str	r0, [r4, #16]
 800ca06:	b15b      	cbz	r3, 800ca20 <__smakebuf_r+0x74>
 800ca08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f000 f8d1 	bl	800cbb4 <_isatty_r>
 800ca12:	b128      	cbz	r0, 800ca20 <__smakebuf_r+0x74>
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	f023 0303 	bic.w	r3, r3, #3
 800ca1a:	f043 0301 	orr.w	r3, r3, #1
 800ca1e:	81a3      	strh	r3, [r4, #12]
 800ca20:	89a0      	ldrh	r0, [r4, #12]
 800ca22:	4305      	orrs	r5, r0
 800ca24:	81a5      	strh	r5, [r4, #12]
 800ca26:	e7cd      	b.n	800c9c4 <__smakebuf_r+0x18>
 800ca28:	0800c7b9 	.word	0x0800c7b9

0800ca2c <_malloc_usable_size_r>:
 800ca2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca30:	1f18      	subs	r0, r3, #4
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	bfbc      	itt	lt
 800ca36:	580b      	ldrlt	r3, [r1, r0]
 800ca38:	18c0      	addlt	r0, r0, r3
 800ca3a:	4770      	bx	lr

0800ca3c <_raise_r>:
 800ca3c:	291f      	cmp	r1, #31
 800ca3e:	b538      	push	{r3, r4, r5, lr}
 800ca40:	4604      	mov	r4, r0
 800ca42:	460d      	mov	r5, r1
 800ca44:	d904      	bls.n	800ca50 <_raise_r+0x14>
 800ca46:	2316      	movs	r3, #22
 800ca48:	6003      	str	r3, [r0, #0]
 800ca4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4e:	bd38      	pop	{r3, r4, r5, pc}
 800ca50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca52:	b112      	cbz	r2, 800ca5a <_raise_r+0x1e>
 800ca54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca58:	b94b      	cbnz	r3, 800ca6e <_raise_r+0x32>
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f000 f830 	bl	800cac0 <_getpid_r>
 800ca60:	462a      	mov	r2, r5
 800ca62:	4601      	mov	r1, r0
 800ca64:	4620      	mov	r0, r4
 800ca66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca6a:	f000 b817 	b.w	800ca9c <_kill_r>
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d00a      	beq.n	800ca88 <_raise_r+0x4c>
 800ca72:	1c59      	adds	r1, r3, #1
 800ca74:	d103      	bne.n	800ca7e <_raise_r+0x42>
 800ca76:	2316      	movs	r3, #22
 800ca78:	6003      	str	r3, [r0, #0]
 800ca7a:	2001      	movs	r0, #1
 800ca7c:	e7e7      	b.n	800ca4e <_raise_r+0x12>
 800ca7e:	2400      	movs	r4, #0
 800ca80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca84:	4628      	mov	r0, r5
 800ca86:	4798      	blx	r3
 800ca88:	2000      	movs	r0, #0
 800ca8a:	e7e0      	b.n	800ca4e <_raise_r+0x12>

0800ca8c <raise>:
 800ca8c:	4b02      	ldr	r3, [pc, #8]	; (800ca98 <raise+0xc>)
 800ca8e:	4601      	mov	r1, r0
 800ca90:	6818      	ldr	r0, [r3, #0]
 800ca92:	f7ff bfd3 	b.w	800ca3c <_raise_r>
 800ca96:	bf00      	nop
 800ca98:	20000060 	.word	0x20000060

0800ca9c <_kill_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4d07      	ldr	r5, [pc, #28]	; (800cabc <_kill_r+0x20>)
 800caa0:	2300      	movs	r3, #0
 800caa2:	4604      	mov	r4, r0
 800caa4:	4608      	mov	r0, r1
 800caa6:	4611      	mov	r1, r2
 800caa8:	602b      	str	r3, [r5, #0]
 800caaa:	f7f5 fa7f 	bl	8001fac <_kill>
 800caae:	1c43      	adds	r3, r0, #1
 800cab0:	d102      	bne.n	800cab8 <_kill_r+0x1c>
 800cab2:	682b      	ldr	r3, [r5, #0]
 800cab4:	b103      	cbz	r3, 800cab8 <_kill_r+0x1c>
 800cab6:	6023      	str	r3, [r4, #0]
 800cab8:	bd38      	pop	{r3, r4, r5, pc}
 800caba:	bf00      	nop
 800cabc:	20000918 	.word	0x20000918

0800cac0 <_getpid_r>:
 800cac0:	f7f5 ba6c 	b.w	8001f9c <_getpid>

0800cac4 <__sread>:
 800cac4:	b510      	push	{r4, lr}
 800cac6:	460c      	mov	r4, r1
 800cac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cacc:	f000 f894 	bl	800cbf8 <_read_r>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	bfab      	itete	ge
 800cad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cad6:	89a3      	ldrhlt	r3, [r4, #12]
 800cad8:	181b      	addge	r3, r3, r0
 800cada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cade:	bfac      	ite	ge
 800cae0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cae2:	81a3      	strhlt	r3, [r4, #12]
 800cae4:	bd10      	pop	{r4, pc}

0800cae6 <__swrite>:
 800cae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caea:	461f      	mov	r7, r3
 800caec:	898b      	ldrh	r3, [r1, #12]
 800caee:	05db      	lsls	r3, r3, #23
 800caf0:	4605      	mov	r5, r0
 800caf2:	460c      	mov	r4, r1
 800caf4:	4616      	mov	r6, r2
 800caf6:	d505      	bpl.n	800cb04 <__swrite+0x1e>
 800caf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cafc:	2302      	movs	r3, #2
 800cafe:	2200      	movs	r2, #0
 800cb00:	f000 f868 	bl	800cbd4 <_lseek_r>
 800cb04:	89a3      	ldrh	r3, [r4, #12]
 800cb06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb0e:	81a3      	strh	r3, [r4, #12]
 800cb10:	4632      	mov	r2, r6
 800cb12:	463b      	mov	r3, r7
 800cb14:	4628      	mov	r0, r5
 800cb16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb1a:	f000 b817 	b.w	800cb4c <_write_r>

0800cb1e <__sseek>:
 800cb1e:	b510      	push	{r4, lr}
 800cb20:	460c      	mov	r4, r1
 800cb22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb26:	f000 f855 	bl	800cbd4 <_lseek_r>
 800cb2a:	1c43      	adds	r3, r0, #1
 800cb2c:	89a3      	ldrh	r3, [r4, #12]
 800cb2e:	bf15      	itete	ne
 800cb30:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb3a:	81a3      	strheq	r3, [r4, #12]
 800cb3c:	bf18      	it	ne
 800cb3e:	81a3      	strhne	r3, [r4, #12]
 800cb40:	bd10      	pop	{r4, pc}

0800cb42 <__sclose>:
 800cb42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb46:	f000 b813 	b.w	800cb70 <_close_r>
	...

0800cb4c <_write_r>:
 800cb4c:	b538      	push	{r3, r4, r5, lr}
 800cb4e:	4d07      	ldr	r5, [pc, #28]	; (800cb6c <_write_r+0x20>)
 800cb50:	4604      	mov	r4, r0
 800cb52:	4608      	mov	r0, r1
 800cb54:	4611      	mov	r1, r2
 800cb56:	2200      	movs	r2, #0
 800cb58:	602a      	str	r2, [r5, #0]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	f7f5 fa5d 	bl	800201a <_write>
 800cb60:	1c43      	adds	r3, r0, #1
 800cb62:	d102      	bne.n	800cb6a <_write_r+0x1e>
 800cb64:	682b      	ldr	r3, [r5, #0]
 800cb66:	b103      	cbz	r3, 800cb6a <_write_r+0x1e>
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	bd38      	pop	{r3, r4, r5, pc}
 800cb6c:	20000918 	.word	0x20000918

0800cb70 <_close_r>:
 800cb70:	b538      	push	{r3, r4, r5, lr}
 800cb72:	4d06      	ldr	r5, [pc, #24]	; (800cb8c <_close_r+0x1c>)
 800cb74:	2300      	movs	r3, #0
 800cb76:	4604      	mov	r4, r0
 800cb78:	4608      	mov	r0, r1
 800cb7a:	602b      	str	r3, [r5, #0]
 800cb7c:	f7f5 fa69 	bl	8002052 <_close>
 800cb80:	1c43      	adds	r3, r0, #1
 800cb82:	d102      	bne.n	800cb8a <_close_r+0x1a>
 800cb84:	682b      	ldr	r3, [r5, #0]
 800cb86:	b103      	cbz	r3, 800cb8a <_close_r+0x1a>
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	bd38      	pop	{r3, r4, r5, pc}
 800cb8c:	20000918 	.word	0x20000918

0800cb90 <_fstat_r>:
 800cb90:	b538      	push	{r3, r4, r5, lr}
 800cb92:	4d07      	ldr	r5, [pc, #28]	; (800cbb0 <_fstat_r+0x20>)
 800cb94:	2300      	movs	r3, #0
 800cb96:	4604      	mov	r4, r0
 800cb98:	4608      	mov	r0, r1
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	602b      	str	r3, [r5, #0]
 800cb9e:	f7f5 fa64 	bl	800206a <_fstat>
 800cba2:	1c43      	adds	r3, r0, #1
 800cba4:	d102      	bne.n	800cbac <_fstat_r+0x1c>
 800cba6:	682b      	ldr	r3, [r5, #0]
 800cba8:	b103      	cbz	r3, 800cbac <_fstat_r+0x1c>
 800cbaa:	6023      	str	r3, [r4, #0]
 800cbac:	bd38      	pop	{r3, r4, r5, pc}
 800cbae:	bf00      	nop
 800cbb0:	20000918 	.word	0x20000918

0800cbb4 <_isatty_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	4d06      	ldr	r5, [pc, #24]	; (800cbd0 <_isatty_r+0x1c>)
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4604      	mov	r4, r0
 800cbbc:	4608      	mov	r0, r1
 800cbbe:	602b      	str	r3, [r5, #0]
 800cbc0:	f7f5 fa63 	bl	800208a <_isatty>
 800cbc4:	1c43      	adds	r3, r0, #1
 800cbc6:	d102      	bne.n	800cbce <_isatty_r+0x1a>
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	b103      	cbz	r3, 800cbce <_isatty_r+0x1a>
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	bd38      	pop	{r3, r4, r5, pc}
 800cbd0:	20000918 	.word	0x20000918

0800cbd4 <_lseek_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4d07      	ldr	r5, [pc, #28]	; (800cbf4 <_lseek_r+0x20>)
 800cbd8:	4604      	mov	r4, r0
 800cbda:	4608      	mov	r0, r1
 800cbdc:	4611      	mov	r1, r2
 800cbde:	2200      	movs	r2, #0
 800cbe0:	602a      	str	r2, [r5, #0]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	f7f5 fa5c 	bl	80020a0 <_lseek>
 800cbe8:	1c43      	adds	r3, r0, #1
 800cbea:	d102      	bne.n	800cbf2 <_lseek_r+0x1e>
 800cbec:	682b      	ldr	r3, [r5, #0]
 800cbee:	b103      	cbz	r3, 800cbf2 <_lseek_r+0x1e>
 800cbf0:	6023      	str	r3, [r4, #0]
 800cbf2:	bd38      	pop	{r3, r4, r5, pc}
 800cbf4:	20000918 	.word	0x20000918

0800cbf8 <_read_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4d07      	ldr	r5, [pc, #28]	; (800cc18 <_read_r+0x20>)
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	4608      	mov	r0, r1
 800cc00:	4611      	mov	r1, r2
 800cc02:	2200      	movs	r2, #0
 800cc04:	602a      	str	r2, [r5, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	f7f5 f9ea 	bl	8001fe0 <_read>
 800cc0c:	1c43      	adds	r3, r0, #1
 800cc0e:	d102      	bne.n	800cc16 <_read_r+0x1e>
 800cc10:	682b      	ldr	r3, [r5, #0]
 800cc12:	b103      	cbz	r3, 800cc16 <_read_r+0x1e>
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	bd38      	pop	{r3, r4, r5, pc}
 800cc18:	20000918 	.word	0x20000918

0800cc1c <_init>:
 800cc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1e:	bf00      	nop
 800cc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc22:	bc08      	pop	{r3}
 800cc24:	469e      	mov	lr, r3
 800cc26:	4770      	bx	lr

0800cc28 <_fini>:
 800cc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc2a:	bf00      	nop
 800cc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc2e:	bc08      	pop	{r3}
 800cc30:	469e      	mov	lr, r3
 800cc32:	4770      	bx	lr
